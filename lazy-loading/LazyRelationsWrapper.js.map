{"version":3,"sources":["../../src/lazy-loading/LazyRelationsWrapper.ts"],"names":[],"mappings":"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","file":"LazyRelationsWrapper.js","sourcesContent":["import {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * This class wraps entities and provides functions there to lazily load its relations.\r\n */\r\nexport class LazyRelationsWrapper {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    wrap(object: Object, relation: RelationMetadata) {\r\n        const connection = this.connection;\r\n        const index = \"__\" + relation.propertyName + \"__\";\r\n        const promiseIndex = \"__promise__\" + relation.propertyName + \"__\";\r\n        const resolveIndex = \"__has__\" + relation.propertyName + \"__\";\r\n\r\n        Object.defineProperty(object, relation.propertyName, {\r\n            get: function() {\r\n                if (this[resolveIndex] === true)\r\n                    return Promise.resolve(this[index]);\r\n                if (this[promiseIndex])\r\n                    return this[promiseIndex];\r\n\r\n                // create shortcuts for better readability\r\n                const escapeAlias = (alias: string) => connection.driver.escapeAliasName(alias);\r\n                const escapeColumn = (column: string) => connection.driver.escapeColumnName(column);\r\n\r\n                const qb = new QueryBuilder(connection);\r\n                if (relation.isManyToMany) {\r\n\r\n                    if (relation.isManyToManyOwner) {\r\n                        qb.select(relation.propertyName)\r\n                            .from(relation.type, relation.propertyName)\r\n                            .innerJoin(relation.junctionEntityMetadata.table.name, relation.junctionEntityMetadata.table.name,\r\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.joinTable.joinColumnName)}=:${relation.propertyName}Id AND ` +\r\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.joinTable.inverseJoinColumnName)}=${escapeAlias(relation.propertyName)}.${escapeColumn(relation.joinTable.referencedColumn.propertyName)}`)\r\n                            .setParameter(relation.propertyName + \"Id\", this[relation.referencedColumn.propertyName]);\r\n\r\n                    } else { // non-owner\r\n                        qb.select(relation.propertyName)\r\n                            .from(relation.type, relation.propertyName)\r\n                            .innerJoin(relation.junctionEntityMetadata.table.name, relation.junctionEntityMetadata.table.name,\r\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.inverseRelation.joinTable.inverseJoinColumnName)}=:${relation.propertyName}Id AND ` +\r\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.inverseRelation.joinTable.joinColumnName)}=${escapeAlias(relation.propertyName)}.${escapeColumn(relation.inverseRelation.joinTable.referencedColumn.propertyName)}`)\r\n                            .setParameter(relation.propertyName + \"Id\", this[relation.inverseRelation.referencedColumn.propertyName]);\r\n                    }\r\n\r\n                    this[promiseIndex] = qb.getMany().then(results => {\r\n                        this[index] = results;\r\n                        this[resolveIndex] = true;\r\n                        delete this[promiseIndex];\r\n                        return this[index];\r\n                    }).catch(err => {\r\n                        throw err;\r\n                    });\r\n                    return this[promiseIndex];\r\n\r\n                } else if (relation.isOneToMany) {\r\n\r\n                    qb.select(relation.propertyName)\r\n                        .from(relation.inverseRelation.entityMetadata.target, relation.propertyName)\r\n                        .innerJoin(`${relation.propertyName}.${relation.inverseRelation.propertyName}`, relation.entityMetadata.targetName)\r\n                        .where(relation.entityMetadata.targetName + \".\" + relation.inverseEntityMetadata.firstPrimaryColumn.propertyName + \"=:id\", { id: relation.entityMetadata.getEntityIdMixedMap(this) });\r\n\r\n                    this[promiseIndex] = qb.getMany().then(results => {\r\n                        this[index] = results;\r\n                        this[resolveIndex] = true;\r\n                        delete this[promiseIndex];\r\n                        return this[index];\r\n\r\n                    }).catch(err => {\r\n                        throw err;\r\n                    });\r\n                    return this[promiseIndex];\r\n\r\n                } else {\r\n\r\n                    if (relation.hasInverseSide) {\r\n                        qb.select(relation.propertyName)\r\n                            .from(relation.inverseRelation.entityMetadata.target, relation.propertyName)\r\n                            .innerJoin(`${relation.propertyName}.${relation.inverseRelation.propertyName}`, relation.entityMetadata.targetName)\r\n                            .where(relation.entityMetadata.targetName + \".\" + relation.joinColumn.referencedColumn.fullName + \"=:id\", { id: relation.entityMetadata.getEntityIdMixedMap(this) }); // is referenced column usage is correct here?\r\n\r\n                    } else {\r\n                        // (ow) post.category<=>category.post\r\n                        // loaded: category from post\r\n                        // example: SELECT category.id AS category_id, category.name AS category_name FROM category category\r\n                        //              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\r\n                        qb.select(relation.propertyName) // category\r\n                            .from(relation.type, relation.propertyName) // Category, category\r\n                            .innerJoin(relation.entityMetadata.target as Function, relation.entityMetadata.name,\r\n                                `${escapeAlias(relation.entityMetadata.name)}.${escapeColumn(relation.propertyName)}=${escapeAlias(relation.propertyName)}.${escapeColumn(relation.referencedColumn.propertyName)}`)\r\n                            .where(relation.entityMetadata.name + \".\" + relation.joinColumn.referencedColumn.fullName + \"=:id\", { id: relation.entityMetadata.getEntityIdMixedMap(this) }); // is referenced column usage is correct here?\r\n                    }\r\n\r\n                    this[promiseIndex] = qb.getOne().then(result => {\r\n                        this[index] = result;\r\n                        this[resolveIndex] = true;\r\n                        delete this[promiseIndex];\r\n                        return this[index];\r\n\r\n                    }).catch(err => {\r\n                        throw err;\r\n                    });\r\n                    return this[promiseIndex];\r\n                }\r\n            },\r\n            set: function(promise: Promise<any>) {\r\n                if (promise instanceof Promise) {\r\n                    promise.then(result => {\r\n                        this[index] = result;\r\n                        this[resolveIndex] = true;\r\n                    });\r\n                } else {\r\n                    this[index] = promise;\r\n                    this[resolveIndex] = true;\r\n                }\r\n            },\r\n            configurable: true\r\n        });\r\n    }\r\n\r\n}"],"sourceRoot":".."}