{"version":3,"sources":["../../src/lazy-loading/LazyRelationsWrapper.ts"],"names":[],"mappings":"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","file":"LazyRelationsWrapper.js","sourcesContent":["import {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\n/**\r\n * Wraps entities and creates getters/setters for their relations\r\n * to be able to lazily load relations when accessing these relations.\r\n */\r\nexport class LazyRelationsWrapper {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Wraps given entity and creates getters/setters for its given relation\r\n     * to be able to lazily load data when accessing these relation.\r\n     */\r\n    wrap(object: ObjectLiteral, relation: RelationMetadata) {\r\n        const that = this;\r\n        const dataIndex = \"__\" + relation.propertyName + \"__\"; // in what property of the entity loaded data will be stored\r\n        const promiseIndex = \"__promise_\" + relation.propertyName + \"__\"; // in what property of the entity loading promise will be stored\r\n        const resolveIndex = \"__has_\" + relation.propertyName + \"__\"; // indicates if relation data already was loaded or not\r\n\r\n        Object.defineProperty(object, relation.propertyName, {\r\n            get: function() {\r\n                if (this[resolveIndex] === true) // if related data already was loaded then simply return it\r\n                    return Promise.resolve(this[dataIndex]);\r\n\r\n                if (this[promiseIndex]) // if related data is loading then return a promise that loads it\r\n                    return this[promiseIndex];\r\n\r\n                // nothing is loaded yet, load relation data and save it in the model once they are loaded\r\n                this[promiseIndex] = that.loadRelationResults(relation, this).then(result => {\r\n                    this[dataIndex] = result;\r\n                    this[resolveIndex] = true;\r\n                    delete this[promiseIndex];\r\n                    return this[dataIndex];\r\n\r\n                }); // .catch((err: any) => { throw err; });\r\n                return this[promiseIndex];\r\n            },\r\n            set: function(promise: Promise<any>) {\r\n                if (promise instanceof Promise) { // if set data is a promise then wait for its resolve and save in the object\r\n                    promise.then(result => {\r\n                        this[dataIndex] = result;\r\n                        this[resolveIndex] = true;\r\n                    });\r\n\r\n                } else { // if its direct data set (non promise, probably not safe-typed)\r\n                    this[dataIndex] = promise;\r\n                    this[resolveIndex] = true;\r\n                }\r\n            },\r\n            configurable: true\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads relation data for the given entity and its relation.\r\n     */\r\n    protected loadRelationResults(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\r\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            return this.loadManyToOneOrOneToOneOwner(relation, entity);\r\n\r\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            return this.loadOneToManyOrOneToOneNotOwner(relation, entity);\r\n\r\n        } else if (relation.isManyToManyOwner) {\r\n            return this.loadManyToManyOwner(relation, entity);\r\n\r\n        } else { // many-to-many non owner\r\n            return this.loadManyToManyNotOwner(relation, entity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads data for many-to-one and one-to-one owner relations.\r\n     *\r\n     * (ow) post.category<=>category.post\r\n     * loaded: category from post\r\n     * example: SELECT category.id AS category_id, category.name AS category_name FROM category category\r\n     *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\r\n     */\r\n    protected loadManyToOneOrOneToOneOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\r\n        const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\r\n        const conditions = joinColumns.map(joinColumn => {\r\n            return `${relation.entityMetadata.name}.${relation.propertyName} = ${relation.propertyName}.${joinColumn.referencedColumn!.propertyName}`;\r\n        }).join(\" AND \");\r\n\r\n        const qb = new QueryBuilder(this.connection)\r\n            .select(relation.propertyName) // category\r\n            .from(relation.type, relation.propertyName) // Category, category\r\n            .innerJoin(relation.entityMetadata.target as Function, relation.entityMetadata.name, conditions);\r\n\r\n        joinColumns.forEach(joinColumn => {\r\n            qb.andWhere(`${relation.entityMetadata.name}.${joinColumn.referencedColumn!.databaseName} = :${joinColumn.referencedColumn!.databaseName}`)\r\n                .setParameter(`${joinColumn.referencedColumn!.databaseName}`, joinColumn.referencedColumn!.getEntityValue(entity));\r\n        });\r\n        return qb.getOne();\r\n    }\r\n\r\n    /**\r\n     * Loads data for one-to-many and one-to-one not owner relations.\r\n     *\r\n     * SELECT post\r\n     * FROM post post\r\n     * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]\r\n     */\r\n    protected loadOneToManyOrOneToOneNotOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\r\n        const qb = new QueryBuilder(this.connection)\r\n            .select(relation.propertyName)\r\n            .from(relation.inverseRelation!.entityMetadata.target, relation.propertyName);\r\n\r\n        relation.inverseRelation!.joinColumns.forEach(joinColumn => {\r\n            qb.andWhere(`${relation.propertyName}.${joinColumn.propertyName} = :${joinColumn.referencedColumn!.propertyName}`)\r\n                .setParameter(`${joinColumn.referencedColumn!.propertyName}`, joinColumn.referencedColumn!.getEntityValue(entity));\r\n        });\r\n        return relation.isOneToMany ? qb.getMany() : qb.getOne();\r\n    }\r\n\r\n    /**\r\n     * Loads data for many-to-many owner relations.\r\n     *\r\n     * SELECT category\r\n     * FROM category category\r\n     * INNER JOIN post_categories post_categories\r\n     * ON post_categories.postId = :postId\r\n     * AND post_categories.categoryId = category.id\r\n     */\r\n    protected loadManyToManyOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\r\n        const mainAlias = relation.propertyName;\r\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\r\n        const joinColumnConditions = relation.joinColumns.map(joinColumn => {\r\n            return `${joinAlias}.${joinColumn.propertyName} = :${joinColumn.propertyName}`;\r\n        });\r\n        const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {\r\n            return `${joinAlias}.${inverseJoinColumn.propertyName}=${mainAlias}.${inverseJoinColumn.referencedColumn!.propertyName}`;\r\n        });\r\n        const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\r\n            parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(entity);\r\n            return parameters;\r\n        }, {} as ObjectLiteral);\r\n\r\n        return new QueryBuilder(this.connection)\r\n            .select(mainAlias)\r\n            .from(relation.type, mainAlias)\r\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\r\n            .setParameters(parameters)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Loads data for many-to-many not owner relations.\r\n     *\r\n     * SELECT post\r\n     * FROM post post\r\n     * INNER JOIN post_categories post_categories\r\n     * ON post_categories.postId = post.id\r\n     * AND post_categories.categoryId = post_categories.categoryId\r\n     */\r\n    protected loadManyToManyNotOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\r\n        const mainAlias = relation.propertyName;\r\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\r\n        const joinColumnConditions = relation.inverseRelation!.joinColumns.map(joinColumn => {\r\n            return `${joinAlias}.${joinColumn.propertyName} = ${mainAlias}.${joinColumn.referencedColumn!.propertyName}`;\r\n        });\r\n        const inverseJoinColumnConditions = relation.inverseRelation!.inverseJoinColumns.map(inverseJoinColumn => {\r\n            return `${joinAlias}.${inverseJoinColumn.propertyName} = :${inverseJoinColumn.propertyName}`;\r\n        });\r\n        const parameters = relation.inverseRelation!.inverseJoinColumns.reduce((parameters, joinColumn) => {\r\n            parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(entity);\r\n            return parameters;\r\n        }, {} as ObjectLiteral);\r\n\r\n        return new QueryBuilder(this.connection)\r\n            .select(mainAlias)\r\n            .from(relation.type, mainAlias)\r\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\r\n            .setParameters(parameters)\r\n            .getMany();\r\n    }\r\n\r\n}"],"sourceRoot":".."}