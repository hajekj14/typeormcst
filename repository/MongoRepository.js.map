{"version":3,"sources":["../../src/repository/MongoRepository.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,2CAAwC;AAMxC,wGAAqG;AAErG,qEAAkE;AAClE,mCA6BiB;AAGjB;;GAEG;AACH;IAAmE,mCAAkB;IAArF;;IA4bA,CAAC;IA1bG,6CAA6C;IAE7C,4EAA4E;IAC5E,qBAAqB;IACrB,4EAA4E;IAE5E;;;OAGG;IACH,+BAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;QACnC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC5D,CAAC;IAED;;;OAGG;IACH,qCAAW,GAAX,UAAY,gBAAsE;QAC9E,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACH,4CAAkB,GAAlB,UAAmB,KAAa,EAAE,mBAAyC;QACvE,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACG,8BAAI,GAAV,UAAW,mBAA6D;;gBAC9D,KAAK;;;;gCAAG,IAAI,CAAC,gDAAgD,CAAC,mBAAmB,CAAC;wBACzE,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAA;;iCAApC,SAAoC;wBACnD,EAAE,CAAC,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BAC1D,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC1C,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC3C,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;gCAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC5F,CAAC;wBACD,sBAAO,MAAM,CAAC,OAAO,EAAE,EAAC;;;;KAC3B;IAED;;;;OAIG;IACG,sCAAY,GAAlB,UAAmB,mBAA6D;;gBACtE,KAAK;;;;gCAAG,IAAI,CAAC,gDAAgD,CAAC,mBAAmB,CAAC;wBACzE,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAA;;iCAApC,SAAoC;wBACnD,EAAE,CAAC,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BAC1D,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC1C,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC3C,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;gCAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC5F,CAAC;wBACwB,qBAAM,OAAO,CAAC,GAAG,CAAM;gCAC5C,MAAM,CAAC,OAAO,EAAE;gCAChB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC;6BAC1D,CAAC,EAAA;;6BAHuB,SAGvB;wBACF,sBAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAC;;;;KACrC;IAED;;;OAGG;IACG,mCAAS,GAAf,UAAgB,GAAU,EAAE,mBAA6D;;gBAC/E,KAAK;;;;gCAAG,IAAI,CAAC,gDAAgD,CAAC,mBAAmB,CAAC,IAAI,EAAE;wBAC9F,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBAEb,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAA;;iCAApC,SAAoC;wBACnD,EAAE,CAAC,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BAC1D,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC1C,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC3C,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;gCAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC5F,CAAC;wBACM,qBAAM,MAAM,CAAC,OAAO,EAAE,EAAA;4BAA7B,sBAAO,SAAsB,EAAC;;;;KACjC;IAED;;OAEG;IACG,iCAAO,GAAb,UAAc,mBAA4D;;gBAChE,KAAK;;;;gCAAG,IAAI,CAAC,+CAA+C,CAAC,mBAAmB,CAAC;wBACxE,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAA;;iCAApC,SAAoC;wBACnD,EAAE,CAAC,CAAC,mCAAgB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BACzD,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;gCAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC5F,CAAC;wBAGc,qBAAM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAA;;iCAA/B,SAA+B;wBAC9C,sBAAO,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;KACpD;IAED;;;OAGG;IACG,qCAAW,GAAjB,UAAkB,EAAO,EAAE,mBAA4D;;gBAC7E,KAAK;;;;gCAAG,IAAI,CAAC,+CAA+C,CAAC,mBAAmB,CAAC,IAAI,EAAE;wBAC7F,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;wBACH,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAA;;iCAApC,SAAoC;wBACnD,EAAE,CAAC,CAAC,mCAAgB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BACzD,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;gCAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC5F,CAAC;wBAGc,qBAAM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAA;;iCAA/B,SAA+B;wBAC9C,sBAAO,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;KACpD;IAED;;OAEG;IACH,sCAAY,GAAZ,UAAa,KAAqB;QAC9B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACpE,CAAC;IAED;;;OAGG;IACH,4CAAkB,GAAlB,UAAmB,KAAqB;QACpC,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACxC,IAAM,UAAU,GAAG,IAAI,CAAC;QACxB,MAAM,CAAC,OAAO,GAAG,UAAU,QAAkC;YACzD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,gBAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,KAAiB,EAAE,OAAiB;oBACrE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACR,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;wBACzB,MAAM,CAAC;oBACX,CAAC;oBAED,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;oBACtD,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,YAAY,CAAC,OAAO,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnF,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,gBAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,OAAiB;oBAC9D,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;oBACtD,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,OAAO,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAClE,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC;QACF,MAAM,CAAC,IAAI,GAAG,UAAU,QAAsC;YAC1D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,gBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,KAAiB,EAAE,MAAoB;oBACrE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACnB,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;wBACxB,MAAM,CAAC;oBACX,CAAC;oBAED,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;oBACtD,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC/E,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,gBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAc;oBACxD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,MAAM,CAAC;oBAC3B,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;oBACtD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC9D,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC;QACF,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,mCAAS,GAAT,UAAU,QAAyB,EAAE,OAAsC;QACvE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACnF,CAAC;IAED;;OAEG;IACG,mCAAS,GAAf,UAAgB,UAA2B,EAAE,OAAqC;;;;4BACvE,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,EAAA;4BAAtF,sBAAO,SAA+E,EAAC;;;;KAC1F;IAED;;OAEG;IACG,+BAAK,GAAX,UAAY,KAAqB,EAAE,OAA+B;;;;4BACvD,qBAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE,EAAE,OAAO,CAAC,EAAA;4BAAnF,sBAAO,SAA4E,EAAC;;;;KACvF;IAED;;OAEG;IACG,+CAAqB,GAA3B,UAA4B,WAAuB,EAAE,OAAsB;;;;4BAChE,qBAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,EAAE,OAAO,CAAC,EAAA;4BAAnG,sBAAO,SAA4F,EAAC;;;;KACvG;IAED;;;;OAIG;IACG,iDAAuB,GAA7B,UAA8B,UAA2B;;;;4BAC9C,qBAAM,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,EAAA;4BAA3F,sBAAO,SAAoF,EAAC;;;;KAC/F;IAED;;OAEG;IACG,oCAAU,GAAhB,UAAiB,KAAoB,EAAE,OAA2B;;;;4BACvD,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EAAA;4BAAlF,sBAAO,SAA2E,EAAC;;;;KACtF;IAED;;OAEG;IACG,mCAAS,GAAf,UAAgB,KAAoB,EAAE,OAA2B;;;;4BACtD,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EAAA;4BAAjF,sBAAO,SAA0E,EAAC;;;;KACrF;IAED;;OAEG;IACG,kCAAQ,GAAd,UAAe,GAAW,EAAE,KAAoB,EAAE,OAAoD;;;;4BAC3F,qBAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,EAAA;4BAArF,sBAAO,SAA8E,EAAC;;;;KACzF;IAED;;OAEG;IACG,6CAAmB,GAAzB,UAA0B,SAAiB,EAAE,OAA2B;;;;4BAC7D,qBAAM,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,EAAA;4BAA/F,sBAAO,SAAwF,EAAC;;;;KACnG;IAED;;OAEG;IACG,+CAAqB,GAA3B;;;;4BACW,qBAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;4BAA7E,sBAAO,SAAsE,EAAC;;;;KACjF;IAED;;OAEG;IACG,0CAAgB,GAAtB,UAAuB,KAAoB,EAAE,OAAoE;;;;4BACtG,qBAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EAAA;4BAAxF,sBAAO,SAAiF,EAAC;;;;KAC5F;IAED;;OAEG;IACG,2CAAiB,GAAvB,UAAwB,KAAoB,EAAE,WAAmB,EAAE,OAAiC;;;;4BACzF,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,CAAC,EAAA;4BAAtG,sBAAO,SAA+F,EAAC;;;;KAC1G;IAED;;OAEG;IACG,0CAAgB,GAAtB,UAAuB,KAAoB,EAAE,MAAc,EAAE,OAAiC;;;;4BACnF,qBAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;4BAAhG,sBAAO,SAAyF,EAAC;;;;KACpG;IAED;;OAEG;IACG,2CAAiB,GAAvB,UAAwB,CAAS,EAAE,CAAS,EAAE,OAAkC;;;;4BACrE,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,EAAA;4BAAxF,sBAAO,SAAiF,EAAC;;;;KAC5F;IAED;;OAEG;IACG,iCAAO,GAAb,UAAc,CAAS,EAAE,CAAS,EAAE,OAAwB;;;;4BACjD,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,EAAA;4BAA9E,sBAAO,SAAuE,EAAC;;;;KAClF;IAED;;OAEG;IACG,+BAAK,GAAX,UAAY,IAAqC,EAAE,SAAiB,EAAE,OAAe,EAAE,MAAqB,EAAE,QAAuB,EAAE,OAAgB,EAAE,OAAsD;;;;4BACpM,qBAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,EAAA;4BAA3H,sBAAO,SAAoH,EAAC;;;;KAC/H;IAED;;OAEG;IACG,2CAAiB,GAAvB;;;;4BACW,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;4BAAzE,sBAAO,SAAkE,EAAC;;;;KAC7E;IAED;;OAEG;IACG,+CAAqB,GAA3B,UAA4B,OAAwB;;;;4BACzC,qBAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;4BAAtF,sBAAO,SAA+E,EAAC;;;;KAC1F;IAED;;OAEG;IACG,oDAA0B,GAAhC,UAAiC,OAA2B;;;;4BACjD,qBAAM,IAAI,CAAC,WAAW,CAAC,0BAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;4BAA3F,sBAAO,SAAoF,EAAC;;;;KAC/F;IAED;;OAEG;IACH,iDAAuB,GAAvB,UAAwB,OAA2B;QAC/C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACvF,CAAC;IAED;;OAEG;IACH,mDAAyB,GAAzB,UAA0B,OAA2B;QACjD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACzF,CAAC;IAED;;OAEG;IACG,oCAAU,GAAhB,UAAiB,IAAqB,EAAE,OAAqC;;;;4BAClE,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,EAAA;4BAAjF,sBAAO,SAA0E,EAAC;;;;KACrF;IAED;;OAEG;IACG,mCAAS,GAAf,UAAgB,GAAkB,EAAE,OAAoC;;;;4BAC7D,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,EAAA;4BAA/E,sBAAO,SAAwE,EAAC;;;;KACnF;IAED;;OAEG;IACG,kCAAQ,GAAd;;;;4BACW,qBAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;4BAAhE,sBAAO,SAAyD,EAAC;;;;KACpE;IAED;;OAEG;IACH,+CAAqB,GAArB,UAAsB,OAAwE;QAC1F,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACrF,CAAC;IAED;;OAEG;IACG,mCAAS,GAAf,UAAgB,GAAoB,EAAE,MAAuB,EAAE,OAA0B;;;;4BAC9E,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;4BAAvF,sBAAO,SAAgF,EAAC;;;;KAC3F;IAED;;;OAGG;IACG,gDAAsB,GAA5B,UAA6B,OAAuC;;;;4BACzD,qBAAM,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;4BAAvF,sBAAO,SAAgF,EAAC;;;;KAC3F;IAED;;OAEG;IACG,iCAAO,GAAb;;;;4BACW,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;4BAA/D,sBAAO,SAAwD,EAAC;;;;KACnE;IAED;;OAEG;IACG,gCAAM,GAAZ,UAAa,OAAe,EAAE,OAAkC;;;;4BACrD,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,EAAA;4BAAhF,sBAAO,SAAyE,EAAC;;;;KACpF;IAED;;OAEG;IACG,oCAAU,GAAhB,UAAiB,KAAoB,EAAE,GAAkB,EAAE,OAA2B;;;;4BAC3E,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,EAAA;4BAAvF,sBAAO,SAAgF,EAAC;;;;KAC3F;IAED;;OAEG;IACG,+BAAK,GAAX,UAAY,OAA2B;;;;4BAC5B,qBAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;4BAAtE,sBAAO,SAA+D,EAAC;;;;KAC1E;IAED;;OAEG;IACG,oCAAU,GAAhB,UAAiB,KAAoB,EAAE,MAAqB,EAAE,OAAuE;;;;4BAC1H,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;4BAA1F,sBAAO,SAAmF,EAAC;;;;KAC9F;IAED;;OAEG;IACG,mCAAS,GAAf,UAAgB,KAAoB,EAAE,MAAqB,EAAE,OAA2B;;;;4BAC7E,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;4BAAzF,sBAAO,SAAkF,EAAC;;;;KAC7F;IAQD,sBAAc,wCAAW;QANzB,4EAA4E;QAC5E,oBAAoB;QACpB,4EAA4E;QAE5E,gDAAgD;aAEhD;YACI,MAAM,CAAE,IAAI,CAAC,UAAU,CAAC,MAAsB,CAAC,WAAW,CAAC;QAC/D,CAAC;;;OAAA;IAES,0EAAgD,GAA1D,UAA2D,mBAAqE;QAC5H,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC;YACrB,MAAM,CAAC,SAAS,CAAC;QAErB,MAAM,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,mBAAmB,CAAC,KAAK,GAAG,mBAAmB,CAAC;IACrH,CAAC;IAES,yEAA+C,GAAzD,UAA0D,mBAAqE;QAC3H,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC;YACrB,MAAM,CAAC,SAAS,CAAC;QAErB,MAAM,CAAC,mCAAgB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,GAAG,mBAAmB,CAAC,KAAK,GAAG,mBAAmB,CAAC;IACpH,CAAC;IAES,gEAAsC,GAAhD,UAAoD,KAA6C;QAC7F,IAAM,aAAa,GAAkB,EAAE,CAAC;QACxC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAE,CAAC,WAAW,EAAE,CAAC,EAArD,CAAqD,CAAC,CAAC;QACzF,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IAEL,sBAAC;AAAD,CA5bA,AA4bC,CA5bkE,uBAAU,GA4b5E;AA5bY,0CAAe","file":"MongoRepository.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {Repository} from \"./Repository\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\r\nimport {DocumentToEntityTransformer} from \"../query-builder/transformer/DocumentToEntityTransformer\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\r\nimport {\r\n    Cursor,\r\n    Collection,\r\n    MongoCountPreferences,\r\n    CollectionAggregationOptions,\r\n    AggregationCursor,\r\n    CollectionBluckWriteOptions,\r\n    BulkWriteOpResultObject,\r\n    IndexOptions,\r\n    CollectionOptions,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    ReadPreference,\r\n    Code,\r\n    OrderedBulkOperation,\r\n    UnorderedBulkOperation,\r\n    InsertWriteOpResult,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    InsertOneWriteOpResult,\r\n    CommandCursor,\r\n    MapReduceOptions,\r\n    ParallelCollectionScanOptions,\r\n    ReplaceOneOptions,\r\n    UpdateWriteOpResult,\r\n    CollStats, MongoCallback, MongoError, CursorResult\r\n} from \"mongodb\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\n\r\n/**\r\n * Repository used to manage mongodb documents of a single entity type.\r\n */\r\nexport class MongoRepository<Entity extends ObjectLiteral> extends Repository<Entity> {\r\n\r\n    // todo: implement join from find options too\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Raw SQL query execution is not supported by MongoDB.\r\n     * Calling this method will return an error.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Queries aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Transactions are not supported by MongoDB.\r\n     * Calling this method will return an error.\r\n     */\r\n    transaction(runInTransaction: (repository: Repository<Entity>) => Promise<any>|any): Promise<any> {\r\n        throw new Error(`Transactions aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Using Query Builder with MongoDB is not supported yet.\r\n     * Calling this method will return an error.\r\n     */\r\n    createQueryBuilder(alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        throw new Error(`Query Builder is not supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    async find(optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        return cursor.toArray();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    async findAndCount(optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[ Entity[], number ]> {\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        const [results, count] = await Promise.all<any>([\r\n            cursor.toArray(),\r\n            this.queryRunner.count(this.metadata.table.name, query),\r\n        ]);\r\n        return [results, parseInt(count)];\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    async findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\r\n        query[\"_id\"] = { $in: ids };\r\n\r\n        const cursor = await this.createEntityCursor(query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        return await cursor.toArray();\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions and/or find options.\r\n     */\r\n    async findOne(optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(query);\r\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n\r\n        // const result = await cursor.limit(1).next();\r\n        const result = await cursor.limit(1).toArray();\r\n        return result.length > 0 ? result[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    async findOneById(id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\r\n        query[\"_id\"] = id;\r\n        const cursor = await this.createEntityCursor(query);\r\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n\r\n        // const result = await cursor.limit(1).next();\r\n        const result = await cursor.limit(1).toArray();\r\n        return result.length > 0 ? result[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    createCursor(query?: ObjectLiteral): Cursor<Entity> {\r\n        return this.queryRunner.cursor(this.metadata.table.name, query);\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    createEntityCursor(query?: ObjectLiteral): Cursor<Entity> {\r\n        const cursor = this.createCursor(query);\r\n        const repository = this;\r\n        cursor.toArray = function (callback?: MongoCallback<Entity[]>) {\r\n            if (callback) {\r\n                Cursor.prototype.toArray.call(this, (error: MongoError, results: Entity[]): void => {\r\n                    if (error) {\r\n                        callback(error, results);\r\n                        return;\r\n                    }\r\n\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return callback(error, transformer.transformAll(results, repository.metadata));\r\n                });\r\n            } else {\r\n                return Cursor.prototype.toArray.call(this).then((results: Entity[]) => {\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return transformer.transformAll(results, repository.metadata);\r\n                });\r\n            }\r\n        };\r\n        cursor.next = function (callback?: MongoCallback<CursorResult>) {\r\n            if (callback) {\r\n                Cursor.prototype.next.call(this, (error: MongoError, result: CursorResult): void => {\r\n                    if (error || !result) {\r\n                        callback(error, result);\r\n                        return;\r\n                    }\r\n\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return callback(error, transformer.transform(result, repository.metadata));\r\n                });\r\n            } else {\r\n                return Cursor.prototype.next.call(this).then((result: Entity) => {\r\n                    if (!result) return result;\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return transformer.transform(result, repository.metadata);\r\n                });\r\n            }\r\n        };\r\n        return cursor;\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate(pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\r\n        return this.queryRunner.aggregate(this.metadata.table.name, pipeline, options);\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    async bulkWrite(operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        return await this.queryRunner.bulkWrite(this.metadata.table.name, operations, options);\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    async count(query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        return await this.queryRunner.count(this.metadata.table.name, query || {}, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    async createCollectionIndex(fieldOrSpec: string|any, options?: IndexOptions): Promise<string> {\r\n        return await this.queryRunner.createCollectionIndex(this.metadata.table.name, fieldOrSpec, options);\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error.\r\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    async createCollectionIndexes(indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        return await this.queryRunner.createCollectionIndexes(this.metadata.table.name, indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    async deleteMany(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.queryRunner.deleteMany(this.metadata.table.name, query, options);\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    async deleteOne(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.queryRunner.deleteOne(this.metadata.table.name, query, options);\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    async distinct(key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\r\n        return await this.queryRunner.distinct(this.metadata.table.name, key, query, options);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    async dropCollectionIndex(indexName: string, options?: CollectionOptions): Promise<any> {\r\n        return await this.queryRunner.dropCollectionIndex(this.metadata.table.name, indexName, options);\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    async dropCollectionIndexes(): Promise<any> {\r\n        return await this.queryRunner.dropCollectionIndexes(this.metadata.table.name);\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndDelete(query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.queryRunner.findOneAndDelete(this.metadata.table.name, query, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndReplace(query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.queryRunner.findOneAndReplace(this.metadata.table.name, query, replacement, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndUpdate(query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.queryRunner.findOneAndUpdate(this.metadata.table.name, query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    async geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        return await this.queryRunner.geoHaystackSearch(this.metadata.table.name, x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    async geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        return await this.queryRunner.geoNear(this.metadata.table.name, x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    async group(keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\r\n        return await this.queryRunner.group(this.metadata.table.name, keys, condition, initial, reduce, finalize, command, options);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexes(): Promise<any> {\r\n        return await this.queryRunner.collectionIndexes(this.metadata.table.name);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexExists(indexes: string|string[]): Promise<boolean> {\r\n        return await this.queryRunner.collectionIndexExists(this.metadata.table.name, indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    async collectionIndexInformation(options?: { full: boolean }): Promise<any> {\r\n        return await this.queryRunner.collectionIndexInformation(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation {\r\n        return this.queryRunner.initializeOrderedBulkOp(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation {\r\n        return this.queryRunner.initializeUnorderedBulkOp(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    async insertMany(docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        return await this.queryRunner.insertMany(this.metadata.table.name, docs, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    async insertOne(doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        return await this.queryRunner.insertOne(this.metadata.table.name, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    async isCapped(): Promise<any> {\r\n        return await this.queryRunner.isCapped(this.metadata.table.name);\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes(options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\r\n        return this.queryRunner.listCollectionIndexes(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    async mapReduce(map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\r\n        return await this.queryRunner.mapReduce(this.metadata.table.name, map, reduce, options);\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    async parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\r\n        return await this.queryRunner.parallelCollectionScan(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async reIndex(): Promise<any> {\r\n        return await this.queryRunner.reIndex(this.metadata.table.name);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\r\n        return await this.queryRunner.rename(this.metadata.table.name, newName, options);\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    async replaceOne(query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.queryRunner.replaceOne(this.metadata.table.name, query, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    async stats(options?: { scale: number }): Promise<CollStats> {\r\n        return await this.queryRunner.stats(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    async updateMany(query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\r\n        return await this.queryRunner.updateMany(this.metadata.table.name, query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    async updateOne(query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.queryRunner.updateOne(this.metadata.table.name, query, update, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    // todo: extra these methods into separate class\r\n\r\n    protected get queryRunner(): MongoQueryRunner {\r\n        return (this.connection.driver as MongoDriver).queryRunner;\r\n    }\r\n\r\n    protected convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\r\n        if (!optionsOrConditions)\r\n            return undefined;\r\n\r\n        return FindOptionsUtils.isFindManyOptions(optionsOrConditions) ? optionsOrConditions.where : optionsOrConditions;\r\n    }\r\n\r\n    protected convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\r\n        if (!optionsOrConditions)\r\n            return undefined;\r\n\r\n        return FindOptionsUtils.isFindOneOptions(optionsOrConditions) ? optionsOrConditions.where : optionsOrConditions;\r\n    }\r\n\r\n    protected convertFindOptionsOrderToOrderCriteria<P>(order: { [P in keyof Entity]?: \"ASC\"|\"DESC\" }) {\r\n        const orderCriteria: ObjectLiteral = {};\r\n        Object.keys(order).forEach(key => orderCriteria[key] = [key, order[key]!.toLowerCase()]);\r\n        return orderCriteria;\r\n    }\r\n\r\n}"],"sourceRoot":".."}