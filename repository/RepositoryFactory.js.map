{"version":3,"sources":["../../src/repository/RepositoryFactory.ts"],"names":[],"mappings":";;AAAA,mDAAgD;AAGhD,2CAAwC;AACxC,2DAAwD;AAExD,6DAA0D;AAC1D,qDAAkD;AAGlD;;GAEG;AACH;IAAA;IA8CA,CAAC;IA5CG,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,4CAAgB,GAAhB,UAAiB,OAAsB,EAAE,QAAwB,EAAE,mBAAyC;QAExG,4HAA4H;QAC5H,kEAAkE;QAClE,IAAI,UAA2B,CAAC;QAChC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,CAAC,CAAC,CAAC;YACnD,UAAU,GAAG,IAAI,iCAAe,EAAE,CAAC;QACvC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,UAAU,GAAG,IAAI,uBAAU,EAAO,CAAC;QACvC,CAAC;QACA,UAAkB,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;QACxC,UAAkB,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;QAC1C,UAAkB,CAAC,qBAAqB,CAAC,GAAG,mBAAmB,CAAC;QACjE,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,gDAAoB,GAApB,UAAqB,OAAsB,EAAE,QAAwB,EAAE,mBAAyC;QAE5G,4HAA4H;QAC5H,kEAAkE;QAClE,IAAM,UAAU,GAAG,IAAI,+BAAc,EAAO,CAAC;QAC5C,UAAkB,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;QACxC,UAAkB,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;QAC1C,UAAkB,CAAC,qBAAqB,CAAC,GAAG,mBAAmB,CAAC;QACjE,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,oDAAwB,GAAxB,UAAyB,UAAsB,EAAE,QAAwB,EAAE,mBAAyC;QAChH,MAAM,CAAC,IAAI,uCAAkB,CAAC,UAAU,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;IAC7E,CAAC;IAEL,wBAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,8CAAiB","file":"RepositoryFactory.js","sourcesContent":["import {TreeRepository} from \"./TreeRepository\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {Repository} from \"./Repository\";\r\nimport {SpecificRepository} from \"./SpecificRepository\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {MongoRepository} from \"./MongoRepository\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\n\r\n/**\r\n * Factory used to create different types of repositories.\r\n */\r\nexport class RepositoryFactory {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a regular repository.\r\n     */\r\n    createRepository(manager: EntityManager, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): Repository<any> {\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        let repository: Repository<any>;\r\n        if (manager.connection.driver instanceof MongoDriver) {\r\n            repository = new MongoRepository();\r\n        } else {\r\n            repository = new Repository<any>();\r\n        }\r\n        (repository as any)[\"manager\"] = manager;\r\n        (repository as any)[\"metadata\"] = metadata;\r\n        (repository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Creates a tree repository.\r\n     */\r\n    createTreeRepository(manager: EntityManager, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): TreeRepository<any> {\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        const repository = new TreeRepository<any>();\r\n        (repository as any)[\"manager\"] = manager;\r\n        (repository as any)[\"metadata\"] = metadata;\r\n        (repository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Creates a specific repository.\r\n     */\r\n    createSpecificRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): SpecificRepository<any> {\r\n        return new SpecificRepository(connection, metadata, queryRunnerProvider);\r\n    }\r\n\r\n}"],"sourceRoot":".."}