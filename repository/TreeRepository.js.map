{"version":3,"sources":["../../src/repository/TreeRepository.ts"],"names":[],"mappings":"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","file":"TreeRepository.js","sourcesContent":["import {Repository} from \"./Repository\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\n\r\n/**\r\n * Repository with additional functions to work with trees.\r\n *\r\n * @see Repository\r\n */\r\nexport class TreeRepository<Entity> extends Repository<Entity> {\r\n\r\n    // todo: implement moving\r\n    // todo: implement removing\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets complete trees for all roots in the table.\r\n     */\r\n    async findTrees(): Promise<Entity[]> {\r\n        const roots = await this.findRoots();\r\n        await Promise.all(roots.map(async root => {\r\n            await this.findDescendantsTree(root);\r\n        }));\r\n\r\n        return roots;\r\n    }\r\n\r\n    /**\r\n     * Roots are entities that have no ancestors. Finds them all.\r\n     */\r\n    findRoots(): Promise<Entity[]> {\r\n\r\n        const parentPropertyName = this.metadata.treeParentRelation.propertyName;\r\n        return this.createQueryBuilder(\"treeEntity\")\r\n            .where(`treeEntity.${parentPropertyName} IS NULL`)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Creates a query builder used to get descendants of the entities in a tree.\r\n     */\r\n    createDescendantsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): QueryBuilder<Entity> {\r\n\r\n        // create shortcuts for better readability\r\n        const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\r\n        const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\r\n\r\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.firstPrimaryColumn.fullName)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}`;\r\n        return this.createQueryBuilder(alias)\r\n            .innerJoin(this.metadata.closureJunctionTable.table.name, closureTableAlias, joinCondition)\r\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.firstPrimaryColumn.propertyName]}`);\r\n    }\r\n\r\n    /**\r\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\r\n     */\r\n    findDescendants(entity: Entity): Promise<Entity[]> {\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\r\n     */\r\n    findDescendantsTree(entity: Entity): Promise<Entity> {\r\n        // todo: throw exception if there is no column of this relation?\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getEntitiesAndRawResults()\r\n            .then(entitiesAndScalars => {\r\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.rawResults);\r\n                this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);\r\n                return entity;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets number of descendants of the entity.\r\n     */\r\n    countDescendants(entity: Entity): Promise<number> {\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getCount();\r\n    }\r\n\r\n    /**\r\n     * Creates a query builder used to get ancestors of the entities in the tree.\r\n     */\r\n    createAncestorsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): QueryBuilder<Entity> {\r\n\r\n        // create shortcuts for better readability\r\n        const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\r\n        const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\r\n\r\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.firstPrimaryColumn.fullName)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}`;\r\n        return this.createQueryBuilder(alias)\r\n            .innerJoin(this.metadata.closureJunctionTable.table.name, closureTableAlias, joinCondition)\r\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.firstPrimaryColumn.propertyName]}`);\r\n    }\r\n\r\n    /**\r\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\r\n     */\r\n    findAncestors(entity: Entity): Promise<Entity[]> {\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\r\n     */\r\n    findAncestorsTree(entity: Entity): Promise<Entity> {\r\n        // todo: throw exception if there is no column of this relation?\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getEntitiesAndRawResults()\r\n            .then(entitiesAndScalars => {\r\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.rawResults);\r\n                this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);\r\n                return entity;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets number of ancestors of the entity.\r\n     */\r\n    countAncestors(entity: Entity): Promise<number> {\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getCount();\r\n    }\r\n\r\n    /**\r\n     * Moves entity to the children of then given entity.\r\n     *\r\n    move(entity: Entity, to: Entity): Promise<void> {\r\n        return Promise.resolve();\r\n    } */\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected createRelationMaps(alias: string, rawResults: any[]): { id: any, parentId: any }[] {\r\n        return rawResults.map(rawResult => {\r\n            return {\r\n                id: rawResult[alias + \"_\" + this.metadata.firstPrimaryColumn.fullName],\r\n                parentId: rawResult[alias + \"_\" + this.metadata.treeParentRelation.name]\r\n            };\r\n        });\r\n    }\r\n\r\n    protected buildChildrenEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\r\n        const childProperty = this.metadata.treeChildrenRelation.propertyName;\r\n        const parentEntityId = entity[this.metadata.firstPrimaryColumn.propertyName];\r\n        const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\r\n        const childIds = childRelationMaps.map(relationMap => relationMap.id);\r\n        entity[childProperty] = entities.filter(entity => childIds.indexOf(entity[this.metadata.firstPrimaryColumn.propertyName]) !== -1);\r\n        entity[childProperty].forEach((childEntity: any) => {\r\n            this.buildChildrenEntityTree(childEntity, entities, relationMaps);\r\n        });\r\n    }\r\n\r\n    protected buildParentEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\r\n        const parentProperty = this.metadata.treeParentRelation.propertyName;\r\n        const entityId = entity[this.metadata.firstPrimaryColumn.propertyName];\r\n        const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\r\n        const parentEntity = entities.find(entity => {\r\n            if (!parentRelationMap)\r\n                return false;\r\n\r\n            return entity[this.metadata.firstPrimaryColumn.propertyName] === parentRelationMap.parentId;\r\n        });\r\n        if (parentEntity) {\r\n            entity[parentProperty] = parentEntity;\r\n            this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":".."}