{"version":3,"sources":["../../src/repository/Repository.ts"],"names":[],"mappings":"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","file":"Repository.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\r\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {SubjectOperationExecutor} from \"../persistence/SubjectOperationExecutor\";\r\nimport {SubjectBuilder} from \"../persistence/SubjectBuilder\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\nimport {PersistOptions} from \"./PersistOptions\";\r\nimport {RemoveOptions} from \"./RemoveOptions\";\r\n\r\n/**\r\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\r\n */\r\nexport class Repository<Entity extends ObjectLiteral> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods Set Dynamically\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by this repository.\r\n     */\r\n    protected connection: Connection;\r\n\r\n    /**\r\n     * Entity metadata of the entity current repository manages.\r\n     */\r\n    protected metadata: EntityMetadata;\r\n\r\n    /**\r\n     * Query runner provider used for this repository.\r\n     */\r\n    protected queryRunnerProvider?: QueryRunnerProvider;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Returns object that is managed by this repository.\r\n     * If this repository manages entity from schema,\r\n     * then it returns a name of that schema instead.\r\n     */\r\n    get target(): Function|string {\r\n        return this.metadata.target;\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     * If entity contains compose ids, then it checks them all.\r\n     */\r\n    hasId(entity: Entity): boolean {\r\n        return this.metadata.hasId(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(entity: Entity): any {\r\n        return this.metadata.getEntityIdMixedMap(entity);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder(alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        return new QueryBuilder(this.connection, queryRunnerProvider || this.queryRunnerProvider)\r\n            .select(alias)\r\n            .from(this.metadata.target, alias);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    create(): Entity;\r\n\r\n    /**\r\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create(entityLike: DeepPartial<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entity instance or instances.\r\n     * Can copy properties from the given object into new entities.\r\n     */\r\n    create(plainEntityLikeOrPlainEntityLikes?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\r\n\r\n        if (!plainEntityLikeOrPlainEntityLikes)\r\n            return this.metadata.create();\r\n\r\n        if (plainEntityLikeOrPlainEntityLikes instanceof Array)\r\n            return plainEntityLikeOrPlainEntityLikes.map(plainEntityLike => this.create(plainEntityLike));\r\n\r\n        return this.merge(this.metadata.create(), plainEntityLikeOrPlainEntityLikes);\r\n    }\r\n\r\n    /**\r\n     * Merges multiple entities (or entity-like objects) into a given entity.\r\n     */\r\n    merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity {\r\n        const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\r\n        entityLikes.forEach(object => plainObjectToEntityTransformer.transform(mergeIntoEntity, object, this.metadata));\r\n        return mergeIntoEntity;\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     *\r\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\r\n     * Returns undefined if entity with given id was not found.\r\n     */\r\n    async preload(entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        // todo: right now sending this.connection.entityManager is not correct because its out of query runner of this repository\r\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.entityManager);\r\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, this.metadata);\r\n        if (transformedEntity)\r\n            return this.merge(transformedEntity as Entity, entityLike);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    async persist(entities: Entity[], options?: PersistOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) a given entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    async persist(entity: Entity, options?: PersistOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists one or many given entities.\r\n     */\r\n    async persist(entityOrEntities: Entity|Entity[], options?: PersistOptions): Promise<Entity|Entity[]> {\r\n\r\n        // if for some reason non empty entity was passed then return it back without having to do anything\r\n        if (!entityOrEntities)\r\n            return entityOrEntities;\r\n\r\n        // if multiple entities given then go throw all of them and save them\r\n        if (entityOrEntities instanceof Array)\r\n            return Promise.all(entityOrEntities.map(entity => this.persist(entity)));\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        try {\r\n            const transactionEntityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider);\r\n            // transactionEntityManager.data =\r\n\r\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunnerProvider);\r\n            await databaseEntityLoader.persist(entityOrEntities, this.metadata);\r\n\r\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunnerProvider);\r\n            await executor.execute(databaseEntityLoader.operateSubjects);\r\n\r\n            return entityOrEntities;\r\n\r\n        } finally {\r\n            if (!this.queryRunnerProvider) // release it only if its created by this method\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update(conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given find options.\r\n     */\r\n    async update(findOptions: FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update(conditionsOrFindOptions: Partial<Entity>|FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void> {\r\n        const entity = await this.findOne(conditionsOrFindOptions as any); // this is temporary, in the future can be refactored to perform better\r\n        if (!entity)\r\n            throw new Error(`Cannot find entity to update by a given criteria`);\r\n\r\n        Object.assign(entity, partialEntity);\r\n        await this.persist(entity, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity will be found by a given id.\r\n     */\r\n    async updateById(id: any, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void> {\r\n        const entity = await this.findOneById(id as any); // this is temporary, in the future can be refactored to perform better\r\n        if (!entity)\r\n            throw new Error(`Cannot find entity to update by a id`);\r\n\r\n        Object.assign(entity, partialEntity);\r\n        await this.persist(entity, options);\r\n    }\r\n\r\n    /**\r\n     * Removes a given entities from the database.\r\n     */\r\n    async remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    async remove(entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes one or many given entities.\r\n     */\r\n    async remove(entityOrEntities: Entity|Entity[], options?: RemoveOptions): Promise<Entity|Entity[]> {\r\n\r\n        // if for some reason non empty entity was passed then return it back without having to do anything\r\n        if (!entityOrEntities)\r\n            return entityOrEntities;\r\n\r\n        // if multiple entities given then go throw all of them and save them\r\n        if (entityOrEntities instanceof Array)\r\n            return Promise.all(entityOrEntities.map(entity => this.remove(entity)));\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        try {\r\n            const transactionEntityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider);\r\n\r\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunnerProvider);\r\n            await databaseEntityLoader.remove(entityOrEntities, this.metadata);\r\n\r\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunnerProvider);\r\n            await executor.execute(databaseEntityLoader.operateSubjects);\r\n\r\n            return entityOrEntities;\r\n\r\n        } finally {\r\n            if (!this.queryRunnerProvider) // release it only if its created by this method\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes entity by a given entity id.\r\n     */\r\n    async removeById(id: any, options?: RemoveOptions): Promise<void> {\r\n        const entity = await this.findOneById(id); // this is temporary, in the future can be refactored to perform better\r\n        if (!entity)\r\n            throw new Error(`Cannot find entity to remove by a given id`);\r\n\r\n        await this.remove(entity, options);\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     */\r\n    count(options?: FindManyOptions<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     */\r\n    count(conditions?: DeepPartial<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given find options or conditions.\r\n     */\r\n    count(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<number> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    find(options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    find(conditions?: DeepPartial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    find(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<Entity[]> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(options?: FindManyOptions<Entity>): Promise<[ Entity[], number ]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(conditions?: DeepPartial<Entity>): Promise<[ Entity[], number ]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<[ Entity[], number ]> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds(ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findByIds(ids: any[], conditions?: DeepPartial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<Entity[]> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions)\r\n            .andWhereInIds(ids)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given options.\r\n     */\r\n    findOne(options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne(conditions?: DeepPartial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne(optionsOrConditions?: FindOneOptions<Entity>|DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getOne();\r\n    }\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findOneById(id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findOneById(id: any, conditions?: DeepPartial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    findOneById(id: any, optionsOrConditions?: FindOneOptions<Entity>|DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions)\r\n            .andWhereInIds([id])\r\n            .getOne();\r\n    }\r\n\r\n    /**\r\n     * Executes a raw SQL query and returns a raw database results.\r\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\r\n     */\r\n    async query(query: string, parameters?: any[]): Promise<any> {\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        try {\r\n            return await queryRunner.query(query, parameters); // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided repository.\r\n     *\r\n     * Most important, you should execute all your database operations using provided repository instance,\r\n     * all other operations would not be included in the transaction.\r\n     * If you want to execute transaction and persist multiple different entity types, then\r\n     * use EntityManager.transaction method instead.\r\n     *\r\n     * Transactions are supported only by relational databases (MongoDB is not supported).\r\n     */\r\n    async transaction(runInTransaction: (repository: Repository<Entity>) => Promise<any>|any): Promise<any> {\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        const transactionRepository = new Repository<any>();\r\n        (transactionRepository as any)[\"connection\"] = this.connection;\r\n        (transactionRepository as any)[\"metadata\"] = this.metadata;\r\n        (transactionRepository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\r\n        // todo: same code in the repository factory. probably better to use repository factory here too\r\n\r\n        try {\r\n            await queryRunner.beginTransaction();\r\n            const result = await runInTransaction(transactionRepository);\r\n            await queryRunner.commitTransaction();\r\n            return result;\r\n\r\n        } catch (err) {\r\n            await queryRunner.rollbackTransaction();\r\n            throw err;\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n            if (!this.queryRunnerProvider) // if we used a new query runner provider then release it\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table/collection (truncates/drops it).\r\n     */\r\n    async clear(): Promise<void> {\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        try {\r\n            return await queryRunner.truncate(this.metadata.table.name); // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":".."}