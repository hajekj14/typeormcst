{"version":3,"sources":["../../src/commands/SchemaSyncCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAA6D;AAG7D;;GAEG;AACH;IAAA;QACI,YAAO,GAAG,aAAa,CAAC;QACxB,aAAQ,GAAG,8GAA8G;YACrH,+DAA+D,CAAC;IA2CxE,CAAC;IAzCG,mCAAO,GAAP,UAAQ,KAAU;QACd,MAAM,CAAC,KAAK;aACP,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,yEAAyE;SACtF,CAAC;aACD,MAAM,CAAC,IAAI,EAAE;YACV,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,gBAAgB;YACzB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,mCAAO,GAAb,UAAc,IAAS;;gBAEf,UAAU,EAAoC,WAAW;;;;qCAAtB,SAAS,gBAA8B,EAAE;;;;wBAE5E,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAAC;wBAC1C,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,IAAI,CAAC;6BACpC,IAAI,CAAC,UAAU,EAAf,wBAAe;wBACF,qBAAM,wBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,EAAA;;wBAAvF,UAAU,GAAG,SAA0E,CAAC;wBACxF,qBAAM,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,EAAA;;wBAAlC,SAAkC,CAAC;;4BAGrB,qBAAM,yBAAiB,EAAE,EAAA;;wBAAvC,WAAW,GAAG,SAAyB,CAAC;wBACxC,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,EAA5B,CAA4B,CAAC,CAAC,EAAA;;wBAA9E,SAA8E,CAAC;;;;;wBAInF,EAAE,CAAC,CAAC,UAAU,CAAC;4BACV,UAAyB,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,KAAG,CAAC,CAAC;wBACxD,MAAM,KAAG,CAAC;;6BAGN,UAAU,EAAV,yBAAU;wBACV,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;;6BAE7B,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,KAAK,EAAE,EAAlB,CAAkB,CAAC,CAAC,EAAA;;wBAApE,SAAoE,CAAC;;;;;;KAE5E;IACL,wBAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,8CAAiB","file":"SchemaSyncCommand.js","sourcesContent":["import {createConnections, createConnection} from \"../index\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * Synchronizes database schema with entities.\r\n */\r\nexport class SchemaSyncCommand {\r\n    command = \"schema:sync\";\r\n    describe = \"Synchronizes your entities with database schema. It runs schema update queries on all connections you have. \" +\r\n        \"To run update queries on a concrete connection use -c option.\";\r\n\r\n    builder(yargs: any) {\r\n        return yargs\r\n            .option(\"c\", {\r\n                alias: \"connection\",\r\n                default: \"default\",\r\n                describe: \"Name of the connection on which schema synchronization needs to to run.\"\r\n            })\r\n            .option(\"cf\", {\r\n                alias: \"config\",\r\n                default: \"ormconfig.json\",\r\n                describe: \"Name of the file with connection configuration.\"\r\n            });\r\n    }\r\n\r\n    async handler(argv: any) {\r\n\r\n        let connection: Connection|undefined = undefined, connections: Connection[] = [];\r\n        try {\r\n            process.env.LOGGER_CLI_SCHEMA_SYNC = true;\r\n            process.env.SKIP_SCHEMA_CREATION = true;\r\n            if (argv.connection) {\r\n                connection = await createConnection(argv.connection, process.cwd() + \"/\" + argv.config);\r\n                await connection.syncSchema(false);\r\n\r\n            } else {\r\n                connections = await createConnections();\r\n                await Promise.all(connections.map(connection => connection.syncSchema(false)));\r\n            }\r\n\r\n        } catch (err) {\r\n            if (connection)\r\n                (connection as Connection).logger.log(\"error\", err);\r\n            throw err;\r\n\r\n        } finally {\r\n            if (connection)\r\n                await connection.close();\r\n\r\n            await Promise.all(connections.map(connection => connection.close()));\r\n        }\r\n    }\r\n}"],"sourceRoot":".."}