{"version":3,"sources":["../../src/commands/SubscriberCreateCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uBAAyB;AAGzB;;GAEG;AACH;IAAA;QACI,YAAO,GAAG,mBAAmB,CAAC;QAC9B,aAAQ,GAAG,6BAA6B,CAAC;IA0E7C,CAAC;IAxEG,yCAAO,GAAP,UAAQ,KAAU;QACd,MAAM,CAAC,KAAK;aACP,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,gDAAgD;SAC7D,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,MAAM;YACb,QAAQ,EAAE,+BAA+B;YACzC,MAAM,EAAE,IAAI;SACf,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,+CAA+C;SAC5D,CAAC;aACD,MAAM,CAAC,IAAI,EAAE;YACV,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,gBAAgB;YACzB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,yCAAO,GAAb,UAAc,IAAS;;gBACb,WAAW,EACX,QAAQ,EACV,SAAS,EAKC,WAAW,EAEP,UAAU;;;;sCATR,uBAAuB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;mCACjD,IAAI,CAAC,IAAI,GAAG,KAAK;oCAClB,IAAI,CAAC,GAAG;wBAExB,gFAAgF;wBAChF,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACb,IAAI,CAAC;8CACwC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;gCACnF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;iDACK,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU;wCAC1C,MAAM,CAAC,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oCAC5H,CAAC,CAAC;oCACF,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;wCAC/B,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC;oCAC9C,CAAC;gCACL,CAAC;4BACL,CAAC;4BAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACrB,CAAC;wBAED,qBAAM,uBAAuB,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,SAAS,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,QAAQ,EAAE,WAAW,CAAC,EAAA;;wBAA5H,SAA4H,CAAC;;;;;KAChI;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACc,kCAAU,GAA3B,UAA4B,IAAY,EAAE,OAAe;QACrD,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;YAC9B,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,UAAA,GAAG,IAAI,OAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,EAAtB,CAAsB,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACc,mCAAW,GAA5B,UAA6B,IAAY;QACrC,MAAM,CAAC,+GAGA,IAAI,wDAGlB,CAAC;IACE,CAAC;IAEL,8BAAC;AAAD,CA5EA,AA4EC,IAAA;AA5EY,0DAAuB","file":"SubscriberCreateCommand.js","sourcesContent":["import * as fs from \"fs\";\r\nimport {ConnectionOptions} from \"../connection/ConnectionOptions\";\r\n\r\n/**\r\n * Generates a new subscriber.\r\n */\r\nexport class SubscriberCreateCommand {\r\n    command = \"subscriber:create\";\r\n    describe = \"Generates a new subscriber.\";\r\n\r\n    builder(yargs: any) {\r\n        return yargs\r\n            .option(\"c\", {\r\n                alias: \"connection\",\r\n                default: \"default\",\r\n                describe: \"Name of the connection on which to run a query\"\r\n            })\r\n            .option(\"n\", {\r\n                alias: \"name\",\r\n                describe: \"Name of the subscriber class.\",\r\n                demand: true\r\n            })\r\n            .option(\"d\", {\r\n                alias: \"dir\",\r\n                describe: \"Directory where subscriber should be created.\"\r\n            })\r\n            .option(\"cf\", {\r\n                alias: \"config\",\r\n                default: \"ormconfig.json\",\r\n                describe: \"Name of the file with connection configuration.\"\r\n            });\r\n    }\r\n\r\n    async handler(argv: any) {\r\n        const fileContent = SubscriberCreateCommand.getTemplate(argv.name);\r\n        const filename = argv.name + \".ts\";\r\n        let directory = argv.dir;\r\n\r\n        // if directory is not set then try to open tsconfig and find default path there\r\n        if (!directory) {\r\n            try {\r\n                const connections: ConnectionOptions[] = require(process.cwd() + \"/\" + argv.config);\r\n                if (connections) {\r\n                    const connection = connections.find(connection => { // todo: need to implement \"environment\" support in the ormconfig too\r\n                        return connection.name === argv.connection || ((argv.connection === \"default\" || !argv.connection) && !connection.name);\r\n                    });\r\n                    if (connection && connection.cli) {\r\n                        directory = connection.cli.subscribersDir;\r\n                    }\r\n                }\r\n            } catch (err) { }\r\n        }\r\n\r\n        await SubscriberCreateCommand.createFile(process.cwd() + \"/\" + (directory ? (directory + \"/\") : \"\") + filename, fileContent);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a file with the given content in the given path.\r\n     */\r\n    protected static createFile(path: string, content: string): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            fs.writeFile(path, content, err => err ? fail(err) : ok());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the entity file.\r\n     */\r\n    protected static getTemplate(name: string): string {\r\n        return `import {EventSubscriber, EntitySubscriberInterface} from \"typeorm\";\r\n\r\n@EventSubscriber()\r\nexport class ${name} implements EntitySubscriberInterface<any> {\r\n\r\n}\r\n`;\r\n    }\r\n\r\n}"],"sourceRoot":".."}