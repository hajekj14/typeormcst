{"version":3,"sources":["../../src/query-builder/JoinAttribute.ts"],"names":[],"mappings":"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","file":"JoinAttribute.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {JoinOptions} from \"./JoinOptions\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {QueryBuilderUtils} from \"./QueryBuilderUtils\";\r\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\r\nimport {Alias} from \"./Alias\";\r\n\r\n/**\r\n * Stores all join attributes which will be used to build a JOIN query.\r\n */\r\nexport class JoinAttribute {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Join direction.\r\n     */\r\n    direction: \"LEFT\"|\"INNER\";\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias: Alias;\r\n\r\n    /**\r\n     * Joined table, entity target, or relation in \"post.category\" format.\r\n     */\r\n    entityOrProperty: Function|string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    condition?: string;\r\n\r\n    /**\r\n     * Property + alias of the object where to joined data should be mapped.\r\n     */\r\n    mapToProperty?: string;\r\n\r\n    /**\r\n     * Indicates if user maps one or many objects from the join.\r\n     */\r\n    isMappingMany?: boolean;\r\n\r\n    /**\r\n     * Extra join options.\r\n     */\r\n    options?: JoinOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection,\r\n                private queryExpressionMap: QueryExpressionMap,\r\n                private joinAttribute?: JoinAttribute) {\r\n        Object.assign(this, joinAttribute || {});\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    get isMany(): boolean {\r\n        if (this.isMappingMany !== undefined)\r\n            return this.isMappingMany;\r\n\r\n        if (this.relation)\r\n            return this.relation.isManyToMany || this.relation.isOneToMany;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Name of the table which we should join.\r\n     */\r\n    get tableName(): string {\r\n        return this.metadata ? this.metadata.tableName : this.entityOrProperty as string;\r\n    }\r\n\r\n    /**\r\n     * Alias of the parent of this join.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get parentAlias(): string|undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n            return undefined;\r\n\r\n        return this.entityOrProperty.substr(0, this.entityOrProperty.indexOf(\".\"));\r\n    }\r\n\r\n    /**\r\n     * Relation property name of the parent.\r\n     * This is used to understand what is joined.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relationPropertyPath(): string|undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n            return undefined;\r\n\r\n        return this.entityOrProperty.substr(this.entityOrProperty.indexOf(\".\") + 1);\r\n    }\r\n\r\n    /**\r\n     * Relation of the parent.\r\n     * This is used to understand what is joined.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     * Relation can be undefined if entityOrProperty is regular entity or custom table.\r\n     */\r\n    get relation(): RelationMetadata|undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n            return undefined;\r\n\r\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\r\n        const metadata = relationOwnerSelection.metadata.parentEntityMetadata\r\n            ? relationOwnerSelection.metadata.parentEntityMetadata\r\n            : relationOwnerSelection.metadata;\r\n        const relation = metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Metadata of the joined entity.\r\n     * If table without entity was joined, then it will return undefined.\r\n     */\r\n    get metadata(): EntityMetadata|undefined {\r\n\r\n        // entityOrProperty is Entity class\r\n        if (this.entityOrProperty instanceof Function)\r\n            return this.connection.getMetadata(this.entityOrProperty);\r\n\r\n        // entityOrProperty is relation, e.g. \"post.category\"\r\n        if (this.relation)\r\n            return this.relation.inverseEntityMetadata;\r\n\r\n        if (typeof this.entityOrProperty === \"string\") { // entityOrProperty is a custom table\r\n\r\n            // first try to find entity with such name, this is needed when entity does not have a target class,\r\n            // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)\r\n            const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);\r\n            if (metadata)\r\n                return metadata;\r\n\r\n            // check if we have entity with such table name, and use its metadata if found\r\n            return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Generates alias of junction table, whose ids we get.\r\n     */\r\n    get junctionAlias(): string {\r\n        if (!this.relation)\r\n            throw new Error(`Cannot get junction table for join without relation.`);\r\n\r\n        return this.relation.isOwning ? this.parentAlias + \"_\" + this.alias.name : this.alias.name + \"_\" + this.parentAlias;\r\n    }\r\n\r\n    get mapToPropertyParentAlias(): string|undefined {\r\n        if (!this.mapToProperty)\r\n            return undefined;\r\n\r\n        return this.mapToProperty!.split(\".\")[0];\r\n    }\r\n\r\n    get mapToPropertyPropertyName(): string|undefined {\r\n        if (!this.mapToProperty)\r\n            return undefined;\r\n\r\n        return this.mapToProperty!.split(\".\")[1];\r\n    }\r\n\r\n}"],"sourceRoot":".."}