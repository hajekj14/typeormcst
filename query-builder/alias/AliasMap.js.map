{"version":3,"sources":["../../src/query-builder/alias/AliasMap.ts"],"names":[],"mappings":"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","file":"AliasMap.js","sourcesContent":["import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {Alias} from \"./Alias\";\r\nimport {Connection} from \"../../connection/Connection\";\r\n\r\n/**\r\n */\r\nexport class AliasMap {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    aliases: Alias[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    addMainAlias(alias: Alias) {\r\n        if (this.hasMainAlias)\r\n            this.aliases.splice(this.aliases.indexOf(this.mainAlias), 1);\r\n\r\n        alias.isMain = true;\r\n        this.aliases.push(alias);\r\n    }\r\n\r\n    addAlias(alias: Alias) {\r\n        this.aliases.push(alias);\r\n    }\r\n\r\n    get hasMainAlias() {\r\n        return !!this.aliases.find(alias => alias.isMain);\r\n    }\r\n\r\n    get mainAlias() {\r\n        const alias = this.aliases.find(alias => alias.isMain);\r\n        if (!alias)\r\n            throw new Error(`Main alias is not set.`);\r\n\r\n        return alias;\r\n    }\r\n\r\n    findAliasByName(name: string) {\r\n        return this.aliases.find(alias => alias.name === name);\r\n    }\r\n\r\n    findAliasByParent(parentAliasName: string, parentPropertyName: string) {\r\n        return this.aliases.find(alias => {\r\n            return alias.parentAliasName === parentAliasName && alias.parentPropertyName === parentPropertyName;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    getEntityMetadataByAlias(alias: Alias): EntityMetadata|undefined {\r\n        if (alias.metadata) {\r\n            // todo: use connection.getMetadata instead?\r\n            return alias.metadata;\r\n\r\n        } else if (alias.parentAliasName && alias.parentPropertyName) {\r\n\r\n            const parentAlias = this.findAliasByName(alias.parentAliasName);\r\n            if (!parentAlias)\r\n                throw new Error(`Alias \"${alias.parentAliasName}\" was not found`);\r\n\r\n            const parentEntityMetadata = this.getEntityMetadataByAlias(parentAlias);\r\n            if (!parentEntityMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + alias.name);\r\n\r\n            if (!parentEntityMetadata.hasRelationWithPropertyName(alias.parentPropertyName))\r\n                throw new Error(\"Relation metadata for \" + alias.parentAliasName + \"#\" + alias.parentPropertyName + \" was not found.\");\r\n\r\n            const relation = parentEntityMetadata.findRelationWithPropertyName(alias.parentPropertyName);\r\n            return relation.inverseEntityMetadata;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n}"],"sourceRoot":"../.."}