{"version":3,"sources":["../../src/query-builder/QueryExpressionMap.ts"],"names":[],"mappings":"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","file":"QueryExpressionMap.js","sourcesContent":["import {Alias} from \"./Alias\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {JoinAttribute} from \"./JoinAttribute\";\r\nimport {RelationIdAttribute} from \"./relation-id/RelationIdAttribute\";\r\nimport {RelationCountAttribute} from \"./relation-count/RelationCountAttribute\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {SelectQuery} from \"./SelectQuery\";\r\n\r\n/**\r\n * Contains all properties of the QueryBuilder that needs to be build a final query.\r\n */\r\nexport class QueryExpressionMap {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Main alias is a main selection object selected by QueryBuilder.\r\n     */\r\n    mainAlias?: Alias;\r\n\r\n    /**\r\n     * All aliases (including main alias) used in the query.\r\n     */\r\n    aliases: Alias[] = [];\r\n\r\n    /**\r\n     * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\r\n     */\r\n    queryType: \"select\"|\"update\"|\"delete\" = \"select\";\r\n\r\n    /**\r\n     * Data needs to be SELECT-ed.\r\n     */\r\n    selects: SelectQuery[] = [];\r\n\r\n    /**\r\n     * If update query was used, it needs \"update set\" - properties which will be updated by this query.\r\n     */\r\n    updateSet?: ObjectLiteral;\r\n\r\n    /**\r\n     * JOIN queries.\r\n     */\r\n    joinAttributes: JoinAttribute[] = [];\r\n\r\n    /**\r\n     * RelationId queries.\r\n     */\r\n    relationIdAttributes: RelationIdAttribute[] = [];\r\n\r\n    /**\r\n     * Relation count queries.\r\n     */\r\n    relationCountAttributes: RelationCountAttribute[] = [];\r\n\r\n    /**\r\n     * WHERE queries.\r\n     */\r\n    wheres: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\r\n\r\n    /**\r\n     * HAVING queries.\r\n     */\r\n    havings: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\r\n\r\n    /**\r\n     * ORDER BY queries.\r\n     */\r\n    orderBys: OrderByCondition = {};\r\n\r\n    /**\r\n     * GROUP BY queries.\r\n     */\r\n    groupBys: string[] = [];\r\n\r\n    /**\r\n     * LIMIT query.\r\n     */\r\n    limit?: number;\r\n\r\n    /**\r\n     * OFFSET query.\r\n     */\r\n    offset?: number;\r\n\r\n    /**\r\n     * Number of rows to skip of result using pagination.\r\n     */\r\n    skip?: number;\r\n\r\n    /**\r\n     * Number of rows to take using pagination.\r\n     */\r\n    take?: number;\r\n\r\n    /**\r\n     * Locking mode.\r\n     */\r\n    lockMode?: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\";\r\n\r\n    /**\r\n     * Current version of the entity, used for locking.\r\n     */\r\n    lockVersion?: number|Date;\r\n\r\n    /**\r\n     * Parameters used to be escaped in final query.\r\n     */\r\n    parameters: ObjectLiteral = {};\r\n\r\n    /**\r\n     * Indicates if alias, table names and column names will be ecaped by driver, or not.\r\n     *\r\n     * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\r\n     */\r\n    disableEscaping: boolean = true;\r\n\r\n    /**\r\n     * todo: needs more information.\r\n     */\r\n    ignoreParentTablesJoins: boolean = false;\r\n\r\n    /**\r\n     * Indicates if virtual columns should be included in entity result.\r\n     *\r\n     * todo: what to do with it? is it properly used? what about persistence?\r\n     */\r\n    enableRelationIdValues: boolean = false;\r\n\r\n    /**\r\n     * Extra where condition appended to the end of original where conditions with AND keyword.\r\n     * Original condition will be wrapped into brackets.\r\n     */\r\n    extraAppendedAndWhereCondition: string = \"\";\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    createMainAlias(options: { name: string }): Alias;\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    createMainAlias(options: { name: string, metadata: EntityMetadata }): Alias;\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    createMainAlias(options: { name?: string, target: Function|string }): Alias;\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    createMainAlias(options: { name?: string, tableName: string }): Alias;\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    createMainAlias(options: { name?: string, target?: Function|string, tableName?: string, metadata?: EntityMetadata }): Alias {\r\n        const alias = this.createAlias(options as any);\r\n\r\n        // if main alias is already set then remove it from the array\r\n        if (this.mainAlias)\r\n            this.aliases.splice(this.aliases.indexOf(this.mainAlias));\r\n\r\n        // set new main alias\r\n        this.mainAlias = alias;\r\n\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { name: string }): Alias;\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { name: string, metadata: EntityMetadata }): Alias;\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { name?: string, target: Function|string }): Alias;\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { name?: string, tableName: string }): Alias;\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { name?: string, target?: Function|string, tableName?: string, metadata?: EntityMetadata }): Alias {\r\n\r\n        let aliasName = options.name;\r\n        if (!aliasName && options.tableName)\r\n            aliasName = options.tableName;\r\n        if (!aliasName && options.target instanceof Function)\r\n            aliasName = options.target.name;\r\n        if (!aliasName && typeof options.target === \"string\")\r\n            aliasName = options.target;\r\n\r\n        const alias = new Alias();\r\n        if (aliasName)\r\n            alias.name = aliasName;\r\n        if (options.metadata)\r\n            alias.metadata = options.metadata;\r\n        if (options.target && !alias.hasMetadata)\r\n            alias.metadata = this.connection.getMetadata(options.target);\r\n        if (options.tableName)\r\n            alias.tableName = options.tableName;\r\n\r\n        this.aliases.push(alias);\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * Finds alias with the given name.\r\n     * If alias was not found it throw an exception.\r\n     */\r\n    findAliasByName(aliasName: string): Alias {\r\n        const alias = this.aliases.find(alias => alias.name === aliasName);\r\n        if (!alias)\r\n            throw new Error(`\"${aliasName}\" alias was not found. Maybe you forgot to join it?`);\r\n\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * Copies all properties of the current QueryExpressionMap into a new one.\r\n     * Useful when QueryBuilder needs to create a copy of itself.\r\n     */\r\n    clone(): QueryExpressionMap {\r\n        const map = new QueryExpressionMap(this.connection);\r\n        map.queryType = this.queryType;\r\n        map.selects = this.selects.map(select => select);\r\n        this.aliases.forEach(alias => map.aliases.push(new Alias(alias)));\r\n        map.mainAlias = this.mainAlias;\r\n        map.updateSet = this.updateSet;\r\n        map.joinAttributes = this.joinAttributes.map(join => new JoinAttribute(this.connection, this, join));\r\n        map.relationIdAttributes = this.relationIdAttributes.map(relationId => new RelationIdAttribute(this, relationId));\r\n        map.relationCountAttributes = this.relationCountAttributes.map(relationCount => new RelationCountAttribute(this, relationCount));\r\n        map.wheres = this.wheres.map(where => ({ ...where }));\r\n        map.havings = this.havings.map(having => ({ ...having }));\r\n        map.orderBys = Object.assign({}, this.orderBys);\r\n        map.groupBys = this.groupBys.map(groupBy => groupBy);\r\n        map.limit = this.limit;\r\n        map.offset = this.offset;\r\n        map.skip = this.skip;\r\n        map.take = this.take;\r\n        map.lockMode = this.lockMode;\r\n        map.lockVersion = this.lockVersion;\r\n        map.parameters = Object.assign({}, this.parameters);\r\n        map.disableEscaping = this.disableEscaping;\r\n        map.ignoreParentTablesJoins = this.ignoreParentTablesJoins;\r\n        map.enableRelationIdValues = this.enableRelationIdValues;\r\n        return map;\r\n    }\r\n\r\n}"],"sourceRoot":".."}