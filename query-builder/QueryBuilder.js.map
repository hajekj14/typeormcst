{"version":3,"sources":["../../src/query-builder/QueryBuilder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAoC;AACpC,6CAA0C;AAC1C,mGAAgG;AAIhG,uEAAoE;AAIpE,2EAAwE;AACxE,2GAAwG;AACxG,6FAA0F;AAC1F,iGAA8F;AAC9F,2FAAwF;AACxF,oEAAiE;AACjE,2DAAwD;AACxD,iGAA8F;AAE9F,8DAA6D;AA0C7D,gEAAgE;AAChE,oEAAoE;AACpE,yDAAyD;AACzD,mCAAmC;AACnC,8BAA8B;AAC9B,wCAAwC;AACxC,yBAAyB;AAEzB;;GAEG;AACH;IAmCI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,sBAAsB,UAAsB,EACtB,mBAAyC;QADzC,eAAU,GAAV,UAAU,CAAY;QACtB,wBAAmB,GAAnB,mBAAmB,CAAsB;QAjCrD,SAAI,GAA+B,QAAQ,CAAC;QAC5C,YAAO,GAAa,EAAE,CAAC;QAKvB,UAAK,GAAW,EAAE,CAAC;QACnB,oBAAe,GAAqB,EAAE,CAAC;QACvC,uBAAkB,GAAwB,EAAE,CAAC;QAC7C,aAAQ,GAAa,EAAE,CAAC;QACxB,WAAM,GAAuD,EAAE,CAAC;QAChE,YAAO,GAAuD,EAAE,CAAC;QACjE,aAAQ,GAAqB,EAAE,CAAC;QAChC,eAAU,GAAkB,EAAE,CAAC;QAO/B,kBAAa,GAAY,IAAI,CAAC;QAC9B,4BAAuB,GAAY,KAAK,CAAC;QAEnD;;WAEG;QACO,2BAAsB,GAAY,KAAK,CAAC;QAQ9C,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IASD,sBAAI,+BAAK;QAPT,4EAA4E;QAC5E,YAAY;QACZ,4EAA4E;QAE5E;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;QACxC,CAAC;;;OAAA;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,qCAAc,GAAd;QACI,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,6BAAM,GAAN;QACI,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAiBD;;OAEG;IACH,6BAAM,GAAN,UAAO,4BAA4D,EAAE,cAA8B;QAC/F,IAAM,SAAS,GAAG,cAAc,GAAG,cAAc,GAAmB,4BAA4B,CAAC;QAEjG,EAAE,CAAC,CAAC,4BAA4B,YAAY,QAAQ,CAAC,CAAC,CAAC;YACnD,IAAM,SAAS,GAAU,4BAA6B,CAAC,IAAI,CAAC;YAC5D,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,SAAS,CAAC,CAAC;YACtC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;YAC9E,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACrC,IAAI,CAAC,UAAU,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;QAE1C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,4BAA4B,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,aAAa,GAAY,4BAA4B,CAAC;QAC/D,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IA0BD;;;OAGG;IACH,6BAAM,GAAN,UAAO,SAA2B;QAC9B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,EAAE,CAAC,CAAC,SAAS,YAAY,KAAK,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,OAAO,GAAG,CAAC,SAAS,CAAC,CAAC;YAC/B,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAiBD;;OAEG;IACH,gCAAS,GAAT,UAAU,SAA0B;QAChC,EAAE,CAAC,CAAC,SAAS,YAAY,KAAK,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI;YACA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEjC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAiBD;;OAEG;IACH,8BAAO,GAAP,UAAQ,QAA6D,EAAE,WAAyB;QAC5F,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,2BAAI,GAAJ,UAAK,YAA6B,EAAE,KAAa;QAC7C,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC;QAClC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,EAAC,KAAK,EAAE,QAAQ,EAAC,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,gCAAS,GAAT,UAAU,SAAiB,EAAE,KAAa;QACtC,IAAI,CAAC,aAAa,GAAY,SAAS,CAAC;QACxC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAwBD;;;;OAIG;IACH,gCAAS,GAAT,UAAU,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;QAA7C,0BAAA,EAAA,cAAsB;QAC9E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3E,CAAC;IAwBD;;;;OAIG;IACH,+BAAQ,GAAR,UAAS,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;QAA7C,0BAAA,EAAA,cAAsB;QAC7E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;IAwBD;;;;OAIG;IACH,yCAAkB,GAAlB,UAAmB,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;QAA7C,0BAAA,EAAA,cAAsB;QACvF,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3E,CAAC;IAwBD;;;;OAIG;IACH,wCAAiB,GAAjB,UAAkB,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;QAA7C,0BAAA,EAAA,cAAsB;QACtF,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;IA8BD;;;;;;OAMG;IACH,0CAAmB,GAAnB,UAAoB,aAAqB,EAAE,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;QAA7C,0BAAA,EAAA,cAAsB;QAC/G,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;IAChG,CAAC;IA8BD;;;;;;OAMG;IACH,yCAAkB,GAAlB,UAAmB,aAAqB,EAAE,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;QAA7C,0BAAA,EAAA,cAAsB;QAC9G,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IACjG,CAAC;IA8BD;;;;;;OAMG;IACH,yCAAkB,GAAlB,UAAmB,aAAqB,EAAE,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;QAA7C,0BAAA,EAAA,cAAsB;QAC9G,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;IAC/F,CAAC;IA8BD;;;;;;OAMG;IACH,wCAAiB,GAAjB,UAAkB,aAAqB,EAAE,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;QAA7C,0BAAA,EAAA,cAAsB;QAC7G,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IAChG,CAAC;IAED;;;;;OAKG;IACH,yCAAkB,GAAlB,UAAmB,QAAgB,EAAE,SAAkB;QACnD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IACvE,CAAC;IAED;;;;;OAKG;IACH,0CAAmB,GAAnB,UAAoB,QAAgB,EAAE,SAAkB;QACpD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IACxE,CAAC;IAED;;;;;OAKG;IACH,+CAAwB,GAAxB,UAAyB,aAAqB,EAAE,QAAgB,EAAE,SAAsB;QAAtB,0BAAA,EAAA,cAAsB;QACpF,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;OAKG;IACH,gDAAyB,GAAzB,UAA0B,aAAqB,EAAE,QAAgB,EAAE,SAAsB;QAAtB,0BAAA,EAAA,cAAsB;QACrF,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;OAKG;IACH,oCAAa,GAAb,UAAc,QAAgB,EAAE,SAAsB;QAAtB,0BAAA,EAAA,cAAsB;QAE5C,IAAA,wBAA2D,EAA1D,uBAAe,EAAE,0BAAkB,CAAwB;QAClE,IAAM,KAAK,GAAG,eAAe,GAAG,GAAG,GAAG,kBAAkB,GAAG,iBAAiB,CAAC;QAE7E,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACjC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;QAC3C,QAAQ,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAEjD,IAAM,iBAAiB,GAAsB;YACzC,SAAS,EAAE,SAAS;YACpB,KAAK,EAAE,QAAQ;YACf,QAAQ,EAAE,EAAE;SACf,CAAC;QACF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,0CAAmB,GAAnB,UAAoB,WAAmB,EAAE,QAAgB,EAAE,SAAsB;QAAtB,0BAAA,EAAA,cAAsB;QAEvE,IAAA,wBAA2D,EAA1D,uBAAe,EAAE,0BAAkB,CAAwB;QAClE,IAAM,KAAK,GAAG,eAAe,GAAG,GAAG,GAAG,kBAAkB,GAAG,iBAAiB,CAAC;QAC7E,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACjC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;QAC3C,QAAQ,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAEjD,IAAM,iBAAiB,GAAsB;YACzC,aAAa,EAAE,WAAW;YAC1B,SAAS,EAAE,SAAS;YACpB,KAAK,EAAE,QAAQ;YACf,QAAQ,EAAE,EAAE;SACf,CAAC;QACF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,4BAAK,GAAL,UAAM,KAAa,EAAE,UAA0B;QAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QACvD,EAAE,CAAC,CAAC,UAAU,CAAC;YAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,+BAAQ,GAAR,UAAS,KAAa,EAAE,UAA0B;QAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QACpD,EAAE,CAAC,CAAC,UAAU,CAAC;YAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,oCAAa,GAAb,UAAc,GAAU;QACd,IAAA,uCAAkE,EAAjE,uBAAe,EAAE,kBAAU,CAAuC;QACzE,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,8BAAO,GAAP,UAAQ,KAAa,EAAE,UAA0B;QAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,UAAU,CAAC;YAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,mCAAY,GAAZ,UAAa,GAAU;QACb,IAAA,uCAAkE,EAAjE,uBAAe,EAAE,kBAAU,CAAuC;QACzE,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,6BAAM,GAAN,UAAO,MAAc,EAAE,UAA0B;QAC7C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;QACzD,EAAE,CAAC,CAAC,UAAU,CAAC;YAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,gCAAS,GAAT,UAAU,MAAc,EAAE,UAA0B;QAChD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,UAAU,CAAC;YAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,+BAAQ,GAAR,UAAS,MAAc,EAAE,UAA0B;QAC/C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,UAAU,CAAC;YAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,8BAAO,GAAP,UAAQ,OAAe;QACnB,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,iCAAU,GAAV,UAAW,OAAe;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,8BAAO,GAAP,UAAQ,IAAY,EAAE,KAA2B;QAA3B,sBAAA,EAAA,aAA2B;QAC7C,IAAI,CAAC,QAAQ,aAAK,GAAC,IAAI,IAAG,KAAK,KAAE,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC;;IAChB,CAAC;IAED;;OAEG;IACH,iCAAU,GAAV,UAAW,IAAY,EAAE,KAA2B;QAA3B,sBAAA,EAAA,aAA2B;QAChD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,+BAAQ,GAAR,UAAS,KAAa;QAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,gCAAS,GAAT,UAAU,MAAc;QACpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,2BAAI,GAAJ,UAAK,IAAY;QACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,2BAAI,GAAJ,UAAK,IAAY;QACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,mCAAY,GAAZ,UAAa,GAAW,EAAE,KAAU;QAChC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH,oCAAa,GAAb,UAAc,UAAyB;QAAvC,iBAKC;QAJG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAC/B,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,oCAAa,GAAb,UAAc,UAAyB;QAAvC,iBAKC;QAJG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAC/B,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,oCAAa,GAAb;QACI,IAAM,UAAU,GAAkB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAErE,iDAAiD;QACjD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACtB,IAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACjF,EAAE,CAAC,CAAC,YAAY,CAAC,sBAAsB,CAAC;gBACpC,UAAU,CAAC,0BAA0B,CAAC,GAAG,YAAY,CAAC,kBAAkB,CAAC;QACjF,CAAC;QAED,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,6BAAM,GAAN;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACxC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACnC,GAAG,IAAI,IAAI,CAAC,+BAA+B,EAAE,CAAC;QAC9C,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACpC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACtC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACrC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACtC,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACpC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACrC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAClC,+EAAG,CAA2E;QAC/E,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACH,wCAAiB,GAAjB;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACxC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACnC,GAAG,IAAI,IAAI,CAAC,+BAA+B,EAAE,CAAC;QAC9C,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACpC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACtC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACrC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACtC,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACpC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACrC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACnC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACH,2CAAoB,GAApB,UAAqB,OAAmC;QACpD,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACxC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACnC,GAAG,IAAI,IAAI,CAAC,+BAA+B,EAAE,CAAC;QAC9C,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACpC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACtC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACrC,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;YACjC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC1C,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACpC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACrC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,yBAAyB,CAAC,GAAG,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IACvF,CAAC;IAED;;OAEG;IACG,8BAAO,GAAb;;iCAGW,GAAG,EAAE,UAAU;;;4BAFF,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;sCAA3B,SAA2B;6BAErB,IAAI,CAAC,oBAAoB,EAAE;;;;wBAE1C,qBAAM,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;4BAA/C,sBAAO,SAAwC,EAAC,CAAE,oDAAoD;;6BAGlG,IAAI,CAAC,iBAAiB,EAAE,EAAxB,wBAAwB;wBACxB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;;;;;;;KAEvC;IAED;;OAEG;IACG,+CAAwB,GAA9B;;;6BAWkB,QAAQ,EAKZ,eAAa,EACf,YAAU,MAIH,GAAG,EAAE,UAAU,MACf,OAAO,EAAE,QAAQ,EAElB,eAAa,EACb,UAAQ,EACV,QAAQ,MAoGL,GAAG,EAAE,UAAU;;;4BA7HV,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;sCAA3B,SAA2B;;;;wBAG3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;4BAC5B,MAAM,IAAI,KAAK,CAAC,uGAAuG,CAAC,CAAC;wBAE7H,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,kBAAkB,IAAI,IAAI,CAAC,QAAQ,KAAK,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC;4BACtH,MAAM,IAAI,iFAAuC,EAAE,CAAC;wBAExD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC,CAAC,CAAC;uCAChB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;4BAC5E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC;gCAC5D,MAAM,IAAI,mEAAgC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAClE,CAAC;0CAEqB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI;6BAExF,CAAA,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAA,EAAlC,wBAAkC;6BAGR,IAAI,CAAC,oBAAoB,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;6BAC9C,IAAI,CAAC,yCAAyC,CAAC,eAAe,CAAC;0CAErE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;qCACtC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC;mCAC3D,SAAS;wBACxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,2BAAY,CAAC,CAAC,CAAC;4BACjD,QAAQ,IAAI,YAAY,CAAC;wBAC7B,CAAC;wBACD,QAAQ,IAAI,UAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,UAAC,aAAa,EAAE,KAAK;4BACzD,IAAM,YAAY,GAAG,KAAI,CAAC,WAAW,CAAC,eAAa,GAAG,GAAG,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;4BACpF,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;gCACd,MAAM,CAAC,cAAY,eAAa,SAAI,YAAY,iBAAY,aAAa,CAAC,QAAU,CAAC;4BACzF,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAI,eAAa,SAAI,YAAY,iBAAY,aAAa,CAAC,QAAU,CAAC;4BAChF,CAAC;wBACL,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACd,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;4BACnB,QAAQ,IAAI,IAAI,GAAG,OAAO,CAAC;wBAE/B,QAAQ,IAAI,YAAU,GAAG,UAAK,eAAe,CAAC,CAAC,uDAAuD;wBAEtG,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BACtB,QAAQ,IAAI,YAAY,GAAG,QAAQ,CAAC;wBACxC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,QAAQ,IAAI,qBAAkB,UAAQ,CAAC,kBAAkB,CAAC,QAAQ,OAAG,CAAC,CAAC,8FAA8F;wBACzK,CAAC;wBAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,iCAAe,CAAC,CAAC,CAAC;4BAEpD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gCACrC,QAAQ,IAAI,cAAW,IAAI,CAAC,UAAU,IAAI,CAAC,WAAO,CAAC;gCACnD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;oCAChB,QAAQ,IAAI,cAAc,GAAG,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC;4BACpE,CAAC;wBACL,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,2BAAY,CAAC,CAAC,CAAC;4BACxD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gCACrC,QAAQ,GAAG,oBAAkB,QAAQ,uBAAiB,IAAI,CAAC,UAAU,IAAI,CAAC,CAAE,CAAC;gCAC7E,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;oCAChB,QAAQ,IAAI,iBAAc,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAE,CAAC;4BACtE,CAAC;wBACL,CAAC;wBAAC,IAAI,CAAC,CAAC;4BAEJ,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;4BAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,QAAQ,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;wBACjD,CAAC;wBAEM,qBAAM,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC;iCAC/C,IAAI,CAAC,UAAC,OAAc;gCACjB,YAAU,GAAG,OAAO,CAAC;gCACrB,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;oCACrB,MAAM,CAAC,EAAE,CAAC;gCAEd,IAAI,SAAS,GAAG,EAAE,CAAC;gCACnB,IAAM,UAAU,GAAkB,EAAE,CAAC;gCACrC,EAAE,CAAC,CAAC,UAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAC;oCAClC,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;wCAC1B,MAAM,CAAC,UAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,UAAA,aAAa;4CAC5C,UAAU,CAAC,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;4CAC9F,MAAM,CAAC,eAAa,GAAG,GAAG,GAAG,aAAa,CAAC,YAAY,GAAG,QAAQ,GAAG,aAAa,CAAC,YAAY,CAAC;wCACpG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oCACrB,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gCACpB,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACJ,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,GAAG,UAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAAzD,CAAyD,CAAC,CAAC;oCAC7F,IAAM,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,UAAC,EAAO,IAAK,OAAA,OAAO,EAAE,KAAK,QAAQ,EAAtB,CAAsB,CAAC,CAAC;oCACnE,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;wCAChB,8EAA8E;wCAC9E,SAAS,GAAM,eAAa,SAAI,UAAQ,CAAC,kBAAkB,CAAC,YAAY,aAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC;oCACtG,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;wCACxB,SAAS,GAAG,eAAa,GAAG,GAAG,GAAG,UAAQ,CAAC,kBAAkB,CAAC,YAAY,GAAG,YAAY,CAAC;oCAC9F,CAAC;gCACL,CAAC;gCACK,IAAA;;2DAEqB,EAFpB,uBAAe,EAAE,8BAAsB,CAElB;gCAC5B,MAAM,CAAE,WAA2B,CAAC,KAAK,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAAC;4BACvF,CAAC,CAAC;iCACD,IAAI,CAAC,UAAA,OAAO;gCACT,MAAM,CAAC,KAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;4BAC9C,CAAC,CAAC;iCACD,IAAI,CAAC,UAAA,OAAO;gCAET,MAAM,CAAC,KAAI,CAAC,kBAAkB,CAAC,WAA0B,EAAE,OAAO,CAAC;qCAC9D,IAAI,CAAC,UAAA,MAAM;oCACR,MAAM,CAAC,OAAO,CAAC;gCACnB,CAAC,CAAC,CAAC;4BACX,CAAC,CAAC;iCACD,IAAI,CAAC,UAAA,OAAO;gCACT,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC;oCACpB,MAAM,CAAC,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,yBAAyB,CAAC,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,EAAP,CAAO,CAAC,CAAC;gCAE9H,MAAM,CAAC,OAAO,CAAC;4BACnB,CAAC,CAAC;iCACD,IAAI,CAAC,UAAA,OAAO;gCACT,MAAM,CAAC;oCACH,QAAQ,EAAE,OAAO;oCACjB,UAAU,EAAE,YAAU;iCACzB,CAAC;4BACN,CAAC,CAAC,EAAA;4BApDN,sBAAO,SAoDD,EAAC;;6BAImB,IAAI,CAAC,oBAAoB,EAAE;wBAE9C,qBAAM,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC;iCAC1C,IAAI,CAAC,UAAA,OAAO;gCACT,YAAU,GAAG,OAAO,CAAC;gCACrB,MAAM,CAAC,KAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;4BAC9C,CAAC,CAAC;iCACD,IAAI,CAAC,UAAA,OAAO;gCAET,MAAM,CAAC,KAAI,CAAC,kBAAkB,CAAC,WAA0B,EAAE,OAAO,CAAC;qCAC9D,IAAI,CAAC,UAAA,MAAM;oCACR,MAAM,CAAC,OAAO,CAAC;gCACnB,CAAC,CAAC,CAAC;4BACX,CAAC,CAAC;iCACD,IAAI,CAAC,UAAA,OAAO;gCACT,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oCACtB,MAAM,CAAC,KAAI,CAAC,UAAU,CAAC,WAAW;yCAC7B,yBAAyB,CAAC,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC;yCAClE,IAAI,CAAC,cAAM,OAAA,OAAO,EAAP,CAAO,CAAC,CAAC;gCAC7B,CAAC;gCACD,MAAM,CAAC,OAAO,CAAC;4BACnB,CAAC,CAAC;iCACD,IAAI,CAAC,UAAA,OAAO;gCACT,MAAM,CAAC;oCACH,QAAQ,EAAE,OAAO;oCACjB,UAAU,EAAE,YAAU;iCACzB,CAAC;4BACN,CAAC,CAAC,EAAA;4BAzBN,sBAAO,SAyBD,EAAC;;;6BAIP,IAAI,CAAC,iBAAiB,EAAE,EAAxB,wBAAwB;wBACxB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;;;;;;;KAEvC;IAED;;;OAGG;IACG,+BAAQ,GAAd;;;6BAMU,SAAS,EACT,QAAQ,EAER,aAAa,EACf,QAAQ,EASN,UAAU,MAUT,aAAa,EAAE,oBAAoB;;;;wBA5B1C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;4BAC/B,MAAM,IAAI,iEAA+B,EAAE,CAAC;wBAE5B,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;sCAA3B,SAA2B;oCAE7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI;mCACvE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC;wCAEpD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;mCAClC,QAAQ,GAAG,QAAQ,CAAC,iCAAiC,CAAC,GAAG,CAAC,UAAC,aAAa,EAAE,KAAK;4BACtF,IAAM,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;4BAC/D,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;gCACd,MAAM,CAAC,cAAY,aAAa,SAAI,YAAY,MAAG,CAAC;4BACxD,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAI,aAAa,SAAI,YAAY,MAAG,CAAC;4BAC/C,CAAC;wBACL,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU;qCAEX,IAAI;6BAClB,KAAK,CAAC;4BACH,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;4BAC7C,YAAY,EAAE,IAAI;4BAClB,uBAAuB,EAAE,IAAI;4BAC7B,SAAS,EAAE,IAAI;4BACf,UAAU,EAAE,IAAI;yBACnB,CAAC;6BACD,MAAM,CAAC,QAAQ,CAAC;6BAEyB,UAAU,CAAC,oBAAoB,EAAE;;;;wBAG3D,qBAAM,WAAW,CAAC,KAAK,CAAC,aAAa,EAAE,oBAAoB,CAAC,EAAA;;kCAA5D,SAA4D;wBAC5E,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACtE,MAAM,gBAAC,CAAC,EAAC;wBAEb,sBAAO,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAC;;6BAGvE,IAAI,CAAC,iBAAiB,EAAE,EAAxB,wBAAwB;wBACxB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;;;;;;;KAEvC;IAED;;OAEG;IACG,iCAAU,GAAhB;;;gBACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;oBAC/B,MAAM,IAAI,iEAA+B,EAAE,CAAC;gBAEhD,sBAAO,IAAI,CAAC,OAAO,EAAE,EAAC;;;KACzB;IAED;;OAEG;IACG,gCAAS,GAAf;;;;;;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;4BAC/B,MAAM,IAAI,iEAA+B,EAAE,CAAC;wBAEhC,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;kCAApB,SAAoB;wBACpC,sBAAO,OAAO,CAAC,CAAC,CAAC,EAAC;;;;KAErB;IAED;;OAEG;IACG,sCAAe,GAArB;;;gBACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;oBAC/B,MAAM,IAAI,iEAA+B,EAAE,CAAC;gBAEhD,8CAA8C;gBAC9C,sBAAO,OAAO,CAAC,GAAG,CAAC;wBACf,IAAI,CAAC,OAAO,EAAE;wBACd,IAAI,CAAC,QAAQ,EAAE;qBAClB,CAAC,EAAC;;;KACN;IAED;;OAEG;IACG,8BAAO,GAAb;;;;;;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;4BAC/B,MAAM,IAAI,iEAA+B,EAAE,CAAC;wBAEhC,qBAAM,IAAI,CAAC,wBAAwB,EAAE,EAAA;;kCAArC,SAAqC;wBACrD,sBAAO,OAAO,CAAC,QAAQ,EAAC;;;;KAC3B;IAED,mBAAmB;IACnB,kCAAkC;IAClC,mBAAmB;IACnB,IAAI;IAEJ;;OAEG;IACG,6BAAM,GAAZ;;yBAEU,MAAM,EAGF,QAAQ,EAGJ,aAAa,EAMb,aAAa;;;4BAbX,qBAAM,IAAI,CAAC,wBAAwB,EAAE,EAAA;;kCAArC,SAAqC;iCACtC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAQ;wBAEzC,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,YAAY,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;uCAC9C,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC;4BAE1E,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,YAAY,IAAI,CAAC,CAAC,CAAC;gDACb,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAC;gCACpE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gCACpC,EAAE,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;oCACvD,MAAM,IAAI,uEAAkC,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;4BAErG,CAAC;4BAAC,IAAI,CAAC,CAAC;gDACkB,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC;gCACjE,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,CAAC,WAAW,CAAC;oCACnC,MAAM,IAAI,uEAAkC,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;4BACrG,CAAC;wBACL,CAAC;wBAED,sBAAO,MAAM,EAAC;;;;KACjB;IAED;;OAEG;IACH,4BAAK,GAAL,UAAM,OAA6J;QAAnK,iBA6EC;QA5EG,IAAM,EAAE,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,GAAG,OAAO,CAAC,mBAAmB,GAAG,SAAS,CAAC,CAAC;QAChG,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,uBAAuB,CAAC;YAC3C,EAAE,CAAC,uBAAuB,GAAG,OAAO,CAAC,uBAAuB,CAAC;QAEjE,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAChB,KAAK,QAAQ;gBACT,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACxB,KAAK,CAAC;YACV,KAAK,QAAQ;gBACT,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC/B,KAAK,CAAC;YACV,KAAK,QAAQ;gBACT,EAAE,CAAC,MAAM,EAAE,CAAC;gBACZ,KAAK,CAAC;QACd,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3E,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEtE,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC1D,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;YACnB,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;YACnD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAC9D,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;YAChF,CAAC;YACD,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3H,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAtB,CAAsB,CAAC,CAAC;QAEzD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;YACrB,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjB,KAAK,QAAQ;oBACT,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;oBAC1B,KAAK,CAAC;gBACV,KAAK,KAAK;oBACN,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;oBAC7B,KAAK,CAAC;gBACV,KAAK,IAAI;oBACL,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;oBAC5B,KAAK,CAAC;YACd,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACvB,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClB,KAAK,QAAQ;oBACT,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC5B,KAAK,CAAC;gBACV,KAAK,KAAK;oBACN,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC/B,KAAK,CAAC;gBACV,KAAK,IAAI;oBACL,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC9B,KAAK,CAAC;YACd,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,UAAU,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAApD,CAAoD,CAAC,CAAC;QAE3G,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAA1C,CAA0C,CAAC,CAAC;QAExF,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;YAC/B,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE5B,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;YAChC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE9B,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;aACnB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE3B,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAED,kCAAW,GAAX,UAAY,IAAY;QACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;IAED,mCAAY,GAAZ,UAAa,IAAY;QACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACzD,CAAC;IAED,kCAAW,GAAX,UAAY,IAAY;QACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACH,mCAAY,GAAZ,UAAa,MAA4B;QACrC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACb,KAAK,oBAAoB;gBACrB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;QAC3C,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAElE,yCAAkB,GAA5B,UAA6B,WAAwB,EAAE,OAAiB;QAAxE,iBAmGC;QAjGG,IAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAA,iBAAiB;YAC1D,IAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC,eAAe,CAAC;YAC5D,IAAM,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAC9D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;gBACZ,MAAM,IAAI,KAAK,CAAC,aAAU,WAAW,qBAAiB,CAAC,CAAC;YAE5D,IAAM,cAAc,GAAG,KAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;YAC1E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAEzF,IAAM,QAAQ,GAAG,cAAc,CAAC,4BAA4B,CAAC,iBAAiB,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YAEzG,IAAM,YAAY,GAAG,IAAI,YAAY,CAAC,KAAI,CAAC,UAAU,EAAE,KAAI,CAAC,mBAAmB,CAAC,CAAC;YACjF,IAAI,SAAS,GAAG,EAAE,CAAC;YAEnB,IAAM,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACjF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;gBACV,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEtG,IAAI,aAAa,GAAW,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;YAEhD,IAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAsB,CAAC;YACzD,IAAM,iBAAiB,GAAG,iBAAiB,CAAC,SAAS,GAAG,OAAO,GAAG,KAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;YAE9H;;;;;;;;;;;;;;;;;;;;;;;;;;;gBA2BI;YAEJ,mCAAmC;YACnC,gDAAgD;YAChD,kCAAkC;YAClC,iCAAiC;YAEjC,IAAM,GAAG,GAAG,iBAAiB,CAAC,QAAQ;iBACjC,GAAG,CAAC,UAAA,kBAAkB,IAAI,OAAA,kBAAkB,CAAC,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAArE,CAAqE,CAAC;iBAChG,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,KAAK,SAAS,EAAnB,CAAmB,CAAC;iBACpC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAM,CAAC,cAAc,CAAC,aAAa,CAAC,YAAY,CAAC,EAAjD,CAAiD,CAAC,CAAC;YACrE,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;gBACpB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,+DAA+D;YAE7F,MAAM,CAAC,YAAY;iBACd,MAAM,CAAI,cAAc,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC,aAAa,CAAC,YAAY,WAAQ,CAAC;iBACxF,SAAS,CAAC,YAAU,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,qBAAqB,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAW,CAAC;iBACxJ,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,IAAI,CAAC;iBAChD,QAAQ,CAAC,cAAc,CAAC,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,YAAY,EAAE,iBAAiB,CAAC,SAAS,CAAC;iBAC/G,aAAa,CAAC,KAAI,CAAC,UAAU,CAAC;iBAC9B,KAAK,CAAI,cAAc,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC,aAAa,CAAC,YAAY,4BAAyB,EAAE,EAAC,gBAAgB,EAAE,GAAG,EAAC,CAAC;iBACjI,OAAO,CAAC,cAAc,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC,aAAa,CAAC,YAAY,CAAC;iBAC9E,UAAU,EAAE;iBACZ,IAAI,CAAC,UAAC,OAAgC;gBACnC,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,kBAAkB;oBACjD,IAAM,QAAQ,GAAG,kBAAkB,CAAC,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;oBACnG,IAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM;wBACpC,MAAM,CAAC,QAAQ,KAAK,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,EAAE,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAC1H,CAAC,CAAC,CAAC;oBACH,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBAEf,EAAE,CAAC,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC;4BAC5B,IAAA,+CAAmF,EAAlF,kBAAU,EAAE,oBAAY,CAA2D;4BAC1F,oFAAoF;4BACpF,uEAAuE;4BACvE,kBAAkB,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;wBAEzE,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;4BAC7B,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;wBAChF,CAAC;oBACL,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAES,2CAAoB,GAA9B,UAA+B,OAAc;QACzC,IAAM,WAAW,GAAG,IAAI,mEAAgC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAClL,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAES,sDAA+B,GAAzC,UAA0C,KAAY;QAAtD,iBAWC;QAVG,IAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,KAAK,CAAC,IAAI,EAArB,CAAqB,CAAC,CAAC;QAExE,IAAM,OAAO,GAAqB,YAAY,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;YAC1G,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,YAAY,EAAjD,CAAiD,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;YACrB,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC;gBAC1E,MAAM,GAAG,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IAEQ,8CAAuB,GAAjC,UAAkC,KAAY;QAC1C,IAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,KAAK,CAAC,IAAI,EAArB,CAAqB,CAAC,CAAC;QACrE,EAAE,CAAC,CAAC,SAAS,CAAC;YACV,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC;QAEvB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;YAC7B,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,YAAY,EAAjD,CAAiD,CAAC,CAAC;QACpG,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IAEQ,6CAAsB,GAAhC;QACI,qDAAqD;QADzD,iBA4HC;QAzHG,IAAI,KAAK,GAAW,EAAE,EAAE,SAAiB,CAAC;QAC1C,IAAM,UAAU,GAAa,EAAE,CAAC;QAChC,IAAM,eAAe,GAAa,EAAE,CAAC;QAErC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACrB,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;YAC/B,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC;QAEhC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAChC,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpG,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;YACtD,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;YAEnC,UAAU,CAAC,IAAI,OAAf,UAAU,EAAS,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAClF,eAAe,CAAC,IAAI,OAApB,eAAe,EAAS,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;QACnF,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACrC,CAAC;QAED,yBAAyB;QACzB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACtB,UAAU,CAAC,IAAI,OAAf,UAAU,EAAS,KAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACrE,eAAe,CAAC,IAAI,OAApB,eAAe,EAAS,KAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACtE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAM,YAAY,GAAG,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,EAA1B,CAA0B,CAAC,CAAC;gBAC7E,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACf,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;oBAC1D,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC1C,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,oBAAoB,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC5G,IAAM,OAAK,GAAG,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACrH,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;oBACxE,gCAAgC;oBAChC,UAAU,CAAC,IAAI,CAAC,OAAK,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,GAAG,OAAK,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjI,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;QAED,qCAAqC;QACrC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,IAAI;YAC7B,2EAA2E;YAE3E,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YAC/C,IAAM,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAC9D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;gBACZ,MAAM,IAAI,KAAK,CAAC,aAAU,WAAW,qBAAiB,CAAC,CAAC;YAE5D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YACzF,IAAM,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACjG,IAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAsB,CAAC;YACzD,qDAAqD;YAErD,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;gBACnC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvK,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH;;;;;;;;;;;;;;;;WAgBG;QAEH,wBAAwB;QACxB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAtC,CAAsC,CAAC;aAChE,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,EAAlD,CAAkD,CAAC,CAAC;QAE3E,6DAA6D;QAC7D,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC;YACxB,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEzB,IAAI,IAAI,GAAW,EAAE,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,iCAAe,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,KAAK,kBAAkB;oBACnB,IAAI,GAAG,2BAA2B,CAAC;oBACnC,KAAK,CAAC;gBACV,KAAK,mBAAmB;oBACpB,IAAI,GAAG,0BAA0B,CAAC;oBAClC,KAAK,CAAC;YACd,CAAC;QACL,CAAC;QAED,2BAA2B;QAC3B,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAChB,KAAK,QAAQ;gBACT,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YAC7H,KAAK,QAAQ;gBACT,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YACpD,uUAAuU;YAC3U,KAAK,QAAQ;gBACT,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,GAAG,mBAAmB,GAAG,GAAG,EAA/B,CAA+B,CAAC,CAAC;gBAC/F,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,GAAG;oBAC/D,qCAAqC;oBAC9B,MAAO,CAAC,iBAAiB,GAAG,GAAG,CAAC,GAAU,KAAI,CAAC,cAAe,CAAC,GAAG,CAAC,CAAC;oBAC3E,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC,EAAE,EAAE,CAAC,CAAC;gBACP,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBAC3B,MAAM,CAAC,SAAS,GAAG,SAAS,GAAG,GAAG,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO,GAAG,SAAS,CAAC;QAC1G,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;IAC3D,CAAC;IAES,6CAAsB,GAAhC;QAAA,iBAeC;QAdG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QACrD,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK;YAC1C,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClB,KAAK,KAAK;oBACN,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBACnF,KAAK,IAAI;oBACL,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC,GAAG,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAClF;oBACI,MAAM,CAAC,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC3D,CAAC;QACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEjB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAClC,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;IACnC,CAAC;IAES,4CAAqB,GAA/B;QAAA,iBAqBC;QAnBG,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,KAAK;YAC5C,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjB,KAAK,KAAK;oBACN,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,KAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAClF,KAAK,IAAI;oBACL,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC,GAAG,KAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBACjF;oBACI,MAAM,CAAC,KAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC1D,CAAC;QACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEb,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACtB,IAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACjF,EAAE,CAAC,CAAC,YAAY,CAAC,sBAAsB,CAAC;gBACpC,MAAM,CAAC,aAAW,UAAU,CAAC,MAAM,GAAG,GAAG,GAAG,UAAU,GAAG,OAAO,GAAG,EAAE,UAAK,YAAY,CAAC,mBAAmB,CAAC,QAAQ,+BAA4B,CAAC;QACxJ,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAClC,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC;IAClC,CAAC;IAED;;OAEG;IACK,2CAAoB,GAA5B,UAA6B,SAAiB;QAA9C,iBAoBC;QAnBG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK;YAC/B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAAC,MAAM,CAAC;YAC5B,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;gBACrC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;oBAC3B,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,GAAG,KAAK,GAAG,QAAQ,CAAC,YAAY,GAAG,KAAK,GAAG,MAAM,CAAC,YAAY,GAAG,cAAc,CAAC;oBAC7G,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;gBAChJ,CAAC,CAAC,CAAC;gBACH,4CAA4C;YAChD,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,MAAM,CAAC,YAAY,EAApB,CAAoB,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM;gBACxE,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,GAAG,KAAK,GAAG,MAAM,CAAC,YAAY,GAAG,cAAc,CAAC;gBAC7E,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;YAChJ,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,QAAQ,CAAC,wBAAwB,CAAA,+CAA+C,CAAC,OAAO,CAAC,UAAA,QAAQ;gBACnG,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,GAAG,KAAK,GAAG,QAAQ,CAAC,YAAY,GAAG,cAAc,CAAC;gBAC/E,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;YAC9I,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAES,sDAA+B,GAAzC;QAAA,iBA+BC;QA9BG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,IAAI;YAChC,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YAC/C,IAAM,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAC9D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;gBACZ,MAAM,IAAI,KAAK,CAAC,aAAU,WAAW,qBAAiB,CAAC,CAAC;YAE5D,IAAM,cAAc,GAAG,KAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;YAC1E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAEzF,IAAM,QAAQ,GAAG,cAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YAC5F,IAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAsB,CAAC;YACzD,IAAM,aAAa,GAAG,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC;YAClD,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACtC,IAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,8BAA8B;YAC7H,IAAM,eAAe,GAAG,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,8BAA8B;YAE3F,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;gBAC9L,uHAAuH;YAC3H,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;gBAC9L,uHAAuH;YAC3H,CAAC;YAED,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,QAAQ,GAAG,aAAa,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,MAAM,GAAG,UAAU,CAAC;YAChH,iIAAiI;YACjI,yJAAyJ;QAC7J,CAAC,CAAC,CAAC;IACP,CAAC;IAES,2CAAoB,GAA9B;QAAA,iBA4GC;QA3GG,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI;YAC3B,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,kCAAkC;YAC9D,IAAI,aAAa,GAAW,IAAI,CAAC,SAAS,CAAC;YAC3C,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAEjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;oBACrB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAEzF,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;YACnD,CAAC;YAED,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YAC/C,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,CAAE,KAAK,GAAG,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAE,GAAG,EAAE,CAAC,CAAC;YACvM,CAAC;YAED,IAAM,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAC9D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;gBACZ,MAAM,IAAI,KAAK,CAAC,aAAU,WAAW,qBAAiB,CAAC,CAAC;YAE5D,IAAM,cAAc,GAAG,KAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;YAC1E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAEzF,IAAM,QAAQ,GAAG,cAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YAC5F,IAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAsB,CAAC;YACzD,IAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,GAAG,OAAO,GAAG,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;YAEpG,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;gBACxB,IAAM,aAAa,GAAG,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC;gBAClD,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBACzE,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBAClC,IAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC;gBAC9F,IAAM,eAAe,GAAG,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC,gBAAgB,CAAC,QAAQ,GAAG,SAAS,CAAC,uBAAuB,CAAC,QAAQ,CAAC;gBAC7H,IAAM,qBAAqB,GAAG,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC,uBAAuB,CAAC,QAAQ,GAAG,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC;gBAEnI,IAAI,UAAU,GAAG,EAAE,EAAE,UAAU,GAAG,EAAE,CAAC;gBACrC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACpB,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;oBAC9L,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;gBACtM,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;oBAC9L,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;gBACtM,CAAC;gBAED,MAAM,CAAC,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,MAAM,GAAG,UAAU;oBACzH,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,MAAM,GAAG,UAAU,GAAG,iBAAiB,CAAC;YAErJ,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC5E,IAAM,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC;gBACtE,IAAM,SAAS,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC9K,MAAM,CAAC,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,SAAS,GAAG,iBAAiB,CAAC;YAE1J,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,QAAQ,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC7E,IAAM,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC;gBACtF,IAAM,SAAS,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;gBAC9L,MAAM,CAAC,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,SAAS,GAAG,iBAAiB,CAAC;YAE1J,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC,8BAA8B;YAC/E,CAAC;QACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEb,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvD,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC7E,EAAE,CAAC,CAAC,QAAQ,CAAC,oBAAoB,IAAI,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC5D,IAAM,OAAK,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,GAAG,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC7F,KAAK,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC;sBACxE,GAAG,GAAG,OAAK,GAAG,MAAM,CAAC;gBAC3B,KAAK,IAAI,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,cAAc;oBAChD,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC,QAAQ,GAAG,GAAG,GAAG,OAAK,GAAG,GAAG,GAAG,cAAc,CAAC,YAAY,CAAC;gBAC1H,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;QAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WA6BG;QAEH,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAES,8CAAuB,GAAjC;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QACvD,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9E,CAAC;IAES,gEAAyC,GAAnD,UAAoD,WAAmB;QAAvE,iBAwBC;QAtBG,6CAA6C;QAC7C,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvD,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC7E,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;QAC5C,CAAC;QAED,IAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;aACrC,GAAG,CAAC,UAAA,UAAU;YACL,IAAA,0BAA8D,EAA7D,aAAK,EAAE,cAAM,EAAE,gCAAqB,CAA0B;YACrE,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,KAAK,GAAG,GAAG,GAAG,MAAM,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACxH,CAAC,CAAC;aACD,IAAI,CAAC,IAAI,CAAC,CAAC;QAEhB,IAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;aACtC,GAAG,CAAC,UAAA,UAAU;YACL,IAAA,0BAA8D,EAA7D,aAAK,EAAE,cAAM,EAAE,gCAAqB,CAA0B;YACrE,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,KAAK,GAAG,GAAG,GAAG,MAAM,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC1J,CAAC,CAAC;aACD,IAAI,CAAC,IAAI,CAAC,CAAC;QAEhB,MAAM,CAAC,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;IACzC,CAAC;IAES,8CAAuB,GAAjC;QAAA,iBAmBC;QAjBG,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE7B,6CAA6C;QAC7C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvD,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC7E,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;QAC5C,CAAC;QAED,iDAAiD;QACjD,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;YACjC,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;iBAClC,GAAG,CAAC,UAAA,UAAU;gBACX,MAAM,CAAC,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACnF,CAAC,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,CAAC;QAExB,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAES,4CAAqB,GAA/B;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAC3B,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;IAClC,CAAC;IAES,6CAAsB,GAAhC;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAC5B,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;IACpC,CAAC;IAES,2CAAoB,GAA9B;QACI,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpB,KAAK,kBAAkB;gBACnB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,CAAC,CAAC,CAAC;oBAChD,MAAM,CAAC,qBAAqB,CAAC;gBAEjC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,+BAAc,CAAC,CAAC,CAAC;oBAC1D,MAAM,CAAC,YAAY,CAAC;gBAExB,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,iCAAe,CAAC,CAAC,CAAC;oBAC3D,MAAM,CAAC,EAAE,CAAC;gBAEd,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,IAAI,uEAAkC,EAAE,CAAC;gBACnD,CAAC;YACL,KAAK,mBAAmB;gBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,+BAAc,CAAC,CAAC,CAAC;oBACpG,MAAM,CAAC,aAAa,CAAC;gBAEzB,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,iCAAe,CAAC,CAAC,CAAC;oBAC3D,MAAM,CAAC,EAAE,CAAC;gBAEd,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,IAAI,uEAAkC,EAAE,CAAC;gBACnD,CAAC;YACL;gBACI,MAAM,CAAC,EAAE,CAAC;QAClB,CAAC;IACL,CAAC;IAEO,0CAAmB,GAA3B;QACI,IAAM,QAAQ,GAAkB,EAAE,CAAC;QACnC,IAAI,CAAC,KAAK;aACL,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,aAAa,EAApB,CAAoB,CAAC;aACpC,OAAO,CAAC,UAAA,IAAI;YACH,IAAA,kCAAsE,EAArE,kBAAU,EAAE,oBAAY,CAA8C;YAC7E,QAAQ,CAAC,IAAI,CAAC;gBACV,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,UAAU,EAAE,UAAU;gBACtB,YAAY,EAAE,YAAY;gBAC1B,MAAM,EAAE,IAAI,CAAC,aAAa;aACd,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QAEP,IAAI,CAAC,eAAe;aACf,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,aAAa,EAApB,CAAoB,CAAC;aACpC,OAAO,CAAC,UAAA,IAAI;YACH,IAAA,kCAAsE,EAArE,kBAAU,EAAE,oBAAY,CAA8C;YAC7E,QAAQ,CAAC,IAAI,CAAC;gBACV,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,UAAU,EAAE,UAAU;gBACtB,YAAY,EAAE,YAAY;gBAC1B,MAAM,EAAE,KAAK;aAChB,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEP,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAKS,2BAAI,GAAd,UAAe,QAAwB,EAAE,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB,EAAE,aAAsB,EAAE,aAA8B;QAE5L,uEAAuE;QACvE,kFAAkF;QAHK,0BAAA,EAAA,cAAsB;QAAiD,8BAAA,EAAA,qBAA8B;QAK5L,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACjC,EAAE,CAAC,CAAC,gBAAgB,YAAY,QAAQ,CAAC,CAAC,CAAC;YACvC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAEtE,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAChD,gCAAqF,EAApF,gCAAwB,EAAE,mCAA2B,CAAgC;YAEtF,IAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;YAC5E,iDAAiD;YACjD,0DAA0D;YAC1D,iDAAiD;YACjD,+CAA+C;YAC/C,IAAM,QAAQ,GAAG,WAAY,CAAC,QAAQ,CAAC,4BAA4B,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;YACjG,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,qBAAqB,CAAC;QAEvD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,gBAAgB,KAAK,QAAQ,CAAC,CAAC,CAAC;YAE9C,8EAA8E;YAC9E,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,EAAxC,CAAwC,CAAC,CAAC;YAC5G,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACjC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,SAAS,GAAG,gBAAgB,CAAC;YACjC,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC;gBACf,aAAa,GAAG,gBAAgB,CAAC;QACzC,CAAC;QAED,IAAM,IAAI,GAAS;YACf,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,QAAQ;YACf,SAAS,EAAE,SAAS;YACpB,SAAS,EAAE,SAAS;YACpB,OAAO,EAAE,OAAO;YAChB,aAAa,EAAE,aAAa;YAC5B,aAAa,EAAE,aAAa;SAC/B,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC;;IAChB,CAAC;IAES,qCAAc,GAAxB,UAAyB,QAAwB,EAAE,aAA+B,EAAE,QAAgB,EAAE,SAAkB;QAEpH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC,CAAC,wDAAwD;QAEhJ,IAAA,wBAA2D,EAA1D,uBAAe,EAAE,0BAAkB,CAAwB;QAClE,IAAM,KAAK,GAAG,eAAe,GAAG,GAAG,GAAG,kBAAkB,GAAG,cAAc,CAAC;QAE1E,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACjC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;QAC3C,QAAQ,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAEjD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACtB,IAAI,EAAE,QAAQ;YACd,aAAa,EAAE,aAAa;YAC5B,KAAK,EAAE,QAAQ;YACf,SAAS,EAAE,SAAS;SACvB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,sCAAe,GAAvB,UAAwB,GAAQ;QAC5B,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC;QACjB,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC;QAEjB,IAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpC,IAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,YAAY,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC;QAEjB,IAAM,eAAe,GAAG,kBAAkB,CAAC;QAC3C,IAAM,kBAAkB,GAAG,eAAe,CAAC;QAC3C,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC3E,MAAM,CAAC,KAAK,CAAC;QAEjB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACO,+CAAwB,GAAlC,UAAmC,GAAU;QAA7C,iBAmCC;QAlCG,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAE7E,0CAA0C;QAC1C,IAAM,WAAW,GAAG,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAvB,CAAuB,CAAC;QAC/D,IAAM,YAAY,GAAG,UAAC,MAAc,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAzB,CAAyB,CAAC;QAEnE,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;QAC3C,IAAM,UAAU,GAAkB,EAAE,CAAC;QACrC,IAAM,YAAY,GAAG,GAAG,CAAC,GAAG,CAAC,UAAC,EAAE,EAAE,KAAK;YACnC,IAAM,eAAe,GAAa,EAAE,CAAC;YACrC,EAAE,CAAC,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBAClC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,UAAC,aAAa,EAAE,WAAW;oBACvD,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,OAAO,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,CAAC,CAAC;oBAC5H,UAAU,CAAC,KAAK,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAC/E,CAAC,CAAC,CAAC;gBACH,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,aAAa,EAAE,WAAW;oBACxD,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,GAAG,aAAa,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,CAAC,CAAC;oBACtI,UAAU,CAAC,WAAW,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;gBACzF,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBACrC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,OAAO,GAAG,KAAK,CAAC,CAAC;oBACtH,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;gBAEnC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7C,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,aAAa,GAAG,KAAK,CAAC,CAAC;oBAC5H,UAAU,CAAC,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;gBACzC,CAAC;YACL,CAAC;YACD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,IAAM,WAAW,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;QACtG,MAAM,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IACrC,CAAC;IAEe,qCAAc,GAA9B;;;gBAEI,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,YAAY,yCAAmB,CAAC,CAAC,CAAC;oBAC1D,MAAM,gBAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAC;gBAE9C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,gBAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAC;gBACtD,CAAC;;;;KACJ;IAES,wCAAiB,GAA3B;QACI,MAAM,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;IACrC,CAAC;IAEL,mBAAC;AAAD,CAz+DA,AAy+DC,IAAA;AAz+DY,oCAAY","file":"QueryBuilder.js","sourcesContent":["import {Alias} from \"./alias/Alias\";\r\nimport {AliasMap} from \"./alias/AliasMap\";\r\nimport {RawSqlResultsToEntityTransformer} from \"./transformer/RawSqlResultsToEntityTransformer\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {JoinOptions} from \"./JoinOptions\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {PessimisticLockTransactionRequiredError} from \"./error/PessimisticLockTransactionRequiredError\";\r\nimport {NoVersionOrUpdateDateColumnError} from \"./error/NoVersionOrUpdateDateColumnError\";\r\nimport {OptimisticLockVersionMismatchError} from \"./error/OptimisticLockVersionMismatchError\";\r\nimport {OptimisticLockCanNotBeUsedError} from \"./error/OptimisticLockCanNotBeUsedError\";\r\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\r\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\r\nimport {LockNotSupportedOnGivenDriverError} from \"./error/LockNotSupportedOnGivenDriverError\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\r\n\r\n/**\r\n */\r\nexport interface Join {\r\n    alias: Alias;\r\n    type: \"LEFT\"|\"INNER\";\r\n    condition?: string;\r\n    tableName: string;\r\n    mapToProperty?: string;\r\n    isMappingMany: boolean;\r\n    options?: JoinOptions;\r\n}\r\n\r\nexport interface JoinRelationId {\r\n\r\n    alias: Alias;\r\n    type: \"LEFT\"|\"INNER\";\r\n    condition?: string;\r\n    mapToProperty?: string;\r\n}\r\n\r\nexport interface RelationCountMeta {\r\n\r\n    alias: Alias;\r\n    // property: string;\r\n    condition?: string;\r\n    mapToProperty?: string;\r\n    entities: { entity: any, metadata: EntityMetadata }[];\r\n    // entity?: any;\r\n}\r\n\r\n/**\r\n */\r\nexport interface JoinMapping {\r\n    type: \"join\"|\"relationId\";\r\n    alias: Alias;\r\n    parentName: string;\r\n    propertyName: string;\r\n    isMany: boolean;\r\n}\r\n\r\n// todo: fix problem with long aliases eg getMaxIdentifierLength\r\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\r\n// todo: implement joinAlways in relations and relationId\r\n// todo: implement @Where decorator\r\n// todo: add quoting functions\r\n// todo: .addCount and .addCountSelect()\r\n// todo: add selectAndMap\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class QueryBuilder<Entity> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected aliasMap: AliasMap;\r\n    protected type: \"select\"|\"update\"|\"delete\" = \"select\";\r\n    protected selects: string[] = [];\r\n    protected fromEntity: { alias: Alias };\r\n    protected fromTableName: string;\r\n    protected fromTableAlias: string;\r\n    protected updateQuerySet: Object;\r\n    protected joins: Join[] = [];\r\n    protected joinRelationIds: JoinRelationId[] = [];\r\n    protected relationCountMetas: RelationCountMeta[] = [];\r\n    protected groupBys: string[] = [];\r\n    protected wheres: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\r\n    protected havings: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\r\n    protected orderBys: OrderByCondition = {};\r\n    protected parameters: ObjectLiteral = {};\r\n    protected limit: number;\r\n    protected offset: number;\r\n    protected lockMode: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\";\r\n    protected lockVersion?: number|Date;\r\n    protected skipNumber: number;\r\n    protected takeNumber: number;\r\n    protected enableQuoting: boolean = true;\r\n    protected ignoreParentTablesJoins: boolean = false;\r\n\r\n    /**\r\n     * Indicates if virtual columns should be included in entity result.\r\n     */\r\n    protected enableRelationIdValues: boolean = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected queryRunnerProvider?: QueryRunnerProvider) {\r\n        this.aliasMap = new AliasMap(connection);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets the main alias string used in this query builder.\r\n     */\r\n    get alias(): string {\r\n        return this.aliasMap.mainAlias.name;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Disable escaping.\r\n     */\r\n    disableQuoting(): this {\r\n        this.enableQuoting = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates DELETE query.\r\n     */\r\n    delete(): this {\r\n        this.type = \"delete\";\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given entity and applies given update values.\r\n     */\r\n    update(entity: Function, updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given table name and applies given update values.\r\n     */\r\n    update(tableName: string, updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(tableNameOrEntityOrUpdateSet?: string|Function|ObjectLiteral, maybeUpdateSet?: ObjectLiteral): this {\r\n        const updateSet = maybeUpdateSet ? maybeUpdateSet : <ObjectLiteral> tableNameOrEntityOrUpdateSet;\r\n\r\n        if (tableNameOrEntityOrUpdateSet instanceof Function) {\r\n            const aliasName = (<any> tableNameOrEntityOrUpdateSet).name;\r\n            const aliasObj = new Alias(aliasName);\r\n            aliasObj.metadata = this.connection.getMetadata(tableNameOrEntityOrUpdateSet);\r\n            this.aliasMap.addMainAlias(aliasObj);\r\n            this.fromEntity = { alias: aliasObj };\r\n\r\n        } else if (typeof tableNameOrEntityOrUpdateSet === \"string\") {\r\n            this.fromTableName = <string> tableNameOrEntityOrUpdateSet;\r\n        }\r\n\r\n        this.type = \"update\";\r\n        this.updateQuerySet = updateSet;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates SELECT query.\r\n     * Replaces all old selections if they exist.\r\n     */\r\n    select(): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all old selections if they exist.\r\n     */\r\n    select(selection: string): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all old selections if they exist.\r\n     */\r\n    select(selection: string[]): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all old selections if they exist.\r\n     */\r\n    select(...selection: string[]): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all old selections if they exist.\r\n     */\r\n    select(selection?: string|string[]): this {\r\n        this.type = \"select\";\r\n        if (selection) {\r\n            if (selection instanceof Array) {\r\n                this.selects = selection;\r\n            } else {\r\n                this.selects = [selection];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string): this;\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string[]): this;\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(...selection: string[]): this;\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string|string[]): this {\r\n        if (selection instanceof Array)\r\n            this.selects = this.selects.concat(selection);\r\n        else\r\n            this.selects.push(selection);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\", lockVersion: number): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\", lockVersion: Date): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"pessimistic_read\"|\"pessimistic_write\"): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\", lockVersion?: number|Date): this {\r\n        this.lockMode = lockMode;\r\n        this.lockVersion = lockVersion;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies FROM which entity's table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    from(entityTarget: Function|string, alias: string): this {\r\n        const aliasObj = new Alias(alias);\r\n        aliasObj.metadata = this.connection.getMetadata(entityTarget);\r\n        this.aliasMap.addMainAlias(aliasObj);\r\n        this.fromEntity = {alias: aliasObj};\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies FROM which table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    fromTable(tableName: string, alias: string) {\r\n        this.fromTableName = <string> tableName;\r\n        this.fromTableAlias = alias;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs (without selection) entity's property.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection) given entity's table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection) given table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection).\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) entity's property.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) entity's table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) given table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection).\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options);\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property and adds all selection properties to SELECT.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property and adds all selection properties to SELECT.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options);\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options, mapToProperty, true);\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options, mapToProperty, false);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options, mapToProperty, true);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options, mapToProperty, false);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs relation id.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    leftJoinRelationId(property: string, condition?: string): this {\r\n        return this.joinRelationId(\"LEFT\", undefined, property, condition);\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs relation id.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    innerJoinRelationId(property: string, condition?: string): this {\r\n        return this.joinRelationId(\"INNER\", undefined, property, condition);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    leftJoinRelationIdAndMap(mapToProperty: string, property: string, condition: string = \"\"): this {\r\n        return this.joinRelationId(\"INNER\", mapToProperty, property, condition);\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    innerJoinRelationIdAndMap(mapToProperty: string, property: string, condition: string = \"\"): this {\r\n        return this.joinRelationId(\"INNER\", mapToProperty, property, condition);\r\n    }\r\n\r\n    /**\r\n     * Counts number of entities of entity's relation.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    countRelation(property: string, condition: string = \"\"): this {\r\n\r\n        const [parentAliasName, parentPropertyName] = property.split(\".\");\r\n        const alias = parentAliasName + \"_\" + parentPropertyName + \"_relation_count\";\r\n\r\n        const aliasObj = new Alias(alias);\r\n        this.aliasMap.addAlias(aliasObj);\r\n        aliasObj.parentAliasName = parentAliasName;\r\n        aliasObj.parentPropertyName = parentPropertyName;\r\n\r\n        const relationCountMeta: RelationCountMeta = {\r\n            condition: condition,\r\n            alias: aliasObj,\r\n            entities: []\r\n        };\r\n        this.relationCountMetas.push(relationCountMeta);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Counts number of entities of entity's relation and maps the value into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    countRelationAndMap(mapProperty: string, property: string, condition: string = \"\"): this {\r\n\r\n        const [parentAliasName, parentPropertyName] = property.split(\".\");\r\n        const alias = parentAliasName + \"_\" + parentPropertyName + \"_relation_count\";\r\n        const aliasObj = new Alias(alias);\r\n        this.aliasMap.addAlias(aliasObj);\r\n        aliasObj.parentAliasName = parentAliasName;\r\n        aliasObj.parentPropertyName = parentPropertyName;\r\n\r\n        const relationCountMeta: RelationCountMeta = {\r\n            mapToProperty: mapProperty,\r\n            condition: condition,\r\n            alias: aliasObj,\r\n            entities: []\r\n        };\r\n        this.relationCountMetas.push(relationCountMeta);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: string, parameters?: ObjectLiteral): this {\r\n        this.wheres.push({ type: \"simple\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: string, parameters?: ObjectLiteral): this {\r\n        this.wheres.push({ type: \"and\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     *\r\n     * @experimental Maybe this method should be moved to repository?\r\n     */\r\n    andWhereInIds(ids: any[]): this {\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.andWhere(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: string, parameters?: ObjectLiteral): this {\r\n        this.wheres.push({ type: \"or\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     *\r\n     * @experimental Maybe this method should be moved to repository?\r\n     */\r\n    orWhereInIds(ids: any[]): this {\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.orWhere(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets HAVING condition in the query builder.\r\n     * If you had previously HAVING expression defined,\r\n     * calling this function will override previously set HAVING conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    having(having: string, parameters?: ObjectLiteral): this {\r\n        this.havings.push({ type: \"simple\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND HAVING condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andHaving(having: string, parameters?: ObjectLiteral): this {\r\n        this.havings.push({ type: \"and\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR HAVING condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orHaving(having: string, parameters?: ObjectLiteral): this {\r\n        this.havings.push({ type: \"or\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets GROUP BY condition in the query builder.\r\n     * If you had previously GROUP BY expression defined,\r\n     * calling this function will override previously set GROUP BY conditions.\r\n     */\r\n    groupBy(groupBy: string): this {\r\n        this.groupBys = [groupBy];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds GROUP BY condition in the query builder.\r\n     */\r\n    addGroupBy(groupBy: string): this {\r\n        this.groupBys.push(groupBy);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\"): this {\r\n        this.orderBys = { [sort]: order };\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds ORDER BY condition in the query builder.\r\n     */\r\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\"): this {\r\n        this.orderBys[sort] = order;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set's LIMIT - maximum number of rows to be selected.\r\n     * NOTE that it may not work as you expect if you are using joins.\r\n     * If you want to implement pagination, and you are having join in your query,\r\n     * then use instead setMaxResults instead.\r\n     */\r\n    setLimit(limit: number): this {\r\n        this.limit = limit;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set's OFFSET - selection offset.\r\n     * NOTE that it may not work as you expect if you are using joins.\r\n     * If you want to implement pagination, and you are having join in your query,\r\n     * then use instead setFirstResult instead.\r\n     */\r\n    setOffset(offset: number): this {\r\n        this.offset = offset;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets maximal number of entities to take.\r\n     */\r\n    take(take: number): this {\r\n        this.takeNumber = take;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets number of entities to skip\r\n     */\r\n    skip(skip: number): this {\r\n        this.skipNumber = skip;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets given parameter's value.\r\n     */\r\n    setParameter(key: string, value: any): this {\r\n        this.parameters[key] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds all parameters from the given object.\r\n     * Unlike setParameters method it does not clear all previously set parameters.\r\n     */\r\n    setParameters(parameters: ObjectLiteral): this {\r\n        Object.keys(parameters).forEach(key => {\r\n            this.parameters[key] = parameters[key];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds all parameters from the given object.\r\n     * Unlike setParameters method it does not clear all previously set parameters.\r\n     *\r\n     * @deprecated use setParameters instead\r\n     */\r\n    addParameters(parameters: ObjectLiteral): this {\r\n        Object.keys(parameters).forEach(key => {\r\n            this.parameters[key] = parameters[key];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets all parameters.\r\n     */\r\n    getParameters(): ObjectLiteral {\r\n        const parameters: ObjectLiteral = Object.assign({}, this.parameters);\r\n\r\n        // add discriminator column parameter if it exist\r\n        if (!this.fromTableName) {\r\n            const mainMetadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n            if (mainMetadata.hasDiscriminatorColumn)\r\n                parameters[\"discriminatorColumnValue\"] = mainMetadata.discriminatorValue;\r\n        }\r\n\r\n        return parameters;\r\n    }\r\n\r\n    /**\r\n     * Gets generated sql that will be executed.\r\n     * Parameters in the query are escaped for the currently used driver.\r\n     */\r\n    getSql(): string {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createJoinRelationIdsExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        [sql] = this.connection.driver.escapeQueryWithParameters(sql, this.parameters);\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Gets generated sql without parameters being replaced.\r\n     *\r\n     * @experimental\r\n     */\r\n    getGeneratedQuery(): string {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createJoinRelationIdsExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Gets sql to be executed with all parameters used in it.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSqlWithParameters(options?: { skipOrderBy?: boolean }): [string, any[]] {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createJoinRelationIdsExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        if (!options || !options.skipOrderBy)\r\n            sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        return this.connection.driver.escapeQueryWithParameters(sql, this.getParameters());\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<any> {\r\n        const queryRunner = await this.getQueryRunner();\r\n\r\n        const [sql, parameters] = this.getSqlWithParameters();\r\n        try {\r\n            return await queryRunner.query(sql, parameters);  // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\r\n     */\r\n    async getEntitiesAndRawResults(): Promise<{ entities: Entity[], rawResults: any[] }> {\r\n        const queryRunner = await this.getQueryRunner();\r\n\r\n        try {\r\n            if (!this.aliasMap.hasMainAlias)\r\n                throw new Error(`Alias is not set. Looks like nothing is selected. Use select*, delete, update method to set an alias.`);\r\n\r\n            if ((this.lockMode === \"pessimistic_read\" || this.lockMode === \"pessimistic_write\") && !queryRunner.isTransactionActive())\r\n                throw new PessimisticLockTransactionRequiredError();\r\n\r\n            if (this.lockMode === \"optimistic\") {\r\n                const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n                if (!metadata.hasVersionColumn && !metadata.hasUpdateDateColumn)\r\n                    throw new NoVersionOrUpdateDateColumnError(metadata.name);\r\n            }\r\n\r\n            const mainAliasName = this.fromTableName ? this.fromTableName : this.aliasMap.mainAlias.name;\r\n            let rawResults: any[];\r\n            if (this.skipNumber || this.takeNumber) {\r\n                // we are skipping order by here because its not working in subqueries anyway\r\n                // to make order by working we need to apply it on a distinct query\r\n                const [sql, parameters] = this.getSqlWithParameters({ skipOrderBy: true });\r\n                const [selects, orderBys] = this.createOrderByCombinedWithSelectExpression(\"distinctAlias\");\r\n\r\n                const distinctAlias = this.escapeTable(\"distinctAlias\");\r\n                const metadata = this.connection.getMetadata(this.fromEntity.alias.target);\r\n                let idsQuery = `SELECT `;\r\n                if (this.connection.driver instanceof OracleDriver) { // todo: :D\r\n                    idsQuery += `rownum rn,`;\r\n                }\r\n                idsQuery += metadata.primaryColumns.map((primaryColumn, index) => {\r\n                    const propertyName = this.escapeAlias(mainAliasName + \"_\" + primaryColumn.fullName);\r\n                    if (index === 0) {\r\n                        return `DISTINCT(${distinctAlias}.${propertyName}) as ids_${primaryColumn.fullName}`;\r\n                    } else {\r\n                        return `${distinctAlias}.${propertyName}) as ids_${primaryColumn.fullName}`;\r\n                    }\r\n                }).join(\", \");\r\n                if (selects.length > 0)\r\n                    idsQuery += \", \" + selects;\r\n\r\n                idsQuery += ` FROM (${sql}) ${distinctAlias}`; // TODO: WHAT TO DO WITH PARAMETERS HERE? DO THEY WORK?\r\n\r\n                if (orderBys.length > 0) {\r\n                    idsQuery += \" ORDER BY \" + orderBys;\r\n                } else {\r\n                    idsQuery += ` ORDER BY \"ids_${metadata.firstPrimaryColumn.fullName}\"`; // this is required for mssql driver if firstResult is used. Other drivers don't care about it\r\n                }\r\n\r\n                if (this.connection.driver instanceof SqlServerDriver) { // todo: temporary. need to refactor and make a proper abstraction\r\n\r\n                    if (this.skipNumber || this.takeNumber) {\r\n                        idsQuery += ` OFFSET ${this.skipNumber || 0} ROWS`;\r\n                        if (this.takeNumber)\r\n                            idsQuery += \" FETCH NEXT \" + this.takeNumber + \" ROWS ONLY\";\r\n                    }\r\n                } else if (this.connection.driver instanceof OracleDriver) { // todo: :D\r\n                    if (this.skipNumber || this.takeNumber) {\r\n                        idsQuery = `SELECT * FROM (${idsQuery}) WHERE rn >= ${this.skipNumber || 0}`;\r\n                        if (this.takeNumber)\r\n                            idsQuery += ` AND rn <= ${this.skipNumber + this.takeNumber}`;\r\n                    }\r\n                } else {\r\n\r\n                    if (this.takeNumber)\r\n                        idsQuery += \" LIMIT \" + this.takeNumber;\r\n                    if (this.skipNumber)\r\n                        idsQuery += \" OFFSET \" + this.skipNumber;\r\n                }\r\n\r\n                return await queryRunner.query(idsQuery, parameters)\r\n                    .then((results: any[]) => {\r\n                        rawResults = results;\r\n                        if (results.length === 0)\r\n                            return [];\r\n\r\n                        let condition = \"\";\r\n                        const parameters: ObjectLiteral = {};\r\n                        if (metadata.hasMultiplePrimaryKeys) {\r\n                            condition = results.map(result => {\r\n                                return metadata.primaryColumns.map(primaryColumn => {\r\n                                    parameters[\"ids_\" + primaryColumn.propertyName] = result[\"ids_\" + primaryColumn.propertyName];\r\n                                    return mainAliasName + \".\" + primaryColumn.propertyName + \"=:ids_\" + primaryColumn.propertyName;\r\n                                }).join(\" AND \");\r\n                            }).join(\" OR \");\r\n                        } else {\r\n                            const ids = results.map(result => result[\"ids_\" + metadata.firstPrimaryColumn.propertyName]);\r\n                            const areAllNumbers = ids.map((id: any) => typeof id === \"number\");\r\n                            if (areAllNumbers) {\r\n                                // fixes #190. if all numbers then its safe to perform query without parameter\r\n                                condition = `${mainAliasName}.${metadata.firstPrimaryColumn.propertyName} IN (${ids.join(\", \")})`;\r\n                            } else {\r\n                                parameters[\"ids\"] = ids;\r\n                                condition = mainAliasName + \".\" + metadata.firstPrimaryColumn.propertyName + \" IN (:ids)\";\r\n                            }\r\n                        }\r\n                        const [queryWithIdsSql, queryWithIdsParameters] = this.clone({queryRunnerProvider: this.queryRunnerProvider})\r\n                            .andWhere(condition, parameters)\r\n                            .getSqlWithParameters();\r\n                        return (queryRunner as QueryRunner).query(queryWithIdsSql, queryWithIdsParameters);\r\n                    })\r\n                    .then(results => {\r\n                        return this.rawResultsToEntities(results);\r\n                    })\r\n                    .then(results => {\r\n\r\n                        return this.loadRelationCounts(queryRunner as QueryRunner, results)\r\n                            .then(counts => {\r\n                                return results;\r\n                            });\r\n                    })\r\n                    .then(results => {\r\n                        if (!this.fromTableName)\r\n                            return this.connection.broadcaster.broadcastLoadEventsForAll(this.aliasMap.mainAlias.target, results).then(() => results);\r\n\r\n                        return results;\r\n                    })\r\n                    .then(results => {\r\n                        return {\r\n                            entities: results,\r\n                            rawResults: rawResults\r\n                        };\r\n                    });\r\n\r\n            } else {\r\n\r\n                const [sql, parameters] = this.getSqlWithParameters();\r\n\r\n                return await queryRunner.query(sql, parameters)\r\n                    .then(results => {\r\n                        rawResults = results;\r\n                        return this.rawResultsToEntities(results);\r\n                    })\r\n                    .then(results => {\r\n\r\n                        return this.loadRelationCounts(queryRunner as QueryRunner, results)\r\n                            .then(counts => {\r\n                                return results;\r\n                            });\r\n                    })\r\n                    .then(results => {\r\n                        if (!this.fromTableName) {\r\n                            return this.connection.broadcaster\r\n                                .broadcastLoadEventsForAll(this.aliasMap.mainAlias.target, results)\r\n                                .then(() => results);\r\n                        }\r\n                        return results;\r\n                    })\r\n                    .then(results => {\r\n                        return {\r\n                            entities: results,\r\n                            rawResults: rawResults\r\n                        };\r\n                    });\r\n            }\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets count - number of entities selected by sql generated by this query builder.\r\n     * Count excludes all limitations set by setFirstResult and setMaxResults methods call.\r\n     */\r\n    async getCount(): Promise<number> {\r\n        if (this.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const queryRunner = await this.getQueryRunner();\r\n\r\n        const mainAlias = this.fromTableName ? this.fromTableName : this.aliasMap.mainAlias.name; // todo: will this work with \"fromTableName\"?\r\n        const metadata = this.connection.getMetadata(this.fromEntity.alias.target);\r\n\r\n        const distinctAlias = this.escapeAlias(mainAlias);\r\n        let countSql = `COUNT(` + metadata.primaryColumnsWithParentIdColumns.map((primaryColumn, index) => {\r\n                const propertyName = this.escapeColumn(primaryColumn.fullName);\r\n                if (index === 0) {\r\n                    return `DISTINCT(${distinctAlias}.${propertyName})`;\r\n                } else {\r\n                    return `${distinctAlias}.${propertyName})`;\r\n                }\r\n            }).join(\", \") + \") as cnt\";\r\n\r\n        const countQuery = this\r\n            .clone({\r\n                queryRunnerProvider: this.queryRunnerProvider,\r\n                skipOrderBys: true,\r\n                ignoreParentTablesJoins: true,\r\n                skipLimit: true,\r\n                skipOffset: true\r\n            })\r\n            .select(countSql);\r\n\r\n        const [countQuerySql, countQueryParameters] = countQuery.getSqlWithParameters();\r\n\r\n        try {\r\n            const results = await queryRunner.query(countQuerySql, countQueryParameters);\r\n            if (!results || !results[0] || (!results[0][\"cnt\"] || !results[0][\"CNT\"]))\r\n                return 0;\r\n\r\n            return parseInt(results[0][\"cnt\"] ? results[0][\"cnt\"] : results[0][\"CNT\"]);\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all raw results returned by execution of generated query builder sql.\r\n     */\r\n    async getRawMany(): Promise<any[]> {\r\n        if (this.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        return this.execute();\r\n    }\r\n\r\n    /**\r\n     * Gets first raw result returned by execution of generated query builder sql.\r\n     */\r\n    async getRawOne(): Promise<any> {\r\n        if (this.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const results = await this.execute();\r\n        return results[0];\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets entities and count returned by execution of generated query builder sql.\r\n     */\r\n    async getManyAndCount(): Promise<[Entity[], number]> {\r\n        if (this.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        // todo: share database connection and counter\r\n        return Promise.all([\r\n            this.getMany(),\r\n            this.getCount()\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Gets entities returned by execution of generated query builder sql.\r\n     */\r\n    async getMany(): Promise<Entity[]> {\r\n        if (this.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const results = await this.getEntitiesAndRawResults();\r\n        return results.entities;\r\n    }\r\n\r\n    // logSql(): this {\r\n    //     console.log(this.getSql());\r\n    //     return this;\r\n    // }\r\n\r\n    /**\r\n     * Gets single entity returned by execution of generated query builder sql.\r\n     */\r\n    async getOne(): Promise<Entity|undefined> {\r\n        const results = await this.getEntitiesAndRawResults();\r\n        const result = results.entities[0] as any;\r\n\r\n        if (result && this.lockMode === \"optimistic\" && this.lockVersion) {\r\n            const metadata = this.connection.getMetadata(this.fromEntity.alias.target);\r\n\r\n            if (this.lockVersion instanceof Date) {\r\n                const actualVersion = result[metadata.updateDateColumn.propertyName];\r\n                this.lockVersion.setMilliseconds(0);\r\n                if (actualVersion.getTime() !== this.lockVersion.getTime())\r\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.lockVersion, actualVersion);\r\n\r\n            } else {\r\n                const actualVersion = result[metadata.versionColumn.propertyName];\r\n                if (actualVersion !== this.lockVersion)\r\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.lockVersion, actualVersion);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clones query builder as it is.\r\n     */\r\n    clone(options?: { queryRunnerProvider?: QueryRunnerProvider, skipOrderBys?: boolean, skipLimit?: boolean, skipOffset?: boolean, ignoreParentTablesJoins?: boolean }): QueryBuilder<Entity> {\r\n        const qb = new QueryBuilder(this.connection, options ? options.queryRunnerProvider : undefined);\r\n        if (options && options.ignoreParentTablesJoins)\r\n            qb.ignoreParentTablesJoins = options.ignoreParentTablesJoins;\r\n\r\n        switch (this.type) {\r\n            case \"select\":\r\n                qb.select(this.selects);\r\n                break;\r\n            case \"update\":\r\n                qb.update(this.updateQuerySet);\r\n                break;\r\n            case \"delete\":\r\n                qb.delete();\r\n                break;\r\n        }\r\n\r\n        if (this.fromEntity && this.fromEntity.alias && this.fromEntity.alias.target) {\r\n            qb.from(this.fromEntity.alias.target, this.fromEntity.alias.name);\r\n\r\n        } else if (this.fromTableName) {\r\n            qb.fromTable(this.fromTableName, this.fromTableAlias);\r\n        }\r\n\r\n        this.joins.forEach(join => {\r\n            let property = join.tableName || join.alias.target;\r\n            if (join.alias.parentAliasName && join.alias.parentPropertyName) {\r\n                property = join.alias.parentAliasName + \".\" + join.alias.parentPropertyName;\r\n            }\r\n            qb.join(join.type, property, join.alias.name, join.condition || \"\", undefined, join.mapToProperty, join.isMappingMany);\r\n        });\r\n\r\n        this.groupBys.forEach(groupBy => qb.addGroupBy(groupBy));\r\n\r\n        this.wheres.forEach(where => {\r\n            switch (where.type) {\r\n                case \"simple\":\r\n                    qb.where(where.condition);\r\n                    break;\r\n                case \"and\":\r\n                    qb.andWhere(where.condition);\r\n                    break;\r\n                case \"or\":\r\n                    qb.orWhere(where.condition);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.havings.forEach(having => {\r\n            switch (having.type) {\r\n                case \"simple\":\r\n                    qb.having(having.condition);\r\n                    break;\r\n                case \"and\":\r\n                    qb.andHaving(having.condition);\r\n                    break;\r\n                case \"or\":\r\n                    qb.orHaving(having.condition);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        if (!options || !options.skipOrderBys)\r\n            Object.keys(this.orderBys).forEach(columnName => qb.addOrderBy(columnName, this.orderBys[columnName]));\r\n\r\n        Object.keys(this.parameters).forEach(key => qb.setParameter(key, this.parameters[key]));\r\n\r\n        if (!options || !options.skipLimit)\r\n            qb.setLimit(this.limit);\r\n\r\n        if (!options || !options.skipOffset)\r\n            qb.setOffset(this.offset);\r\n\r\n        qb.skip(this.skipNumber)\r\n            .take(this.takeNumber);\r\n\r\n        return qb;\r\n    }\r\n\r\n    escapeAlias(name: string) {\r\n        if (!this.enableQuoting)\r\n            return name;\r\n        return this.connection.driver.escapeAliasName(name);\r\n    }\r\n\r\n    escapeColumn(name: string) {\r\n        if (!this.enableQuoting)\r\n            return name;\r\n        return this.connection.driver.escapeColumnName(name);\r\n    }\r\n\r\n    escapeTable(name: string) {\r\n        if (!this.enableQuoting)\r\n            return name;\r\n        return this.connection.driver.escapeTableName(name);\r\n    }\r\n\r\n    /**\r\n     * Enables special query builder options.\r\n     */\r\n    enableOption(option: \"RELATION_ID_VALUES\"): this {\r\n        switch (option) {\r\n            case \"RELATION_ID_VALUES\":\r\n                this.enableRelationIdValues = true;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected loadRelationCounts(queryRunner: QueryRunner, results: Entity[]): Promise<{}> {\r\n\r\n        const promises = this.relationCountMetas.map(relationCountMeta => {\r\n            const parentAlias = relationCountMeta.alias.parentAliasName;\r\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\r\n            if (!foundAlias)\r\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\r\n\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(foundAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\r\n\r\n            const relation = parentMetadata.findRelationWithPropertyName(relationCountMeta.alias.parentPropertyName);\r\n\r\n            const queryBuilder = new QueryBuilder(this.connection, this.queryRunnerProvider);\r\n            let condition = \"\";\r\n\r\n            const metadata = this.aliasMap.getEntityMetadataByAlias(relationCountMeta.alias);\r\n            if (!metadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + relationCountMeta.alias.name);\r\n\r\n            let joinTableName: string = metadata.table.name;\r\n\r\n            const junctionMetadata = relation.junctionEntityMetadata;\r\n            const appendedCondition = relationCountMeta.condition ? \" AND \" + this.replacePropertyNames(relationCountMeta.condition) : \"\";\r\n\r\n            /*if (relation.isManyToMany) {\r\n             const junctionTable = junctionMetadata.table.name;\r\n             const junctionAlias = relationCountMeta.alias.parentAliasName + \"_\" + relationCountMeta.alias.name;\r\n             const joinAlias = relationCountMeta.alias.name;\r\n             const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable; // not sure if this is correct\r\n             const joinTableColumn = joinTable.referencedColumn.name; // not sure if this is correct\r\n             const inverseJoinColumnName = joinTable.inverseReferencedColumn.name; // not sure if this is correct\r\n\r\n             let condition1 = \"\", condition2 = \"\";\r\n             if (relation.isOwning) {\r\n             condition1 = junctionAlias + \".\" + junctionMetadata.columns[0].name + \"=\" + parentAlias + \".\" + joinTableColumn;\r\n             condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[1].name;\r\n             } else {\r\n             condition1 = junctionAlias + \".\" + junctionMetadata.columns[1].name + \"=\" + parentAlias + \".\" + joinTableColumn;\r\n             condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[0].name;\r\n             }\r\n\r\n             condition = \" LEFT JOIN \" + junctionTable + \" \" + junctionAlias + \" \" + relationCountMeta.conditionType + \" \" + condition1 +\r\n             \" LEFT JOIN \" + joinTableName + \" \" + joinAlias + \" \" + relationCountMeta.conditionType + \" \" + condition2 + appendedCondition;\r\n\r\n             } else if (relation.isManyToOne || (relation.isOneToOne && relation.isOwning)) {\r\n             const joinTableColumn = relation.joinColumn.referencedColumn.name;\r\n             const condition2 = relationCountMeta.alias.name + \".\" + joinTableColumn + \"=\" + parentAlias + \".\" + relation.name;\r\n             condition = \" LEFT JOIN \" + joinTableName + \" \" + relationCountMeta.alias.name + \" \" + relationCountMeta.conditionType + \" \" + condition2 + appendedCondition;\r\n\r\n             } else {\r\n             throw new Error(`Relation count can be applied only `); // this should be done on entity build\r\n             }*/\r\n\r\n            // if (relationCountMeta.condition)\r\n            //     condition += relationCountMeta.condition;\r\n            // relationCountMeta.alias.target;\r\n            // todo: FIX primaryColumn usages\r\n\r\n            const ids = relationCountMeta.entities\r\n                .map(entityWithMetadata => entityWithMetadata.metadata.getEntityIdMap(entityWithMetadata.entity))\r\n                .filter(idMap => idMap !== undefined)\r\n                .map(idMap => idMap![parentMetadata.primaryColumn.propertyName]);\r\n            if (!ids || !ids.length)\r\n                return Promise.resolve(); // todo: need to set zero to relationCount column in this case?\r\n\r\n            return queryBuilder\r\n                .select(`${parentMetadata.name + \".\" + parentMetadata.primaryColumn.propertyName} AS id`)\r\n                .addSelect(`COUNT(${ this.escapeAlias(relation.propertyName) + \".\" + this.escapeColumn(relation.inverseEntityMetadata.primaryColumn.fullName) }) as cnt`)\r\n                .from(parentMetadata.target, parentMetadata.name)\r\n                .leftJoin(parentMetadata.name + \".\" + relation.propertyName, relation.propertyName, relationCountMeta.condition)\r\n                .setParameters(this.parameters)\r\n                .where(`${parentMetadata.name + \".\" + parentMetadata.primaryColumn.propertyName} IN (:relationCountIds)`, {relationCountIds: ids})\r\n                .groupBy(parentMetadata.name + \".\" + parentMetadata.primaryColumn.propertyName)\r\n                .getRawMany()\r\n                .then((results: { id: any, cnt: any }[]) => {\r\n                    relationCountMeta.entities.forEach(entityWithMetadata => {\r\n                        const entityId = entityWithMetadata.entity[entityWithMetadata.metadata.primaryColumn.propertyName];\r\n                        const entityResult = results.find(result => {\r\n                            return entityId === this.connection.driver.prepareHydratedValue(result.id, entityWithMetadata.metadata.primaryColumn);\r\n                        });\r\n                        if (entityResult) {\r\n\r\n                            if (relationCountMeta.mapToProperty) {\r\n                                const [parentName, propertyName] = (relationCountMeta.mapToProperty as string).split(\".\");\r\n                                // todo: right now mapping is working only on the currently countRelation class, but\r\n                                // different properties are working. make different classes to work too\r\n                                entityWithMetadata.entity[propertyName] = parseInt(entityResult.cnt);\r\n\r\n                            } else if (relation.countField) {\r\n                                entityWithMetadata.entity[relation.countField] = parseInt(entityResult.cnt);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n        });\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    protected rawResultsToEntities(results: any[]) {\r\n        const transformer = new RawSqlResultsToEntityTransformer(this.connection.driver, this.aliasMap, this.extractJoinMappings(), this.relationCountMetas, this.enableRelationIdValues);\r\n        return transformer.transform(results);\r\n    }\r\n\r\n    protected buildEscapedEntityColumnSelects(alias: Alias): string[] {\r\n        const hasMainAlias = this.selects.some(select => select === alias.name);\r\n\r\n        const columns: ColumnMetadata[] = hasMainAlias ? alias.metadata.columns : alias.metadata.columns.filter(column => {\r\n            return this.selects.some(select => select === alias.name + \".\" + column.propertyName);\r\n        });\r\n\r\n        return columns.map(column => {\r\n            return this.escapeAlias(alias.name) + \".\" + this.escapeColumn(column.fullName) +\r\n                \" AS \" + this.escapeAlias(alias.name + \"_\" + column.fullName);\r\n        });\r\n    };\r\n\r\n    protected findEntityColumnSelects(alias: Alias): string[] {\r\n        const mainAlias = this.selects.find(select => select === alias.name);\r\n        if (mainAlias)\r\n            return [mainAlias];\r\n\r\n        return this.selects.filter(select => {\r\n            return alias.metadata.columns.some(column => select === alias.name + \".\" + column.propertyName);\r\n        });\r\n    };\r\n\r\n    protected createSelectExpression() {\r\n        // todo throw exception if selects or from is missing\r\n\r\n        let alias: string = \"\", tableName: string;\r\n        const allSelects: string[] = [];\r\n        const excludedSelects: string[] = [];\r\n\r\n        if (this.fromTableName) {\r\n            tableName = this.fromTableName;\r\n            alias = this.fromTableAlias;\r\n\r\n        } else if (this.fromEntity) {\r\n            if (!this.fromEntity.alias.metadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.fromEntity.alias.name);\r\n            tableName = this.fromEntity.alias.metadata.table.name;\r\n            alias = this.fromEntity.alias.name;\r\n\r\n            allSelects.push(...this.buildEscapedEntityColumnSelects(this.aliasMap.mainAlias));\r\n            excludedSelects.push(...this.findEntityColumnSelects(this.aliasMap.mainAlias));\r\n        } else {\r\n            throw new Error(\"No from given\");\r\n        }\r\n\r\n        // add selects from joins\r\n        this.joins.forEach(join => {\r\n            if (join.alias.metadata) {\r\n                allSelects.push(...this.buildEscapedEntityColumnSelects(join.alias));\r\n                excludedSelects.push(...this.findEntityColumnSelects(join.alias));\r\n            } else {\r\n                const hasMainAlias = this.selects.some(select => select === join.alias.name);\r\n                if (hasMainAlias) {\r\n                    allSelects.push(this.escapeAlias(join.alias.name) + \".*\");\r\n                    excludedSelects.push(join.alias.name);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!this.ignoreParentTablesJoins && !this.fromTableName) {\r\n            if (this.aliasMap.mainAlias.metadata.parentEntityMetadata && this.aliasMap.mainAlias.metadata.parentIdColumns) {\r\n                const alias = \"parentIdColumn_\" + this.escapeAlias(this.aliasMap.mainAlias.metadata.parentEntityMetadata.table.name);\r\n                this.aliasMap.mainAlias.metadata.parentEntityMetadata.columns.forEach(column => {\r\n                    // TODO implement partial select\r\n                    allSelects.push(alias + \".\" + this.escapeColumn(column.fullName) + \" AS \" + alias + \"_\" + this.escapeAlias(column.fullName));\r\n                });\r\n            }\r\n        }\r\n\r\n        // add selects from relation id joins\r\n        this.joinRelationIds.forEach(join => {\r\n            // const joinMetadata = this.aliasMap.getEntityMetadataByAlias(join.alias);\r\n\r\n            const parentAlias = join.alias.parentAliasName;\r\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\r\n            if (!foundAlias)\r\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\r\n\r\n            if (!foundAlias.metadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\r\n            const relation = foundAlias.metadata.findRelationWithPropertyName(join.alias.parentPropertyName);\r\n            const junctionMetadata = relation.junctionEntityMetadata;\r\n            // const junctionTable = junctionMetadata.table.name;\r\n\r\n            junctionMetadata.columns.forEach(column => {\r\n                allSelects.push(this.escapeAlias(join.alias.name) + \".\" + this.escapeColumn(column.fullName) + \" AS \" + this.escapeAlias(join.alias.name + \"_\" + column.fullName));\r\n            });\r\n        });\r\n\r\n        /*if (this.enableRelationIdValues) {\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(this.aliasMap.mainAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.aliasMap.mainAlias.name);\r\n\r\n            const metadata = this.connection.entityMetadatas.findByTarget(this.aliasMap.mainAlias.target);\r\n            metadata.manyToManyRelations.forEach(relation => {\r\n\r\n                const junctionMetadata = relation.junctionEntityMetadata;\r\n                junctionMetadata.columns.forEach(column => {\r\n                    const select = this.escapeAlias(this.aliasMap.mainAlias.name + \"_\" + junctionMetadata.table.name + \"_ids\") + \".\" +\r\n                        this.escapeColumn(column.name) + \" AS \" +\r\n                        this.escapeAlias(this.aliasMap.mainAlias.name + \"_\" + relation.name + \"_ids_\" + column.name);\r\n                    allSelects.push(select);\r\n                });\r\n            });\r\n        }*/\r\n\r\n        // add all other selects\r\n        this.selects.filter(select => excludedSelects.indexOf(select) === -1)\r\n            .forEach(select => allSelects.push(this.replacePropertyNames(select)));\r\n\r\n        // if still selection is empty, then simply set it to all (*)\r\n        if (allSelects.length === 0)\r\n            allSelects.push(\"*\");\r\n\r\n        let lock: string = \"\";\r\n        if (this.connection.driver instanceof SqlServerDriver) {\r\n            switch (this.lockMode) {\r\n                case \"pessimistic_read\":\r\n                    lock = \" WITH (HOLDLOCK, ROWLOCK)\";\r\n                    break;\r\n                case \"pessimistic_write\":\r\n                    lock = \" WITH (UPDLOCK, ROWLOCK)\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // create a selection query\r\n        switch (this.type) {\r\n            case \"select\":\r\n                return \"SELECT \" + allSelects.join(\", \") + \" FROM \" + this.escapeTable(tableName) + \" \" + this.escapeAlias(alias) + lock;\r\n            case \"delete\":\r\n                return \"DELETE FROM \" + this.escapeTable(tableName);\r\n                // return \"DELETE \" + (alias ? this.escapeAlias(alias) : \"\") + \" FROM \" + this.escapeTable(tableName) + \" \" + (alias ? this.escapeAlias(alias) : \"\"); // TODO: only mysql supports aliasing, so what to do with aliases in DELETE queries? right now aliases are used however we are relaying that they will always match a table names\r\n            case \"update\":\r\n                const updateSet = Object.keys(this.updateQuerySet).map(key => key + \"=:updateQuerySet_\" + key);\r\n                const params = Object.keys(this.updateQuerySet).reduce((object, key) => {\r\n                    // todo: map propertyNames to names ?\r\n                    (<any> object)[\"updateQuerySet_\" + key] = (<any> this.updateQuerySet)[key];\r\n                    return object;\r\n                }, {});\r\n                this.setParameters(params);\r\n                return \"UPDATE \" + tableName + \" \" + (alias ? this.escapeAlias(alias) : \"\") + \" SET \" + updateSet;\r\n        }\r\n\r\n        throw new Error(\"No query builder type is specified.\");\r\n    }\r\n\r\n    protected createHavingExpression() {\r\n        if (!this.havings || !this.havings.length) return \"\";\r\n        const conditions = this.havings.map((having, index) => {\r\n                switch (having.type) {\r\n                    case \"and\":\r\n                        return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(having.condition);\r\n                    case \"or\":\r\n                        return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(having.condition);\r\n                    default:\r\n                        return this.replacePropertyNames(having.condition);\r\n                }\r\n            }).join(\" \");\r\n\r\n        if (!conditions.length) return \"\";\r\n        return \" HAVING \" + conditions;\r\n    }\r\n\r\n    protected createWhereExpression() {\r\n\r\n        const conditions = this.wheres.map((where, index) => {\r\n            switch (where.type) {\r\n                case \"and\":\r\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(where.condition);\r\n                case \"or\":\r\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(where.condition);\r\n                default:\r\n                    return this.replacePropertyNames(where.condition);\r\n            }\r\n        }).join(\" \");\r\n\r\n        if (!this.fromTableName) {\r\n            const mainMetadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n            if (mainMetadata.hasDiscriminatorColumn)\r\n                return ` WHERE ${ conditions.length ? \"(\" + conditions + \") AND\" : \"\" } ${mainMetadata.discriminatorColumn.fullName}=:discriminatorColumnValue`;\r\n        }\r\n\r\n        if (!conditions.length) return \"\";\r\n        return \" WHERE \" + conditions;\r\n    }\r\n\r\n    /**\r\n     * Replaces all entity's propertyName to name in the given statement.\r\n     */\r\n    private replacePropertyNames(statement: string) {\r\n        this.aliasMap.aliases.forEach(alias => {\r\n            if (!alias.metadata) return;\r\n            alias.metadata.embeddeds.forEach(embedded => {\r\n                embedded.columns.forEach(column => {\r\n                    const expression = alias.name + \"\\\\.\" + embedded.propertyName + \"\\\\.\" + column.propertyName + \"([ =]|.{0}$)\";\r\n                    statement = statement.replace(new RegExp(expression, \"gm\"), this.escapeAlias(alias.name) + \".\" + this.escapeColumn(column.fullName) + \"$1\");\r\n                });\r\n                // todo: what about embedded relations here?\r\n            });\r\n            alias.metadata.columns.filter(column => !column.isInEmbedded).forEach(column => {\r\n                const expression = alias.name + \"\\\\.\" + column.propertyName + \"([ =]|.{0}$)\";\r\n                statement = statement.replace(new RegExp(expression, \"gm\"), this.escapeAlias(alias.name) + \".\" + this.escapeColumn(column.fullName) + \"$1\");\r\n            });\r\n            alias.metadata.relationsWithJoinColumns/*.filter(relation => !relation.isInEmbedded)*/.forEach(relation => {\r\n                const expression = alias.name + \"\\\\.\" + relation.propertyName + \"([ =]|.{0}$)\";\r\n                statement = statement.replace(new RegExp(expression, \"gm\"), this.escapeAlias(alias.name) + \".\" + this.escapeColumn(relation.name) + \"$1\");\r\n            });\r\n        });\r\n        return statement;\r\n    }\r\n\r\n    protected createJoinRelationIdsExpression() {\r\n        return this.joinRelationIds.map(join => {\r\n            const parentAlias = join.alias.parentAliasName;\r\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\r\n            if (!foundAlias)\r\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\r\n\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(foundAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\r\n\r\n            const relation = parentMetadata.findRelationWithPropertyName(join.alias.parentPropertyName);\r\n            const junctionMetadata = relation.junctionEntityMetadata;\r\n            const junctionTable = junctionMetadata.table.name;\r\n            const junctionAlias = join.alias.name;\r\n            const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable; // not sure if this is correct\r\n            const joinTableColumn = joinTable.referencedColumn.fullName; // not sure if this is correct\r\n\r\n            let condition1 = \"\";\r\n            if (relation.isOwning) {\r\n                condition1 = this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[0].fullName) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(joinTableColumn);\r\n                // condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[1].name;\r\n            } else {\r\n                condition1 = this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[1].fullName) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(joinTableColumn);\r\n                // condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[0].name;\r\n            }\r\n\r\n            return \" \" + join.type + \" JOIN \" + junctionTable + \" \" + this.escapeAlias(junctionAlias) + \" ON \" + condition1;\r\n            // \" \" + joinType + \" JOIN \" + joinTableName + \" \" + joinAlias + \" \" + join.conditionType + \" \" + condition2 + appendedCondition;\r\n            // return \" \" + join.type + \" JOIN \" + joinTableName + \" \" + join.alias.name + \" \" + (join.condition ? (join.conditionType + \" \" + join.condition) : \"\");\r\n        });\r\n    }\r\n\r\n    protected createJoinExpression() {\r\n        let joins = this.joins.map(join => {\r\n            const joinType = join.type; // === \"INNER\" ? \"INNER\" : \"LEFT\";\r\n            let joinTableName: string = join.tableName;\r\n            if (!joinTableName) {\r\n\r\n                if (!join.alias.metadata)\r\n                    throw new Error(\"Cannot get entity metadata for the given alias \" + join.alias.name);\r\n\r\n                joinTableName = join.alias.metadata.table.name;\r\n            }\r\n\r\n            const parentAlias = join.alias.parentAliasName;\r\n            if (!parentAlias) {\r\n                return \" \" + joinType + \" JOIN \" + this.escapeTable(joinTableName) + \" \" + this.escapeAlias(join.alias.name) + \" \" + (join.condition ? ( \"ON \" + this.replacePropertyNames(join.condition) ) : \"\");\r\n            }\r\n\r\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\r\n            if (!foundAlias)\r\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\r\n\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(foundAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\r\n\r\n            const relation = parentMetadata.findRelationWithPropertyName(join.alias.parentPropertyName);\r\n            const junctionMetadata = relation.junctionEntityMetadata;\r\n            const appendedCondition = join.condition ? \" AND \" + this.replacePropertyNames(join.condition) : \"\";\r\n\r\n            if (relation.isManyToMany) {\r\n                const junctionTable = junctionMetadata.table.name;\r\n                const junctionAlias = join.alias.parentAliasName + \"_\" + join.alias.name;\r\n                const joinAlias = join.alias.name;\r\n                const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable;\r\n                const joinTableColumn = relation.isOwning ? joinTable.referencedColumn.fullName : joinTable.inverseReferencedColumn.fullName;\r\n                const inverseJoinColumnName = relation.isOwning ? joinTable.inverseReferencedColumn.fullName : joinTable.referencedColumn.fullName;\r\n\r\n                let condition1 = \"\", condition2 = \"\";\r\n                if (relation.isOwning) {\r\n                    condition1 = this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[0].fullName) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(joinTableColumn);\r\n                    condition2 = this.escapeAlias(joinAlias) + \".\" + this.escapeColumn(inverseJoinColumnName) + \"=\" + this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[1].fullName);\r\n                } else {\r\n                    condition1 = this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[1].fullName) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(joinTableColumn);\r\n                    condition2 = this.escapeAlias(joinAlias) + \".\" + this.escapeColumn(inverseJoinColumnName) + \"=\" + this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[0].fullName);\r\n                }\r\n\r\n                return \" \" + joinType + \" JOIN \" + this.escapeTable(junctionTable) + \" \" + this.escapeAlias(junctionAlias) + \" ON \" + condition1 +\r\n                       \" \" + joinType + \" JOIN \" + this.escapeTable(joinTableName) + \" \" + this.escapeAlias(joinAlias) + \" ON \" + condition2 + appendedCondition;\r\n\r\n            } else if (relation.isManyToOne || (relation.isOneToOne && relation.isOwning)) {\r\n                const joinTableColumn = relation.joinColumn.referencedColumn.fullName;\r\n                const condition = this.escapeAlias(join.alias.name) + \".\" + this.escapeColumn(joinTableColumn) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(relation.name);\r\n                return \" \" + joinType + \" JOIN \" + this.escapeTable(joinTableName) + \" \" + this.escapeAlias(join.alias.name) + \" ON \" + condition + appendedCondition;\r\n\r\n            } else if (relation.isOneToMany || (relation.isOneToOne && !relation.isOwning)) {\r\n                const joinTableColumn = relation.inverseRelation.joinColumn.referencedColumn.fullName;\r\n                const condition = this.escapeAlias(join.alias.name) + \".\" + this.escapeColumn(relation.inverseRelation.name) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(joinTableColumn);\r\n                return \" \" + joinType + \" JOIN \" + this.escapeTable(joinTableName) + \" \" + this.escapeAlias(join.alias.name) + \" ON \" + condition + appendedCondition;\r\n\r\n            } else {\r\n                throw new Error(\"Unexpected relation type\"); // this should not be possible\r\n            }\r\n        }).join(\" \");\r\n\r\n        if (!this.ignoreParentTablesJoins && !this.fromTableName) {\r\n            const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n            if (metadata.parentEntityMetadata && metadata.parentIdColumns) {\r\n                const alias = this.escapeAlias(\"parentIdColumn_\" + metadata.parentEntityMetadata.table.name);\r\n                joins += \" JOIN \" + this.escapeTable(metadata.parentEntityMetadata.table.name)\r\n                    + \" \" + alias + \" ON \";\r\n                joins += metadata.parentIdColumns.map(parentIdColumn => {\r\n                    return this.aliasMap.mainAlias.name + \".\" + parentIdColumn.fullName + \"=\" + alias + \".\" + parentIdColumn.propertyName;\r\n                });\r\n            }\r\n        }\r\n\r\n        /*if (this.enableRelationIdValues) {\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(this.aliasMap.mainAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.aliasMap.mainAlias.name);\r\n\r\n            const metadata = this.connection.entityMetadatas.findByTarget(this.aliasMap.mainAlias.target);\r\n            joins += metadata.manyToManyRelations.map(relation => {\r\n\r\n                const junctionMetadata = relation.junctionEntityMetadata;\r\n                const junctionTable = junctionMetadata.table.name;\r\n                const junctionAlias = this.aliasMap.mainAlias.name + \"_\" + junctionTable + \"_ids\";\r\n                const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable; // not sure if this is correct\r\n                const joinTableColumn = joinTable.referencedColumn.name; // not sure if this is correct\r\n\r\n                let condition1 = \"\";\r\n                if (relation.isOwning) {\r\n                    condition1 = this.escapeAlias(junctionAlias) + \".\" +\r\n                        this.escapeColumn(junctionMetadata.columns[0].name) + \"=\" +\r\n                        this.escapeAlias(this.aliasMap.mainAlias.name) + \".\" +\r\n                        this.escapeColumn(joinTableColumn);\r\n                } else {\r\n                    condition1 = this.escapeAlias(junctionAlias) + \".\" +\r\n                        this.escapeColumn(junctionMetadata.columns[1].name) + \"=\" +\r\n                        this.escapeAlias(this.aliasMap.mainAlias.name) + \".\" +\r\n                        this.escapeColumn(joinTableColumn);\r\n                }\r\n\r\n                return \" LEFT JOIN \" + junctionTable + \" \" + this.escapeAlias(junctionAlias) + \" ON \" + condition1;\r\n            }).join(\" \");\r\n        }*/\r\n\r\n        return joins;\r\n    }\r\n\r\n    protected createGroupByExpression() {\r\n        if (!this.groupBys || !this.groupBys.length) return \"\";\r\n        return \" GROUP BY \" + this.replacePropertyNames(this.groupBys.join(\", \"));\r\n    }\r\n\r\n    protected createOrderByCombinedWithSelectExpression(parentAlias: string) {\r\n\r\n        // if table has a default order then apply it\r\n        let orderBys = this.orderBys;\r\n        if (!Object.keys(orderBys).length && !this.fromTableName) {\r\n            const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n            orderBys = metadata.table.orderBy || {};\r\n        }\r\n\r\n        const selectString = Object.keys(orderBys)\r\n            .map(columnName => {\r\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\r\n                return this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(alias + \"_\" + column + embeddedProperties.join(\"_\"));\r\n            })\r\n            .join(\", \");\r\n\r\n        const orderByString = Object.keys(orderBys)\r\n            .map(columnName => {\r\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\r\n                return this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(alias + \"_\" + column + embeddedProperties.join(\"_\")) + \" \" + this.orderBys[columnName];\r\n            })\r\n            .join(\", \");\r\n\r\n        return [selectString, orderByString];\r\n    }\r\n\r\n    protected createOrderByExpression() {\r\n\r\n        let orderBys = this.orderBys;\r\n\r\n        // if table has a default order then apply it\r\n        if (!Object.keys(orderBys).length && !this.fromTableName) {\r\n            const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n            orderBys = metadata.table.orderBy || {};\r\n        }\r\n\r\n        // if user specified a custom order then apply it\r\n        if (Object.keys(orderBys).length > 0)\r\n            return \" ORDER BY \" + Object.keys(orderBys)\r\n                    .map(columnName => {\r\n                        return this.replacePropertyNames(columnName) + \" \" + this.orderBys[columnName];\r\n                    })\r\n                    .join(\", \");\r\n\r\n        return \"\";\r\n    }\r\n\r\n    protected createLimitExpression(): string {\r\n        if (!this.limit) return \"\";\r\n        return \" LIMIT \" + this.limit;\r\n    }\r\n\r\n    protected createOffsetExpression(): string {\r\n        if (!this.offset) return \"\";\r\n        return \" OFFSET \" + this.offset;\r\n    }\r\n\r\n    protected createLockExpression(): string {\r\n        switch (this.lockMode) {\r\n            case \"pessimistic_read\":\r\n                if (this.connection.driver instanceof MysqlDriver) {\r\n                    return \" LOCK IN SHARE MODE\";\r\n\r\n                } else if (this.connection.driver instanceof PostgresDriver) {\r\n                    return \" FOR SHARE\";\r\n\r\n                } else if (this.connection.driver instanceof SqlServerDriver) {\r\n                    return \"\";\r\n\r\n                } else {\r\n                    throw new LockNotSupportedOnGivenDriverError();\r\n                }\r\n            case \"pessimistic_write\":\r\n                if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof PostgresDriver) {\r\n                    return \" FOR UPDATE\";\r\n\r\n                } else if (this.connection.driver instanceof SqlServerDriver) {\r\n                    return \"\";\r\n\r\n                } else {\r\n                    throw new LockNotSupportedOnGivenDriverError();\r\n                }\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    private extractJoinMappings(): JoinMapping[] {\r\n        const mappings: JoinMapping[] = [];\r\n        this.joins\r\n            .filter(join => !!join.mapToProperty)\r\n            .forEach(join => {\r\n                const [parentName, propertyName] = (join.mapToProperty as string).split(\".\");\r\n                mappings.push({\r\n                    type: \"join\",\r\n                    alias: join.alias,\r\n                    parentName: parentName,\r\n                    propertyName: propertyName,\r\n                    isMany: join.isMappingMany\r\n                } as JoinMapping);\r\n            });\r\n\r\n        this.joinRelationIds\r\n            .filter(join => !!join.mapToProperty)\r\n            .forEach(join => {\r\n                const [parentName, propertyName] = (join.mapToProperty as string).split(\".\");\r\n                mappings.push({\r\n                    type: \"relationId\",\r\n                    alias: join.alias,\r\n                    parentName: parentName,\r\n                    propertyName: propertyName,\r\n                    isMany: false\r\n                });\r\n            });\r\n\r\n        return mappings;\r\n    }\r\n\r\n    protected join(joinType: \"INNER\"|\"LEFT\", property: string, alias: string, condition?: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): this;\r\n    protected join(joinType: \"INNER\"|\"LEFT\", entity: Function, alias: string, condition?: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): this;\r\n    protected join(joinType: \"INNER\"|\"LEFT\", entityOrProperty: Function|string, alias: string, condition: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): this;\r\n    protected join(joinType: \"INNER\"|\"LEFT\", entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions, mapToProperty?: string, isMappingMany: boolean = false): this {\r\n\r\n        // todo: entityOrProperty can be a table name. implement if its a table\r\n        // todo: entityOrProperty can be target name. implement proper behaviour if it is.\r\n\r\n        let tableName = \"\";\r\n        const aliasObj = new Alias(alias);\r\n        this.aliasMap.addAlias(aliasObj);\r\n        if (entityOrProperty instanceof Function) {\r\n            aliasObj.metadata = this.connection.getMetadata(entityOrProperty);\r\n\r\n        } else if (this.isPropertyAlias(entityOrProperty)) {\r\n            [aliasObj.parentAliasName, aliasObj.parentPropertyName] = entityOrProperty.split(\".\");\r\n\r\n            const parentAlias = this.aliasMap.findAliasByName(aliasObj.parentAliasName);\r\n            // todo: throw exception if parentAlias not found\r\n            // todo: throw exception if parentAlias.metadata not found\r\n            // todo: throw exception if parentAlias not found\r\n            // todo: throw exception if relation not found?\r\n            const relation = parentAlias!.metadata.findRelationWithPropertyName(aliasObj.parentPropertyName);\r\n            aliasObj.metadata = relation.inverseEntityMetadata;\r\n\r\n        } else if (typeof entityOrProperty === \"string\") {\r\n\r\n            // check if we have entity with such table name, and use its metadata if found\r\n            const metadata = this.connection.entityMetadatas.find(metadata => metadata.table.name === entityOrProperty);\r\n            if (metadata) {\r\n                aliasObj.metadata = metadata;\r\n            } else {\r\n                tableName = entityOrProperty;\r\n            }\r\n\r\n            if (!mapToProperty) // todo: comment why its needed\r\n                mapToProperty = entityOrProperty;\r\n        }\r\n\r\n        const join: Join = {\r\n            type: joinType,\r\n            alias: aliasObj,\r\n            tableName: tableName,\r\n            condition: condition,\r\n            options: options,\r\n            mapToProperty: mapToProperty,\r\n            isMappingMany: isMappingMany\r\n        };\r\n        this.joins.push(join);\r\n        return this;\r\n    }\r\n\r\n    protected joinRelationId(joinType: \"LEFT\"|\"INNER\", mapToProperty: string|undefined, property: string, condition?: string): this {\r\n\r\n        if (!this.isPropertyAlias(property))\r\n            throw new Error(\"Only entity relations are allowed in the leftJoinRelationId operation\"); // todo: also check if that relation really has entityId\r\n\r\n        const [parentAliasName, parentPropertyName] = property.split(\".\");\r\n        const alias = parentAliasName + \"_\" + parentPropertyName + \"_relation_id\";\r\n\r\n        const aliasObj = new Alias(alias);\r\n        this.aliasMap.addAlias(aliasObj);\r\n        aliasObj.parentAliasName = parentAliasName;\r\n        aliasObj.parentPropertyName = parentPropertyName;\r\n\r\n        this.joinRelationIds.push({\r\n            type: joinType,\r\n            mapToProperty: mapToProperty,\r\n            alias: aliasObj,\r\n            condition: condition\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    private isPropertyAlias(str: any): str is string {\r\n        if (!(typeof str === \"string\"))\r\n            return false;\r\n        if (str.indexOf(\".\") === -1)\r\n            return false;\r\n\r\n        const aliasName = str.split(\".\")[0];\r\n        const propertyName = str.split(\".\")[1];\r\n\r\n        if (!aliasName || !propertyName)\r\n            return false;\r\n\r\n        const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\r\n        const propertyNameRegexp = aliasNameRegexp;\r\n        if (!aliasNameRegexp.test(aliasName) || !propertyNameRegexp.test(propertyName))\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\r\n     */\r\n    protected createWhereIdsExpression(ids: any[]): [string, ObjectLiteral] {\r\n        const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n\r\n        // create shortcuts for better readability\r\n        const escapeAlias = (alias: string) => this.escapeAlias(alias);\r\n        const escapeColumn = (column: string) => this.escapeColumn(column);\r\n\r\n        const alias = this.aliasMap.mainAlias.name;\r\n        const parameters: ObjectLiteral = {};\r\n        const whereStrings = ids.map((id, index) => {\r\n            const whereSubStrings: string[] = [];\r\n            if (metadata.hasMultiplePrimaryKeys) {\r\n                metadata.primaryColumns.forEach((primaryColumn, secondIndex) => {\r\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(primaryColumn.fullName) + \"=:id_\" + index + \"_\" + secondIndex);\r\n                    parameters[\"id_\" + index + \"_\" + secondIndex] = id[primaryColumn.fullName];\r\n                });\r\n                metadata.parentIdColumns.forEach((primaryColumn, secondIndex) => {\r\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(id[primaryColumn.fullName]) + \"=:parentId_\" + index + \"_\" + secondIndex);\r\n                    parameters[\"parentId_\" + index + \"_\" + secondIndex] = id[primaryColumn.propertyName];\r\n                });\r\n            } else {\r\n                if (metadata.primaryColumns.length > 0) {\r\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(metadata.firstPrimaryColumn.fullName) + \"=:id_\" + index);\r\n                    parameters[\"id_\" + index] = id;\r\n\r\n                } else if (metadata.parentIdColumns.length > 0) {\r\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(metadata.parentIdColumns[0].fullName) + \"=:parentId_\" + index);\r\n                    parameters[\"parentId_\" + index] = id;\r\n                }\r\n            }\r\n            return whereSubStrings.join(\" AND \");\r\n        });\r\n\r\n        const whereString = whereStrings.length > 1 ? \"(\" + whereStrings.join(\" OR \") + \")\" : whereStrings[0];\r\n        return [whereString, parameters];\r\n    }\r\n\r\n    protected async getQueryRunner(): Promise<QueryRunner> {\r\n\r\n        if (this.queryRunnerProvider instanceof QueryRunnerProvider) {\r\n            return this.queryRunnerProvider.provide();\r\n\r\n        } else { // means its empty\r\n            return this.connection.driver.createQueryRunner();\r\n        }\r\n    }\r\n\r\n    protected hasOwnQueryRunner(): boolean {\r\n        return !this.queryRunnerProvider;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}