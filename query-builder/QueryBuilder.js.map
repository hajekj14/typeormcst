{"version":3,"sources":["../../src/query-builder/QueryBuilder.ts"],"names":[],"mappings":"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","file":"QueryBuilder.js","sourcesContent":["import { OracleDriver } from '../driver/oracle/OracleDriver';\r\nimport { RawSqlResultsToEntityTransformer } from \"./transformer/RawSqlResultsToEntityTransformer\";\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\";\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\";\r\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\r\nimport { Connection } from \"../connection/Connection\";\r\nimport { JoinOptions } from \"./JoinOptions\";\r\nimport { QueryRunnerProvider } from \"../query-runner/QueryRunnerProvider\";\r\nimport { PessimisticLockTransactionRequiredError } from \"./error/PessimisticLockTransactionRequiredError\";\r\nimport { NoVersionOrUpdateDateColumnError } from \"./error/NoVersionOrUpdateDateColumnError\";\r\nimport { OptimisticLockVersionMismatchError } from \"./error/OptimisticLockVersionMismatchError\";\r\nimport { OptimisticLockCanNotBeUsedError } from \"./error/OptimisticLockCanNotBeUsedError\";\r\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\r\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\r\nimport { LockNotSupportedOnGivenDriverError } from \"./error/LockNotSupportedOnGivenDriverError\";\r\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\r\nimport { JoinAttribute } from \"./JoinAttribute\";\r\nimport { RelationIdAttribute } from \"./relation-id/RelationIdAttribute\";\r\nimport { RelationCountAttribute } from \"./relation-count/RelationCountAttribute\";\r\nimport { QueryExpressionMap } from \"./QueryExpressionMap\";\r\nimport { SelectQuery } from \"./SelectQuery\";\r\nimport { RelationIdLoader } from \"./relation-id/RelationIdLoader\";\r\nimport { RelationIdLoadResult } from \"./relation-id/RelationIdLoadResult\";\r\nimport { RelationIdMetadataToAttributeTransformer } from \"./relation-id/RelationIdMetadataToAttributeTransformer\";\r\nimport { RelationCountLoadResult } from \"./relation-count/RelationCountLoadResult\";\r\nimport { RelationCountLoader } from \"./relation-count/RelationCountLoader\";\r\nimport { RelationCountMetadataToAttributeTransformer } from \"./relation-count/RelationCountMetadataToAttributeTransformer\";\r\n\r\n\r\n// todo: fix problem with long aliases eg getMaxIdentifierLength\r\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\r\n// todo: implement joinAlways in relations and relationId\r\n// todo: implement @Select decorator\r\n// todo: add quoting functions\r\n// todo: .addCount and .addCountSelect()\r\n// todo: add selectAndMap\r\n\r\n// todo: tests for:\r\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\r\n// todo: think about subselect in joins syntax\r\n// todo: create multiple representations of QueryBuilder: UpdateQueryBuilder, DeleteQueryBuilder\r\n// qb.update() returns UpdateQueryBuilder\r\n// qb.delete() returns DeleteQueryBuilder\r\n// qb.select() returns SelectQueryBuilder\r\n// todo: COMPLETELY COVER QUERY BUILDER WITH TESTS\r\n\r\n// todo: SUBSELECT IMPLEMENTATION\r\n// .whereSubselect(qb => qb.select().from().where())\r\n// todo: also create qb.createSubQueryBuilder()\r\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\r\n// todo: STREAMING\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class QueryBuilder<Entity> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Contains all properties of the QueryBuilder that needs to be build a final query.\r\n     */\r\n    protected expressionMap: QueryExpressionMap;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n        protected queryRunnerProvider?: QueryRunnerProvider) {\r\n        this.expressionMap = new QueryExpressionMap(connection);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets the main alias string used in this query builder.\r\n     */\r\n    get alias(): string {\r\n        if (!this.expressionMap.mainAlias)\r\n            throw new Error(`Main alias is not set`); // todo: better exception\r\n\r\n        return this.expressionMap.mainAlias.name;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates SELECT query.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(selection: string, selectionAliasName?: string): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(selection: string[]): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(selection?: string | string[], selectionAliasName?: string): this {\r\n        this.expressionMap.queryType = \"select\";\r\n        if (selection instanceof Array) {\r\n            this.expressionMap.selects = selection.map(selection => ({ selection: selection }));\r\n        } else if (selection) {\r\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string, selectionAliasName?: string): this;\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string[]): this;\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string | string[], selectionAliasName?: string): this {\r\n        if (selection instanceof Array) {\r\n            this.expressionMap.selects = this.expressionMap.selects.concat(selection.map(selection => ({ selection: selection })));\r\n        } else {\r\n            this.expressionMap.selects.push({ selection: selection, aliasName: selectionAliasName });\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given entity and applies given update values.\r\n     */\r\n    update(entity: Function | string, updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given table name and applies given update values.\r\n     */\r\n    update(tableName: string, updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(entityOrTableNameUpdateSet?: string | Function | ObjectLiteral, maybeUpdateSet?: ObjectLiteral): this {\r\n        const updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet as ObjectLiteral | undefined;\r\n\r\n        if (entityOrTableNameUpdateSet instanceof Function) { // entityOrTableNameUpdateSet is entity class\r\n            this.expressionMap.createMainAlias({\r\n                target: entityOrTableNameUpdateSet\r\n            });\r\n\r\n        } else if (typeof entityOrTableNameUpdateSet === \"string\") { // todo: check if entityOrTableNameUpdateSet is entity target string\r\n            this.expressionMap.createMainAlias({\r\n                tableName: entityOrTableNameUpdateSet\r\n            });\r\n        }\r\n\r\n        this.expressionMap.queryType = \"update\";\r\n        this.expressionMap.updateSet = updateSet;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates DELETE query.\r\n     */\r\n    delete(): this {\r\n        this.expressionMap.queryType = \"delete\";\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies FROM which entity's table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    from(entityTarget: Function | string, aliasName: string): this {\r\n        this.expressionMap.createMainAlias({\r\n            name: aliasName,\r\n            target: entityTarget\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies FROM which table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    fromTable(tableName: string, aliasName: string) {\r\n\r\n        // if table has a metadata then find it to properly escape its properties\r\n        const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\r\n        if (metadata) {\r\n            this.expressionMap.createMainAlias({\r\n                name: aliasName,\r\n                metadata: metadata,\r\n            });\r\n\r\n        } else {\r\n            this.expressionMap.createMainAlias({\r\n                name: aliasName,\r\n                tableName: tableName,\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs (without selection) entity's property.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection) given entity's table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(entity: Function | string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection) given table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection).\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.join(\"INNER\", entityOrProperty, aliasName, condition, options);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) entity's property.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) entity's table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(entity: Function | string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) given table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection).\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.join(\"LEFT\", entityOrProperty, aliasName, condition, options);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property and adds all selection properties to SELECT.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(entity: Function | string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.innerJoin(entityOrProperty, aliasName, condition, options);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property and adds all selection properties to SELECT.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(entity: Function | string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.leftJoin(entityOrProperty, aliasName, condition, options);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, entity: Function | string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.join(\"INNER\", entityOrProperty, aliasName, condition, options, mapToProperty, true);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, entity: Function | string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.join(\"INNER\", entityOrProperty, aliasName, condition, options, mapToProperty, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, entity: Function | string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.join(\"LEFT\", entityOrProperty, aliasName, condition, options, mapToProperty, true);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, entity: Function | string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.join(\"LEFT\", entityOrProperty, aliasName, condition, options, mapToProperty, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    loadRelationIdAndMap(mapToProperty: string, relationName: string): this;\r\n\r\n    /**\r\n     * LEFT JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    loadRelationIdAndMap(mapToProperty: string, relationName: string, options: { disableMixedMap: boolean }): this;\r\n\r\n    /**\r\n     * LEFT JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    loadRelationIdAndMap(mapToProperty: string, relationName: string, aliasName: string, queryBuilderFactory: (qb: QueryBuilder<any>) => QueryBuilder<any>): this;\r\n\r\n    /**\r\n     * LEFT JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    loadRelationIdAndMap(mapToProperty: string,\r\n        relationName: string,\r\n        aliasNameOrOptions?: string | { disableMixedMap?: boolean },\r\n        queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>): this {\r\n        const relationIdAttribute = new RelationIdAttribute(this.expressionMap);\r\n        relationIdAttribute.mapToProperty = mapToProperty;\r\n        relationIdAttribute.relationName = relationName;\r\n        if (typeof aliasNameOrOptions === \"string\")\r\n            relationIdAttribute.alias = aliasNameOrOptions;\r\n        if (aliasNameOrOptions instanceof Object && (aliasNameOrOptions as any).disableMixedMap)\r\n            relationIdAttribute.disableMixedMap = true;\r\n\r\n        relationIdAttribute.queryBuilderFactory = queryBuilderFactory;\r\n        this.expressionMap.relationIdAttributes.push(relationIdAttribute);\r\n\r\n        if (relationIdAttribute.relation.junctionEntityMetadata) {\r\n            this.expressionMap.createAlias({\r\n                name: relationIdAttribute.junctionAlias,\r\n                metadata: relationIdAttribute.relation.junctionEntityMetadata\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Counts number of entities of entity's relation and maps the value into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    loadRelationCountAndMap(mapToProperty: string, relationName: string, aliasName?: string, queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>): this {\r\n        const relationCountAttribute = new RelationCountAttribute(this.expressionMap);\r\n        relationCountAttribute.mapToProperty = mapToProperty;\r\n        relationCountAttribute.relationName = relationName;\r\n        relationCountAttribute.alias = aliasName;\r\n        relationCountAttribute.queryBuilderFactory = queryBuilderFactory;\r\n        this.expressionMap.relationCountAttributes.push(relationCountAttribute);\r\n\r\n        this.expressionMap.createAlias({\r\n            name: relationCountAttribute.junctionAlias\r\n        });\r\n        if (relationCountAttribute.relation.junctionEntityMetadata) {\r\n            this.expressionMap.createAlias({\r\n                name: relationCountAttribute.junctionAlias,\r\n                metadata: relationCountAttribute.relation.junctionEntityMetadata\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"simple\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"and\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"or\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets HAVING condition in the query builder.\r\n     * If you had previously HAVING expression defined,\r\n     * calling this function will override previously set HAVING conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    having(having: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.havings.push({ type: \"simple\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND HAVING condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andHaving(having: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.havings.push({ type: \"and\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR HAVING condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orHaving(having: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.havings.push({ type: \"or\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets GROUP BY condition in the query builder.\r\n     * If you had previously GROUP BY expression defined,\r\n     * calling this function will override previously set GROUP BY conditions.\r\n     */\r\n    groupBy(groupBy: string): this {\r\n        this.expressionMap.groupBys = [groupBy];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds GROUP BY condition in the query builder.\r\n     */\r\n    addGroupBy(groupBy: string): this {\r\n        this.expressionMap.groupBys.push(groupBy);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort: string, order?: \"ASC\" | \"DESC\"): this;\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort: undefined): this;\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort?: string, order: \"ASC\" | \"DESC\" = \"ASC\"): this {\r\n        if (sort) {\r\n            this.expressionMap.orderBys = { [sort]: order };\r\n        } else {\r\n            this.expressionMap.orderBys = {};\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds ORDER BY condition in the query builder.\r\n     */\r\n    addOrderBy(sort: string, order: \"ASC\" | \"DESC\" = \"ASC\"): this {\r\n        this.expressionMap.orderBys[sort] = order;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set's LIMIT - maximum number of rows to be selected.\r\n     * NOTE that it may not work as you expect if you are using joins.\r\n     * If you want to implement pagination, and you are having join in your query,\r\n     * then use instead take method instead.\r\n     */\r\n    setLimit(limit?: number): this {\r\n        this.expressionMap.limit = limit;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set's OFFSET - selection offset.\r\n     * NOTE that it may not work as you expect if you are using joins.\r\n     * If you want to implement pagination, and you are having join in your query,\r\n     * then use instead skip method instead.\r\n     */\r\n    setOffset(offset?: number): this {\r\n        this.expressionMap.offset = offset;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets maximal number of entities to take.\r\n     */\r\n    take(take?: number): this {\r\n        this.expressionMap.take = take;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets number of entities to skip.\r\n     */\r\n    skip(skip?: number): this {\r\n        this.expressionMap.skip = skip;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets maximal number of entities to take.\r\n     *\r\n     * @deprecated use take method instead\r\n     */\r\n    setMaxResults(take?: number): this {\r\n        this.expressionMap.take = take;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets number of entities to skip.\r\n     *\r\n     * @deprecated use skip method instead\r\n     */\r\n    setFirstResult(skip?: number): this {\r\n        this.expressionMap.skip = skip;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\", lockVersion: number): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\", lockVersion: Date): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"pessimistic_read\" | \"pessimistic_write\"): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\" | \"pessimistic_read\" | \"pessimistic_write\", lockVersion?: number | Date): this {\r\n        this.expressionMap.lockMode = lockMode;\r\n        this.expressionMap.lockVersion = lockVersion;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets given parameter's value.\r\n     */\r\n    setParameter(key: string, value: any): this {\r\n        this.expressionMap.parameters[key] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds all parameters from the given object.\r\n     */\r\n    setParameters(parameters: ObjectLiteral): this {\r\n        Object.keys(parameters).forEach(key => {\r\n            this.expressionMap.parameters[key] = parameters[key];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets all parameters.\r\n     */\r\n    getParameters(): ObjectLiteral {\r\n        const parameters: ObjectLiteral = Object.assign({}, this.expressionMap.parameters);\r\n\r\n        // add discriminator column parameter if it exist\r\n        if (this.expressionMap.mainAlias!.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\r\n                const values = metadata.childEntityMetadatas\r\n                    .filter(childMetadata => childMetadata.discriminatorColumn)\r\n                    .map(childMetadata => childMetadata.discriminatorValue);\r\n                values.push(metadata.discriminatorValue);\r\n                parameters[\"discriminatorColumnValues\"] = values;\r\n            }\r\n        }\r\n\r\n        return parameters;\r\n    }\r\n\r\n    /**\r\n     * Gets generated sql that will be executed.\r\n     * Parameters in the query are escaped for the currently used driver.\r\n     */\r\n    getSql(): string {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        sql = this.createSpecificExpression(sql);\r\n        [sql] = this.connection.driver.escapeQueryWithParameters(sql, this.expressionMap.parameters);\r\n        return sql.trim();\r\n    }\r\n\r\n    createSpecificExpression(sql: string): string {\r\n        if ((this.expressionMap.offset || this.expressionMap.limit) && this.connection.driver instanceof OracleDriver) {\r\n            sql = 'SELECT * FROM ('+sql+') WHERE ';\r\n            if (this.expressionMap.offset) {\r\n                sql += \"\\\"rn\\\" > \" + this.expressionMap.offset;\r\n            }\r\n            if (this.expressionMap.limit) {\r\n                sql += (this.expressionMap.offset ? \" AND\" : \"\") + \"\\\"rn\\\" < \" + ((this.expressionMap.offset || 0) + this.expressionMap.limit);\r\n            }\r\n        }\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Gets generated sql without parameters being replaced.\r\n     */\r\n    getGeneratedQuery(): string {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        sql = this.createSpecificExpression(sql);\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Gets sql to be executed with all parameters used in it.\r\n     */\r\n    getSqlWithParameters(options?: { skipOrderBy?: boolean }): [string, any[]] {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        if (!options || !options.skipOrderBy)\r\n            sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        sql = this.createSpecificExpression(sql);\r\n        return this.connection.driver.escapeQueryWithParameters(sql, this.getParameters());\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<any> {\r\n        const queryRunner = await this.getQueryRunner();\r\n        const [sql, parameters] = this.getSqlWithParameters();\r\n        try {\r\n            return await queryRunner.query(sql, parameters);  // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\r\n     */\r\n    async getEntitiesAndRawResults(): Promise<{ entities: Entity[], rawResults: any[] }> {\r\n        const queryRunner = await this.getQueryRunner();\r\n        const relationIdLoader = new RelationIdLoader(this.connection, this.queryRunnerProvider, this.expressionMap.relationIdAttributes);\r\n        const relationCountLoader = new RelationCountLoader(this.connection, this.queryRunnerProvider, this.expressionMap.relationCountAttributes);\r\n        const relationIdMetadataTransformer = new RelationIdMetadataToAttributeTransformer(this.expressionMap);\r\n        relationIdMetadataTransformer.transform();\r\n        const relationCountMetadataTransformer = new RelationCountMetadataToAttributeTransformer(this.expressionMap);\r\n        relationCountMetadataTransformer.transform();\r\n\r\n        try {\r\n            if (!this.expressionMap.mainAlias)\r\n                throw new Error(`Alias is not set. Looks like nothing is selected. Use select*, delete, update method to set an alias.`);\r\n\r\n            if ((this.expressionMap.lockMode === \"pessimistic_read\" || this.expressionMap.lockMode === \"pessimistic_write\") && !queryRunner.isTransactionActive())\r\n                throw new PessimisticLockTransactionRequiredError();\r\n\r\n            if (this.expressionMap.lockMode === \"optimistic\") {\r\n                const metadata = this.expressionMap.mainAlias!.metadata;\r\n                if (!metadata.versionColumn && !metadata.updateDateColumn)\r\n                    throw new NoVersionOrUpdateDateColumnError(metadata.name);\r\n            }\r\n\r\n            const mainAliasName = this.expressionMap.mainAlias.name;\r\n            if (this.expressionMap.skip || this.expressionMap.take) {\r\n                // we are skipping order by here because its not working in subqueries anyway\r\n                // to make order by working we need to apply it on a distinct query\r\n                const [sql, parameters] = this.getSqlWithParameters({ skipOrderBy: true });\r\n                const [selects, orderBys] = this.createOrderByCombinedWithSelectExpression(\"distinctAlias\");\r\n\r\n                const distinctAlias = this.escapeTable(\"distinctAlias\");\r\n                const metadata = this.expressionMap.mainAlias!.metadata;\r\n                let idsQuery = `SELECT `;\r\n                idsQuery += metadata.primaryColumns.map((primaryColumn, index) => {\r\n                    const propertyName = this.escapeAlias(mainAliasName + \"_\" + primaryColumn.databaseName);\r\n                    if (index === 0) {\r\n                        return `DISTINCT(${distinctAlias}.${propertyName}) as ids_${primaryColumn.databaseName}`;\r\n                    } else {\r\n                        return `${distinctAlias}.${propertyName}) as ids_${primaryColumn.databaseName}`;\r\n                    }\r\n                }).join(\", \");\r\n                if (selects.length > 0)\r\n                    idsQuery += \", \" + selects;\r\n\r\n                idsQuery += ` FROM (${sql}) ${distinctAlias}`; // TODO: WHAT TO DO WITH PARAMETERS HERE? DO THEY WORK?\r\n\r\n                if (orderBys.length > 0) {\r\n                    idsQuery += \" ORDER BY \" + orderBys;\r\n                } else {\r\n                    idsQuery += ` ORDER BY \"ids_${metadata.primaryColumns[0].databaseName}\"`; // this is required for mssql driver if firstResult is used. Other drivers don't care about it\r\n                }\r\n\r\n                if (this.connection.driver instanceof SqlServerDriver) { // todo: temporary. need to refactor and make a proper abstraction\r\n\r\n                    if (this.expressionMap.skip || this.expressionMap.take) {\r\n                        idsQuery += ` OFFSET ${this.expressionMap.skip || 0} ROWS`;\r\n                        if (this.expressionMap.take)\r\n                            idsQuery += \" FETCH NEXT \" + this.expressionMap.take + \" ROWS ONLY\";\r\n                    }\r\n                } else {\r\n\r\n                    if (this.expressionMap.take)\r\n                        idsQuery += \" LIMIT \" + this.expressionMap.take;\r\n                    if (this.expressionMap.skip)\r\n                        idsQuery += \" OFFSET \" + this.expressionMap.skip;\r\n                }\r\n\r\n                let entities: any[] = [];\r\n                let rawResults: any[] = await queryRunner.query(idsQuery, parameters);\r\n                if (rawResults.length > 0) {\r\n                    let condition = \"\";\r\n                    const parameters: ObjectLiteral = {};\r\n                    if (metadata.hasMultiplePrimaryKeys) {\r\n                        condition = rawResults.map(result => {\r\n                            return metadata.primaryColumns.map(primaryColumn => {\r\n                                parameters[\"ids_\" + primaryColumn.propertyName] = result[\"ids_\" + primaryColumn.propertyName];\r\n                                return mainAliasName + \".\" + primaryColumn.propertyName + \"=:ids_\" + primaryColumn.propertyName;\r\n                            }).join(\" AND \");\r\n                        }).join(\" OR \");\r\n                    } else {\r\n                        const ids = rawResults.map(result => result[\"ids_\" + metadata.primaryColumns[0].propertyName]);\r\n                        const areAllNumbers = ids.every((id: any) => typeof id === \"number\");\r\n                        if (areAllNumbers) {\r\n                            // fixes #190. if all numbers then its safe to perform query without parameter\r\n                            condition = `${mainAliasName}.${metadata.primaryColumns[0].propertyName} IN (${ids.join(\", \")})`;\r\n                        } else {\r\n                            parameters[\"ids\"] = ids;\r\n                            condition = mainAliasName + \".\" + metadata.primaryColumns[0].propertyName + \" IN (:ids)\";\r\n                        }\r\n                    }\r\n                    const clonnedQb = this.clone({ queryRunnerProvider: this.queryRunnerProvider });\r\n                    clonnedQb.expressionMap.extraAppendedAndWhereCondition = condition;\r\n                    const [queryWithIdsSql, queryWithIdsParameters] = clonnedQb\r\n                        .setParameters(parameters)\r\n                        .getSqlWithParameters();\r\n                    rawResults = await queryRunner.query(queryWithIdsSql, queryWithIdsParameters);\r\n                    const rawRelationIdResults = await relationIdLoader.load(rawResults);\r\n                    const rawRelationCountResults = await relationCountLoader.load(rawResults);\r\n                    entities = this.rawResultsToEntities(rawResults, rawRelationIdResults, rawRelationCountResults);\r\n                    if (this.expressionMap.mainAlias.hasMetadata)\r\n                        await this.connection.broadcaster.broadcastLoadEventsForAll(this.expressionMap.mainAlias.target, rawResults);\r\n\r\n                }\r\n                return {\r\n                    entities: entities,\r\n                    rawResults: rawResults\r\n                };\r\n\r\n            } else {\r\n\r\n                const [sql, parameters] = this.getSqlWithParameters();\r\n\r\n                const rawResults = await queryRunner.query(sql, parameters);\r\n\r\n                const rawRelationIdResults = await relationIdLoader.load(rawResults);\r\n                const rawRelationCountResults = await relationCountLoader.load(rawResults);\r\n                const entities = this.rawResultsToEntities(rawResults, rawRelationIdResults, rawRelationCountResults);\r\n                if (this.expressionMap.mainAlias.hasMetadata)\r\n                    await this.connection.broadcaster.broadcastLoadEventsForAll(this.expressionMap.mainAlias.target, rawResults);\r\n\r\n                return {\r\n                    entities: entities,\r\n                    rawResults: rawResults\r\n                };\r\n            }\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets count - number of entities selected by sql generated by this query builder.\r\n     * Count excludes all limitations set by setFirstResult and setMaxResults methods call.\r\n     */\r\n    async getCount(): Promise<number> {\r\n        if (this.expressionMap.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const queryRunner = await this.getQueryRunner();\r\n\r\n        const mainAlias = this.expressionMap.mainAlias!.name; // todo: will this work with \"fromTableName\"?\r\n        const metadata = this.expressionMap.mainAlias!.metadata;\r\n\r\n        const distinctAlias = this.escapeAlias(mainAlias);\r\n        let countSql = `COUNT(` + metadata.primaryColumns.map((primaryColumn, index) => {\r\n            const propertyName = this.escapeColumn(primaryColumn.databaseName);\r\n            if (index === 0) {\r\n                return `DISTINCT(${distinctAlias}.${propertyName})`;\r\n            } else {\r\n                return `${distinctAlias}.${propertyName})`;\r\n            }\r\n        }).join(\", \") + \") as \\\"cnt\\\"\";\r\n\r\n        const countQueryBuilder = this\r\n            .clone({ queryRunnerProvider: this.queryRunnerProvider })\r\n            .orderBy(undefined)\r\n            .setOffset(undefined)\r\n            .setLimit(undefined)\r\n            .select(countSql);\r\n        countQueryBuilder.expressionMap.ignoreParentTablesJoins = true;\r\n\r\n        const [countQuerySql, countQueryParameters] = countQueryBuilder.getSqlWithParameters();\r\n\r\n        try {\r\n            const results = await queryRunner.query(countQuerySql, countQueryParameters);\r\n            if (!results || !results[0] || !results[0][\"cnt\"])\r\n                return 0;\r\n\r\n            return parseInt(results[0][\"cnt\"]);\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all raw results returned by execution of generated query builder sql.\r\n     */\r\n    async getRawMany(): Promise<any[]> {\r\n        if (this.expressionMap.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        return this.execute();\r\n    }\r\n\r\n    /**\r\n     * Gets first raw result returned by execution of generated query builder sql.\r\n     */\r\n    async getRawOne(): Promise<any> {\r\n        if (this.expressionMap.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const results = await this.execute();\r\n        return results[0];\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets entities and count returned by execution of generated query builder sql.\r\n     */\r\n    async getManyAndCount(): Promise<[Entity[], number]> {\r\n        if (this.expressionMap.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        // todo: share database connection and counter\r\n        return Promise.all([\r\n            this.getMany(),\r\n            this.getCount()\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Gets entities returned by execution of generated query builder sql.\r\n     */\r\n    async getMany(): Promise<Entity[]> {\r\n        if (this.expressionMap.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const results = await this.getEntitiesAndRawResults();\r\n        return results.entities;\r\n    }\r\n\r\n    /**\r\n     * Gets single entity returned by execution of generated query builder sql.\r\n     */\r\n    async getOne(): Promise<Entity | undefined> {\r\n        const results = await this.getEntitiesAndRawResults();\r\n        const result = results.entities[0] as any;\r\n\r\n        if (result && this.expressionMap.lockMode === \"optimistic\" && this.expressionMap.lockVersion) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n\r\n            if (this.expressionMap.lockVersion instanceof Date) {\r\n                const actualVersion = result[metadata.updateDateColumn!.propertyName]; // what if columns arent set?\r\n                this.expressionMap.lockVersion.setMilliseconds(0);\r\n                if (actualVersion.getTime() !== this.expressionMap.lockVersion.getTime())\r\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\r\n\r\n            } else {\r\n                const actualVersion = result[metadata.versionColumn!.propertyName]; // what if columns arent set?\r\n                if (actualVersion !== this.expressionMap.lockVersion)\r\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clones query builder as it is.\r\n     */\r\n    clone(options?: { queryRunnerProvider?: QueryRunnerProvider }): QueryBuilder<Entity> {\r\n        const qb = new QueryBuilder(this.connection, options ? options.queryRunnerProvider : undefined);\r\n        qb.expressionMap = this.expressionMap.clone();\r\n        return qb;\r\n    }\r\n\r\n    /**\r\n     * Disables escaping.\r\n     */\r\n    disableEscaping(): this {\r\n        this.expressionMap.disableEscaping = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Escapes alias name using current database's escaping character.\r\n     */\r\n    escapeAlias(name: string) {\r\n        if (!this.expressionMap.disableEscaping)\r\n            return name;\r\n        return this.connection.driver.escapeAliasName(name);\r\n    }\r\n\r\n    /**\r\n     * Escapes column name using current database's escaping character.\r\n     */\r\n    escapeColumn(name: string) {\r\n        if (!this.expressionMap.disableEscaping)\r\n            return name;\r\n        return this.connection.driver.escapeColumnName(name);\r\n    }\r\n\r\n    /**\r\n     * Escapes table name using current database's escaping character.\r\n     */\r\n    escapeTable(name: string) {\r\n        if (!this.expressionMap.disableEscaping)\r\n            return name;\r\n        return this.connection.driver.escapeTableName(name);\r\n    }\r\n\r\n    /**\r\n     * Enables special query builder options.\r\n     *\r\n     * @deprecated looks like enableRelationIdValues is not used anymore. What to do? Remove this method? What about persistence?\r\n     */\r\n    enableAutoRelationIdsLoad(): this {\r\n        this.expressionMap.mainAlias!.metadata.relations.forEach(relation => {\r\n            this.loadRelationIdAndMap(this.expressionMap.mainAlias!.name + \".\" + relation.propertyPath,\r\n                this.expressionMap.mainAlias!.name + \".\" + relation.propertyPath,\r\n                { disableMixedMap: true });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     *\r\n     * @experimental Maybe this method should be moved to repository?\r\n     * @deprecated\r\n     */\r\n    andWhereInIds(ids: any[]): this {\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.andWhere(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     *\r\n     * @experimental Maybe this method should be moved to repository?\r\n     * @deprecated\r\n     */\r\n    orWhereInIds(ids: any[]): this {\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.orWhere(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected join(direction: \"INNER\" | \"LEFT\", entityOrProperty: Function | string, aliasName: string, condition?: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): void {\r\n\r\n        const joinAttribute = new JoinAttribute(this.connection, this.expressionMap);\r\n        joinAttribute.direction = direction;\r\n        joinAttribute.mapToProperty = mapToProperty;\r\n        joinAttribute.options = options;\r\n        joinAttribute.isMappingMany = isMappingMany;\r\n        joinAttribute.entityOrProperty = entityOrProperty; // relationName\r\n        joinAttribute.condition = condition; // joinInverseSideCondition\r\n        // joinAttribute.junctionAlias = joinAttribute.relation.isOwning ? parentAlias + \"_\" + destinationTableAlias : destinationTableAlias + \"_\" + parentAlias;\r\n        this.expressionMap.joinAttributes.push(joinAttribute);\r\n\r\n        // todo: find and set metadata right there?\r\n        joinAttribute.alias = this.expressionMap.createAlias({\r\n            name: aliasName,\r\n            metadata: joinAttribute.metadata!\r\n        });\r\n        if (joinAttribute.relation && joinAttribute.relation.junctionEntityMetadata) {\r\n            this.expressionMap.createAlias({\r\n                name: joinAttribute.junctionAlias,\r\n                metadata: joinAttribute.relation.junctionEntityMetadata\r\n            });\r\n        }\r\n    }\r\n\r\n    protected rawResultsToEntities(results: any[], rawRelationIdResults: RelationIdLoadResult[], rawRelationCountResults: RelationCountLoadResult[]) {\r\n        return new RawSqlResultsToEntityTransformer(this.connection.driver, this.expressionMap.joinAttributes, rawRelationIdResults, rawRelationCountResults)\r\n            .transform(results, this.expressionMap.mainAlias!);\r\n    }\r\n\r\n    protected buildEscapedEntityColumnSelects(aliasName: string, metadata: EntityMetadata): SelectQuery[] {\r\n        const hasMainAlias = this.expressionMap.selects.some(select => select.selection === aliasName);\r\n\r\n        const columns: ColumnMetadata[] = hasMainAlias ? metadata.columns : metadata.columns.filter(column => {\r\n            return this.expressionMap.selects.some(select => select.selection === aliasName + \".\" + column.propertyName);\r\n        });\r\n\r\n        return columns.map(column => {\r\n            const selection = this.expressionMap.selects.find(select => select.selection === aliasName + \".\" + column.propertyName);\r\n            return {\r\n                selection: this.escapeAlias(aliasName) + \".\" + this.escapeColumn(column.databaseName),\r\n                aliasName: selection && selection.aliasName ? selection.aliasName : aliasName + \"_\" + column.databaseName,\r\n                // todo: need to keep in mind that custom selection.aliasName breaks hydrator. fix it later!\r\n            };\r\n            // return this.escapeAlias(aliasName) + \".\" + this.escapeColumn(column.fullName) +\r\n            //     \" AS \" + this.escapeAlias(aliasName + \"_\" + column.fullName);\r\n        });\r\n    }\r\n\r\n    protected findEntityColumnSelects(aliasName: string, metadata: EntityMetadata): SelectQuery[] {\r\n        const mainSelect = this.expressionMap.selects.find(select => select.selection === aliasName);\r\n        if (mainSelect)\r\n            return [mainSelect];\r\n\r\n        return this.expressionMap.selects.filter(select => {\r\n            return metadata.columns.some(column => select.selection === aliasName + \".\" + column.propertyName);\r\n        });\r\n    }\r\n\r\n    // todo: extract all create expression methods to separate class QueryExpressionBuilder\r\n\r\n    protected createSelectExpression() {\r\n\r\n        if (!this.expressionMap.mainAlias)\r\n            throw new Error(\"Cannot build query because main alias is not set (call qb#from method)\");\r\n\r\n        // separate escaping functions are used to reduce code size and complexity below\r\n        const et = (aliasName: string) => this.escapeTable(aliasName);\r\n        const ea = (aliasName: string) => this.escapeAlias(aliasName);\r\n        const ec = (aliasName: string) => this.escapeColumn(aliasName);\r\n\r\n        // todo throw exception if selects or from is missing\r\n\r\n        let tableName: string;\r\n        const allSelects: SelectQuery[] = [];\r\n        const excludedSelects: SelectQuery[] = [];\r\n\r\n        const aliasName = this.expressionMap.mainAlias.name;\r\n\r\n        if (this.expressionMap.mainAlias.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias.metadata;\r\n            tableName = metadata.tableName;\r\n\r\n            allSelects.push(...this.buildEscapedEntityColumnSelects(aliasName, metadata));\r\n            excludedSelects.push(...this.findEntityColumnSelects(aliasName, metadata));\r\n\r\n        } else { // if alias does not have metadata - selections will be from custom table\r\n            tableName = this.expressionMap.mainAlias.tableName!;\r\n        }\r\n\r\n        // add selects from joins\r\n        this.expressionMap.joinAttributes\r\n            .forEach(join => {\r\n                if (join.metadata) {\r\n                    allSelects.push(...this.buildEscapedEntityColumnSelects(join.alias.name!, join.metadata));\r\n                    excludedSelects.push(...this.findEntityColumnSelects(join.alias.name!, join.metadata));\r\n                } else {\r\n                    const hasMainAlias = this.expressionMap.selects.some(select => select.selection === join.alias.name);\r\n                    if (hasMainAlias) {\r\n                        allSelects.push({ selection: ea(join.alias.name!) + \".*\" });\r\n                        excludedSelects.push({ selection: ea(join.alias.name!) });\r\n                    }\r\n                }\r\n            });\r\n\r\n        if (!this.expressionMap.ignoreParentTablesJoins && this.expressionMap.mainAlias.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias.metadata;\r\n            if (metadata.parentEntityMetadata && metadata.parentEntityMetadata.inheritanceType === \"class-table\" && metadata.parentIdColumns) {\r\n                const alias = \"parentIdColumn_\" + metadata.parentEntityMetadata.tableName;\r\n                metadata.parentEntityMetadata.columns.forEach(column => {\r\n                    // TODO implement partial select\r\n                    allSelects.push({ selection: ea(alias) + \".\" + ec(column.databaseName), aliasName: alias + \"_\" + column.databaseName });\r\n                });\r\n            }\r\n        }\r\n\r\n        // add selects from relation id joins\r\n        // this.relationIdAttributes.forEach(relationIdAttr => {\r\n        // });\r\n\r\n        /*if (this.enableRelationIdValues) {\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(this.aliasMap.mainAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.aliasMap.mainAlias.name);\r\n\r\n            const metadata = this.connection.entityMetadatas.findByTarget(this.aliasMap.mainAlias.target);\r\n            metadata.manyToManyRelations.forEach(relation => {\r\n\r\n                const junctionMetadata = relation.junctionEntityMetadata;\r\n                junctionMetadata.columns.forEach(column => {\r\n                    const select = ea(this.aliasMap.mainAlias.name + \"_\" + junctionMetadata.table.name + \"_ids\") + \".\" +\r\n                        ec(column.name) + \" AS \" +\r\n                        ea(this.aliasMap.mainAlias.name + \"_\" + relation.name + \"_ids_\" + column.name);\r\n                    allSelects.push(select);\r\n                });\r\n            });\r\n        }*/\r\n\r\n        // add all other selects\r\n        this.expressionMap.selects\r\n            .filter(select => excludedSelects.indexOf(select) === -1)\r\n            .forEach(select => allSelects.push({ selection: this.replacePropertyNames(select.selection), aliasName: select.aliasName }));\r\n\r\n        // if still selection is empty, then simply set it to all (*)\r\n        if (allSelects.length === 0)\r\n            allSelects.push({ selection: \"*\" });\r\n\r\n        let lock: string = \"\";\r\n        if (this.connection.driver instanceof SqlServerDriver) {\r\n            switch (this.expressionMap.lockMode) {\r\n                case \"pessimistic_read\":\r\n                    lock = \" WITH (HOLDLOCK, ROWLOCK)\";\r\n                    break;\r\n                case \"pessimistic_write\":\r\n                    lock = \" WITH (UPDLOCK, ROWLOCK)\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // create a selection query\r\n        switch (this.expressionMap.queryType) {\r\n            case \"select\":\r\n                const selection = allSelects.map(select => select.selection + (select.aliasName ? \" AS \" + ea(select.aliasName) : \"\")).join(\", \");\r\n                if ((this.expressionMap.limit || this.expressionMap.offset) && this.connection.driver instanceof OracleDriver) {\r\n                    return \"SELECT ROWNUM \\\"rn\\\",\" + selection + \" FROM \" + this.escapeTable(tableName) + \" \" + ea(aliasName) + lock;\r\n                }\r\n                return \"SELECT \" + selection + \" FROM \" + this.escapeTable(tableName) + \" \" + ea(aliasName) + lock;\r\n            case \"delete\":\r\n                return \"DELETE FROM \" + et(tableName);\r\n            // return \"DELETE \" + (alias ? ea(alias) : \"\") + \" FROM \" + this.escapeTable(tableName) + \" \" + (alias ? ea(alias) : \"\"); // TODO: only mysql supports aliasing, so what to do with aliases in DELETE queries? right now aliases are used however we are relaying that they will always match a table names\r\n            case \"update\":\r\n                const updateSet = Object.keys(this.expressionMap.updateSet).map(key => key + \"=:updateSet__\" + key);\r\n                const params = Object.keys(this.expressionMap.updateSet).reduce((object, key) => {\r\n                    // todo: map propertyNames to names ?\r\n                    object[\"updateSet_\" + key] = this.expressionMap.updateSet![key];\r\n                    return object;\r\n                }, {} as ObjectLiteral);\r\n                this.setParameters(params);\r\n                return \"UPDATE \" + tableName + \" \" + (aliasName ? ea(aliasName) : \"\") + \" SET \" + updateSet;\r\n        }\r\n\r\n        throw new Error(\"No query builder type is specified.\");\r\n    }\r\n\r\n    protected createHavingExpression() {\r\n        if (!this.expressionMap.havings || !this.expressionMap.havings.length) return \"\";\r\n        const conditions = this.expressionMap.havings.map((having, index) => {\r\n            switch (having.type) {\r\n                case \"and\":\r\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(having.condition);\r\n                case \"or\":\r\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(having.condition);\r\n                default:\r\n                    return this.replacePropertyNames(having.condition);\r\n            }\r\n        }).join(\" \");\r\n\r\n        if (!conditions.length) return \"\";\r\n        return \" HAVING \" + conditions;\r\n    }\r\n\r\n    protected createWhereExpression() {\r\n\r\n        const conditions = this.expressionMap.wheres.map((where, index) => {\r\n            switch (where.type) {\r\n                case \"and\":\r\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(where.condition);\r\n                case \"or\":\r\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(where.condition);\r\n                default:\r\n                    return this.replacePropertyNames(where.condition);\r\n            }\r\n        }).join(\" \");\r\n\r\n        if (this.expressionMap.mainAlias!.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\r\n                const condition = `${this.replacePropertyNames(this.expressionMap.mainAlias!.name + \".\" + metadata.discriminatorColumn.databaseName)} IN (:discriminatorColumnValues)`;\r\n                return ` WHERE ${conditions.length ? \"(\" + conditions + \") AND\" : \"\"} ${condition}`;\r\n            }\r\n        }\r\n\r\n        if (!conditions.length) // TODO copy in to discriminator condition\r\n            return this.expressionMap.extraAppendedAndWhereCondition ? \" WHERE \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : \"\";\r\n\r\n        if (this.expressionMap.extraAppendedAndWhereCondition)\r\n            return \" WHERE (\" + conditions + \") AND \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);\r\n\r\n        return \" WHERE \" + conditions;\r\n    }\r\n\r\n    /**\r\n     * Replaces all entity's propertyName to name in the given statement.\r\n     */\r\n    protected replacePropertyNames(statement: string) {\r\n        this.expressionMap.aliases.forEach(alias => {\r\n            if (!alias.hasMetadata) return;\r\n            alias.metadata.columns.forEach(column => {\r\n                const expression = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + column.propertyPath + \"([ =\\)\\,]|.{0}$)\";\r\n                statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + this.escapeAlias(alias.name) + \".\" + this.escapeColumn(column.databaseName) + \"$2\");\r\n                const expression2 = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + column.propertyName + \"([ =\\)\\,]|.{0}$)\";\r\n                statement = statement.replace(new RegExp(expression2, \"gm\"), \"$1\" + this.escapeAlias(alias.name) + \".\" + this.escapeColumn(column.databaseName) + \"$2\");\r\n            });\r\n            alias.metadata.relations.forEach(relation => {\r\n                [...relation.joinColumns, ...relation.inverseJoinColumns].forEach(joinColumn => {\r\n                    const expression = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + relation.propertyPath + \"\\\\.\" + joinColumn.referencedColumn!.propertyPath + \"([ =\\)\\,]|.{0}$)\";\r\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + this.escapeAlias(alias.name) + \".\" + this.escapeColumn(joinColumn.databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\r\n                });\r\n                if (relation.joinColumns.length > 0) {\r\n                    const expression = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + relation.propertyPath + \"([ =\\)\\,]|.{0}$)\";\r\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + this.escapeAlias(alias.name) + \".\" + this.escapeColumn(relation.joinColumns[0].databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\r\n                }\r\n            });\r\n        });\r\n        return statement;\r\n    }\r\n\r\n    protected createJoinExpression(): string {\r\n\r\n        // separate escaping functions are used to reduce code size and complexity below\r\n        const et = (aliasName: string) => this.escapeTable(aliasName);\r\n        const ea = (aliasName: string) => this.escapeAlias(aliasName);\r\n        const ec = (aliasName: string) => this.escapeColumn(aliasName);\r\n\r\n        // examples:\r\n        // select from owning side\r\n        // qb.select(\"post\")\r\n        //     .leftJoinAndSelect(\"post.category\", \"category\");\r\n        // select from non-owning side\r\n        // qb.select(\"category\")\r\n        //     .leftJoinAndSelect(\"category.post\", \"post\");\r\n\r\n        const joins = this.expressionMap.joinAttributes.map(joinAttr => {\r\n\r\n            const relation = joinAttr.relation;\r\n            const destinationTableName = joinAttr.tableName;\r\n            const destinationTableAlias = joinAttr.alias.name;\r\n            const appendedCondition = joinAttr.condition ? \" AND (\" + joinAttr.condition + \")\" : \"\";\r\n            const parentAlias = joinAttr.parentAlias;\r\n\r\n            // if join was build without relation (e.g. without \"post.category\") then it means that we have direct\r\n            // table to join, without junction table involved. This means we simply join direct table.\r\n            if (!parentAlias || !relation)\r\n                return \" \" + joinAttr.direction + \" JOIN \" + et(destinationTableName) + \" \" + ea(destinationTableAlias) +\r\n                    (joinAttr.condition ? \" ON \" + this.replacePropertyNames(joinAttr.condition) : \"\");\r\n\r\n            // if real entity relation is involved\r\n            if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n\r\n                // JOIN `category` `category` ON `category`.`id` = `post`.`categoryId`\r\n                const condition = relation.joinColumns.map(joinColumn => {\r\n                    return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" +\r\n                        parentAlias + \".\" + relation.propertyPath + \".\" + joinColumn.referencedColumn!.propertyPath;\r\n                }).join(\" AND \");\r\n\r\n                return \" \" + joinAttr.direction + \" JOIN \" + et(destinationTableName) + \" \" + ea(destinationTableAlias) + \" ON \" + this.replacePropertyNames(condition + appendedCondition);\r\n\r\n            } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n\r\n                // JOIN `post` `post` ON `post`.`categoryId` = `category`.`id`\r\n                const condition = relation.inverseRelation!.joinColumns.map(joinColumn => {\r\n                    return destinationTableAlias + \".\" + relation.inverseRelation!.propertyPath + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" +\r\n                        parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\r\n                }).join(\" AND \");\r\n\r\n                return \" \" + joinAttr.direction + \" JOIN \" + et(destinationTableName) + \" \" + ea(destinationTableAlias) + \" ON \" + this.replacePropertyNames(condition + appendedCondition);\r\n\r\n            } else { // means many-to-many\r\n                const junctionTableName = relation.junctionEntityMetadata!.tableName;\r\n\r\n                const junctionAlias = joinAttr.junctionAlias;\r\n                let junctionCondition = \"\", destinationCondition = \"\";\r\n\r\n                if (relation.isOwning) {\r\n\r\n                    junctionCondition = relation.joinColumns.map(joinColumn => {\r\n                        // `post_category`.`postId` = `post`.`id`\r\n                        return junctionAlias + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\r\n                    }).join(\" AND \");\r\n\r\n                    destinationCondition = relation.inverseJoinColumns.map(joinColumn => {\r\n                        // `category`.`id` = `post_category`.`categoryId`\r\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" + junctionAlias + \".\" + joinColumn.propertyPath;\r\n                    }).join(\" AND \");\r\n\r\n                } else {\r\n                    junctionCondition = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => {\r\n                        // `post_category`.`categoryId` = `category`.`id`\r\n                        return junctionAlias + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\r\n                    }).join(\" AND \");\r\n\r\n                    destinationCondition = relation.inverseRelation!.joinColumns.map(joinColumn => {\r\n                        // `post`.`id` = `post_category`.`postId`\r\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" + junctionAlias + \".\" + joinColumn.propertyPath;\r\n                    }).join(\" AND \");\r\n                }\r\n\r\n                return \" \" + joinAttr.direction + \" JOIN \" + et(junctionTableName) + \" \" + ea(junctionAlias) + \" ON \" + this.replacePropertyNames(junctionCondition) +\r\n                    \" \" + joinAttr.direction + \" JOIN \" + et(destinationTableName) + \" \" + ea(destinationTableAlias) + \" ON \" + this.replacePropertyNames(destinationCondition + appendedCondition);\r\n\r\n            }\r\n        });\r\n\r\n        if (!this.expressionMap.ignoreParentTablesJoins && this.expressionMap.mainAlias!.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n            if (metadata.parentEntityMetadata && metadata.parentEntityMetadata.inheritanceType === \"class-table\" && metadata.parentIdColumns) {\r\n                const alias = \"parentIdColumn_\" + metadata.parentEntityMetadata.tableName;\r\n                const condition = metadata.parentIdColumns.map(parentIdColumn => {\r\n                    return this.expressionMap.mainAlias!.name + \".\" + parentIdColumn.databaseName + \"=\" + ea(alias) + \".\" + parentIdColumn.propertyName;\r\n                }).join(\" AND \");\r\n                const join = \" JOIN \" + et(metadata.parentEntityMetadata.tableName) + \" \" + ea(alias) + \" ON \" + condition;\r\n                joins.push(join);\r\n            }\r\n        }\r\n\r\n        return joins.join(\" \");\r\n    }\r\n\r\n    protected createGroupByExpression() {\r\n        if (!this.expressionMap.groupBys || !this.expressionMap.groupBys.length) return \"\";\r\n        return \" GROUP BY \" + this.replacePropertyNames(this.expressionMap.groupBys.join(\", \"));\r\n    }\r\n\r\n    protected createOrderByCombinedWithSelectExpression(parentAlias: string) {\r\n\r\n        // if table has a default order then apply it\r\n        let orderBys = this.expressionMap.orderBys;\r\n        if (!Object.keys(orderBys).length && this.expressionMap.mainAlias!.hasMetadata) {\r\n            orderBys = this.expressionMap.mainAlias!.metadata.orderBy || {};\r\n        }\r\n\r\n        const selectString = Object.keys(orderBys)\r\n            .map(columnName => {\r\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\r\n                return this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(alias + \"_\" + column + embeddedProperties.join(\"_\"));\r\n            })\r\n            .join(\", \");\r\n\r\n        const orderByString = Object.keys(orderBys)\r\n            .map(columnName => {\r\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\r\n                return this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(alias + \"_\" + column + embeddedProperties.join(\"_\")) + \" \" + this.expressionMap.orderBys[columnName];\r\n            })\r\n            .join(\", \");\r\n\r\n        return [selectString, orderByString];\r\n    }\r\n\r\n    protected createOrderByExpression() {\r\n\r\n        let orderBys = this.expressionMap.orderBys;\r\n\r\n        // if table has a default order then apply it\r\n        if (!Object.keys(orderBys).length && this.expressionMap.mainAlias!.hasMetadata) {\r\n            orderBys = this.expressionMap.mainAlias!.metadata.orderBy || {};\r\n        }\r\n\r\n        // if user specified a custom order then apply it\r\n        if (Object.keys(orderBys).length > 0)\r\n            return \" ORDER BY \" + Object.keys(orderBys)\r\n                .map(columnName => {\r\n                    return this.replacePropertyNames(columnName) + \" \" + this.expressionMap.orderBys[columnName];\r\n                })\r\n                .join(\", \");\r\n\r\n        return \"\";\r\n    }\r\n\r\n    protected createLimitExpression(): string {\r\n        if (!this.expressionMap.limit || this.connection.driver instanceof OracleDriver) return \"\";\r\n        return \" LIMIT \" + this.expressionMap.limit;\r\n    }\r\n\r\n    protected createOffsetExpression(): string {\r\n        if (!this.expressionMap.offset || this.connection.driver instanceof OracleDriver) return \"\";\r\n        return \" OFFSET \" + this.expressionMap.offset;\r\n    }\r\n\r\n    protected createLockExpression(): string {\r\n        switch (this.expressionMap.lockMode) {\r\n            case \"pessimistic_read\":\r\n                if (this.connection.driver instanceof MysqlDriver) {\r\n                    return \" LOCK IN SHARE MODE\";\r\n\r\n                } else if (this.connection.driver instanceof PostgresDriver) {\r\n                    return \" FOR SHARE\";\r\n\r\n                } else if (this.connection.driver instanceof SqlServerDriver) {\r\n                    return \"\";\r\n\r\n                } else {\r\n                    throw new LockNotSupportedOnGivenDriverError();\r\n                }\r\n            case \"pessimistic_write\":\r\n                if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof PostgresDriver) {\r\n                    return \" FOR UPDATE\";\r\n\r\n                } else if (this.connection.driver instanceof SqlServerDriver) {\r\n                    return \"\";\r\n\r\n                } else {\r\n                    throw new LockNotSupportedOnGivenDriverError();\r\n                }\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\r\n     */\r\n    protected createWhereIdsExpression(ids: any[]): [string, ObjectLiteral] {\r\n        const metadata = this.expressionMap.mainAlias!.metadata;\r\n\r\n        // create shortcuts for better readability\r\n        const ea = (aliasName: string) => this.escapeAlias(aliasName);\r\n        const ec = (columnName: string) => this.escapeColumn(columnName);\r\n\r\n        const alias = this.expressionMap.mainAlias!.name;\r\n        const parameters: ObjectLiteral = {};\r\n        const whereStrings = ids.map((id, index) => {\r\n            const whereSubStrings: string[] = [];\r\n            // if (metadata.hasMultiplePrimaryKeys) {\r\n            metadata.primaryColumns.forEach((primaryColumn, secondIndex) => {\r\n                whereSubStrings.push(ea(alias) + \".\" + ec(primaryColumn.databaseName) + \"=:id_\" + index + \"_\" + secondIndex);\r\n                parameters[\"id_\" + index + \"_\" + secondIndex] = primaryColumn.getEntityValue(id);\r\n            });\r\n            metadata.parentIdColumns.forEach((primaryColumn, secondIndex) => {\r\n                whereSubStrings.push(ea(alias) + \".\" + ec(id[primaryColumn.databaseName]) + \"=:parentId_\" + index + \"_\" + secondIndex);\r\n                parameters[\"parentId_\" + index + \"_\" + secondIndex] = primaryColumn.getEntityValue(id);\r\n            });\r\n            // } else {\r\n            //     if (metadata.primaryColumns.length > 0) {\r\n            //         whereSubStrings.push(ea(alias) + \".\" + ec(metadata.firstPrimaryColumn.fullName) + \"=:id_\" + index);\r\n            //         parameters[\"id_\" + index] = id;\r\n            //\r\n            //     } else if (metadata.parentIdColumns.length > 0) {\r\n            //         whereSubStrings.push(ea(alias) + \".\" + ec(metadata.parentIdColumns[0].fullName) + \"=:parentId_\" + index);\r\n            //         parameters[\"parentId_\" + index] = id;\r\n            //     }\r\n            // }\r\n            return whereSubStrings.join(\" AND \");\r\n        });\r\n\r\n        const whereString = whereStrings.length > 1 ? \"(\" + whereStrings.join(\" OR \") + \")\" : whereStrings[0];\r\n        return [whereString, parameters];\r\n    }\r\n\r\n    protected async getQueryRunner(): Promise<QueryRunner> {\r\n\r\n        if (this.queryRunnerProvider instanceof QueryRunnerProvider) {\r\n            return this.queryRunnerProvider.provide();\r\n\r\n        } else { // means its empty\r\n            return this.connection.driver.createQueryRunner();\r\n        }\r\n    }\r\n\r\n    protected hasOwnQueryRunner(): boolean {\r\n        return !this.queryRunnerProvider;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}