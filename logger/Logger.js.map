{"version":3,"sources":["../../src/logger/Logger.ts"],"names":[],"mappings":";;AACA,2DAAwD;AAExD;;GAEG;AACH;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,gBAAoB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;IAC1C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,yBAAQ,GAAR,UAAS,KAAa,EAAE,UAAkB;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU;YACvB,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,sBAAoB,KAAK,IAAG,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,EAAE,CAAE,CAAC,CAAC;IACpJ,CAAC;IAED;;OAEG;IACH,+BAAc,GAAd,UAAe,KAAa,EAAE,UAAkB;QAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU;YACvB,IAAI,CAAC,OAAO,CAAC,oBAAoB;YACjC,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAiB,KAAK,IAAG,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,EAAE,CAAE,CAAC,CAAC;IACnJ,CAAC;IAED;;OAEG;IACH,8BAAa,GAAb,UAAc,KAAU;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB;YAChC,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,+BAA+B,GAAG,KAAK,CAAC,CAAC;IACnE,CAAC;IAED;;OAEG;IACH,+BAAc,GAAd,UAAe,OAAe;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB;YAC9B,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,oBAAG,GAAH,UAAI,KAAkC,EAAE,OAAY;QAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAAC,MAAM,CAAC;QAE1B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACZ,KAAK,KAAK;oBACN,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACrB,KAAK,CAAC;gBACV,KAAK,MAAM;oBACP,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACtB,KAAK,CAAC;gBACV,KAAK,MAAM;oBACP,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACtB,KAAK,CAAC;gBACV,KAAK,OAAO;oBACR,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACvB,KAAK,CAAC;YACd,CAAC;QACL,CAAC;IACL,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;;OAGG;IACO,gCAAe,GAAzB,UAA0B,UAAiB;QACvC,IAAI,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAEtC,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;IACL,CAAC;IAEL,aAAC;AAAD,CA9FA,AA8FC,IAAA;AA9FY,wBAAM","file":"Logger.js","sourcesContent":["import {LoggerOptions} from \"./LoggerOptions\";\r\nimport {PlatformTools} from \"../platform/PlatformTools\";\r\n\r\n/**\r\n * Performs logging of the events in TypeORM.\r\n */\r\nexport class Logger {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private options: LoggerOptions) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Logs query and parameters used in it.\r\n     */\r\n    logQuery(query: string, parameters?: any[]) {\r\n        if (this.options.logQueries ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"log\", `executing query: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`);\r\n    }\r\n\r\n    /**\r\n     * Logs query that failed.\r\n     */\r\n    logFailedQuery(query: string, parameters?: any[]) {\r\n        if (this.options.logQueries ||\r\n            this.options.logOnlyFailedQueries ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"error\", `query failed: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`);\r\n    }\r\n\r\n    /**\r\n     * Logs failed query's error.\r\n     */\r\n    logQueryError(error: any) {\r\n        if (this.options.logFailedQueryError ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"error\", \"error during executing query:\" + error);\r\n    }\r\n\r\n    /**\r\n     * Logs events from the schema build process.\r\n     */\r\n    logSchemaBuild(message: string) {\r\n        if (this.options.logSchemaCreation ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"info\", message);\r\n    }\r\n\r\n    /**\r\n     * Perform logging using given logger, or by default to the console.\r\n     * Log has its own level and message.\r\n     */\r\n    log(level: \"log\"|\"info\"|\"warn\"|\"error\", message: any) {\r\n        if (!this.options) return;\r\n\r\n        if (this.options.logger) {\r\n            this.options.logger(level, message);\r\n        } else {\r\n            switch (level) {\r\n                case \"log\":\r\n                    console.log(message);\r\n                    break;\r\n                case \"info\":\r\n                    console.info(message);\r\n                    break;\r\n                case \"warn\":\r\n                    console.warn(message);\r\n                    break;\r\n                case \"error\":\r\n                    console.error(message);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Converts parameters to a string.\r\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\r\n     */\r\n    protected stringifyParams(parameters: any[]) {\r\n        try {\r\n            return JSON.stringify(parameters);\r\n\r\n        } catch (error) { // most probably circular objects in parameters\r\n            return parameters;\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":".."}