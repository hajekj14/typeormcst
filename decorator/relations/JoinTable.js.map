{"version":3,"sources":["../../src/decorator/relations/JoinTable.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAuBnD;;;GAGG;AACH,mBAA0B,OAA0D;IAChF,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,OAAO,GAAG,OAAO,IAAI,EAAsD,CAAC;QAC5E,IAAM,IAAI,GAA0B;YAChC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,WAAW,EAAE,CAAC,OAAO,IAAK,OAA4B,CAAC,UAAU,GAAG,CAAE,OAA4B,CAAC,UAAW,CAAC,GAAI,OAA2C,CAAC,WAAW,CAAQ;YAClL,kBAAkB,EAAE,CAAC,OAAO,IAAK,OAA4B,CAAC,iBAAiB,GAAG,CAAE,OAA4B,CAAC,iBAAkB,CAAC,GAAI,OAA2C,CAAC,kBAAkB,CAAQ;SACjN,CAAC;QACF,8BAAsB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC,CAAC;AACN,CAAC;AAZD,8BAYC","file":"JoinTable.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\r\nimport {JoinTableOptions} from \"../options/JoinTableOptions\";\r\nimport {JoinTableMetadataArgs} from \"../../metadata-args/JoinTableMetadataArgs\";\r\nimport {JoinTableMultipleColumnsOptions} from \"../options/JoinTableMuplipleColumnsOptions\";\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(): Function;\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options: JoinTableOptions): Function;\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options: JoinTableMultipleColumnsOptions): Function;\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options?: JoinTableOptions|JoinTableMultipleColumnsOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        options = options || {} as JoinTableOptions|JoinTableMultipleColumnsOptions;\r\n        const args: JoinTableMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            name: options.name,\r\n            joinColumns: (options && (options as JoinTableOptions).joinColumn ? [(options as JoinTableOptions).joinColumn!] : (options as JoinTableMultipleColumnsOptions).joinColumns) as any,\r\n            inverseJoinColumns: (options && (options as JoinTableOptions).inverseJoinColumn ? [(options as JoinTableOptions).inverseJoinColumn!] : (options as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\r\n        };\r\n        getMetadataArgsStorage().joinTables.push(args);\r\n    };\r\n}\r\n\r\n"],"sourceRoot":"../.."}