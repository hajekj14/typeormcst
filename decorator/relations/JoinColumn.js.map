{"version":3,"sources":["../../src/decorator/relations/JoinColumn.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAInD;;;;GAIG;AACH,oBAA2B,OAA2B;IAClD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,OAAO,GAAG,OAAO,IAAI,EAAuB,CAAC;QAC7C,IAAM,IAAI,GAA2B;YACjC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;SACrD,CAAC;QACF,8BAAsB,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC,CAAC;AACN,CAAC;AAXD,gCAWC","file":"JoinColumn.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\r\nimport {JoinColumnOptions} from \"../options/JoinColumnOptions\";\r\nimport {JoinColumnMetadataArgs} from \"../../metadata-args/JoinColumnMetadataArgs\";\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(options?: JoinColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        options = options || {} as JoinColumnOptions;\r\n        const args: JoinColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            name: options.name,\r\n            referencedColumnName: options.referencedColumnName\r\n        };\r\n        getMetadataArgsStorage().joinColumns.add(args);\r\n    };\r\n}\r\n\r\n"],"sourceRoot":"../.."}