{"version":3,"sources":["../../src/decorator/relations/RelationCount.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAGnD;;GAEG;AACH,uBAAiC,QAAqC;IAClE,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QAEjD,kDAAkD;QAClD,qHAAqH;QAErH,4CAA4C;QAC5C,IAAM,IAAI,GAA8B;YACpC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;SACrB,CAAC;QACF,8BAAsB,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC,CAAC;AACN,CAAC;AAdD,sCAcC","file":"RelationCount.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationCountMetadataArgs} from \"../../metadata-args/RelationCountMetadataArgs\";\r\n\r\n/**\r\n * Holds a number of children in the closure table of the column.\r\n */\r\nexport function RelationCount<T>(relation: string|((object: T) => any)): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // todo: need to check if property type is number?\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // create and register a new column metadata\r\n        const args: RelationCountMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            relation: relation\r\n        };\r\n        getMetadataArgsStorage().relationCounts.add(args);\r\n    };\r\n}\r\n\r\n"],"sourceRoot":"../.."}