{"version":3,"sources":["../../src/decorator/relations/RelationId.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAInD;;GAEG;AACH,oBAA8B,QAAqC,EAAE,KAAc,EAAE,mBAAkE;IACnJ,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAM,IAAI,GAA2B;YACjC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;YACZ,mBAAmB,EAAE,mBAAmB;SAC3C,CAAC;QACF,8BAAsB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC,CAAC;AACN,CAAC;AAXD,gCAWC","file":"RelationId.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationIdMetadataArgs} from \"../../metadata-args/RelationIdMetadataArgs\";\r\nimport {QueryBuilder} from \"../../query-builder/QueryBuilder\";\r\n\r\n/**\r\n * Special decorator used to extract relation id into separate entity property.\r\n */\r\nexport function RelationId<T>(relation: string|((object: T) => any), alias?: string, queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: RelationIdMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            relation: relation,\r\n            alias: alias,\r\n            queryBuilderFactory: queryBuilderFactory\r\n        };\r\n        getMetadataArgsStorage().relationIds.push(args);\r\n    };\r\n}\r\n\r\n"],"sourceRoot":"../.."}