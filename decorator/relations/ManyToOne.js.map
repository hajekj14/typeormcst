{"version":3,"sources":["../../src/decorator/relations/ManyToOne.ts"],"names":[],"mappings":";;AACA,oEAAiE;AACjE,qCAAmD;AAoBnD;;;;GAIG;AACH,mBAA6B,YAA2C,EAC3C,oBAAkE,EAClE,OAAyB;IAClD,IAAI,mBAAgD,CAAC;IACrD,EAAE,CAAC,CAAC,OAAO,oBAAoB,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC3C,OAAO,GAAqB,oBAAoB,CAAC;IACrD,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,mBAAmB,GAAiC,oBAAoB,CAAC;IAC7E,CAAC;IAED,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,OAAO,GAAG,EAAqB,CAAC;QAE9C,4CAA4C;QAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC;YACrD,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YACxF,EAAE,CAAC,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;gBAC1G,MAAM,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,IAAM,IAAI,GAAyB;YAC/B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,YAAY,EAAE,6BAAa,CAAC,WAAW;YACvC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,YAAY;YAClB,mBAAmB,EAAE,mBAAmB;YACxC,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC;AACN,CAAC;AAjCD,8BAiCC","file":"ManyToOne.js","sourcesContent":["import {RelationOptions} from \"../options/RelationOptions\";\r\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ObjectType} from \"../../common/ObjectType\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\r\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\r\n * on its own side.\r\n */\r\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>, options?: RelationOptions): Function;\r\n\r\n/**\r\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\r\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\r\n * on its own side.\r\n */\r\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                             inverseSide?: string|((object: T) => any),\r\n                             options?: RelationOptions): Function;\r\n\r\n/**\r\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\r\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\r\n * on its own side.\r\n */\r\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                             inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\r\n                             options?: RelationOptions): Function {\r\n    let inverseSideProperty: string|((object: T) => any);\r\n    if (typeof inverseSideOrOptions === \"object\") {\r\n        options = <RelationOptions> inverseSideOrOptions;\r\n    } else {\r\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\r\n    }\r\n\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            relationType: RelationTypes.MANY_TO_ONE,\r\n            isLazy: isLazy,\r\n            type: typeFunction,\r\n            inverseSideProperty: inverseSideProperty,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.add(args);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}