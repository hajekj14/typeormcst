{"version":3,"sources":["../../src/decorator/columns/DiscriminatorColumn.ts"],"names":[],"mappings":";;AAEA,qCAAmD;AAGnD;;;;GAIG;AACH,6BAAoC,oBAAwD;IACxF,MAAM,CAAC,UAAU,MAAgB;QAE7B,kEAAkE;QAClE,IAAM,OAAO,GAAkB;YAC3B,IAAI,EAAE,oBAAoB,CAAC,IAAI;YAC/B,IAAI,EAAE,oBAAoB,CAAC,IAAI;SAClC,CAAC;QAEF,4CAA4C;QAC5C,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,eAAe;YACrB,YAAY,EAAE,oBAAoB,CAAC,IAAI;YACvC,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AACN,CAAC;AAlBD,kDAkBC","file":"DiscriminatorColumn.js","sourcesContent":["import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * DiscriminatorColumn is a special type column used on entity class (not entity property)\r\n * and creates a special column which will contain an entity type.\r\n * This type is required for entities which use single table inheritance pattern.\r\n */\r\nexport function DiscriminatorColumn(discriminatorOptions: { name: string, type: ColumnType }): Function {\r\n    return function (target: Function) {\r\n\r\n        // if column options are not given then create a new empty options\r\n        const options: ColumnOptions = {\r\n            name: discriminatorOptions.name,\r\n            type: discriminatorOptions.type\r\n        };\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: target,\r\n            mode: \"discriminator\",\r\n            propertyName: discriminatorOptions.name,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n\r\n"],"sourceRoot":"../.."}