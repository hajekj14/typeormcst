{"version":3,"sources":["../../src/decorator/columns/UpdateDateColumn.ts"],"names":[],"mappings":";;AACA,gEAA6D;AAC7D,qCAAmD;AAGnD;;;GAGG;AACH,0BAAiC,OAAuB;IACpD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QAEjD,qHAAqH;QAErH,kEAAkE;QAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,OAAO,GAAG,EAAmB,CAAC;QAE5C,wFAAwF;QACxF,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,yBAAW,CAAC,QAAQ,EAAmB,EAAE,OAAO,CAAC,CAAC;QAElF,4CAA4C;QAC5C,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,IAAI,EAAE,YAAY;YAClB,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AACN,CAAC;AArBD,4CAqBC","file":"UpdateDateColumn.js","sourcesContent":["import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * This column will store an update date of the updated object.\r\n * This date is being updated each time you persist the object.\r\n */\r\nexport function UpdateDateColumn(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // implicitly set a type, because this column's type cannot be anything else except date\r\n        options = Object.assign({ type: ColumnTypes.DATETIME } as ColumnOptions, options);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"updateDate\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n\r\n"],"sourceRoot":"../.."}