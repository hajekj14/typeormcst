{"version":3,"sources":["../../src/decorator/tree/TreeParent.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAInD;;GAEG;AACH,oBAA2B,OAA8E;IACrG,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,OAAO,GAAG,EAAqB,CAAC;QAE9C,4CAA4C;QAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC;YACrD,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YACxF,EAAE,CAAC,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;gBAC1G,MAAM,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,IAAM,IAAI,GAAyB;YAC/B,YAAY,EAAE,IAAI;YAClB,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,aAAa;YAC3B,IAAI,EAAE,cAAM,OAAA,MAAM,CAAC,WAAW,EAAlB,CAAkB;YAC9B,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC;AACN,CAAC;AAxBD,gCAwBC","file":"TreeParent.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationOptions} from \"../options/RelationOptions\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Marks a specific property of the class as a parent of the tree.\r\n */\r\nexport function TreeParent(options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            isTreeParent: true,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            isLazy: isLazy,\r\n            relationType: \"many-to-one\",\r\n            type: () => object.constructor,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.push(args);\r\n    };\r\n}\r\n\r\n"],"sourceRoot":"../.."}