{"version":3,"sources":["../../src/decorator/Index.ts"],"names":[],"mappings":";;AAAA,kCAAgD;AAkChD;;GAEG;AACH,eAAsB,qBAA4E,EAC5E,oBAAkG,EAClG,YAA2B;IAC7C,IAAM,IAAI,GAAG,OAAO,qBAAqB,KAAK,QAAQ,GAAG,qBAAqB,GAAG,SAAS,CAAC;IAC3F,IAAM,MAAM,GAAG,OAAO,qBAAqB,KAAK,QAAQ,GAAoE,oBAAoB,GAAG,qBAAiC,CAAC;IACrL,IAAI,OAAO,GAAG,CAAC,OAAO,qBAAqB,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,GAAG,qBAAqC,GAAG,YAAY,CAAC;IAC1J,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;QACT,OAAO,GAAG,CAAC,OAAO,oBAAoB,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,GAAG,oBAAoC,GAAG,YAAY,CAAC;IAEvJ,MAAM,CAAC,UAAU,WAA4B,EAAE,YAAqB;QAChE,IAAM,IAAI,GAAsB;YAC5B,MAAM,EAAE,YAAY,GAAG,WAAW,CAAC,WAAW,GAAG,WAAuB;YACxE,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,YAAY,GAAG,CAAC,YAAY,CAAC,GAAG,MAAM;YAC/C,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK;SACnD,CAAC;QACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AACN,CAAC;AAlBD,sBAkBC","file":"Index.js","sourcesContent":["import {getMetadataArgsStorage} from \"../index\";\r\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\r\nimport {IndexOptions} from \"./options/IndexOptions\";\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(name: string, options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(name: string, fields: string[], options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(fields: string[], options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(name: string, fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(nameOrFieldsOrOptions: string|string[]|((object: any) => any[])|IndexOptions,\r\n                      maybeFieldsOrOptions?: ((object?: any) => (any[]|{ [key: string]: number }))|IndexOptions|string[],\r\n                      maybeOptions?: IndexOptions): Function {\r\n    const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\r\n    const fields = typeof nameOrFieldsOrOptions === \"string\" ? <((object?: any) => (any[]|{ [key: string]: number }))|string[]> maybeFieldsOrOptions : nameOrFieldsOrOptions as string[];\r\n    let options = (typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions as IndexOptions : maybeOptions;\r\n    if (!options)\r\n        options = (typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions)) ? maybeFieldsOrOptions as IndexOptions : maybeOptions;\r\n\r\n    return function (clsOrObject: Function|Object, propertyName?: string) {\r\n        const args: IndexMetadataArgs = {\r\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\r\n            name: name,\r\n            columns: propertyName ? [propertyName] : fields,\r\n            unique: options && options.unique ? true : false\r\n        };\r\n        getMetadataArgsStorage().indices.push(args);\r\n    };\r\n}\r\n"],"sourceRoot":".."}