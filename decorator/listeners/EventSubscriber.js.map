{"version":3,"sources":["../../src/decorator/listeners/EventSubscriber.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAGnD;;;GAGG;AACH;IACI,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,IAAI,GAAiC;YACvC,MAAM,EAAE,MAAM;SACjB,CAAC;QACF,8BAAsB,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAC,CAAC;AACN,CAAC;AAPD,0CAOC","file":"EventSubscriber.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EntitySubscriberMetadataArgs} from \"../../metadata-args/EntitySubscriberMetadataArgs\";\r\n\r\n/**\r\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\r\n * occurs. Those classes must implement EventSubscriberInterface interface.\r\n */\r\nexport function EventSubscriber() {\r\n    return function (target: Function) {\r\n        const args: EntitySubscriberMetadataArgs = {\r\n            target: target\r\n        };\r\n        getMetadataArgsStorage().entitySubscribers.push(args);\r\n    };\r\n}"],"sourceRoot":"../.."}