{"version":3,"sources":["../../src/entity-schema/EntitySchemaTransformer.ts"],"names":[],"mappings":"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","file":"EntitySchemaTransformer.js","sourcesContent":["import {EntitySchema} from \"./EntitySchema\";\r\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\r\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\r\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\r\nimport {JoinTableOptions} from \"../decorator/options/JoinTableOptions\";\r\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMuplipleColumnsOptions\";\r\nimport {ColumnMode} from \"../metadata-args/types/ColumnMode\";\r\n\r\nexport class EntitySchemaTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transform(schemas: EntitySchema[]): MetadataArgsStorage {\r\n        const metadataArgsStorage = new MetadataArgsStorage();\r\n\r\n        schemas.forEach(schema => {\r\n\r\n            // add table metadata args from the schema\r\n            const tableSchema = schema.table || {} as any;\r\n            const table: TableMetadataArgs = {\r\n                target: schema.target || schema.name,\r\n                name: tableSchema.name,\r\n                type: tableSchema.type || \"regular\",\r\n                orderBy: tableSchema.orderBy\r\n            };\r\n            metadataArgsStorage.tables.push(table);\r\n\r\n            // add columns metadata args from the schema\r\n            Object.keys(schema.columns).forEach(columnName => {\r\n                const columnSchema = schema.columns[columnName];\r\n                let mode: ColumnMode = \"regular\";\r\n                if (columnSchema.createDate)\r\n                    mode = \"createDate\";\r\n                if (columnSchema.updateDate)\r\n                    mode = \"updateDate\";\r\n                if (columnSchema.version)\r\n                    mode = \"version\";\r\n                if (columnSchema.treeChildrenCount)\r\n                    mode = \"treeChildrenCount\";\r\n                if (columnSchema.treeLevel)\r\n                    mode = \"treeLevel\";\r\n\r\n                const column: ColumnMetadataArgs = {\r\n                    target: schema.target || schema.name,\r\n                    mode: mode,\r\n                    propertyName: columnName,\r\n                    options: {\r\n                        type: columnSchema.type,\r\n                        name: columnSchema.name,\r\n                        length: columnSchema.length,\r\n                        primary: columnSchema.primary,\r\n                        generated: columnSchema.generated,\r\n                        unique: columnSchema.unique,\r\n                        nullable: columnSchema.nullable,\r\n                        comment: columnSchema.comment,\r\n                        default: columnSchema.default,\r\n                        precision: columnSchema.precision,\r\n                        scale: columnSchema.scale\r\n                    }\r\n                };\r\n\r\n                metadataArgsStorage.columns.push(column);\r\n            });\r\n\r\n            // add relation metadata args from the schema\r\n            if (schema.relations) {\r\n                Object.keys(schema.relations).forEach(relationName => {\r\n                    const relationSchema = schema.relations[relationName];\r\n                    const relation: RelationMetadataArgs = {\r\n                        target: schema.target || schema.name,\r\n                        propertyName: relationName,\r\n                        relationType: relationSchema.type,\r\n                        isLazy: relationSchema.isLazy || false,\r\n                        type: relationSchema.target,\r\n                        inverseSideProperty: relationSchema.inverseSide,\r\n                        isTreeParent: relationSchema.isTreeParent,\r\n                        isTreeChildren: relationSchema.isTreeChildren,\r\n                        options: {\r\n                            cascadeAll: relationSchema.cascadeAll,\r\n                            cascadeInsert: relationSchema.cascadeInsert,\r\n                            cascadeUpdate: relationSchema.cascadeUpdate,\r\n                            cascadeRemove: relationSchema.cascadeRemove,\r\n                            nullable: relationSchema.nullable,\r\n                            onDelete: relationSchema.onDelete\r\n                        }\r\n                    };\r\n\r\n                    metadataArgsStorage.relations.push(relation);\r\n\r\n                    // add join column\r\n                    if (relationSchema.joinColumn) {\r\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.push(joinColumn);\r\n                        } else {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinColumn.name,\r\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.push(joinColumn);\r\n                        }\r\n                    }\r\n\r\n                    // add join table\r\n                    if (relationSchema.joinTable) {\r\n                        if (typeof relationSchema.joinTable === \"boolean\") {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinTables.push(joinTable);\r\n                        } else {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinTable.name,\r\n                                joinColumns: ((relationSchema.joinTable as JoinTableOptions).joinColumn ? [(relationSchema.joinTable as JoinTableOptions).joinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).joinColumns) as any,\r\n                                inverseJoinColumns: ((relationSchema.joinTable as JoinTableOptions).inverseJoinColumn ? [(relationSchema.joinTable as JoinTableOptions).inverseJoinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\r\n                            };\r\n                            metadataArgsStorage.joinTables.push(joinTable);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        return metadataArgsStorage;\r\n    }\r\n}"],"sourceRoot":".."}