{"version":3,"sources":["../../src/entity-manager/EntityManager.ts"],"names":[],"mappings":"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","file":"EntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {BaseEntityManager} from \"./BaseEntityManager\";\r\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\r\nimport {PersistOptions} from \"../repository/PersistOptions\";\r\n\r\n/**\r\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\r\n * whatever entity type are you passing.\r\n */\r\nexport class EntityManager extends BaseEntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Stores temporarily user data.\r\n     * Useful for sharing data with subscribers.\r\n     */\r\n    private data: ObjectLiteral = {};\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\r\n        super(connection, queryRunnerProvider);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets user data by a given key.\r\n     */\r\n    getData(key: string): any {\r\n        return this.data[key];\r\n    }\r\n\r\n    /**\r\n     * Sets value for the given key in user data.\r\n     */\r\n    setData(key: string, value: any) {\r\n        this.data[key] = value;\r\n    }\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(entity: Entity, options?: PersistOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(targetOrEntity: Function, entity: Entity, options?: PersistOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(targetOrEntity: string, entity: Entity, options?: PersistOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(entities: Entity[], options?: PersistOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(targetOrEntity: Function, entities: Entity[], options?: PersistOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(targetOrEntity: string, entities: Entity[], options?: PersistOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) a given entity in the database.\r\n     */\r\n    persist<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[], options?: PersistOptions): Promise<Entity|Entity[]> {\r\n        const target = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Function|string;\r\n        const entity = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Entity|Entity[];\r\n        return Promise.resolve().then(() => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\r\n            if (typeof target === \"string\") {\r\n                return this.getRepository<Entity|Entity[]>(target).persist(entity, options);\r\n            } else {\r\n                // todo: throw exception if constructor in target is not set\r\n                if (target instanceof Array) {\r\n                    if (target.length === 0)\r\n                        return Promise.resolve(target);\r\n\r\n                    return Promise.all(target.map((t, i) => {\r\n                        return this.getRepository<Entity>(t.constructor).persist((entity as Entity[])[i], options);\r\n                    }));\r\n                } else {\r\n                    return this.getRepository<Entity>(target.constructor).persist(entity as Entity, options);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update<Entity>(target: Function|string, conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given find options.\r\n     */\r\n    async update<Entity>(target: Function|string, findOptions: FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update<Entity>(target: Function|string, conditionsOrFindOptions: Partial<Entity>|FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void> {\r\n        return this.getRepository<Entity|Entity[]>(target as any)\r\n            .update(conditionsOrFindOptions as any, partialEntity, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity will be found by a given id.\r\n     */\r\n    async updateById<Entity>(target: Function|string, id: any, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void> {\r\n        return this.getRepository<Entity|Entity[]>(target as any)\r\n            .updateById(id, partialEntity, options);\r\n    }\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(entity: Entity): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: Function, entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: string, entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: Function, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: string, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[], options?: RemoveOptions): Promise<Entity|Entity[]> {\r\n        const target = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Function|string;\r\n        const entity = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Entity|Entity[];\r\n        if (typeof target === \"string\") {\r\n            return this.getRepository<Entity|Entity[]>(target).remove(entity, options);\r\n        } else {\r\n            // todo: throw exception if constructor in target is not set\r\n            if (target instanceof Array) {\r\n                return Promise.all(target.map((t, i) => {\r\n                    return this.getRepository<Entity>(t.constructor).remove((entity as Entity[])[i], options);\r\n                }));\r\n            } else {\r\n                return this.getRepository<Entity>(target.constructor).remove(entity as Entity, options);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes entity by a given entity id.\r\n     */\r\n    async removeById(targetOrEntity: Function|string, id: any, options?: RemoveOptions): Promise<void> {\r\n        return this.getRepository(targetOrEntity as any).removeById(id, options);\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>, options?: FindManyOptions<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>, conditions?: Partial<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given find options or conditions.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<number> {\r\n        return this.getRepository(entityClass).count(optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>, options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>, conditions?: Partial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        return this.getRepository(entityClass).find(optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, conditions?: Partial<Entity>): Promise<[Entity[], number]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options and conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[Entity[], number]> {\r\n        return this.getRepository(entityClass).findAndCount(optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given find options.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>, conditions?: Partial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        return this.getRepository(entityClass).findOne(optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>, ids: any[], conditions?: Partial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        return this.getRepository(entityClass).findByIds(ids, optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>, id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>, id: any, conditions?: Partial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>, id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        return this.getRepository(entityClass).findOneById(id, optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Executes raw SQL query and returns raw database results.\r\n     */\r\n    async query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n\r\n        try {\r\n            return await queryRunner.query(query, parameters);  // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided entity manager.\r\n     */\r\n    async transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\r\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        const transactionEntityManager = new EntityManager(this.connection, queryRunnerProvider);\r\n\r\n        try {\r\n            await queryRunner.beginTransaction();\r\n            const result = await runInTransaction(transactionEntityManager);\r\n            await queryRunner.commitTransaction();\r\n            return result;\r\n\r\n        } catch (err) {\r\n            await queryRunner.rollbackTransaction();\r\n            throw err;\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n            if (!this.queryRunnerProvider) // if we used a new query runner provider then release it\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table (truncates/drops it).\r\n     */\r\n    clear<Entity>(entityClass: ObjectType<Entity>): Promise<void> {\r\n        return this.getRepository(entityClass).clear();\r\n    }\r\n\r\n}"],"sourceRoot":".."}