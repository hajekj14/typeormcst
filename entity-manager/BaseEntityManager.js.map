{"version":3,"sources":["../../src/entity-manager/BaseEntityManager.ts"],"names":[],"mappings":"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","file":"BaseEntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {Repository} from \"../repository/Repository\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {TreeRepository} from \"../repository/TreeRepository\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {RepositoryAggregator} from \"../repository/RepositoryAggregator\";\r\nimport {RepositoryNotTreeError} from \"../connection/error/RepositoryNotTreeError\";\r\nimport {NoNeedToReleaseEntityManagerError} from \"./error/NoNeedToReleaseEntityManagerError\";\r\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\r\nimport {SpecificRepository} from \"../repository/SpecificRepository\";\r\nimport {MongoRepository} from \"../repository/MongoRepository\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\n\r\n/**\r\n * Common functions shared between different entity manager types.\r\n */\r\nexport abstract class BaseEntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Stores all registered repositories.\r\n     * Used when custom queryRunnerProvider is provided.\r\n     */\r\n    private readonly repositoryAggregators: RepositoryAggregator[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param connection Connection to be used in this entity manager\r\n     * @param queryRunnerProvider Custom query runner to be used for operations in this entity manager\r\n     */\r\n    constructor(protected connection: Connection,\r\n                protected queryRunnerProvider?: QueryRunnerProvider) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets repository for the given entity class.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getRepository<Entity>(entityClass: ObjectType<Entity>): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getRepository<Entity>(entityName: string): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider)\r\n            return this.obtainRepositoryAggregator(entityClassOrName as any).repository;\r\n\r\n        return this.connection.getRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getTreeRepository<Entity>(entityClass: ObjectType<Entity>): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getTreeRepository<Entity>(entityName: string): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider) {\r\n            const treeRepository = this.obtainRepositoryAggregator(entityClassOrName).treeRepository;\r\n            if (!treeRepository)\r\n                throw new RepositoryNotTreeError(entityClassOrName);\r\n\r\n            return treeRepository;\r\n        }\r\n\r\n        return this.connection.getTreeRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity class.\r\n     */\r\n    getMongoRepository<Entity>(entityClass: ObjectType<Entity>): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity name.\r\n     */\r\n    getMongoRepository<Entity>(entityName: string): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity class or name.\r\n     */\r\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider)\r\n            return this.obtainRepositoryAggregator(entityClassOrName as any).repository as MongoRepository<Entity>;\r\n\r\n        return this.connection.getMongoRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getSpecificRepository<Entity>(entityClass: ObjectType<Entity>): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getSpecificRepository<Entity>(entityName: string): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider)\r\n            return this.obtainRepositoryAggregator(entityClassOrName).specificRepository;\r\n\r\n        return this.connection.getSpecificRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets custom entity repository marked with @EntityRepository decorator.\r\n     */\r\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\r\n        return this.connection.getCustomRepository<T>(customRepository);\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     */\r\n    hasId(entity: any): boolean;\r\n\r\n    /**\r\n     * Checks if entity of given schema name has an id.\r\n     */\r\n    hasId(target: string, entity: any): boolean;\r\n\r\n    /**\r\n     * Checks if entity has an id by its Function type or schema name.\r\n     */\r\n    hasId(targetOrEntity: any|string, maybeEntity?: any): boolean {\r\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\r\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\r\n        return this.getRepository(target as any).hasId(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(entity: any): any;\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(target: string, entity: any): any;\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(targetOrEntity: any|string, maybeEntity?: any): any {\r\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\r\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\r\n        return this.getRepository(target as any).getId(entity);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build an sql query.\r\n     */\r\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|Function|string, alias: string): QueryBuilder<Entity> {\r\n        return this.getRepository(entityClass as any).createQueryBuilder(alias);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>, plainObject: DeepPartial<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>, plainObjects: DeepPartial<Entity>[]): Entity[];\r\n\r\n    /**\r\n     * Creates a new entity instance or instances.\r\n     * Can copy properties from the given object into new entities.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>, plainObjectOrObjects?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\r\n        if (plainObjectOrObjects instanceof Array) {\r\n            return this.getRepository(entityClass).create(plainObjectOrObjects);\r\n\r\n        } else if (plainObjectOrObjects) {\r\n            return this.getRepository(entityClass).create(plainObjectOrObjects);\r\n\r\n        } else {\r\n            return this.getRepository(entityClass).create();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     */\r\n    preload<Entity>(entityClass: ObjectType<Entity>, object: DeepPartial<Entity>): Promise<Entity> {\r\n        return this.getRepository(entityClass).preload(object);\r\n    }\r\n\r\n    /**\r\n     * Merges two entities into one new entity.\r\n     */\r\n    merge<Entity>(entityClass: ObjectType<Entity>, mergeIntoEntity: Entity, ...objects: DeepPartial<Entity>[]): Entity { // todo: throw exception ie tntity manager is released\r\n        return <Entity> this.getRepository(entityClass).merge(mergeIntoEntity, ...objects);\r\n    }\r\n\r\n    /**\r\n     * Releases all resources used by entity manager.\r\n     * This is used when entity manager is created with a single query runner,\r\n     * and this single query runner needs to be released after job with entity manager is done.\r\n     */\r\n    async release(): Promise<void> {\r\n        if (!this.queryRunnerProvider)\r\n            throw new NoNeedToReleaseEntityManagerError();\r\n\r\n        return this.queryRunnerProvider.releaseReused();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets, or if does not exist yet, creates and returns a repository aggregator for a particular entity target.\r\n     */\r\n    protected obtainRepositoryAggregator<Entity>(entityClassOrName: ObjectType<Entity>|string): RepositoryAggregator {\r\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        let repositoryAggregator = this.repositoryAggregators.find(repositoryAggregate => repositoryAggregate.metadata === metadata);\r\n        if (!repositoryAggregator) {\r\n            repositoryAggregator = new RepositoryAggregator(\r\n                this.connection,\r\n                this.connection.getMetadata(entityClassOrName as any),\r\n                this.queryRunnerProvider\r\n            );\r\n            this.repositoryAggregators.push(repositoryAggregator); // todo: check isnt memory leak here?\r\n        }\r\n\r\n        return repositoryAggregator;\r\n    }\r\n\r\n}"],"sourceRoot":".."}