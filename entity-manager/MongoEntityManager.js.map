{"version":3,"sources":["../../src/entity-manager/MongoEntityManager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,iDAA8C;AAmC9C;;;;;GAKG;AACH;IAAwC,sCAAa;IAEjD,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,4BAAY,UAAsB,EAAE,mBAAyC;eACzE,kBAAM,UAAU,EAAE,mBAAmB,CAAC;IAC1C,CAAC;IAED,4EAA4E;IAC5E,qBAAqB;IACrB,4EAA4E;IAE5E;;OAEG;IACH,kCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;QACnC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC5D,CAAC;IAED;;;OAGG;IACH,wCAAW,GAAX,UAAY,gBAA+D;QACvE,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACH,+CAAkB,GAAlB,UAA2B,iBAA4C,EAAE,KAAa,EAAE,mBAAyC;QAC7H,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAClE,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,yCAAY,GAAZ,UAAqB,iBAA4C,EAAE,KAAqB;QACpF,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACjF,CAAC;IAED;;;OAGG;IACH,+CAAkB,GAAlB,UAA2B,iBAA4C,EAAE,KAAqB;QAC1F,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACvF,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,QAAyB,EAAE,OAAsC;QAC7H,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC1F,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,UAA2B,EAAE,OAAqC;QAC9H,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC5F,CAAC;IAED;;OAEG;IACH,kCAAK,GAAL,UAAc,iBAA4C,EAAE,KAAqB,EAAE,OAA+B;QAC9G,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACnF,CAAC;IAED;;OAEG;IACH,kDAAqB,GAArB,UAA8B,iBAA4C,EAAE,WAAuB,EAAE,OAAsB;QACvH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,qBAAqB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACzG,CAAC;IAED;;;;OAIG;IACH,oDAAuB,GAAvB,UAAgC,iBAA4C,EAAE,UAA2B;QACrG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;IACjG,CAAC;IAED;;OAEG;IACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,KAAoB,EAAE,OAA2B;QAC9G,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACxF,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,KAAoB,EAAE,OAA2B;QAC7G,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACvF,CAAC;IAED;;OAEG;IACH,qCAAQ,GAAR,UAAiB,iBAA4C,EAAE,GAAW,EAAE,KAAoB,EAAE,OAAoD;QAClJ,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC3F,CAAC;IAED;;OAEG;IACH,gDAAmB,GAAnB,UAA4B,iBAA4C,EAAE,SAAiB,EAAE,OAA2B;QACpH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACrG,CAAC;IAED;;OAEG;IACH,kDAAqB,GAArB,UAA8B,iBAA4C;QACtE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,qBAAqB,EAAE,CAAC;IACrF,CAAC;IAED;;OAEG;IACH,6CAAgB,GAAhB,UAAyB,iBAA4C,EAAE,KAAoB,EAAE,OAAoE;QAC7J,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC9F,CAAC;IAED;;OAEG;IACH,8CAAiB,GAAjB,UAA0B,iBAA4C,EAAE,KAAoB,EAAE,WAAmB,EAAE,OAAiC;QAChJ,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,iBAAiB,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;IAC5G,CAAC;IAED;;OAEG;IACH,6CAAgB,GAAhB,UAAyB,iBAA4C,EAAE,KAAoB,EAAE,MAAc,EAAE,OAAiC;QAC1I,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IACtG,CAAC;IAED;;OAEG;IACH,8CAAiB,GAAjB,UAA0B,iBAA4C,EAAE,CAAS,EAAE,CAAS,EAAE,OAAkC;QAC5H,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IAC9F,CAAC;IAED;;OAEG;IACH,oCAAO,GAAP,UAAgB,iBAA4C,EAAE,CAAS,EAAE,CAAS,EAAE,OAAwB;QACxG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IACpF,CAAC;IAED;;OAEG;IACH,kCAAK,GAAL,UAAc,iBAA4C,EAAE,IAAqC,EAAE,SAAiB,EAAE,OAAe,EAAE,MAAqB,EAAE,QAAuB,EAAE,OAAgB,EAAE,OAAsD;QAC3P,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACjI,CAAC;IAED;;OAEG;IACH,8CAAiB,GAAjB,UAA0B,iBAA4C;QAClE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,iBAAiB,EAAE,CAAC;IACjF,CAAC;IAED;;OAEG;IACH,kDAAqB,GAArB,UAA8B,iBAA4C,EAAE,OAAwB;QAChG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;IAC5F,CAAC;IAED;;OAEG;IACH,uDAA0B,GAA1B,UAAmC,iBAA4C,EAAE,OAA2B;QACxG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;IACjG,CAAC;IAED;;OAEG;IACH,oDAAuB,GAAvB,UAAgC,iBAA4C,EAAE,OAA2B;QACrG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;IAC9F,CAAC;IAED;;OAEG;IACH,sDAAyB,GAAzB,UAAkC,iBAA4C,EAAE,OAA2B;QACvG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;IAChG,CAAC;IAED;;OAEG;IACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,IAAqB,EAAE,OAAqC;QACzH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACvF,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,GAAkB,EAAE,OAAoC;QACpH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACrF,CAAC;IAED;;OAEG;IACH,qCAAQ,GAAR,UAAiB,iBAA4C;QACzD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,QAAQ,EAAE,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,kDAAqB,GAArB,UAA8B,iBAA4C,EAAE,OAAwE;QAChJ,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;IAC5F,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,GAAoB,EAAE,MAAuB,EAAE,OAA0B;QACrI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAC7F,CAAC;IAED;;;OAGG;IACH,mDAAsB,GAAtB,UAA+B,iBAA4C,EAAE,OAAuC;QAChH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;IAC7F,CAAC;IAED;;OAEG;IACH,oCAAO,GAAP,UAAgB,iBAA4C;QACxD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,OAAO,EAAE,CAAC;IACvE,CAAC;IAED;;OAEG;IACH,mCAAM,GAAN,UAAe,iBAA4C,EAAE,OAAe,EAAE,OAAkC;QAC5G,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACtF,CAAC;IAED;;OAEG;IACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,KAAoB,EAAE,GAAkB,EAAE,OAA2B;QAClI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAC7F,CAAC;IAED;;OAEG;IACH,kCAAK,GAAL,UAAc,iBAA4C,EAAE,OAA2B;QACnF,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,KAAoB,EAAE,MAAqB,EAAE,OAAuE;QACjL,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAChG,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,KAAoB,EAAE,MAAqB,EAAE,OAA2B;QACpI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAC/F,CAAC;IAEL,yBAAC;AAAD,CAlSA,AAkSC,CAlSuC,6BAAa,GAkSpD;AAlSY,gDAAkB","file":"MongoEntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {EntityManager} from \"./EntityManager\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {\r\n    Cursor,\r\n    Collection,\r\n    MongoCountPreferences,\r\n    CollectionAggregationOptions,\r\n    AggregationCursor,\r\n    CollectionBluckWriteOptions,\r\n    BulkWriteOpResultObject,\r\n    IndexOptions,\r\n    CollectionOptions,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    ReadPreference,\r\n    Code,\r\n    OrderedBulkOperation,\r\n    UnorderedBulkOperation,\r\n    InsertWriteOpResult,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    InsertOneWriteOpResult,\r\n    CommandCursor,\r\n    MapReduceOptions,\r\n    ParallelCollectionScanOptions,\r\n    ReplaceOneOptions,\r\n    UpdateWriteOpResult,\r\n    CollStats\r\n} from \"mongodb\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\n/**\r\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\r\n * whatever entity type are you passing.\r\n *\r\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\r\n */\r\nexport class MongoEntityManager extends EntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\r\n        super(connection, queryRunnerProvider);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes raw SQL query and returns raw database results.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Queries aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided entity manager.\r\n     */\r\n    transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\r\n        throw new Error(`Transactions aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Using Query Builder with MongoDB is not supported yet.\r\n     * Calling this method will return an error.\r\n     */\r\n    createQueryBuilder<Entity>(entityClassOrName: ObjectType<Entity>|string, alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        throw new Error(`Query Builder is not supported by MongoDB.`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    createCursor<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\r\n        return this.getMongoRepository(entityClassOrName as any).createCursor(query);\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    createEntityCursor<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\r\n        return this.getMongoRepository(entityClassOrName as any).createEntityCursor(query);\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate<Entity>(entityClassOrName: ObjectType<Entity>|string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\r\n        return this.getMongoRepository(entityClassOrName as any).aggregate(pipeline, options);\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    bulkWrite<Entity>(entityClassOrName: ObjectType<Entity>|string, operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).bulkWrite(operations, options);\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    count<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).count(query, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    createCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|string, fieldOrSpec: string|any, options?: IndexOptions): Promise<string> {\r\n        return this.getMongoRepository(entityClassOrName as any).createCollectionIndex(fieldOrSpec, options);\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error.\r\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    createCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string, indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        return this.getMongoRepository(entityClassOrName as any).createCollectionIndexes(indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    deleteMany<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).deleteMany(query, options);\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    deleteOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).deleteOne(query, options);\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    distinct<Entity>(entityClassOrName: ObjectType<Entity>|string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).distinct(key, query, options);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    dropCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|string, indexName: string, options?: CollectionOptions): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).dropCollectionIndex(indexName, options);\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    dropCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).dropCollectionIndexes();\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndDelete<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).findOneAndDelete(query, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndReplace<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).findOneAndReplace(query, replacement, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndUpdate<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).findOneAndUpdate(query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    geoHaystackSearch<Entity>(entityClassOrName: ObjectType<Entity>|string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).geoHaystackSearch(x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    geoNear<Entity>(entityClassOrName: ObjectType<Entity>|string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).geoNear(x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    group<Entity>(entityClassOrName: ObjectType<Entity>|string, keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).group(keys, condition, initial, reduce, finalize, command, options);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).collectionIndexes();\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexExists<Entity>(entityClassOrName: ObjectType<Entity>|string, indexes: string|string[]): Promise<boolean> {\r\n        return this.getMongoRepository(entityClassOrName as any).collectionIndexExists(indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    collectionIndexInformation<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { full: boolean }): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).collectionIndexInformation(options);\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: CollectionOptions): OrderedBulkOperation {\r\n        return this.getMongoRepository(entityClassOrName as any).initializeOrderedBulkOp(options);\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: CollectionOptions): UnorderedBulkOperation {\r\n        return this.getMongoRepository(entityClassOrName as any).initializeUnorderedBulkOp(options);\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    insertMany<Entity>(entityClassOrName: ObjectType<Entity>|string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        return this.getMongoRepository(entityClassOrName as any).insertMany(docs, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    insertOne<Entity>(entityClassOrName: ObjectType<Entity>|string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        return this.getMongoRepository(entityClassOrName as any).insertOne(doc, options);\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    isCapped<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).isCapped();\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\r\n        return this.getMongoRepository(entityClassOrName as any).listCollectionIndexes(options);\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    mapReduce<Entity>(entityClassOrName: ObjectType<Entity>|string, map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).mapReduce(map, reduce, options);\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    parallelCollectionScan<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\r\n        return this.getMongoRepository(entityClassOrName as any).parallelCollectionScan(options);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    reIndex<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).reIndex();\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    rename<Entity>(entityClassOrName: ObjectType<Entity>|string, newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\r\n        return this.getMongoRepository(entityClassOrName as any).rename(newName, options);\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    replaceOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return this.getMongoRepository(entityClassOrName as any).replaceOne(query, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    stats<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { scale: number }): Promise<CollStats> {\r\n        return this.getMongoRepository(entityClassOrName as any).stats(options);\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    updateMany<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\r\n        return this.getMongoRepository(entityClassOrName as any).updateMany(query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    updateOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return this.getMongoRepository(entityClassOrName as any).updateOne(query, update, options);\r\n    }\r\n\r\n}"],"sourceRoot":".."}