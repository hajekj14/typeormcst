{"version":3,"sources":["../../src/entity-manager/MongoEntityManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,iDAA8C;AAuC9C,wGAAqG;AAErG,qEAAkE;AAGlE;;;;;GAKG;AACH;IAAwC,sCAAa;IAEjD,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,4BAAY,UAAsB,EAAE,mBAAyC;eACzE,kBAAM,UAAU,EAAE,mBAAmB,CAAC;IAC1C,CAAC;IAED,4EAA4E;IAC5E,qBAAqB;IACrB,4EAA4E;IAE5E;;OAEG;IACH,kCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;QACnC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC5D,CAAC;IAED;;;OAGG;IACH,wCAAW,GAAX,UAAY,gBAA+D;QACvE,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACH,+CAAkB,GAAlB,UAA2B,iBAA4C,EAAE,KAAa,EAAE,mBAAyC;QAC7H,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACG,iCAAI,GAAV,UAAmB,iBAA4C,EAAE,mBAA6D;;gBACpH,KAAK;;;;gCAAG,IAAI,CAAC,gDAAgD,CAAC,mBAAmB,CAAC;wBACzE,qBAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,CAAC,EAAA;;iCAAvD,SAAuD;wBACtE,EAAE,CAAC,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BAC1D,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC1C,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC3C,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;gCAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC5F,CAAC;wBACD,sBAAO,MAAM,CAAC,OAAO,EAAE,EAAC;;;;KAC3B;IAED;;;;OAIG;IACG,yCAAY,GAAlB,UAA2B,iBAA4C,EAAE,mBAA6D;;gBAC5H,KAAK;;;;gCAAG,IAAI,CAAC,gDAAgD,CAAC,mBAAmB,CAAC;wBACzE,qBAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,CAAC,EAAA;;iCAAvD,SAAuD;wBACtE,EAAE,CAAC,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BAC1D,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC1C,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC3C,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;gCAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC5F,CAAC;wBACwB,qBAAM,OAAO,CAAC,GAAG,CAAM;gCAC5C,MAAM,CAAC,OAAO,EAAE;gCAChB,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAAC;6BACvC,CAAC,EAAA;;6BAHuB,SAGvB;wBACF,sBAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAC;;;;KACrC;IAED;;;OAGG;IACG,sCAAS,GAAf,UAAwB,iBAA4C,EAAE,GAAU,EAAE,mBAA6D;;gBACrI,QAAQ,EACR,KAAK,EACL,gBAAgB;;;;mCAFL,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC;gCACjD,IAAI,CAAC,gDAAgD,CAAC,mBAAmB,CAAC,IAAI,EAAE;2CACrE,OAAO,CAAC,SAAS,CAAC,CAAC,QAAQ;wBACpD,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,UAAA,EAAE;gCAC5B,EAAE,CAAC,CAAC,EAAE,YAAY,gBAAgB,CAAC;oCAC/B,MAAM,CAAC,EAAE,CAAC;gCAEd,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAe,CAAC,YAAY,CAAC,CAAC;4BACrD,CAAC,CAAC,EAAE,CAAC;wBAEU,qBAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,CAAC,EAAA;;iCAAvD,SAAuD;wBACtE,EAAE,CAAC,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BAC1D,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC1C,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;gCACzB,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;4BAC3C,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;gCAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC5F,CAAC;wBACM,qBAAM,MAAM,CAAC,OAAO,EAAE,EAAA;4BAA7B,sBAAO,SAAsB,EAAC;;;;KACjC;IAED;;OAEG;IACG,oCAAO,GAAb,UAAsB,iBAA4C,EAAE,mBAA4D;;gBACtH,KAAK;;;;gCAAG,IAAI,CAAC,+CAA+C,CAAC,mBAAmB,CAAC;wBACxE,qBAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,CAAC,EAAA;;iCAAvD,SAAuD;wBACtE,EAAE,CAAC,CAAC,mCAAgB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BACzD,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;gCAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC5F,CAAC;wBAGc,qBAAM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAA;;iCAA/B,SAA+B;wBAC9C,sBAAO,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;KACpD;IAED;;;OAGG;IACG,wCAAW,GAAjB,UAA0B,iBAA4C,EAAE,EAAO,EAAE,mBAA4D;;gBACnI,KAAK;;;;gCAAG,IAAI,CAAC,+CAA+C,CAAC,mBAAmB,CAAC,IAAI,EAAE;wBAC7F,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;wBACH,qBAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,CAAC,EAAA;;iCAAvD,SAAuD;wBACtE,EAAE,CAAC,CAAC,mCAAgB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;4BACzD,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;gCAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC5F,CAAC;wBAGc,qBAAM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAA;;iCAA/B,SAA+B;wBAC9C,sBAAO,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;KACpD;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,yCAAY,GAAZ,UAAqB,iBAA4C,EAAE,KAAqB;QACpF,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC;IAED;;;OAGG;IACH,+CAAkB,GAAlB,UAA2B,iBAA4C,EAAE,KAAqB;QAE1F,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QAC3D,IAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;QAC/C,MAAM,CAAC,OAAO,GAAG,UAAU,QAAkC;YACzD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,KAAiB,EAAE,OAAiB;oBAC3E,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACR,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;wBACzB,MAAM,CAAC;oBACX,CAAC;oBAED,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;oBACtD,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACxE,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,OAAiB;oBACpE,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;oBACtD,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC;QACF,MAAM,CAAC,IAAI,GAAG,UAAU,QAAsC;YAC1D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,KAAiB,EAAE,MAAoB;oBAC3E,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACnB,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;wBACxB,MAAM,CAAC;oBACX,CAAC;oBAED,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;oBACtD,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAc;oBAC9D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,MAAM,CAAC;oBAC3B,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;oBACtD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC;QACF,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,QAAyB,EAAE,OAAsC;QAC7H,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC7E,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,UAA2B,EAAE,OAAqC;QAC9H,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IAC/E,CAAC;IAED;;OAEG;IACH,kCAAK,GAAL,UAAc,iBAA4C,EAAE,KAAqB,EAAE,OAA+B;QAC9G,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACtE,CAAC;IAED;;OAEG;IACH,kDAAqB,GAArB,UAA8B,iBAA4C,EAAE,WAAuB,EAAE,OAA6B;QAC9H,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,QAAQ,CAAC,SAAS,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;IAC5F,CAAC;IAED;;;;OAIG;IACH,oDAAuB,GAAvB,UAAgC,iBAA4C,EAAE,UAA2B;QACrG,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IACpF,CAAC;IAED;;OAEG;IACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,KAAoB,EAAE,OAA2B;QAC9G,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC3E,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,KAAoB,EAAE,OAA2B;QAC7G,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,qCAAQ,GAAR,UAAiB,iBAA4C,EAAE,GAAW,EAAE,KAAoB,EAAE,OAAoD;QAClJ,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC9E,CAAC;IAED;;OAEG;IACH,gDAAmB,GAAnB,UAA4B,iBAA4C,EAAE,SAAiB,EAAE,OAA2B;QACpH,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IACxF,CAAC;IAED;;OAEG;IACH,kDAAqB,GAArB,UAA8B,iBAA4C;QACtE,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACtE,CAAC;IAED;;OAEG;IACH,6CAAgB,GAAhB,UAAyB,iBAA4C,EAAE,KAAoB,EAAE,OAAoE;QAC7J,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACjF,CAAC;IAED;;OAEG;IACH,8CAAiB,GAAjB,UAA0B,iBAA4C,EAAE,KAAoB,EAAE,WAAmB,EAAE,OAAiC;QAChJ,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;IAC/F,CAAC;IAED;;OAEG;IACH,6CAAgB,GAAhB,UAAyB,iBAA4C,EAAE,KAAoB,EAAE,MAAc,EAAE,OAAiC;QAC1I,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IACzF,CAAC;IAED;;OAEG;IACH,8CAAiB,GAAjB,UAA0B,iBAA4C,EAAE,CAAS,EAAE,CAAS,EAAE,OAAkC;QAC5H,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IACjF,CAAC;IAED;;OAEG;IACH,oCAAO,GAAP,UAAgB,iBAA4C,EAAE,CAAS,EAAE,CAAS,EAAE,OAAwB;QACxG,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IACvE,CAAC;IAED;;OAEG;IACH,kCAAK,GAAL,UAAc,iBAA4C,EAAE,IAAqC,EAAE,SAAiB,EAAE,OAAe,EAAE,MAAqB,EAAE,QAAuB,EAAE,OAAgB,EAAE,OAAsD;QAC3P,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACpH,CAAC;IAED;;OAEG;IACH,8CAAiB,GAAjB,UAA0B,iBAA4C;QAClE,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACH,kDAAqB,GAArB,UAA8B,iBAA4C,EAAE,OAAwB;QAChG,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC/E,CAAC;IAED;;OAEG;IACH,uDAA0B,GAA1B,UAAmC,iBAA4C,EAAE,OAA2B;QACxG,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,0BAA0B,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACpF,CAAC;IAED;;OAEG;IACH,oDAAuB,GAAvB,UAAgC,iBAA4C,EAAE,OAA2B;QACrG,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACjF,CAAC;IAED;;OAEG;IACH,sDAAyB,GAAzB,UAAkC,iBAA4C,EAAE,OAA2B;QACvG,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACnF,CAAC;IAED;;OAEG;IACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,IAAqB,EAAE,OAAqC;QACzH,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,GAAkB,EAAE,OAAoC;QACpH,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,qCAAQ,GAAR,UAAiB,iBAA4C;QACzD,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,kDAAqB,GAArB,UAA8B,iBAA4C,EAAE,OAAwE;QAChJ,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC/E,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,GAAoB,EAAE,MAAuB,EAAE,OAA0B;QACrI,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAChF,CAAC;IAED;;;OAGG;IACH,mDAAsB,GAAtB,UAA+B,iBAA4C,EAAE,OAAuC;QAChH,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAChF,CAAC;IAED;;OAEG;IACH,oCAAO,GAAP,UAAgB,iBAA4C;QACxD,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACH,mCAAM,GAAN,UAAe,iBAA4C,EAAE,OAAe,EAAE,OAAkC;QAC5G,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACzE,CAAC;IAED;;OAEG;IACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,KAAoB,EAAE,GAAkB,EAAE,OAA2B;QAClI,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAChF,CAAC;IAED;;OAEG;IACH,kCAAK,GAAL,UAAc,iBAA4C,EAAE,OAA2B;QACnF,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,KAAoB,EAAE,MAAqB,EAAE,OAAuE;QACjL,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IACnF,CAAC;IAED;;OAEG;IACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,KAAoB,EAAE,MAAqB,EAAE,OAA2B;QACpI,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAClF,CAAC;IAMD,sBAAc,2CAAW;QAJzB,4EAA4E;QAC5E,oBAAoB;QACpB,4EAA4E;aAE5E;YACI,MAAM,CAAE,IAAI,CAAC,UAAU,CAAC,MAAsB,CAAC,WAAW,CAAC;QAC/D,CAAC;;;OAAA;IAES,6EAAgD,GAA1D,UAAmE,mBAAqE;QACpI,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC;YACrB,MAAM,CAAC,SAAS,CAAC;QAErB,MAAM,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,mBAAmB,CAAC,KAAK,GAAG,mBAAmB,CAAC;IACrH,CAAC;IAES,4EAA+C,GAAzD,UAAkE,mBAAqE;QACnI,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC;YACrB,MAAM,CAAC,SAAS,CAAC;QAErB,MAAM,CAAC,mCAAgB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,GAAG,mBAAmB,CAAC,KAAK,GAAG,mBAAmB,CAAC;IACpH,CAAC;IAES,mEAAsC,GAAhD,UAA4D,KAA6C;QACrG,IAAM,aAAa,GAAkB,EAAE,CAAC;QACxC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAE,CAAC,WAAW,EAAE,CAAC,EAArD,CAAqD,CAAC,CAAC;QACzF,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IAEL,yBAAC;AAAD,CA9eA,AA8eC,CA9euC,6BAAa,GA8epD;AA9eY,gDAAkB","file":"MongoEntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {EntityManager} from \"./EntityManager\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {\r\n    AggregationCursor,\r\n    BulkWriteOpResultObject,\r\n    Code,\r\n    Collection,\r\n    CollectionAggregationOptions,\r\n    CollectionBluckWriteOptions,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    CollectionOptions,\r\n    CollStats,\r\n    CommandCursor,\r\n    Cursor,\r\n    CursorResult,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    InsertOneWriteOpResult,\r\n    InsertWriteOpResult,\r\n    MapReduceOptions,\r\n    MongoCallback,\r\n    MongoCountPreferences,\r\n    MongodbIndexOptions,\r\n    MongoError,\r\n    OrderedBulkOperation,\r\n    ParallelCollectionScanOptions,\r\n    ReadPreference,\r\n    ReplaceOneOptions,\r\n    UnorderedBulkOperation,\r\n    UpdateWriteOpResult\r\n} from \"../driver/mongodb/typings\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {DocumentToEntityTransformer} from \"../query-builder/transformer/DocumentToEntityTransformer\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\n\r\n/**\r\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\r\n * whatever entity type are you passing.\r\n *\r\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\r\n */\r\nexport class MongoEntityManager extends EntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\r\n        super(connection, queryRunnerProvider);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes raw SQL query and returns raw database results.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Queries aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided entity manager.\r\n     */\r\n    transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\r\n        throw new Error(`Transactions aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Using Query Builder with MongoDB is not supported yet.\r\n     * Calling this method will return an error.\r\n     */\r\n    createQueryBuilder<Entity>(entityClassOrName: ObjectType<Entity>|string, alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        throw new Error(`Query Builder is not supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    async find<Entity>(entityClassOrName: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        return cursor.toArray();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    async findAndCount<Entity>(entityClassOrName: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[ Entity[], number ]> {\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        const [results, count] = await Promise.all<any>([\r\n            cursor.toArray(),\r\n            this.count(entityClassOrName, query),\r\n        ]);\r\n        return [results, parseInt(count)];\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    async findByIds<Entity>(entityClassOrName: ObjectType<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\r\n        const objectIdInstance = require(\"mongodb\").ObjectID;\r\n        query[\"_id\"] = { $in: ids.map(id => {\r\n            if (id instanceof objectIdInstance)\r\n                return id;\r\n\r\n            return id[metadata.objectIdColumn!.propertyName];\r\n        }) };\r\n\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        return await cursor.toArray();\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions and/or find options.\r\n     */\r\n    async findOne<Entity>(entityClassOrName: ObjectType<Entity>|string, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\r\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n\r\n        // const result = await cursor.limit(1).next();\r\n        const result = await cursor.limit(1).toArray();\r\n        return result.length > 0 ? result[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    async findOneById<Entity>(entityClassOrName: ObjectType<Entity>|string, id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\r\n        query[\"_id\"] = id;\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\r\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n\r\n        // const result = await cursor.limit(1).next();\r\n        const result = await cursor.limit(1).toArray();\r\n        return result.length > 0 ? result[0] : undefined;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    createCursor<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.cursor(metadata.tableName, query);\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    createEntityCursor<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\r\n\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        const cursor = this.createCursor(entityClassOrName, query);\r\n        const ParentCursor = require(\"mongodb\").Cursor;\r\n        cursor.toArray = function (callback?: MongoCallback<Entity[]>) {\r\n            if (callback) {\r\n                ParentCursor.prototype.toArray.call(this, (error: MongoError, results: Entity[]): void => {\r\n                    if (error) {\r\n                        callback(error, results);\r\n                        return;\r\n                    }\r\n\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return callback(error, transformer.transformAll(results, metadata));\r\n                });\r\n            } else {\r\n                return ParentCursor.prototype.toArray.call(this).then((results: Entity[]) => {\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return transformer.transformAll(results, metadata);\r\n                });\r\n            }\r\n        };\r\n        cursor.next = function (callback?: MongoCallback<CursorResult>) {\r\n            if (callback) {\r\n                ParentCursor.prototype.next.call(this, (error: MongoError, result: CursorResult): void => {\r\n                    if (error || !result) {\r\n                        callback(error, result);\r\n                        return;\r\n                    }\r\n\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return callback(error, transformer.transform(result, metadata));\r\n                });\r\n            } else {\r\n                return ParentCursor.prototype.next.call(this).then((result: Entity) => {\r\n                    if (!result) return result;\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return transformer.transform(result, metadata);\r\n                });\r\n            }\r\n        };\r\n        return cursor;\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate<Entity>(entityClassOrName: ObjectType<Entity>|string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.aggregate(metadata.tableName, pipeline, options);\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    bulkWrite<Entity>(entityClassOrName: ObjectType<Entity>|string, operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.bulkWrite(metadata.tableName, operations, options);\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    count<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.count(metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    createCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|string, fieldOrSpec: string|any, options?: MongodbIndexOptions): Promise<string> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.createCollectionIndex(metadata.tableName, fieldOrSpec, options);\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error.\r\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    createCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string, indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.createCollectionIndexes(metadata.tableName, indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    deleteMany<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.deleteMany(metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    deleteOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.deleteOne(metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    distinct<Entity>(entityClassOrName: ObjectType<Entity>|string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.distinct(metadata.tableName, key, query, options);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    dropCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|string, indexName: string, options?: CollectionOptions): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.dropCollectionIndex(metadata.tableName, indexName, options);\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    dropCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.dropCollectionIndexes(metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndDelete<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.findOneAndDelete(metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndReplace<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndUpdate<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.findOneAndUpdate(metadata.tableName, query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    geoHaystackSearch<Entity>(entityClassOrName: ObjectType<Entity>|string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.geoHaystackSearch(metadata.tableName, x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    geoNear<Entity>(entityClassOrName: ObjectType<Entity>|string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.geoNear(metadata.tableName, x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    group<Entity>(entityClassOrName: ObjectType<Entity>|string, keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.group(metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.collectionIndexes(metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexExists<Entity>(entityClassOrName: ObjectType<Entity>|string, indexes: string|string[]): Promise<boolean> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.collectionIndexExists(metadata.tableName, indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    collectionIndexInformation<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { full: boolean }): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.collectionIndexInformation(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: CollectionOptions): OrderedBulkOperation {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.initializeOrderedBulkOp(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: CollectionOptions): UnorderedBulkOperation {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.initializeUnorderedBulkOp(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    insertMany<Entity>(entityClassOrName: ObjectType<Entity>|string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.insertMany(metadata.tableName, docs, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    insertOne<Entity>(entityClassOrName: ObjectType<Entity>|string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.insertOne(metadata.tableName, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    isCapped<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.isCapped(metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.listCollectionIndexes(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    mapReduce<Entity>(entityClassOrName: ObjectType<Entity>|string, map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.mapReduce(metadata.tableName, map, reduce, options);\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    parallelCollectionScan<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.parallelCollectionScan(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    reIndex<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.reIndex(metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    rename<Entity>(entityClassOrName: ObjectType<Entity>|string, newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.rename(metadata.tableName, newName, options);\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    replaceOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.replaceOne(metadata.tableName, query, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    stats<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { scale: number }): Promise<CollStats> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.stats(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    updateMany<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.updateMany(metadata.tableName, query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    updateOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.updateOne(metadata.tableName, query, update, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected get queryRunner(): MongoQueryRunner {\r\n        return (this.connection.driver as MongoDriver).queryRunner;\r\n    }\r\n\r\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\r\n        if (!optionsOrConditions)\r\n            return undefined;\r\n\r\n        return FindOptionsUtils.isFindManyOptions(optionsOrConditions) ? optionsOrConditions.where : optionsOrConditions;\r\n    }\r\n\r\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\r\n        if (!optionsOrConditions)\r\n            return undefined;\r\n\r\n        return FindOptionsUtils.isFindOneOptions(optionsOrConditions) ? optionsOrConditions.where : optionsOrConditions;\r\n    }\r\n\r\n    protected convertFindOptionsOrderToOrderCriteria<Entity, P>(order: { [P in keyof Entity]?: \"ASC\"|\"DESC\" }) {\r\n        const orderCriteria: ObjectLiteral = {};\r\n        Object.keys(order).forEach(key => orderCriteria[key] = [key, order[key]!.toLowerCase()]);\r\n        return orderCriteria;\r\n    }\r\n\r\n}"],"sourceRoot":".."}