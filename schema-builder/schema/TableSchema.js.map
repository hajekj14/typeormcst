{"version":3,"sources":["../../src/schema-builder/schema/TableSchema.ts"],"names":[],"mappings":"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","file":"TableSchema.js","sourcesContent":["import {ColumnSchema} from \"./ColumnSchema\";\r\nimport {IndexSchema} from \"./IndexSchema\";\r\nimport {ForeignKeySchema} from \"./ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"./PrimaryKeySchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\n\r\n/**\r\n * Table schema in the database represented in this class.\r\n */\r\nexport class TableSchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Table name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Table columns.\r\n     */\r\n    columns: ColumnSchema[] = [];\r\n\r\n    /**\r\n     * Table indices.\r\n     */\r\n    indices: IndexSchema[] = [];\r\n\r\n    /**\r\n     * Table foreign keys.\r\n     */\r\n    foreignKeys: ForeignKeySchema[] = [];\r\n\r\n    /**\r\n     * Table primary keys.\r\n     */\r\n    primaryKeys: PrimaryKeySchema[] = [];\r\n\r\n    /**\r\n     * Indicates if table schema was just created.\r\n     * This is needed, for example to check if we need to skip primary keys creation\r\n     * for new table schemas.\r\n     */\r\n    justCreated: boolean = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string, columns?: ColumnSchema[]|ObjectLiteral[], justCreated?: boolean) {\r\n        this.name = name;\r\n        if (columns) {\r\n            this.columns = (columns as any[]).map(column => { // as any[] is a temporary fix (some weird compiler error)\r\n                if (column instanceof ColumnSchema) {\r\n                    return column;\r\n                } else {\r\n                    return new ColumnSchema(column);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (justCreated !== undefined)\r\n            this.justCreated = justCreated;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets only those primary keys that does not\r\n     */\r\n    get primaryKeysWithoutGenerated(): PrimaryKeySchema[] {\r\n        const generatedColumn = this.columns.find(column => column.isGenerated);\r\n        if (!generatedColumn)\r\n            return this.primaryKeys;\r\n\r\n        return this.primaryKeys.filter(primaryKey => {\r\n            return primaryKey.columnName !== generatedColumn.name;\r\n        });\r\n    }\r\n\r\n    get hasGeneratedColumn(): boolean {\r\n        return !!this.columns.find(column => column.isGenerated);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Clones this table schema to a new table schema with all properties cloned.\r\n     */\r\n    clone(): TableSchema {\r\n        const cloned = new TableSchema(this.name);\r\n        cloned.columns = this.columns.map(column => column.clone());\r\n        cloned.indices = this.indices.map(index => index.clone());\r\n        cloned.foreignKeys = this.foreignKeys.map(key => key.clone());\r\n        cloned.primaryKeys = this.primaryKeys.map(key => key.clone());\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Adds column schemas.\r\n     */\r\n    addColumns(columns: ColumnSchema[]) {\r\n        this.columns = this.columns.concat(columns);\r\n    }\r\n\r\n    /**\r\n     * Replaces given column.\r\n     */\r\n    replaceColumn(oldColumn: ColumnSchema, newColumn: ColumnSchema) {\r\n        this.columns[this.columns.indexOf(oldColumn)] = newColumn;\r\n    }\r\n\r\n    /**\r\n     * Removes a column schema from this table schema.\r\n     */\r\n    removeColumn(columnToRemove: ColumnSchema) {\r\n        const foundColumn = this.columns.find(column => column.name === columnToRemove.name);\r\n        if (foundColumn)\r\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\r\n    }\r\n\r\n    /**\r\n     * Remove all column schemas from this table schema.\r\n     */\r\n    removeColumns(columns: ColumnSchema[]) {\r\n        columns.forEach(column => this.removeColumn(column));\r\n    }\r\n\r\n    /**\r\n     * Adds all given primary keys.\r\n     */\r\n    addPrimaryKeys(addedKeys: PrimaryKeySchema[]) {\r\n        addedKeys.forEach(key => this.primaryKeys.push(key));\r\n    }\r\n\r\n    /**\r\n     * Removes all given primary keys.\r\n     */\r\n    removePrimaryKeys(droppedKeys: PrimaryKeySchema[]) {\r\n        droppedKeys.forEach(key => {\r\n            this.primaryKeys.splice(this.primaryKeys.indexOf(key), 1);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes primary keys of the given columns.\r\n     */\r\n    removePrimaryKeysOfColumns(columns: ColumnSchema[]) {\r\n        this.primaryKeys = this.primaryKeys.filter(primaryKey => {\r\n            return !columns.find(column => column.name === primaryKey.columnName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds foreign key schemas.\r\n     */\r\n    addForeignKeys(foreignKeys: ForeignKeySchema[]) {\r\n        this.foreignKeys = this.foreignKeys.concat(foreignKeys);\r\n    }\r\n\r\n    /**\r\n     * Removes foreign key from this table schema.\r\n     */\r\n    removeForeignKey(removedForeignKey: ForeignKeySchema) {\r\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name); // this must be by name\r\n        if (fk)\r\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\r\n    }\r\n\r\n    /**\r\n     * Removes all foreign keys from this table schema.\r\n     */\r\n    removeForeignKeys(dbForeignKeys: ForeignKeySchema[]) {\r\n        dbForeignKeys.forEach(foreignKey => this.removeForeignKey(foreignKey));\r\n    }\r\n\r\n    /**\r\n     * Removes index schema from this table schema.\r\n     */\r\n    removeIndex(indexSchema: IndexSchema) {\r\n        const index = this.indices.find(index => index.name === indexSchema.name);\r\n        if (index)\r\n            this.indices.splice(this.indices.indexOf(index), 1);\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table schema and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(queryRunner: QueryRunner, columnMetadatas: ColumnMetadata[]): ColumnSchema[] {\r\n        return this.columns.filter(columnSchema => {\r\n            const columnMetadata = columnMetadatas.find(columnMetadata => columnMetadata.fullName === columnSchema.name);\r\n            if (!columnMetadata)\r\n                return false; // we don't need new columns, we only need exist and changed\r\n\r\n            return  columnSchema.name !== columnMetadata.fullName ||\r\n                    columnSchema.type !== queryRunner.normalizeType(columnMetadata) ||\r\n                    columnSchema.comment !== columnMetadata.comment ||\r\n                    (!columnSchema.isGenerated && !queryRunner.compareDefaultValues(columnMetadata.default, columnSchema.default)) || // we included check for generated here, because generated columns already can have default values\r\n                    columnSchema.isNullable !== columnMetadata.isNullable ||\r\n                    columnSchema.isUnique !== columnMetadata.isUnique ||\r\n                    // columnSchema.isPrimary !== columnMetadata.isPrimary ||\r\n                    columnSchema.isGenerated !== columnMetadata.isGenerated;\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates table schema from a given entity metadata.\r\n     *\r\n     * todo: need deeper implementation\r\n     */\r\n    static create(entityMetadata: EntityMetadata, queryRunner: QueryRunner) {\r\n        const tableSchema = new TableSchema(entityMetadata.table.name);\r\n        entityMetadata.columns.forEach(column => {\r\n            tableSchema.columns.push(ColumnSchema.create(column, queryRunner.normalizeType(column)));\r\n        });\r\n\r\n        return tableSchema;\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}