{"version":3,"sources":["../../src/schema-builder/schema/IndexSchema.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH;IA0BI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,qBAAY,SAAiB,EAAE,IAAY,EAAE,WAAqB,EAAE,QAAiB;QACjF,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,2BAAK,GAAL;QACI,MAAM,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzG,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACI,kBAAM,GAAb,UAAc,aAA4B;QACtC,MAAM,CAAC,IAAI,WAAW,CAClB,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EACvC,aAAa,CAAC,IAAI,EAClB,aAAa,CAAC,OAAO,EACrB,aAAa,CAAC,QAAQ,CACzB,CAAC;IACN,CAAC;IAEL,kBAAC;AAAD,CAhEA,AAgEC,IAAA;AAhEY,kCAAW","file":"IndexSchema.js","sourcesContent":["import {IndexMetadata} from \"../../metadata/IndexMetadata\";\r\n\r\n/**\r\n * Database's table index stored in this class.\r\n */\r\nexport class IndexSchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Table name that contains this unique index.\r\n     */\r\n    tableName: string;\r\n\r\n    /**\r\n     * Index name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Columns included in this index.\r\n     */\r\n    columnNames: string[];\r\n\r\n    /**\r\n     * Indicates if this index is unique.\r\n     */\r\n    isUnique: boolean;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(tableName: string, name: string, columnNames: string[], isUnique: boolean) {\r\n        this.tableName = tableName;\r\n        this.name = name;\r\n        this.columnNames = columnNames;\r\n        this.isUnique = isUnique;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this index with exactly same properties.\r\n     */\r\n    clone() {\r\n        return new IndexSchema(this.tableName, this.name, this.columnNames.map(name => name), this.isUnique);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates index from the index metadata object.\r\n     */\r\n    static create(indexMetadata: IndexMetadata): IndexSchema {\r\n        return new IndexSchema(\r\n            indexMetadata.entityMetadata.table.name,\r\n            indexMetadata.name,\r\n            indexMetadata.columns,\r\n            indexMetadata.isUnique\r\n        );\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}