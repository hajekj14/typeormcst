{"version":3,"sources":["../../src/metadata-args/collection/TargetMetadataArgsCollection.ts"],"names":[],"mappings":";;AAAA,sGAAmG;AAEnG;IAAA;QAEI,4EAA4E;QAC5E,uBAAuB;QACvB,4EAA4E;QAElE,UAAK,GAAQ,EAAE,CAAC;IA4D9B,CAAC;IAtDG,sBAAI,gDAAM;QAJV,4EAA4E;QAC5E,oBAAoB;QACpB,4EAA4E;aAE5E;YACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC7B,CAAC;;;OAAA;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,6CAAM,GAAN,UAAO,UAA4D,EAAE,OAAa;QAC9E,IAAM,UAAU,GAAG,IAAW,IAAI,CAAC,WAAY,EAAE,CAAC;QAClD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAxB,CAAwB,CAAC,CAAC;QAC5E,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED,qDAAc,GAAd,UAAe,GAAqB;QAEhC,4DAA4D;QAC5D,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;YACL,MAAM,CAAC,IAAW,IAAI,CAAC,WAAY,EAAE,CAAC;QAE1C,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,sDAAe,GAAf,UAAgB,OAA+B;QAC3C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,QAAQ;YACvB,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0CAAG,GAAH,UAAI,QAAW,EAAE,wBAAgC;QAAhC,yCAAA,EAAA,gCAAgC;QAC7C,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC3B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,YAAY,QAAQ,CAAC,CAAC;gBAC3D,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;YAEhE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACpC,MAAM,IAAI,uDAA0B,CAAQ,QAAQ,CAAC,WAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjG,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAED,8CAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IACxC,CAAC;IAED,4EAA4E;IAC5E,kBAAkB;IAClB,4EAA4E;IAEpE,oDAAa,GAArB,UAAsB,WAAqB;QACvC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,MAAM,KAAK,WAAW,EAA/B,CAA+B,CAAC,CAAC;IAC1E,CAAC;IAEL,mCAAC;AAAD,CAlEA,AAkEC,IAAA;AAlEY,oEAA4B","file":"TargetMetadataArgsCollection.js","sourcesContent":["import {MetadataAlreadyExistsError} from \"../../metadata-builder/error/MetadataAlreadyExistsError\";\r\n\r\nexport class TargetMetadataArgsCollection<T extends { target?: Function|string }> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected items: T[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    get length() {\r\n        return this.items.length;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): this {\r\n        const collection = new (<any> this.constructor)();\r\n        this.items.filter(callbackfn).forEach(metadata => collection.add(metadata));\r\n        return collection;\r\n    }\r\n\r\n    filterByTarget(cls?: Function|string): this {\r\n\r\n        // if no class specified then simply return empty collection\r\n        if (!cls)\r\n            return new (<any> this.constructor)();\r\n\r\n        return this.filterByTargets([cls]);\r\n    }\r\n\r\n    filterByTargets(classes: Array<Function|string>): this { // Function[]|string[] ?\r\n        return this.filter(metadata => {\r\n            if (!metadata.target) return false;\r\n            return classes.indexOf(metadata.target) !== -1;\r\n        });\r\n    }\r\n\r\n    add(metadata: T, checkForDuplicateTargets = false) {\r\n        if (checkForDuplicateTargets) {\r\n            if (!metadata.target || !(metadata.target instanceof Function))\r\n                throw new Error(`Target is not set in the given metadata.`);\r\n\r\n            if (this.hasWithTarget(metadata.target))\r\n                throw new MetadataAlreadyExistsError((<any> metadata.constructor).name, metadata.target);\r\n        }\r\n\r\n        this.items.push(metadata);\r\n    }\r\n\r\n    toArray() {\r\n        return this.items.map(item => item);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    private hasWithTarget(constructor: Function): boolean {\r\n        return !!this.items.find(metadata => metadata.target === constructor);\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}