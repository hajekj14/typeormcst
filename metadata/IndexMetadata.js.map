{"version":3,"sources":["../../src/metadata/IndexMetadata.ts"],"names":[],"mappings":"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","file":"IndexMetadata.js","sourcesContent":["import {EntityMetadata} from \"./EntityMetadata\";\r\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {ColumnMetadata} from \"./ColumnMetadata\";\r\n\r\n/**\r\n * Index metadata contains all information about table's index.\r\n */\r\nexport class IndexMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the class to which this index is applied.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Indicates if this index must be unique.\r\n     */\r\n    isUnique: boolean = false;\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    target?: Function|string;\r\n\r\n    /**\r\n     * Indexed columns.\r\n     */\r\n    columns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * User specified index name.\r\n     */\r\n    givenName?: string;\r\n\r\n    /**\r\n     * User specified column names.\r\n     */\r\n    givenColumnNames?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\r\n\r\n    /**\r\n     * Final index name.\r\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\r\n     * If index name was not given then its generated.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Gets the table name on which index is applied.\r\n     */\r\n    tableName: string;\r\n\r\n    /**\r\n     * Map of column names with order set.\r\n     * Used only by MongoDB driver.\r\n     */\r\n    columnNamesWithOrderingMap: { [key: string]: number } = {};\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        columns?: ColumnMetadata[],\r\n        args?: IndexMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        if (options.columns)\r\n            this.columns = options.columns;\r\n\r\n        if (options.args) {\r\n            this.target = options.args.target;\r\n            this.isUnique = options.args.unique;\r\n            this.givenName = options.args.name;\r\n            this.givenColumnNames = options.args.columns;\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Build Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend index properties.\r\n     * Must be called after all entity metadata's properties map, columns and relations are built.\r\n     */\r\n    build(namingStrategy: NamingStrategyInterface): this {\r\n\r\n        const map: { [key: string]: number } = {};\r\n        this.tableName = this.entityMetadata.tableName;\r\n\r\n        // if columns already an array of string then simply return it\r\n        if (this.givenColumnNames) {\r\n            let columnPropertyNames: string[] = [];\r\n            if (this.givenColumnNames instanceof Array) {\r\n                columnPropertyNames = this.givenColumnNames;\r\n                columnPropertyNames.forEach(name => map[name] = 1);\r\n            } else {\r\n                // if columns is a function that returns array of field names then execute it and get columns names from it\r\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\r\n                if (columnsFnResult instanceof Array) {\r\n                    columnPropertyNames = columnsFnResult.map((i: any) => String(i));\r\n                    columnPropertyNames.forEach(name => map[name] = 1);\r\n                } else {\r\n                    columnPropertyNames = Object.keys(columnsFnResult).map((i: any) => String(i));\r\n                    Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\r\n                }\r\n            }\r\n\r\n            // console.log(\"columnPropertyNames:\", columnPropertyNames);\r\n            // console.log(\"this.entityMetadata.columns:\", this.entityMetadata.columns);\r\n            const columns = this.entityMetadata.columns.filter(column => columnPropertyNames.indexOf(column.propertyPath) !== -1);\r\n            // console.log(\"columns:\", columns);\r\n            this.entityMetadata.relations\r\n                .filter(relation => relation.isWithJoinColumn && columnPropertyNames.indexOf(relation.propertyName) !== -1)\r\n                .forEach(relation => columns.push(...relation.joinColumns));\r\n\r\n            // todo: better to extract all validation into single place if possible\r\n            const missingColumnNames = columnPropertyNames.filter(columnPropertyName => {\r\n                return !this.entityMetadata.columns.find(column => column.propertyPath === columnPropertyName) &&\r\n                    !this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyPath === columnPropertyName);\r\n            });\r\n            if (missingColumnNames.length > 0) {\r\n                throw new Error(`Index ${this.givenName ? \"\\\"\" + this.givenName + \"\\\" \" : \"\"}contains columns that are missing in the entity: ` + missingColumnNames.join(\", \"));\r\n            }\r\n\r\n            this.columns = columns;\r\n        }\r\n\r\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\r\n            const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\r\n            if (column)\r\n                updatedMap[column.databaseName] = map[key];\r\n            return updatedMap;\r\n        }, {} as { [key: string]: number });\r\n        this.name = namingStrategy.indexName(this.givenName ? this.givenName : undefined, this.entityMetadata.tableName, this.columns.map(column => column.databaseName));\r\n        return this;\r\n    }\r\n\r\n}"],"sourceRoot":".."}