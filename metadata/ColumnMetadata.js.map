{"version":3,"sources":["../../src/metadata/ColumnMetadata.ts"],"names":[],"mappings":"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","file":"ColumnMetadata.js","sourcesContent":["import {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {ColumnType} from \"./types/ColumnTypes\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\n\r\n/**\r\n * Kinda type of the column. Not a type in the database, but locally used type to determine what kind of column\r\n * we are working with.\r\n * For example, \"primary\" means that it will be a primary column, or \"createDate\" means that it will create a create\r\n * date column.\r\n */\r\nexport type ColumnMode = \"regular\"|\"virtual\"|\"createDate\"|\"updateDate\"|\"version\"|\"treeChildrenCount\"|\"treeLevel\"|\"discriminator\"|\"parentId\"|\"objectId\"|\"array\";\r\n\r\n/**\r\n * This metadata contains all information about entity's column.\r\n */\r\nexport class ColumnMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this column metadata is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Embedded metadata where this column metadata is.\r\n     */\r\n    embeddedMetadata: EmbeddedMetadata;\r\n\r\n    /**\r\n     * If this column is foreign key of some relation then this relation's metadata will be here.\r\n     */\r\n    relationMetadata: RelationMetadata;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Readonly Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    readonly target: Function|string|\"__virtual__\";\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * The real reflected property type.\r\n     */\r\n    // readonly propertyType: string;\r\n\r\n    /**\r\n     * The database type of the column.\r\n     */\r\n    readonly type: ColumnType;\r\n\r\n    /**\r\n     * Column's mode in which this column is working.\r\n     */\r\n    readonly mode: ColumnMode;\r\n\r\n    /**\r\n     * Type's length in the database.\r\n     */\r\n    readonly length: string = \"\";\r\n\r\n    /**\r\n     * Indicates if this column is a primary key.\r\n     */\r\n    readonly isPrimary: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column is generated (auto increment or generated other way).\r\n     */\r\n    readonly isGenerated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if value in the database should be unique or not.\r\n     */\r\n    readonly isUnique: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column can contain nulls or not.\r\n     */\r\n    readonly isNullable: boolean = false;\r\n\r\n    /**\r\n     * Column comment.\r\n     */\r\n    readonly comment: string = \"\";\r\n\r\n    /**\r\n     * Default database value.\r\n     */\r\n    readonly default: any;\r\n\r\n    /**\r\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\r\n     * number of digits that are stored for the values.\r\n     */\r\n    readonly precision: number;\r\n\r\n    /**\r\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\r\n     * of digits to the right of the decimal point and must not be greater than precision.\r\n     */\r\n    readonly scale: number;\r\n\r\n    /**\r\n     * Indicates if this date column will contain a timezone.\r\n     * Used only for date-typed column types.\r\n     * Note that timezone option is not supported by all databases (only postgres for now).\r\n     */\r\n    readonly timezone: boolean;\r\n\r\n    /**\r\n     * Indicates if date object must be stored in given date's timezone.\r\n     * By default date is saved in UTC timezone.\r\n     * Works only with \"datetime\" columns.\r\n     */\r\n    readonly localTimezone?: boolean;\r\n\r\n    /**\r\n     * Indicates if column's type will be set as a fixed-length data type.\r\n     * Works only with \"string\" columns.\r\n     */\r\n    readonly fixedLength?: boolean;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Private Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Column name to be used in the database.\r\n     */\r\n    private _name: string;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(args: ColumnMetadataArgs) {\r\n        this.target = args.target;\r\n        this.propertyName = args.propertyName;\r\n\r\n        if (args.mode)\r\n            this.mode = args.mode;\r\n        // if (args.propertyType)\r\n        //     this.propertyType = args.propertyType.toLowerCase();\r\n        if (args.options.name)\r\n            this._name = args.options.name;\r\n        if (args.options.type)\r\n            this.type = args.options.type;\r\n\r\n        if (args.options.length)\r\n            this.length = String(args.options.length);\r\n        if (args.options.primary)\r\n            this.isPrimary = args.options.primary;\r\n        if (args.options.generated)\r\n            this.isGenerated = args.options.generated;\r\n        if (args.options.unique)\r\n            this.isUnique = args.options.unique;\r\n        if (args.options.nullable)\r\n            this.isNullable = args.options.nullable;\r\n        if (args.options.comment)\r\n            this.comment = args.options.comment;\r\n        if (args.options.default !== undefined && args.options.default !== null)\r\n            this.default = args.options.default;\r\n        if (args.options.scale)\r\n            this.scale = args.options.scale;\r\n        if (args.options.precision)\r\n            this.precision = args.options.precision;\r\n        if (args.options.timezone)\r\n            this.timezone = args.options.timezone;\r\n        if (args.options.localTimezone)\r\n            this.localTimezone = args.options.localTimezone;\r\n        if (args.options.fixedLength)\r\n            this.fixedLength = args.options.fixedLength;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Accessors\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets column's entity target.\r\n     * Original target returns target of the class where column is.\r\n     * This class can be an abstract class, but column even is from that class,\r\n     * but its more related to a specific entity. That's why we need this field.\r\n     */\r\n    get entityTarget(): Function|string {\r\n        return this.entityMetadata.target;\r\n    }\r\n\r\n    /**\r\n     * Column name in the database.\r\n     *\r\n     * todo: rename to originalName\r\n     */\r\n    get name(): string {\r\n        return this.entityMetadata.namingStrategy.columnName(this.propertyName, this._name);\r\n    }\r\n\r\n    /**\r\n     * Column name in the database including its embedded prefixes.\r\n     *\r\n     * todo: rename to databaseName\r\n     */\r\n    get fullName(): string {\r\n\r\n        // if this column is embedded's column then apply different entity\r\n        if (this.embeddedMetadata) {\r\n\r\n            // because embedded can be inside other embedded we need to go recursively and collect all prefix name\r\n            const prefixes: string[] = [];\r\n            const buildPrefixRecursively = (embeddedMetadata: EmbeddedMetadata) => {\r\n                if (embeddedMetadata.parentEmbeddedMetadata)\r\n                    buildPrefixRecursively(embeddedMetadata.parentEmbeddedMetadata);\r\n\r\n                prefixes.push(embeddedMetadata.prefix);\r\n            };\r\n            buildPrefixRecursively(this.embeddedMetadata);\r\n\r\n            return this.entityMetadata.namingStrategy.embeddedColumnName(prefixes, this.propertyName, this._name);\r\n        }\r\n\r\n        // if there is a naming strategy then use it to normalize propertyName as column name\r\n        if (this.entityMetadata)\r\n            return this.entityMetadata.namingStrategy.columnName(this.propertyName, this._name);\r\n\r\n        throw new Error(`Column ${this._name ? this._name + \" \" : \"\"}is not attached to any entity or embedded.`);\r\n    }\r\n\r\n    /**\r\n     * Indicates if this column is in embedded, not directly in the table.\r\n     */\r\n    get isInEmbedded(): boolean {\r\n        return !!this.embeddedMetadata;\r\n    }\r\n\r\n    /**\r\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\r\n     */\r\n    get isVirtual() {\r\n        return this.mode === \"virtual\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if column is array.\r\n     * Array columns are now only supported by Mongodb driver.\r\n     *\r\n     * todo: implement array serialization functionality for relational databases as well\r\n     */\r\n    get isArray() {\r\n        return this.mode === \"array\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if column is a parent id. Parent id columns are not mapped to the entity.\r\n     */\r\n    get isParentId() {\r\n        return this.mode === \"parentId\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\r\n     */\r\n    get isDiscriminator() {\r\n        return this.mode === \"discriminator\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if this column contains an entity creation date.\r\n     */\r\n    get isCreateDate() {\r\n        return this.mode === \"createDate\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if this column contains an entity update date.\r\n     */\r\n    get isUpdateDate() {\r\n        return this.mode === \"updateDate\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if this column contains an entity version.\r\n     */\r\n    get isVersion() {\r\n        return this.mode === \"version\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if this column contains an object id.\r\n     */\r\n    get isObjectId() {\r\n        return this.mode === \"objectId\";\r\n    }\r\n\r\n    /**\r\n     * If this column references some column, it gets the first referenced column of this column.\r\n     */\r\n    get referencedColumn(): ColumnMetadata|undefined {\r\n        const foreignKey = this.entityMetadata.foreignKeys.find(foreignKey => foreignKey.columns.indexOf(this) !== -1);\r\n        if (foreignKey) {\r\n            return foreignKey.referencedColumns[0];\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets embedded property in which column is.\r\n     */\r\n    get embeddedProperty() {\r\n        if (!this.embeddedMetadata)\r\n            throw new Error(`This column${ this._name ? this._name + \" \" : \"\" } is not in embedded entity.`);\r\n\r\n        return this.embeddedMetadata.propertyName;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    hasEntityValue(entity: any) {\r\n        if (!entity)\r\n            return false;\r\n\r\n        if (this.isInEmbedded) {\r\n            return  entity[this.embeddedProperty] !== undefined &&\r\n                    entity[this.embeddedProperty] !== null &&\r\n                    entity[this.embeddedProperty][this.propertyName] !== undefined &&\r\n                    entity[this.embeddedProperty][this.propertyName] !== null;\r\n\r\n        } else {\r\n            return  entity[this.propertyName] !== undefined &&\r\n                    entity[this.propertyName] !== null;\r\n        }\r\n    }\r\n\r\n    getEntityValue(entity: any) {\r\n        if (this.isInEmbedded) {\r\n            if (entity[this.embeddedProperty] === undefined ||\r\n                entity[this.embeddedProperty] === null)\r\n                return undefined;\r\n\r\n            return entity[this.embeddedProperty][this.propertyName];\r\n        } else {\r\n            return entity[this.propertyName];\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":".."}