{"version":3,"sources":["../../src/metadata/ColumnMetadata.ts"],"names":[],"mappings":"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","file":"ColumnMetadata.js","sourcesContent":["import {ColumnType} from \"./types/ColumnTypes\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * This metadata contains all information about entity's column.\r\n */\r\nexport class ColumnMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this column metadata is.\r\n     *\r\n     * For example for @Column() name: string in Post, entityMetadata will be metadata of Post entity.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Embedded metadata where this column metadata is.\r\n     * If this column is not in embed then this property value is undefined.\r\n     */\r\n    embeddedMetadata?: EmbeddedMetadata;\r\n\r\n    /**\r\n     * If column is a foreign key of some relation then this relation's metadata will be there.\r\n     * If this column does not have a foreign key then this property value is undefined.\r\n     */\r\n    relationMetadata?: RelationMetadata;\r\n\r\n    /**\r\n     * Class's property name on which this column is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * The database type of the column.\r\n     */\r\n    type: ColumnType;\r\n\r\n    /**\r\n     * Type's length in the database.\r\n     */\r\n    length: string = \"\";\r\n\r\n    /**\r\n     * Indicates if this column is a primary key.\r\n     */\r\n    isPrimary: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column is generated (auto increment or generated other way).\r\n     */\r\n    isGenerated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column value in the database should be unique or not.\r\n     */\r\n    isUnique: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column can contain nulls or not.\r\n     */\r\n    isNullable: boolean = false;\r\n\r\n    /**\r\n     * Column comment.\r\n     * This feature is not supported by all databases.\r\n     */\r\n    comment: string = \"\";\r\n\r\n    /**\r\n     * Default database value.\r\n     */\r\n    default?: any;\r\n\r\n    /**\r\n     * The precision for a decimal (exact numeric) column (applies only for decimal column),\r\n     * which is the maximum number of digits that are stored for the values.\r\n     */\r\n    precision?: number;\r\n\r\n    /**\r\n     * The scale for a decimal (exact numeric) column (applies only for decimal column),\r\n     * which represents the number of digits to the right of the decimal point and must not be greater than precision.\r\n     */\r\n    scale?: number;\r\n\r\n    /**\r\n     * Indicates if date column will contain a timezone.\r\n     * Used only for date-typed column types.\r\n     * Note that timezone option is not supported by all databases (only postgres for now).\r\n     */\r\n    timezone: boolean = false;\r\n\r\n    /**\r\n     * Indicates if date object must be stored in given date's timezone.\r\n     * By default date is saved in UTC timezone.\r\n     * Works only with \"datetime\" columns.\r\n     */\r\n    localTimezone: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column's type will be set as a fixed-length data type.\r\n     * Works only with \"string\" columns.\r\n     */\r\n    fixedLength: boolean = false;\r\n\r\n    /**\r\n     * Gets full path to this column property (including column property name).\r\n     * Full path is relevant when column is used in embeds (one or multiple nested).\r\n     * For example it will return \"counters.subcounters.likes\".\r\n     * If property is not in embeds then it returns just property name of the column.\r\n     */\r\n    propertyPath: string;\r\n\r\n    /**\r\n     * Complete column name in the database including its embedded prefixes.\r\n     */\r\n    databaseName: string;\r\n\r\n    /**\r\n     * Database name in the database without embedded prefixes applied.\r\n     */\r\n    databaseNameWithoutPrefixes: string;\r\n\r\n    /**\r\n     * Database name set by entity metadata builder, not yet passed naming strategy process and without embedded prefixes.\r\n     */\r\n    givenDatabaseName?: string;\r\n\r\n    /**\r\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\r\n     */\r\n    isVirtual: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is a parent id. Parent id columns are not mapped to the entity.\r\n     */\r\n    isParentId: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\r\n     */\r\n    isDiscriminator: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\r\n     */\r\n    isTreeLevel: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an entity creation date.\r\n     */\r\n    isCreateDate: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an entity update date.\r\n     */\r\n    isUpdateDate: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an entity version.\r\n     */\r\n    isVersion: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an object id.\r\n     */\r\n    isObjectId: boolean = false;\r\n\r\n    /**\r\n     * If this column is foreign key then it references some other column,\r\n     * and this property will contain reference to this column.\r\n     */\r\n    referencedColumn: ColumnMetadata|undefined;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        embeddedMetadata?: EmbeddedMetadata,\r\n        referencedColumn?: ColumnMetadata,\r\n        args: ColumnMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.embeddedMetadata = options.embeddedMetadata!;\r\n        this.referencedColumn = options.referencedColumn;\r\n        if (options.args.propertyName)\r\n            this.propertyName = options.args.propertyName;\r\n        if (options.args.options.name)\r\n            this.givenDatabaseName = options.args.options.name;\r\n        if (options.args.options.type)\r\n            this.type = options.args.options.type;\r\n        if (options.args.options.length)\r\n            this.length = String(options.args.options.length);\r\n        if (options.args.options.primary)\r\n            this.isPrimary = options.args.options.primary;\r\n        if (options.args.options.generated)\r\n            this.isGenerated = options.args.options.generated;\r\n        if (options.args.options.unique)\r\n            this.isUnique = options.args.options.unique;\r\n        if (options.args.options.nullable)\r\n            this.isNullable = options.args.options.nullable;\r\n        if (options.args.options.comment)\r\n            this.comment = options.args.options.comment;\r\n        if (options.args.options.default !== undefined)\r\n            this.default = options.args.options.default;\r\n        if (options.args.options.scale)\r\n            this.scale = options.args.options.scale;\r\n        if (options.args.options.precision)\r\n            this.precision = options.args.options.precision;\r\n        if (options.args.options.timezone)\r\n            this.timezone = options.args.options.timezone;\r\n        if (options.args.options.localTimezone)\r\n            this.localTimezone = options.args.options.localTimezone;\r\n        if (options.args.options.fixedLength)\r\n            this.fixedLength = options.args.options.fixedLength;\r\n        if (options.args.mode) {\r\n            this.isVirtual = options.args.mode === \"virtual\";\r\n            this.isParentId = options.args.mode === \"parentId\";\r\n            this.isDiscriminator = options.args.mode === \"discriminator\";\r\n            this.isTreeLevel = options.args.mode === \"treeLevel\";\r\n            this.isCreateDate = options.args.mode === \"createDate\";\r\n            this.isUpdateDate = options.args.mode === \"updateDate\";\r\n            this.isVersion = options.args.mode === \"version\";\r\n            this.isObjectId = options.args.mode === \"objectId\";\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates entity id map from the given entity ids array.\r\n     */\r\n    createValueMap(value: any) {\r\n\r\n        // extract column value from embeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object and return it in a\r\n            // { data: { information: { counters: { id: ... } } } } format\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // now need to access post[data][information][counters] to get column value from the counters\r\n            // and on each step we need to create complex literal object, e.g. first { data },\r\n            // then { data: { information } }, then { data: { information: { counters } } },\r\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\r\n            // this recursive function helps doing that\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], map: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                if (propertyName) {\r\n                    map[propertyName] = {};\r\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\r\n                    return map;\r\n                }\r\n                map[this.propertyName] = value;\r\n                return map;\r\n            };\r\n            return extractEmbeddedColumnValue(propertyNames, {});\r\n\r\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\r\n            return { [this.propertyName]: value };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts column value and returns its column name with this value in a literal object.\r\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\r\n     *\r\n     * Examples what this method can return depend if this column is in embeds.\r\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\r\n     */\r\n    getEntityValueMap(entity: ObjectLiteral): ObjectLiteral {\r\n\r\n        // extract column value from embeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object and return it in a\r\n            // { data: { information: { counters: { id: ... } } } } format\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // now need to access post[data][information][counters] to get column value from the counters\r\n            // and on each step we need to create complex literal object, e.g. first { data },\r\n            // then { data: { information } }, then { data: { information: { counters } } },\r\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\r\n            // this recursive function helps doing that\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral, map: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                if (propertyName) {\r\n                    map[propertyName] = {};\r\n                    extractEmbeddedColumnValue(propertyNames, value ? value[propertyName] : undefined, map[propertyName]);\r\n                    return map;\r\n                }\r\n                map[this.propertyName] = value ? value[this.propertyName] : undefined;\r\n                return map;\r\n            };\r\n            return extractEmbeddedColumnValue(propertyNames, entity, {});\r\n\r\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\r\n            return { [this.propertyName]: entity[this.propertyName] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts column value from the given entity.\r\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\r\n     */\r\n    getEntityValue(entity: ObjectLiteral): any|undefined {\r\n        // if (entity === undefined || entity === null) return undefined; // uncomment if needed\r\n\r\n        // extract column value from embeddeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\r\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                return propertyName ? extractEmbeddedColumnValue(propertyNames, value[propertyName]) : value;\r\n            };\r\n\r\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\r\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\r\n            if (embeddedObject) {\r\n                if (this.relationMetadata && this.referencedColumn && this.isVirtual) {\r\n                    const relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);\r\n                    return relatedEntity ? this.referencedColumn.getEntityValue(relatedEntity) : undefined;\r\n                } else {\r\n                    return embeddedObject[this.propertyName];\r\n                }\r\n            }\r\n            return undefined;\r\n            // return embeddedObject ? embeddedObject[this.propertyName] : undefined;\r\n\r\n        } else { // no embeds - no problems. Simply return column name by property name of the entity\r\n            if (this.relationMetadata && this.referencedColumn && this.isVirtual) {\r\n                const relatedEntity = this.relationMetadata.getEntityValue(entity);\r\n                return relatedEntity ? this.referencedColumn.getEntityValue(relatedEntity) : undefined;\r\n            } else {\r\n                return entity[this.propertyName];\r\n            }\r\n            // return entity[this.propertyName];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets given entity's column value.\r\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\r\n     */\r\n    setEntityValue(entity: ObjectLiteral, value: any): void {\r\n        if (this.embeddedMetadata) {\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const extractEmbeddedColumnValue = (embeddedMetadatas: EmbeddedMetadata[], map: ObjectLiteral): any => {\r\n                // if (!object[embeddedMetadata.propertyName])\r\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\r\n\r\n                const embeddedMetadata = embeddedMetadatas.shift();\r\n                if (embeddedMetadata) {\r\n                    if (!map[embeddedMetadata.propertyName])\r\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\r\n\r\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\r\n                    return map;\r\n                }\r\n                map[this.propertyName] = value;\r\n                return map;\r\n            };\r\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\r\n\r\n        } else {\r\n            entity[this.propertyName] = value;\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    build(namingStrategy: NamingStrategyInterface): this {\r\n        this.propertyPath = this.buildPropertyPath();\r\n        this.databaseName = this.buildDatabaseName(namingStrategy);\r\n        this.databaseNameWithoutPrefixes = namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);\r\n        return this;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Protected Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    protected buildPropertyPath(): string {\r\n        let path = \"\";\r\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\r\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\r\n\r\n        if (this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName)\r\n            path += this.referencedColumn.propertyName + \".\";\r\n\r\n        return path + this.propertyName;\r\n    }\r\n\r\n    protected buildDatabaseName(namingStrategy: NamingStrategyInterface): string {\r\n        const propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPropertyNames : [];\r\n        return namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);\r\n    }\r\n\r\n}"],"sourceRoot":".."}