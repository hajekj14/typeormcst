{"version":3,"sources":["../../src/metadata/TableMetadata.ts"],"names":[],"mappings":"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","file":"TableMetadata.js","sourcesContent":["import {EntityMetadata} from \"./EntityMetadata\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {TableType, TableTypes} from \"./types/TableTypes\";\r\nimport {EntityMetadataAlreadySetError} from \"./error/EntityMetadataAlreadySetError\";\r\nimport {EntityMetadataNotSetError} from \"./error/EntityMetadataNotSetError\";\r\n\r\n/**\r\n * TableMetadata contains all entity's table metadata and information.\r\n */\r\nexport class TableMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     * Function target is a table defined in the class.\r\n     * String target is a table defined in a json schema.\r\n     * \"__virtual__\" is a table defined without target class (like junction tables).\r\n     */\r\n    readonly target: Function|string|\"__virtual__\";\r\n\r\n    /**\r\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\r\n     */\r\n    readonly _orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\r\n\r\n    /**\r\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\r\n     */\r\n    readonly engine?: string;\r\n\r\n    /**\r\n     * Whether table must be synced during schema build or not\r\n     */\r\n    readonly skipSchemaSync?: boolean;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Private Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\r\n     */\r\n    private readonly tableType: TableType = \"regular\";\r\n\r\n    /**\r\n     * Table name in the database. If name is not set then table's name will be generated from target's name.\r\n     */\r\n    private readonly _name?: string;\r\n\r\n    /**\r\n     * EntityMetadata of this table metadata, where this table metadata contained.\r\n     */\r\n    private _entityMetadata?: EntityMetadata;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new TableMetadata based on the given arguments object.\r\n     */\r\n    constructor(args: TableMetadataArgs) {\r\n        this.target = args.target;\r\n        this.tableType = args.type;\r\n        this._name = args.name;\r\n        this._orderBy = args.orderBy;\r\n        this.engine = args.engine;\r\n        this.skipSchemaSync = args.skipSchemaSync;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Accessors\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Sets the entity metadata of this table metadata.\r\n     * Note that entity metadata can be set only once.\r\n     * Once you set it, you can't change it anymore.\r\n     */\r\n    set entityMetadata(metadata: EntityMetadata) {\r\n        if (this._entityMetadata)\r\n            throw new EntityMetadataAlreadySetError(TableMetadata, this.target, this._name);\r\n\r\n        this._entityMetadata = metadata;\r\n    }\r\n\r\n    /**\r\n     * Gets entity metadata of this table metadata.\r\n     * If entity metadata was not set then exception will be thrown.\r\n     */\r\n    get entityMetadata(): EntityMetadata {\r\n        if (!this._entityMetadata)\r\n            throw new EntityMetadataNotSetError(TableMetadata, this.target, this._name);\r\n\r\n        return this._entityMetadata;\r\n    }\r\n\r\n    /**\r\n     * Gets the table name without global table prefix.\r\n     * When querying table you need a table name with prefix, but in some scenarios,\r\n     * for example when you want to name a junction table that contains names of two other tables,\r\n     * you may want a table name without prefix.\r\n     */\r\n    get nameWithoutPrefix() {\r\n        if (this.isClosureJunction && this._name)\r\n            return this.entityMetadata.namingStrategy.closureJunctionTableName(this._name);\r\n\r\n        // otherwise generate table name from target's name\r\n        const name = this.target instanceof Function ? (this.target as any).name : this.target;\r\n        return this.entityMetadata.namingStrategy.tableName(name, this._name);\r\n    }\r\n\r\n    /**\r\n     * Table name in the database.\r\n     * This name includes global table prefix if it was set.\r\n     */\r\n    get name(): string {\r\n        if (this.entityMetadata.tablesPrefix)\r\n            return this.entityMetadata.namingStrategy.prefixTableName(this.entityMetadata.tablesPrefix, this.nameWithoutPrefix);\r\n\r\n        return this.nameWithoutPrefix;\r\n    }\r\n\r\n    /**\r\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\r\n     * If default order by was not set, then returns undefined.\r\n     */\r\n    get orderBy(): OrderByCondition|undefined {\r\n        if (this._orderBy instanceof Function)\r\n            return this._orderBy(this.entityMetadata.createPropertiesMap());\r\n\r\n        return this._orderBy;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is regular.\r\n     * All non-specific tables are just regular tables. Its a default table type.\r\n     */\r\n    get isRegular() {\r\n        return this.tableType === TableTypes.REGULAR;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is abstract.\r\n     * This type is for the tables that does not exist in the database,\r\n     * but provide columns and relations for the tables of the child classes who inherit them.\r\n     */\r\n    get isAbstract() {\r\n        return this.tableType === TableTypes.ABSTRACT;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is abstract.\r\n     * Junction table is a table automatically created by many-to-many relationship.\r\n     */\r\n    get isJunction() {\r\n        return this.tableType === TableTypes.JUNCTION;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is a closure table.\r\n     * Closure table is one of the tree-specific tables that supports closure database pattern.\r\n     */\r\n    get isClosure() {\r\n        return this.tableType === TableTypes.CLOSURE;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is a junction table of the closure table.\r\n     * This type is for tables that contain junction metadata of the closure tables.\r\n     */\r\n    get isClosureJunction() {\r\n        return this.tableType === TableTypes.CLOSURE_JUNCTION;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is an embeddable table.\r\n     * Embeddable tables are not stored in the database as separate tables.\r\n     * Instead their columns are embed into tables who owns them.\r\n     */\r\n    get isEmbeddable() {\r\n        return this.tableType === TableTypes.EMBEDDABLE;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is a single table child.\r\n     * Special table type for tables that are mapped into single table using Single Table Inheritance pattern.\r\n     */\r\n    get isSingleTableChild() {\r\n        return this.tableType === TableTypes.SINGLE_TABLE_CHILD;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is a class table child.\r\n     * Special table type for tables that are mapped into multiple tables using Class Table Inheritance pattern.\r\n     */\r\n    get isClassTableChild() {\r\n        return this.tableType === TableTypes.CLASS_TABLE_CHILD;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}