{"version":3,"sources":["../../src/metadata/ForeignKeyMetadata.ts"],"names":[],"mappings":";;AAKA;;GAEG;AACH;IAwDI,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,4BAAY,OAOX;QAnDD;;WAEG;QACH,YAAO,GAAqB,EAAE,CAAC;QAE/B;;WAEG;QACH,sBAAiB,GAAqB,EAAE,CAAC;QAsBzC;;WAEG;QACH,gBAAW,GAAa,EAAE,CAAC;QAE3B;;WAEG;QACH,0BAAqB,GAAa,EAAE,CAAC;QAcjC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,CAAC;QACjE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACnD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC3C,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;;OAGG;IACH,kCAAK,GAAL,UAAM,cAAuC;QACzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAnB,CAAmB,CAAC,CAAC;QACnE,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAnB,CAAmB,CAAC,CAAC;QACvF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;QAC/C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC;QACnE,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,SAAS,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACrJ,CAAC;IAEL,yBAAC;AAAD,CA7FA,AA6FC,IAAA;AA7FY,gDAAkB","file":"ForeignKeyMetadata.js","sourcesContent":["import {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {OnDeleteType} from \"./types/OnDeleteType\";\r\n\r\n/**\r\n * Contains all information about entity's foreign key.\r\n */\r\nexport class ForeignKeyMetadata {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this foreign key is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Entity metadata which this foreign key references.\r\n     */\r\n    referencedEntityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Array of columns of this foreign key.\r\n     */\r\n    columns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Array of referenced columns.\r\n     */\r\n    referencedColumns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * What to do with a relation on deletion of the row containing a foreign key.\r\n     */\r\n    onDelete?: OnDeleteType;\r\n\r\n    /**\r\n     * Gets the table name to which this foreign key is applied.\r\n     */\r\n    tableName: string;\r\n\r\n    /**\r\n     * Gets the table name to which this foreign key is referenced.\r\n     */\r\n    referencedTableName: string;\r\n\r\n    /**\r\n     * Gets foreign key name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Gets array of column names.\r\n     */\r\n    columnNames: string[] = [];\r\n\r\n    /**\r\n     * Gets array of referenced column names.\r\n     */\r\n    referencedColumnNames: string[] = [];\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        referencedEntityMetadata: EntityMetadata,\r\n        namingStrategy?: NamingStrategyInterface,\r\n        columns: ColumnMetadata[],\r\n        referencedColumns: ColumnMetadata[],\r\n        onDelete?: OnDeleteType\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.referencedEntityMetadata = options.referencedEntityMetadata;\r\n        this.columns = options.columns;\r\n        this.referencedColumns = options.referencedColumns;\r\n        this.onDelete = options.onDelete;\r\n        if (options.namingStrategy)\r\n            this.build(options.namingStrategy);\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend foreign key properties.\r\n     * Must be called after all entity metadatas and their columns are built.\r\n     */\r\n    build(namingStrategy: NamingStrategyInterface) {\r\n        this.columnNames = this.columns.map(column => column.databaseName);\r\n        this.referencedColumnNames = this.referencedColumns.map(column => column.databaseName);\r\n        this.tableName = this.entityMetadata.tableName;\r\n        this.referencedTableName = this.referencedEntityMetadata.tableName;\r\n        this.name = namingStrategy.foreignKeyName(this.tableName, this.columnNames, this.referencedEntityMetadata.tableName, this.referencedColumnNames);\r\n    }\r\n\r\n}"],"sourceRoot":".."}