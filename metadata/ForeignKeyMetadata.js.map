{"version":3,"sources":["../../src/metadata/ForeignKeyMetadata.ts"],"names":[],"mappings":";;AASA;;GAEG;AACH;IAmCI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,4BAAY,OAAyB,EACzB,eAA8B,EAC9B,iBAAmC,EACnC,QAAuB;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,EAAE,CAAC,CAAC,QAAQ,CAAC;YACT,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,CAAC;IASD,sBAAI,yCAAS;QAPb,4EAA4E;QAC5E,YAAY;QACZ,4EAA4E;QAE5E;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC;QAC1C,CAAC;;;OAAA;IAKD,sBAAI,mDAAmB;QAHvB;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;QACrC,CAAC;;;OAAA;IAKD,sBAAI,oCAAI;QAHR;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACtJ,CAAC;;;OAAA;IAKD,sBAAI,2CAAW;QAHf;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC,CAAC;QACvD,CAAC;;;OAAA;IAKD,sBAAI,qDAAqB;QAHzB;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC,CAAC;QACjE,CAAC;;;OAAA;IAEL,yBAAC;AAAD,CAzFA,AAyFC,IAAA;AAzFY,gDAAkB","file":"ForeignKeyMetadata.js","sourcesContent":["import {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {TableMetadata} from \"./TableMetadata\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\n\r\n/**\r\n * ON_DELETE type to be used to specify delete strategy when some relation is being deleted from the database.\r\n */\r\nexport type OnDeleteType = \"RESTRICT\"|\"CASCADE\"|\"SET NULL\";\r\n\r\n/**\r\n * Contains all information about entity's foreign key.\r\n */\r\nexport class ForeignKeyMetadata {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this foreign key is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Array of columns of this foreign key.\r\n     */\r\n    readonly columns: ColumnMetadata[];\r\n\r\n    /**\r\n     * Table to which this foreign key is references.\r\n     */\r\n    readonly referencedTable: TableMetadata;\r\n\r\n    /**\r\n     * Array of referenced columns.\r\n     */\r\n    readonly referencedColumns: ColumnMetadata[];\r\n\r\n    /**\r\n     * What to do with a relation on deletion of the row containing a foreign key.\r\n     */\r\n    readonly onDelete: OnDeleteType;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(columns: ColumnMetadata[],\r\n                referencedTable: TableMetadata,\r\n                referencedColumns: ColumnMetadata[],\r\n                onDelete?: OnDeleteType) {\r\n        this.columns = columns;\r\n        this.referencedTable = referencedTable;\r\n        this.referencedColumns = referencedColumns;\r\n        if (onDelete)\r\n            this.onDelete = onDelete;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets the table name to which this foreign key is applied.\r\n     */\r\n    get tableName() {\r\n        return this.entityMetadata.table.name;\r\n    }\r\n\r\n    /**\r\n     * Gets the table name to which this foreign key is referenced.\r\n     */\r\n    get referencedTableName() {\r\n        return this.referencedTable.name;\r\n    }\r\n\r\n    /**\r\n     * Gets foreign key name.\r\n     */\r\n    get name() {\r\n        return this.entityMetadata.namingStrategy.foreignKeyName(this.tableName, this.columnNames, this.referencedTable.name, this.referencedColumnNames);\r\n    }\r\n\r\n    /**\r\n     * Gets array of column names.\r\n     */\r\n    get columnNames(): string[] {\r\n        return this.columns.map(column => column.fullName);\r\n    }\r\n\r\n    /**\r\n     * Gets array of referenced column names.\r\n     */\r\n    get referencedColumnNames(): string[] {\r\n        return this.referencedColumns.map(column => column.fullName);\r\n    }\r\n\r\n}"],"sourceRoot":".."}