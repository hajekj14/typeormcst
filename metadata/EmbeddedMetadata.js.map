{"version":3,"sources":["../../src/metadata/EmbeddedMetadata.ts"],"names":[],"mappings":";;AAKA;;GAEG;AACH;IAwDI,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,0BAAY,KAAoB,EACpB,OAAyB,EACzB,SAA6B,EAC7B,IAA0B;QAHtC,iBAiBC;QAbG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;QAChD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;YAC3B,QAAQ,CAAC,sBAAsB,GAAG,KAAI,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACvB,MAAM,CAAC,gBAAgB,GAAG,KAAI,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;OAEG;IACH,iCAAM,GAAN;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;QAEvF,MAAM,CAAC,IAAK,IAAI,CAAC,IAAY,CAAC;IAClC,CAAC;IAQD,sBAAI,oCAAM;QANV;;;;;WAKG;aACH;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC;gBAChC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;YAE7B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;;;OAAA;IAEL,uBAAC;AAAD,CA1GA,AA0GC,IAAA;AA1GY,4CAAgB","file":"EmbeddedMetadata.js","sourcesContent":["import {EntityMetadata} from \"./EntityMetadata\";\r\nimport {TableMetadata} from \"./TableMetadata\";\r\nimport {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\r\n\r\n/**\r\n * Contains all information about entity's embedded property.\r\n */\r\nexport class EmbeddedMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Its own entity metadata.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Parent embedded in the case if this embedded inside other embedded.\r\n     */\r\n    parentEmbeddedMetadata: EmbeddedMetadata;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Private Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Property name on which this embedded is attached.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Embeddable table.\r\n     */\r\n    readonly table: TableMetadata;\r\n\r\n    /**\r\n     * Embeddable table's columns.\r\n     */\r\n    readonly columns: ColumnMetadata[];\r\n\r\n    /**\r\n     * Nested embeddable in this embeddable.\r\n     */\r\n    readonly embeddeds: EmbeddedMetadata[];\r\n\r\n    /**\r\n     * Embedded type.\r\n     */\r\n    readonly type?: Function;\r\n\r\n    /**\r\n     * Indicates if this embedded is in array mode.\r\n     */\r\n    readonly isArray: boolean;\r\n\r\n    /**\r\n     * Prefix of the embedded, used instead of propertyName.\r\n     * If set to empty string, then prefix is not set at all.\r\n     */\r\n    readonly customPrefix: string|undefined;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(table: TableMetadata,\r\n                columns: ColumnMetadata[],\r\n                embeddeds: EmbeddedMetadata[],\r\n                args: EmbeddedMetadataArgs) {\r\n        this.type = args.type ? args.type() : undefined;\r\n        this.propertyName = args.propertyName;\r\n        this.isArray = args.isArray;\r\n        this.customPrefix = args.prefix;\r\n        this.table = table;\r\n        this.columns = columns;\r\n        this.embeddeds = embeddeds;\r\n        this.embeddeds.forEach(embedded => {\r\n            embedded.parentEmbeddedMetadata = this;\r\n        });\r\n        this.columns.forEach(column => {\r\n            column.embeddedMetadata = this;\r\n        });\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new embedded object.\r\n     */\r\n    create() {\r\n        if (!this.type)\r\n            throw new Error(`Embedded cannot be created because it does not have a type set.`);\r\n\r\n        return new (this.type as any);\r\n    }\r\n\r\n    /**\r\n     * Gets the prefix of the columns.\r\n     * By default its a property name of the class where this prefix is.\r\n     * But if custom prefix is set then it takes its value as a prefix.\r\n     * However if custom prefix is set to empty string prefix to column is not applied at all.\r\n     */\r\n    get prefix() {\r\n        if (this.customPrefix !== undefined)\r\n            return this.customPrefix;\r\n\r\n        return this.propertyName;\r\n    }\r\n\r\n}"],"sourceRoot":".."}