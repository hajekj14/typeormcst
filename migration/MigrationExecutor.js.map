{"version":3,"sources":["../../src/migration/MigrationExecutor.ts"],"names":[],"mappings":"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","file":"MigrationExecutor.js","sourcesContent":["import {TableSchema} from \"../schema-builder/schema/TableSchema\";\r\nimport {ColumnSchema} from \"../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnTypes} from \"../metadata/types/ColumnTypes\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {Migration} from \"./Migration\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\n\r\n/**\r\n * Executes migrations: runs pending and reverts previously executed migrations.\r\n */\r\nexport class MigrationExecutor {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected queryRunnerProvider: QueryRunnerProvider;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\r\n        this.queryRunnerProvider = queryRunnerProvider || new QueryRunnerProvider(connection.driver, true);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\r\n     * thus not saved in the database.\r\n     */\r\n    async executePendingMigrations(): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        const entityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(this.queryRunnerProvider);\r\n\r\n        // create migrations table if its not created yet\r\n        await this.createMigrationsTableIfNotExist();\r\n\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations();\r\n\r\n        // get the time when last migration was executed\r\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations();\r\n\r\n        // find all migrations that needs to be executed\r\n        const pendingMigrations = allMigrations.filter(migration => {\r\n            // check if we already have executed migration\r\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\r\n            if (executedMigration)\r\n                return false;\r\n\r\n            // migration is new and not executed. now check if its timestamp is correct\r\n            if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\r\n                throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\r\n\r\n            // every check is passed means that migration was not run yet and we need to run it\r\n            return true;\r\n        });\r\n\r\n        // if no migrations are pending then nothing to do here\r\n        if (!pendingMigrations.length) {\r\n            this.connection.logger.log(\"info\", `No migrations are pending`);\r\n            return;\r\n        }\r\n\r\n        // log information about migration execution\r\n        this.connection.logger.log(\"info\", `${executedMigrations.length} migrations are already loaded in the database.`);\r\n        this.connection.logger.log(\"info\", `${allMigrations.length} migrations were found in the source code.`);\r\n        if (lastTimeExecutedMigration)\r\n            this.connection.logger.log(\"info\", `${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\r\n        this.connection.logger.log(\"info\", `${pendingMigrations.length} migrations are new migrations that needs to be executed.`);\r\n\r\n        // start transaction if its not started yet\r\n        let transactionStartedByUs = false;\r\n        if (!queryRunner.isTransactionActive()) {\r\n            await queryRunner.beginTransaction();\r\n            transactionStartedByUs = true;\r\n        }\r\n\r\n        // run all pending migrations in a sequence\r\n        try {\r\n            await PromiseUtils.runInSequence(pendingMigrations, migration => {\r\n                return migration.instance!.up(queryRunner, this.connection, entityManager)\r\n                    .then(() => { // now when migration is executed we need to insert record about it into the database\r\n                        return this.insertExecutedMigration(migration);\r\n                    })\r\n                    .then(() => { // informative log about migration success\r\n                        this.connection.logger.log(\"info\", `Migration ${migration.name} has been executed successfully.`);\r\n                    });\r\n            });\r\n\r\n            // commit transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.commitTransaction();\r\n\r\n        } catch (err) { // rollback transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.rollbackTransaction();\r\n\r\n            throw err;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Reverts last migration that were run.\r\n     */\r\n    async undoLastMigration(): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        const entityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(this.queryRunnerProvider);\r\n\r\n        // create migrations table if its not created yet\r\n        await this.createMigrationsTableIfNotExist();\r\n\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations();\r\n\r\n        // get the time when last migration was executed\r\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\r\n\r\n        // if no migrations found in the database then nothing to revert\r\n        if (!lastTimeExecutedMigration) {\r\n            this.connection.logger.log(\"info\", `No migrations was found in the database. Nothing to revert!`);\r\n            return;\r\n        }\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations();\r\n\r\n        // find the instance of the migration we need to remove\r\n        const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration!.name);\r\n\r\n        // if no migrations found in the database then nothing to revert\r\n        if (!migrationToRevert)\r\n            throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\r\n\r\n        // log information about migration execution\r\n        this.connection.logger.log(\"info\", `${executedMigrations.length} migrations are already loaded in the database.`);\r\n        this.connection.logger.log(\"info\", `${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\r\n        this.connection.logger.log(\"info\", `Now reverting it...`);\r\n\r\n        // start transaction if its not started yet\r\n        let transactionStartedByUs = false;\r\n        if (!queryRunner.isTransactionActive()) {\r\n            await queryRunner.beginTransaction();\r\n            transactionStartedByUs = true;\r\n        }\r\n\r\n        try {\r\n            await migrationToRevert.instance!.down(queryRunner, this.connection, entityManager);\r\n            await this.deleteExecutedMigration(migrationToRevert);\r\n            this.connection.logger.log(\"info\", `Migration ${migrationToRevert.name} has been reverted successfully.`);\r\n\r\n            // commit transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.commitTransaction();\r\n\r\n        } catch (err) { // rollback transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.rollbackTransaction();\r\n\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates table \"migrations\" that will store information about executed migrations.\r\n     */\r\n    protected async createMigrationsTableIfNotExist(): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        const tableExist = await queryRunner.hasTable(\"migrations\"); // todo: table name should be configurable\r\n        if (!tableExist) {\r\n            await queryRunner.createTable(new TableSchema(\"migrations\", [\r\n                new ColumnSchema({\r\n                    name: \"timestamp\",\r\n                    type: queryRunner.normalizeType({\r\n                        type: ColumnTypes.NUMBER\r\n                    }),\r\n                    isPrimary: true,\r\n                    isNullable: false\r\n                }),\r\n                new ColumnSchema({\r\n                    name: \"name\",\r\n                    type: queryRunner.normalizeType({\r\n                        type: ColumnTypes.STRING\r\n                    }),\r\n                    isNullable: false\r\n                }),\r\n            ]));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads all migrations that were executed and saved into the database.\r\n     */\r\n    protected async loadExecutedMigrations(): Promise<Migration[]> {\r\n        const migrationsRaw: ObjectLiteral[] = await new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .select()\r\n            .fromTable(\"migrations\", \"migrations\")\r\n            .getRawMany();\r\n\r\n        return migrationsRaw.map(migrationRaw => {\r\n            return new Migration(parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets all migrations that setup for this connection.\r\n     */\r\n    protected getMigrations(): Migration[] {\r\n        const migrations = this.connection.getMigrations().map(migration => {\r\n            const migrationClassName = (migration.constructor as any).name;\r\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13));\r\n            if (!migrationTimestamp)\r\n                throw new Error(`Migration class name should contain a class name at the end of the file. ${migrationClassName} migration name is wrong.`);\r\n\r\n            return new Migration(migrationTimestamp, migrationClassName, migration);\r\n        });\r\n\r\n        // sort them by timestamp\r\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\r\n     */\r\n    protected getLatestMigration(migrations: Migration[]): Migration|undefined {\r\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);\r\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Inserts new executed migration's data into migrations table.\r\n     */\r\n    protected async insertExecutedMigration(migration: Migration): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        await queryRunner.insert(\"migrations\", {\r\n            timestamp: migration.timestamp,\r\n            name: migration.name,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete previously executed migration's data from the migrations table.\r\n     */\r\n    protected async deleteExecutedMigration(migration: Migration): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        await queryRunner.delete(\"migrations\", {\r\n            timestamp: migration.timestamp,\r\n            name: migration.name,\r\n        });\r\n    }\r\n\r\n}"],"sourceRoot":".."}