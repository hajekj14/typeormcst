{"version":3,"sources":["../../src/metadata-builder/EntityMetadataBuilder.ts"],"names":[],"mappings":"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","file":"EntityMetadataBuilder.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {ColumnMetadata, ColumnMode} from \"../metadata/ColumnMetadata\";\r\nimport {ColumnOptions} from \"../decorator/options/ColumnOptions\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {EntityMetadataValidator} from \"./EntityMetadataValidator\";\r\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\r\nimport {JoinColumnMetadata} from \"../metadata/JoinColumnMetadata\";\r\nimport {TableMetadata} from \"../metadata/TableMetadata\";\r\nimport {getMetadataArgsStorage, getFromContainer} from \"../index\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {JoinTableMetadata} from \"../metadata/JoinTableMetadata\";\r\nimport {JunctionEntityMetadataBuilder} from \"./JunctionEntityMetadataBuilder\";\r\nimport {ClosureJunctionEntityMetadataBuilder} from \"./ClosureJunctionEntityMetadataBuilder\";\r\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\r\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\r\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\r\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\r\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\r\nimport {Driver} from \"../driver/Driver\";\r\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\r\n\r\n/**\r\n * Aggregates all metadata: table, column, relation into one collection grouped by tables for a given set of classes.\r\n */\r\nexport class EntityMetadataBuilder {\r\n\r\n    // todo: type in function validation, inverse side function validation\r\n    // todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\r\n    // todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\r\n    // todo: check if multiple tree parent metadatas in validator\r\n    // todo: tree decorators can be used only on closure table (validation)\r\n    // todo: throw error if parent tree metadata was not specified in a closure table\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    buildFromSchemas(driver: Driver,\r\n                     lazyRelationsWrapper: LazyRelationsWrapper,\r\n                     namingStrategy: NamingStrategyInterface,\r\n                     schemas: EntitySchema[]): EntityMetadata[] {\r\n        const metadataArgsStorage = new MetadataArgsStorage();\r\n\r\n        // extract into separate class?\r\n        schemas.forEach(schema => {\r\n\r\n            // add table metadata args from the schema\r\n            const tableSchema = schema.table || {} as any;\r\n            const table: TableMetadataArgs = {\r\n                target: schema.target || schema.name,\r\n                name: tableSchema.name,\r\n                type: tableSchema.type || \"regular\",\r\n                // targetId: schema.name,\r\n                orderBy: tableSchema.orderBy\r\n            };\r\n            metadataArgsStorage.tables.add(table);\r\n\r\n            // add columns metadata args from the schema\r\n            Object.keys(schema.columns).forEach(columnName => {\r\n                const columnSchema = schema.columns[columnName];\r\n                let mode: ColumnMode = \"regular\";\r\n                if (columnSchema.createDate)\r\n                    mode = \"createDate\";\r\n                if (columnSchema.updateDate)\r\n                    mode = \"updateDate\";\r\n                if (columnSchema.version)\r\n                    mode = \"version\";\r\n                if (columnSchema.treeChildrenCount)\r\n                    mode = \"treeChildrenCount\";\r\n                if (columnSchema.treeLevel)\r\n                    mode = \"treeLevel\";\r\n\r\n                const column: ColumnMetadataArgs = {\r\n                    target: schema.target || schema.name,\r\n                    mode: mode,\r\n                    propertyName: columnName,\r\n                    // todo: what to do with it?: propertyType: \r\n                    options: {\r\n                        type: columnSchema.type,\r\n                        name: columnSchema.name,\r\n                        length: columnSchema.length,\r\n                        primary: columnSchema.primary,\r\n                        generated: columnSchema.generated,\r\n                        unique: columnSchema.unique,\r\n                        nullable: columnSchema.nullable,\r\n                        comment: columnSchema.comment,\r\n                        default: columnSchema.default,\r\n                        precision: columnSchema.precision,\r\n                        scale: columnSchema.scale\r\n                    }\r\n                };\r\n\r\n                metadataArgsStorage.columns.add(column);\r\n            });\r\n\r\n            // add relation metadata args from the schema\r\n            if (schema.relations) {\r\n                Object.keys(schema.relations).forEach(relationName => {\r\n                    const relationSchema = schema.relations[relationName];\r\n                    const relation: RelationMetadataArgs = {\r\n                        target: schema.target || schema.name,\r\n                        propertyName: relationName,\r\n                        relationType: relationSchema.type,\r\n                        isLazy: relationSchema.isLazy || false,\r\n                        type: relationSchema.target,\r\n                        inverseSideProperty: relationSchema.inverseSide,\r\n                        isTreeParent: relationSchema.isTreeParent,\r\n                        isTreeChildren: relationSchema.isTreeChildren,\r\n                        options: {\r\n                            cascadeAll: relationSchema.cascadeAll,\r\n                            cascadeInsert: relationSchema.cascadeInsert,\r\n                            cascadeUpdate: relationSchema.cascadeUpdate,\r\n                            cascadeRemove: relationSchema.cascadeRemove,\r\n                            nullable: relationSchema.nullable,\r\n                            onDelete: relationSchema.onDelete\r\n                        }\r\n                    };\r\n\r\n                    metadataArgsStorage.relations.add(relation);\r\n\r\n                    // add join column\r\n                    if (relationSchema.joinColumn) {\r\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.add(joinColumn);\r\n                        } else {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinColumn.name,\r\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.add(joinColumn);\r\n                        }\r\n                    }\r\n\r\n                    // add join table\r\n                    if (relationSchema.joinTable) {\r\n                        if (typeof relationSchema.joinTable === \"boolean\") {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinTables.add(joinTable);\r\n                        } else {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinTable.name,\r\n                                joinColumn: relationSchema.joinTable.joinColumn,\r\n                                inverseJoinColumn: relationSchema.joinTable.inverseJoinColumn\r\n                            };\r\n                            metadataArgsStorage.joinTables.add(joinTable);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        return this.build(driver, lazyRelationsWrapper, metadataArgsStorage, namingStrategy);\r\n    }\r\n\r\n    /**\r\n     * Builds a complete metadata aggregations for the given entity classes.\r\n     */\r\n    buildFromMetadataArgsStorage(driver: Driver,\r\n                                 lazyRelationsWrapper: LazyRelationsWrapper,\r\n                                 namingStrategy: NamingStrategyInterface,\r\n                                 entityClasses?: Function[]): EntityMetadata[] {\r\n        return this.build(driver, lazyRelationsWrapper, getMetadataArgsStorage(), namingStrategy, entityClasses);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    private build(driver: Driver,\r\n                  lazyRelationsWrapper: LazyRelationsWrapper,\r\n                  metadataArgsStorage: MetadataArgsStorage,\r\n                  namingStrategy: NamingStrategyInterface,\r\n                  entityClasses?: Function[]): EntityMetadata[] {\r\n        const embeddableMergedArgs = metadataArgsStorage.getMergedEmbeddableTableMetadatas(entityClasses);\r\n        const entityMetadatas: EntityMetadata[] = [];\r\n        const allMergedArgs = metadataArgsStorage.getMergedTableMetadatas(entityClasses);\r\n        allMergedArgs.forEach(mergedArgs => {\r\n\r\n            const tables = [mergedArgs.table].concat(mergedArgs.children);\r\n            tables.forEach(tableArgs => {\r\n\r\n                // find embeddable tables for embeddeds registered in this table and create EmbeddedMetadatas from them\r\n                const findEmbeddedsRecursively = (embeddedArgs: EmbeddedMetadataArgs[]) => {\r\n                    const embeddeds: EmbeddedMetadata[] = [];\r\n                    embeddedArgs.forEach(embedded => {\r\n                        const embeddableTable = embeddableMergedArgs.find(embeddedMergedArgs => embeddedMergedArgs.table.target === embedded.type());\r\n                        if (embeddableTable) {\r\n                            const table = new TableMetadata(embeddableTable.table);\r\n                            const columns = embeddableTable.columns.toArray().map(args => new ColumnMetadata(args));\r\n                            const subEmbeddeds = findEmbeddedsRecursively(embeddableTable.embeddeds.toArray());\r\n                            embeddeds.push(new EmbeddedMetadata(table, columns, subEmbeddeds, embedded));\r\n                        }\r\n                    });\r\n                    return embeddeds;\r\n                };\r\n                const embeddeds = findEmbeddedsRecursively(mergedArgs.embeddeds.toArray());\r\n\r\n                // create metadatas from args\r\n                const argsForTable = mergedArgs.inheritance && mergedArgs.inheritance.type === \"single-table\" ? mergedArgs.table : tableArgs;\r\n\r\n                const table = new TableMetadata(argsForTable);\r\n                const columns = mergedArgs.columns.toArray().map(args => {\r\n\r\n                    // if column's target is a child table then this column should have all nullable columns\r\n                    if (mergedArgs.inheritance &&\r\n                        mergedArgs.inheritance.type === \"single-table\" &&\r\n                        args.target !== mergedArgs.table.target && !!mergedArgs.children.find(childTable => childTable.target === args.target)) {\r\n                        args.options.nullable = true;\r\n                    }\r\n                    return new ColumnMetadata(args);\r\n                });\r\n                const relations = mergedArgs.relations.toArray().map(args => new RelationMetadata(args));\r\n                const indices = mergedArgs.indices.toArray().map(args => new IndexMetadata(args));\r\n                const discriminatorValueArgs = mergedArgs.discriminatorValues.find(discriminatorValueArgs => {\r\n                    return discriminatorValueArgs.target === tableArgs.target;\r\n                });\r\n                // create a new entity metadata\r\n                const entityMetadata = new EntityMetadata({\r\n                    junction: false,\r\n                    target: tableArgs.target,\r\n                    tablesPrefix: driver.options.tablesPrefix,\r\n                    namingStrategy: namingStrategy,\r\n                    tableMetadata: table,\r\n                    columnMetadatas: columns,\r\n                    relationMetadatas: relations,\r\n                    indexMetadatas: indices,\r\n                    embeddedMetadatas: embeddeds,\r\n                    inheritanceType: mergedArgs.inheritance ? mergedArgs.inheritance.type : undefined,\r\n                    discriminatorValue: discriminatorValueArgs ? discriminatorValueArgs.value : (tableArgs.target as any).name // todo: pass this to naming strategy to generate a name\r\n                }, lazyRelationsWrapper);\r\n                entityMetadatas.push(entityMetadata);\r\n                // create entity's relations join tables\r\n                entityMetadata.manyToManyRelations.forEach(relation => {\r\n                    const joinTableMetadata = mergedArgs.joinTables.findByProperty(relation.propertyName);\r\n                    if (joinTableMetadata) {\r\n                        const joinTable = new JoinTableMetadata(joinTableMetadata);\r\n                        relation.joinTable = joinTable;\r\n                        joinTable.relation = relation;\r\n                    }\r\n                });\r\n\r\n                // create entity's relations join columns\r\n                entityMetadata.oneToOneRelations\r\n                    .concat(entityMetadata.manyToOneRelations)\r\n                    .forEach(relation => {\r\n\r\n                        // since for many-to-one relations having JoinColumn is not required on decorators level, we need to go\r\n                        // throw all of them which don't have JoinColumn decorators and create it for them\r\n                        let joinColumnMetadata = mergedArgs.joinColumns.findByProperty(relation.propertyName);\r\n                        if (!joinColumnMetadata && relation.isManyToOne) {\r\n                            joinColumnMetadata = {\r\n                                target: relation.entityMetadata.target,\r\n                                propertyName: relation.propertyName\r\n                            };\r\n                        }\r\n\r\n                        if (joinColumnMetadata) {\r\n                            const joinColumn = new JoinColumnMetadata(joinColumnMetadata);\r\n                            relation.joinColumn = joinColumn;\r\n                            joinColumn.relation = relation;\r\n                        }\r\n                    });\r\n\r\n                // save relation id-s data\r\n                entityMetadata.relations.forEach(relation => {\r\n                    const relationIdMetadata = mergedArgs.relationIds.toArray().find(relationId => {\r\n                        if (relationId.relation instanceof Function)\r\n                            return relation.propertyName === relationId.relation(entityMetadata.createPropertiesMap());\r\n\r\n                        return relation.propertyName === relationId.relation;\r\n                    });\r\n                    if (relationIdMetadata) {\r\n                        if (relation.isOneToOneNotOwner || relation.isOneToMany)\r\n                            throw new Error(`RelationId cannot be used for the one-to-one without join column or one-to-many relations.`);\r\n\r\n                        relation.idField = relationIdMetadata.propertyName;\r\n                    }\r\n                });\r\n\r\n                // save relation counter-s data\r\n                entityMetadata.relations.forEach(relation => {\r\n                    const relationCountMetadata = mergedArgs.relationCounts.toArray().find(relationCount => {\r\n                        if (relationCount.relation instanceof Function)\r\n                            return relation.propertyName === relationCount.relation(entityMetadata.createPropertiesMap());\r\n\r\n                        return relation.propertyName === relationCount.relation;\r\n                    });\r\n\r\n                    if (relationCountMetadata)\r\n                        relation.countField = relationCountMetadata.propertyName;\r\n                });\r\n\r\n                // add lazy initializer for entity relations\r\n                if (entityMetadata.target instanceof Function) {\r\n                    entityMetadata.relations\r\n                        .filter(relation => relation.isLazy)\r\n                        .forEach(relation => {\r\n                            lazyRelationsWrapper.wrap((entityMetadata.target as Function).prototype, relation);\r\n                        });\r\n                }\r\n            });\r\n        });\r\n\r\n        // after all metadatas created we set inverse side (related) entity metadatas for all relation metadatas\r\n        entityMetadatas.forEach(entityMetadata => {\r\n            entityMetadata.relations.forEach(relation => {\r\n                const inverseEntityMetadata = entityMetadatas.find(m => m.target === relation.type || (typeof relation.type === \"string\" && m.targetName === relation.type));\r\n                if (!inverseEntityMetadata)\r\n                    throw new Error(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyName + \" was not found.\");\r\n\r\n                relation.inverseEntityMetadata = inverseEntityMetadata;\r\n            });\r\n        });\r\n\r\n        // after all metadatas created we set parent entity metadata for class-table inheritance\r\n        entityMetadatas.forEach(entityMetadata => {\r\n            const mergedArgs = allMergedArgs.find(mergedArgs => {\r\n                return mergedArgs.table.target === entityMetadata.target;\r\n            });\r\n            if (mergedArgs && mergedArgs.parent) {\r\n                const parentEntityMetadata = entityMetadatas.find(entityMetadata => entityMetadata.table.target === (mergedArgs!.parent! as any).target); // todo: weird compiler error here, thats why type casing is used\r\n                if (parentEntityMetadata)\r\n                    entityMetadata.parentEntityMetadata = parentEntityMetadata;\r\n            }\r\n        });\r\n\r\n        // generate keys for tables with single-table inheritance\r\n        entityMetadatas\r\n            .filter(metadata => metadata.inheritanceType === \"single-table\" && metadata.hasDiscriminatorColumn)\r\n            .forEach(metadata => {\r\n                const indexForKey = new IndexMetadata({\r\n                    target: metadata.target,\r\n                    columns: [metadata.discriminatorColumn.fullName],\r\n                    unique: false\r\n                });\r\n                indexForKey.entityMetadata = metadata;\r\n                metadata.indices.push(indexForKey);\r\n\r\n                const indexForKeyWithPrimary = new IndexMetadata({\r\n                    target: metadata.target,\r\n                    columns: [metadata.firstPrimaryColumn.propertyName, metadata.discriminatorColumn.propertyName],\r\n                    unique: false\r\n                });\r\n                indexForKeyWithPrimary.entityMetadata = metadata;\r\n                metadata.indices.push(indexForKeyWithPrimary);\r\n            });\r\n\r\n        // generate virtual column with foreign key for class-table inheritance\r\n        entityMetadatas\r\n            .filter(metadata => !!metadata.parentEntityMetadata)\r\n            .forEach(metadata => {\r\n                const parentEntityMetadataPrimaryColumn = metadata.parentEntityMetadata.firstPrimaryColumn; // todo: make sure to create columns for all its primary columns\r\n                const columnName = namingStrategy.classTableInheritanceParentColumnName(metadata.parentEntityMetadata.table.name, parentEntityMetadataPrimaryColumn.propertyName);\r\n                const parentRelationColumn = new ColumnMetadata({\r\n                    target: metadata.parentEntityMetadata.table.target,\r\n                    propertyName: parentEntityMetadataPrimaryColumn.propertyName,\r\n                    // propertyType: parentEntityMetadataPrimaryColumn.propertyType,\r\n                    mode: \"parentId\",\r\n                    options: <ColumnOptions> {\r\n                        name: columnName,\r\n                        type: parentEntityMetadataPrimaryColumn.type,\r\n                        unique: true,\r\n                        nullable: false,\r\n                        primary: false\r\n                    }\r\n                });\r\n\r\n                // add column\r\n                metadata.addColumn(parentRelationColumn);\r\n\r\n                // add foreign key\r\n                const foreignKey = new ForeignKeyMetadata(\r\n                    [parentRelationColumn],\r\n                    metadata.parentEntityMetadata.table,\r\n                    [parentEntityMetadataPrimaryColumn],\r\n                    \"CASCADE\"\r\n                );\r\n                foreignKey.entityMetadata = metadata;\r\n                metadata.foreignKeys.push(foreignKey);\r\n            });\r\n\r\n        // generate columns and foreign keys for tables with relations\r\n        entityMetadatas.forEach(metadata => {\r\n            metadata.relationsWithJoinColumns.forEach(relation => {\r\n\r\n                // find relational column and if it does not exist - add it\r\n                const inverseSideColumn = relation.joinColumn.referencedColumn;\r\n                let relationalColumn = metadata.columns.find(column => column.fullName === relation.name);\r\n                if (!relationalColumn) {\r\n                    relationalColumn = new ColumnMetadata({\r\n                        target: metadata.target,\r\n                        propertyName: relation.name,\r\n                        // propertyType: inverseSideColumn.propertyType,\r\n                        mode: \"virtual\",\r\n                        options: <ColumnOptions> {\r\n                            type: inverseSideColumn.type,\r\n                            nullable: relation.isNullable,\r\n                            primary: relation.isPrimary\r\n                        }\r\n                    });\r\n                    relationalColumn.relationMetadata = relation;\r\n                    metadata.addColumn(relationalColumn);\r\n                }\r\n\r\n                // create and add foreign key\r\n                const foreignKey = new ForeignKeyMetadata(\r\n                    [relationalColumn],\r\n                    relation.inverseEntityMetadata.table,\r\n                    [inverseSideColumn],\r\n                    relation.onDelete\r\n                );\r\n                foreignKey.entityMetadata = metadata;\r\n                metadata.foreignKeys.push(foreignKey);\r\n            });\r\n        });\r\n\r\n        // generate junction tables for all closure tables\r\n        entityMetadatas.forEach(metadata => {\r\n            if (!metadata.table.isClosure)\r\n                return;\r\n\r\n            if (metadata.primaryColumns.length > 1)\r\n                throw new Error(`Cannot use given entity ${metadata.name} as a closure table, because it have multiple primary keys. Entities with multiple primary keys are not supported in closure tables.`);\r\n\r\n            const closureJunctionEntityMetadata = getFromContainer(ClosureJunctionEntityMetadataBuilder).build(driver, lazyRelationsWrapper, {\r\n                namingStrategy: namingStrategy,\r\n                table: metadata.table,\r\n                primaryColumn: metadata.firstPrimaryColumn,\r\n                hasTreeLevelColumn: metadata.hasTreeLevelColumn\r\n            });\r\n            metadata.closureJunctionTable = closureJunctionEntityMetadata;\r\n            entityMetadatas.push(closureJunctionEntityMetadata);\r\n        });\r\n\r\n        // generate junction tables for all many-to-many tables\r\n        entityMetadatas.forEach(metadata => {\r\n            metadata.ownerManyToManyRelations.forEach(relation => {\r\n                const junctionEntityMetadata = getFromContainer(JunctionEntityMetadataBuilder).build(driver, lazyRelationsWrapper, {\r\n                    namingStrategy: namingStrategy,\r\n                    firstTable: metadata.table,\r\n                    secondTable: relation.inverseEntityMetadata.table,\r\n                    joinTable: relation.joinTable\r\n                });\r\n                relation.junctionEntityMetadata = junctionEntityMetadata;\r\n                if (relation.hasInverseSide)\r\n                    relation.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\r\n\r\n                entityMetadatas.push(junctionEntityMetadata);\r\n            });\r\n        });\r\n\r\n        // check for errors in a built metadata schema (we need to check after relationEntityMetadata is set)\r\n        getFromContainer(EntityMetadataValidator).validateMany(entityMetadatas);\r\n\r\n        return entityMetadatas;\r\n    }\r\n\r\n}"],"sourceRoot":".."}