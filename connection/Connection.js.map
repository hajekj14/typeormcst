{"version":3,"sources":["../../src/connection/Connection.ts"],"names":[],"mappings":"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","file":"Connection.js","sourcesContent":["import {Driver} from \"../driver/Driver\";\r\nimport {Repository} from \"../repository/Repository\";\r\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\r\nimport {RepositoryNotFoundError} from \"./error/RepositoryNotFoundError\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\nimport {importClassesFromDirectories, importJsonsFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\r\nimport {getMetadataArgsStorage, getFromContainer} from \"../index\";\r\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\r\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\r\nimport {CannotImportAlreadyConnectedError} from \"./error/CannotImportAlreadyConnectedError\";\r\nimport {CannotCloseNotConnectedError} from \"./error/CannotCloseNotConnectedError\";\r\nimport {CannotConnectAlreadyConnectedError} from \"./error/CannotConnectAlreadyConnectedError\";\r\nimport {TreeRepository} from \"../repository/TreeRepository\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {NamingStrategyNotFoundError} from \"./error/NamingStrategyNotFoundError\";\r\nimport {RepositoryNotTreeError} from \"./error/RepositoryNotTreeError\";\r\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {CannotSyncNotConnectedError} from \"./error/CannotSyncNotConnectedError\";\r\nimport {CannotUseNamingStrategyNotConnectedError} from \"./error/CannotUseNamingStrategyNotConnectedError\";\r\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\r\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\r\nimport {SpecificRepository} from \"../repository/SpecificRepository\";\r\nimport {RepositoryAggregator} from \"../repository/RepositoryAggregator\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {SchemaBuilder} from \"../schema-builder/SchemaBuilder\";\r\nimport {Logger} from \"../logger/Logger\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {EntityMetadataNotFound} from \"../metadata-args/error/EntityMetadataNotFound\";\r\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\r\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\r\nimport {CannotRunMigrationNotConnectedError} from \"./error/CannotRunMigrationNotConnectedError\";\r\nimport {PlatformTools} from \"../platform/PlatformTools\";\r\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\r\nimport {CustomRepositoryNotFoundError} from \"../repository/error/CustomRepositoryNotFoundError\";\r\nimport {CustomRepositoryReusedError} from \"../repository/error/CustomRepositoryReusedError\";\r\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../repository/error/CustomRepositoryCannotInheritRepositoryError\";\r\nimport {MongoRepository} from \"../repository/MongoRepository\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\r\n\r\n/**\r\n * Connection is a single database connection to a specific database of a database management system.\r\n * You can have multiple connections to multiple databases in your application.\r\n */\r\nexport class Connection {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection name.\r\n     */\r\n    public readonly name: string;\r\n\r\n    /**\r\n     * Database driver used by this connection.\r\n     */\r\n    public readonly driver: Driver;\r\n\r\n    /**\r\n     * Logger used to log orm events.\r\n     */\r\n    public readonly logger: Logger;\r\n\r\n    /**\r\n     * All entity metadatas that are registered for this connection.\r\n     */\r\n    public readonly entityMetadatas: EntityMetadata[] = [];\r\n\r\n    /**\r\n     * Used to broadcast connection events.\r\n     */\r\n    public readonly broadcaster: Broadcaster;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets EntityManager of this connection.\r\n     */\r\n    private readonly _entityManager: EntityManager;\r\n\r\n    /**\r\n     * Stores all registered repositories.\r\n     */\r\n    private readonly repositoryAggregators: RepositoryAggregator[] = [];\r\n\r\n    /**\r\n     * Stores all entity repository instances.\r\n     */\r\n    private readonly entityRepositories: Object[] = [];\r\n\r\n    /**\r\n     * Entity listeners that are registered for this connection.\r\n     */\r\n    private readonly entityListeners: EntityListenerMetadata[] = [];\r\n\r\n    /**\r\n     * Entity subscribers that are registered for this connection.\r\n     */\r\n    private readonly entitySubscribers: EntitySubscriberInterface<any>[] = [];\r\n\r\n    /**\r\n     * Registered entity classes to be used for this connection.\r\n     */\r\n    private readonly entityClasses: Function[] = [];\r\n\r\n    /**\r\n     * Registered entity schemas to be used for this connection.\r\n     */\r\n    private readonly entitySchemas: EntitySchema[] = [];\r\n\r\n    /**\r\n     * Registered subscriber classes to be used for this connection.\r\n     */\r\n    private readonly subscriberClasses: Function[] = [];\r\n\r\n    /**\r\n     * Registered naming strategy classes to be used for this connection.\r\n     */\r\n    private readonly namingStrategyClasses: Function[] = [];\r\n\r\n    /**\r\n     * Registered migration classes to be used for this connection.\r\n     */\r\n    private readonly migrationClasses: Function[] = [];\r\n\r\n    /**\r\n     * Naming strategy to be used in this connection.\r\n     */\r\n    private usedNamingStrategy: Function|string;\r\n\r\n    /**\r\n     * Indicates if connection has been done or not.\r\n     */\r\n    private _isConnected = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string, driver: Driver, logger: Logger) {\r\n        this.name = name;\r\n        this.driver = driver;\r\n        this.logger = logger;\r\n        this._entityManager = this.createEntityManager();\r\n        this.broadcaster = this.createBroadcaster();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection to the database already established for this connection.\r\n     */\r\n    get isConnected(): boolean {\r\n        return this._isConnected;\r\n    }\r\n\r\n    /**\r\n     * Gets entity manager that allows to perform repository operations with any entity in this connection.\r\n     */\r\n    get entityManager(): EntityManager {\r\n        // if (!this.isConnected)\r\n        //     throw new CannotGetEntityManagerNotConnectedError(this.name);\r\n\r\n        return this._entityManager;\r\n    }\r\n\r\n    /**\r\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\r\n     * with any entity in this connection.\r\n     */\r\n    get mongoEntityManager(): MongoEntityManager {\r\n        if (!(this._entityManager instanceof MongoEntityManager))\r\n            throw new Error(`MongoEntityManager is only available for MongoDB databases.`);\r\n\r\n        return this._entityManager as MongoEntityManager;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<this> {\r\n        if (this.isConnected)\r\n            throw new CannotConnectAlreadyConnectedError(this.name);\r\n\r\n        // connect to the database via its driver\r\n        await this.driver.connect();\r\n\r\n        // set connected status for the current connection\r\n        this._isConnected = true;\r\n\r\n        // build all metadatas registered in the current connection\r\n        try {\r\n            this.buildMetadatas();\r\n\r\n        } catch (error) {\r\n\r\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\r\n            // connection needs to be closed\r\n            await this.close();\r\n            throw error;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     * Once connection is closed, you cannot use repositories and perform any operations except\r\n     * opening connection again.\r\n     */\r\n    async close(): Promise<void> {\r\n        if (!this.isConnected)\r\n            throw new CannotCloseNotConnectedError(this.name);\r\n\r\n        await this.driver.disconnect();\r\n        this._isConnected = false;\r\n    }\r\n\r\n    /**\r\n     * Drops the database and all its data.\r\n     */\r\n    async dropDatabase(): Promise<void> {\r\n        const queryRunner = await this.driver.createQueryRunner();\r\n        await queryRunner.clearDatabase();\r\n    }\r\n\r\n    /**\r\n     * Creates database schema for all entities registered in this connection.\r\n     *\r\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\r\n     */\r\n    async syncSchema(dropBeforeSync: boolean = false): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            return Promise.reject(new CannotSyncNotConnectedError(this.name));\r\n\r\n        if (dropBeforeSync)\r\n            await this.dropDatabase();\r\n\r\n        if (this.driver instanceof MongoDriver) { // todo: temporary\r\n            await this.driver.syncSchema(this.entityMetadatas);\r\n\r\n        } else {\r\n            await this.createSchemaBuilder().build();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs all pending migrations.\r\n     */\r\n    async runMigrations(): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            return Promise.reject(new CannotRunMigrationNotConnectedError(this.name));\r\n\r\n        const migrationExecutor = new MigrationExecutor(this);\r\n        await migrationExecutor.executePendingMigrations();\r\n    }\r\n\r\n    /**\r\n     * Reverts last executed migration.\r\n     */\r\n    async undoLastMigration(): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            return Promise.reject(new CannotRunMigrationNotConnectedError(this.name));\r\n\r\n        const migrationExecutor = new MigrationExecutor(this);\r\n        await migrationExecutor.undoLastMigration();\r\n    }\r\n\r\n    /**\r\n     * Imports entities from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importEntitiesFromDirectories(paths: string[]): this {\r\n        this.importEntities(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports entity schemas from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importEntitySchemaFromDirectories(paths: string[]): this {\r\n        this.importEntitySchemas(importJsonsFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports subscribers from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importSubscribersFromDirectories(paths: string[]): this {\r\n        this.importSubscribers(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports naming strategies from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importNamingStrategiesFromDirectories(paths: string[]): this {\r\n        this.importNamingStrategies(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports migrations from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importMigrationsFromDirectories(paths: string[]): this {\r\n        this.importMigrations(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports entities and registers them in the current connection.\r\n     */\r\n    importEntities(entities: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"entities\", this.name);\r\n\r\n        entities.forEach(cls => this.entityClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports schemas and registers them in the current connection.\r\n     */\r\n    importEntitySchemas(schemas: EntitySchema[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"schemas\", this.name);\r\n\r\n        schemas.forEach(schema => this.entitySchemas.push(schema));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports subscribers and registers them in the current connection.\r\n     */\r\n    importSubscribers(subscriberClasses: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"entity subscribers\", this.name);\r\n\r\n        subscriberClasses.forEach(cls => this.subscriberClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports naming strategies and registers them in the current connection.\r\n     */\r\n    importNamingStrategies(strategies: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"naming strategies\", this.name);\r\n\r\n        strategies.forEach(cls => this.namingStrategyClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports migrations and registers them in the current connection.\r\n     */\r\n    importMigrations(migrations: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"migrations\", this.name);\r\n\r\n        migrations.forEach(cls => this.migrationClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets given naming strategy to be used.\r\n     * Naming strategy must be set to be used before connection is established.\r\n     */\r\n    useNamingStrategy(name: string): this;\r\n\r\n    /**\r\n     * Sets given naming strategy to be used.\r\n     * Naming strategy must be set to be used before connection is established.\r\n     */\r\n    useNamingStrategy(strategy: Function): this;\r\n\r\n    /**\r\n     * Sets given naming strategy to be used.\r\n     * Naming strategy must be set to be used before connection is established.\r\n     */\r\n    useNamingStrategy(strategyClassOrName: string|Function): this {\r\n        if (this.isConnected)\r\n            throw new CannotUseNamingStrategyNotConnectedError(this.name);\r\n\r\n        this.usedNamingStrategy = strategyClassOrName;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the entity metadata of the given entity class.\r\n     */\r\n    getMetadata(target: Function): EntityMetadata;\r\n\r\n    /**\r\n     * Gets the entity metadata of the given entity name.\r\n     */\r\n    getMetadata(target: string): EntityMetadata;\r\n\r\n    /**\r\n     * Gets the entity metadata of the given entity class or schema name.\r\n     */\r\n    getMetadata(target: Function|string): EntityMetadata;\r\n\r\n    /**\r\n     Gets entity metadata for the given entity class or schema name.\r\n     */\r\n    getMetadata(target: Function|string): EntityMetadata {\r\n        const metadata = this.entityMetadatas.find(metadata => metadata.target === target || (typeof target === \"string\" && metadata.targetName === target));\r\n        if (!metadata)\r\n            throw new EntityMetadataNotFound(target);\r\n\r\n        return metadata;\r\n    }\r\n\r\n    /**\r\n     * Gets repository for the given entity class.\r\n     */\r\n    getRepository<Entity>(entityClass: ObjectType<Entity>): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity name.\r\n     */\r\n    getRepository<Entity>(entityName: string): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity name.\r\n     */\r\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity class or name.\r\n     */\r\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity> {\r\n        return this.findRepositoryAggregator(entityClassOrName).repository;\r\n    }\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityClass: ObjectType<Entity>): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityName: string): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class or name.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity> {\r\n        // todo: add checks if tree repository is supported by driver (not supported by mongodb at least)\r\n\r\n        const repository = this.findRepositoryAggregator(entityClassOrName).treeRepository;\r\n        if (!repository)\r\n            throw new RepositoryNotTreeError(entityClassOrName);\r\n\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity class.\r\n     */\r\n    getMongoRepository<Entity>(entityClass: ObjectType<Entity>): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity name.\r\n     */\r\n    getMongoRepository<Entity>(entityName: string): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity name.\r\n     */\r\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity class or name.\r\n     */\r\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity> {\r\n        if (!(this.driver instanceof MongoDriver))\r\n            throw new Error(`You can use getMongoRepository only for MongoDB connections.`);\r\n\r\n        return this.findRepositoryAggregator(entityClassOrName).repository as MongoRepository<Entity>;\r\n    }\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityClass: ObjectType<Entity>): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity name.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityName: string): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class or name.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class or name.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity> {\r\n        return this.findRepositoryAggregator(entityClassOrName).specificRepository;\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity manager with a single opened connection to the database.\r\n     * This may be useful if you want to perform all db queries within one connection.\r\n     * After finishing with entity manager, don't forget to release it, to release connection back to pool.\r\n     */\r\n    createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider?: QueryRunnerProvider): EntityManager {\r\n        if (!queryRunnerProvider)\r\n            queryRunnerProvider = new QueryRunnerProvider(this.driver, true);\r\n\r\n        return new EntityManager(this, queryRunnerProvider);\r\n    }\r\n\r\n    /**\r\n     * Gets migration instances that are registered for this connection.\r\n     */\r\n    getMigrations(): MigrationInterface[] {\r\n        if (this.migrationClasses && this.migrationClasses.length) {\r\n            return this.migrationClasses.map(migrationClass => {\r\n                return getFromContainer<MigrationInterface>(migrationClass);\r\n            });\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Gets custom entity repository marked with @EntityRepository decorator.\r\n     */\r\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\r\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.toArray().find(repository => {\r\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\r\n        });\r\n        if (!entityRepositoryMetadataArgs)\r\n            throw new CustomRepositoryNotFoundError(customRepository);\r\n\r\n        let entityRepositoryInstance: any = this.entityRepositories.find(entityRepository => entityRepository.constructor === customRepository);\r\n        if (!entityRepositoryInstance) {\r\n            if (entityRepositoryMetadataArgs.useContainer) {\r\n                entityRepositoryInstance = getFromContainer(entityRepositoryMetadataArgs.target);\r\n\r\n                // if we get custom entity repository from container then there is a risk that it already was used\r\n                // in some different connection. If it was used there then we check it and throw an exception\r\n                // because we cant override its connection there again\r\n\r\n                if (entityRepositoryInstance instanceof AbstractRepository || entityRepositoryInstance instanceof Repository) {\r\n                    // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n                    // however we need these properties for internal work of the class\r\n                    if ((entityRepositoryInstance as any)[\"connection\"] && (entityRepositoryInstance as any)[\"connection\"] !== this)\r\n                        throw new CustomRepositoryReusedError(customRepository);\r\n                }\r\n\r\n            } else {\r\n                entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)();\r\n            }\r\n\r\n            if (entityRepositoryInstance instanceof AbstractRepository) {\r\n                // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n                // however we need these properties for internal work of the class\r\n                if (!(entityRepositoryInstance as any)[\"connection\"])\r\n                    (entityRepositoryInstance as any)[\"connection\"] = this;\r\n            }\r\n            if (entityRepositoryInstance instanceof Repository) {\r\n                if (!entityRepositoryMetadataArgs.entity)\r\n                    throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\r\n\r\n                // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n                // however we need these properties for internal work of the class\r\n                (entityRepositoryInstance as any)[\"connection\"] = this;\r\n                (entityRepositoryInstance as any)[\"metadata\"] = this.getMetadata(entityRepositoryMetadataArgs.entity);\r\n            }\r\n\r\n            // register entity repository\r\n            this.entityRepositories.push(entityRepositoryInstance);\r\n        }\r\n\r\n        return entityRepositoryInstance;\r\n    }\r\n\r\n    /**\r\n     * Gets custom repository's managed entity.\r\n     * If given custom repository does not manage any entity then undefined will be returned.\r\n     */\r\n    getCustomRepositoryTarget<T>(customRepository: any): Function|string|undefined {\r\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.toArray().find(repository => {\r\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\r\n        });\r\n        if (!entityRepositoryMetadataArgs)\r\n            throw new CustomRepositoryNotFoundError(customRepository);\r\n\r\n        return entityRepositoryMetadataArgs.entity;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Finds repository aggregator of the given entity class or name.\r\n     */\r\n    protected findRepositoryAggregator(entityClassOrName: ObjectType<any>|string): RepositoryAggregator {\r\n        // if (!this.isConnected)\r\n        //     throw new NoConnectionForRepositoryError(this.name);\r\n\r\n        if (!this.entityMetadatas.find(metadata => metadata.target === entityClassOrName || (typeof entityClassOrName === \"string\" && metadata.targetName === entityClassOrName)))\r\n            throw new RepositoryNotFoundError(this.name, entityClassOrName);\r\n\r\n        const metadata = this.getMetadata(entityClassOrName);\r\n        const repositoryAggregator = this.repositoryAggregators.find(repositoryAggregate => repositoryAggregate.metadata === metadata);\r\n        if (!repositoryAggregator)\r\n            throw new RepositoryNotFoundError(this.name, entityClassOrName);\r\n\r\n        return repositoryAggregator;\r\n    }\r\n\r\n    /**\r\n     * Builds all registered metadatas.\r\n     */\r\n    protected buildMetadatas() {\r\n\r\n        this.entitySubscribers.length = 0;\r\n        this.entityListeners.length = 0;\r\n        this.repositoryAggregators.length = 0;\r\n        this.entityMetadatas.length = 0;\r\n\r\n        const namingStrategy = this.createNamingStrategy();\r\n        this.driver.namingStrategy = namingStrategy;\r\n        const lazyRelationsWrapper = this.createLazyRelationsWrapper();\r\n\r\n        // take imported event subscribers\r\n        if (this.subscriberClasses && this.subscriberClasses.length && !PlatformTools.getEnvVariable(\"SKIP_SUBSCRIBERS_LOADING\")) {\r\n            getMetadataArgsStorage()\r\n                .entitySubscribers\r\n                .filterByTargets(this.subscriberClasses)\r\n                .toArray()\r\n                .map(metadata => getFromContainer(metadata.target))\r\n                .forEach(subscriber => this.entitySubscribers.push(subscriber));\r\n        }\r\n\r\n        // take imported entity listeners\r\n        if (this.entityClasses && this.entityClasses.length) {\r\n            getMetadataArgsStorage()\r\n                .entityListeners\r\n                .filterByTargets(this.entityClasses)\r\n                .toArray()\r\n                .forEach(metadata => this.entityListeners.push(new EntityListenerMetadata(metadata)));\r\n        }\r\n\r\n        // build entity metadatas from metadata args storage (collected from decorators)\r\n        if (this.entityClasses && this.entityClasses.length) {\r\n            getFromContainer(EntityMetadataBuilder)\r\n                .buildFromMetadataArgsStorage(this.driver, lazyRelationsWrapper, namingStrategy, this.entityClasses)\r\n                .forEach(metadata => {\r\n                    this.entityMetadatas.push(metadata);\r\n                    this.repositoryAggregators.push(new RepositoryAggregator(this, metadata));\r\n                });\r\n        }\r\n\r\n        // build entity metadatas from given entity schemas\r\n        if (this.entitySchemas && this.entitySchemas.length) {\r\n            getFromContainer(EntityMetadataBuilder)\r\n                .buildFromSchemas(this.driver, lazyRelationsWrapper, namingStrategy, this.entitySchemas)\r\n                .forEach(metadata => {\r\n                    this.entityMetadatas.push(metadata);\r\n                    this.repositoryAggregators.push(new RepositoryAggregator(this, metadata));\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a naming strategy to be used for this connection.\r\n     */\r\n    protected createNamingStrategy(): NamingStrategyInterface {\r\n\r\n        // if naming strategies are not loaded, or used naming strategy is not set then use default naming strategy\r\n        if (!this.namingStrategyClasses || !this.namingStrategyClasses.length || !this.usedNamingStrategy)\r\n            return getFromContainer(DefaultNamingStrategy);\r\n\r\n        // try to find used naming strategy in the list of loaded naming strategies\r\n        const namingMetadata = getMetadataArgsStorage()\r\n            .namingStrategies\r\n            .filterByTargets(this.namingStrategyClasses)\r\n            .toArray()\r\n            .find(strategy => {\r\n                if (typeof this.usedNamingStrategy === \"string\") {\r\n                    return strategy.name === this.usedNamingStrategy;\r\n                } else {\r\n                    return strategy.target === this.usedNamingStrategy;\r\n                }\r\n            });\r\n\r\n        // throw an error if not found\r\n        if (!namingMetadata)\r\n            throw new NamingStrategyNotFoundError(this.usedNamingStrategy, this.name);\r\n\r\n        // initialize a naming strategy instance\r\n        return getFromContainer<NamingStrategyInterface>(namingMetadata.target);\r\n    }\r\n\r\n    /**\r\n     * Creates a new default entity manager without single connection setup.\r\n     */\r\n    protected createEntityManager() {\r\n        if (this.driver instanceof MongoDriver)\r\n            return new MongoEntityManager(this);\r\n\r\n        return new EntityManager(this);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity broadcaster using in this connection.\r\n     */\r\n    protected createBroadcaster() {\r\n        return new Broadcaster(this, this.entitySubscribers, this.entityListeners);\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build a database schema for the entities of the current connection.\r\n     */\r\n    protected createSchemaBuilder() {\r\n        return new SchemaBuilder(this.driver, this.logger, this.entityMetadatas);\r\n    }\r\n\r\n    /**\r\n     * Creates a lazy relations wrapper.\r\n     */\r\n    protected createLazyRelationsWrapper() {\r\n        return new LazyRelationsWrapper(this);\r\n    }\r\n\r\n}"],"sourceRoot":".."}