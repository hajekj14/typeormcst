{"version":3,"sources":["../../src/naming-strategy/DefaultNamingStrategy.ts"],"names":[],"mappings":"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","file":"DefaultNamingStrategy.js","sourcesContent":["import {NamingStrategyInterface} from \"./NamingStrategyInterface\";\r\nimport {RandomGenerator} from \"../util/RandomGenerator\";\r\nimport {camelCase, snakeCase, titleCase} from \"../util/StringUtils\";\r\n\r\n/**\r\n * Naming strategy that is used by default.\r\n */\r\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\r\n\r\n    /**\r\n     * Normalizes table name.\r\n     *\r\n     * @param targetName Name of the target entity that can be used to generate a table name.\r\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\r\n     */\r\n    tableName(targetName: string, userSpecifiedName: string): string {\r\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\r\n    }\r\n\r\n    /**\r\n     * Creates a table name for a junction table of a closure table.\r\n     *\r\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\r\n     */\r\n    closureJunctionTableName(originalClosureTableName: string): string {\r\n        return originalClosureTableName + \"_closure\";\r\n    }\r\n\r\n    columnName(propertyName: string, customName: string, embeddedPrefixes: string[]): string { // todo: simplify\r\n        if (embeddedPrefixes.length)\r\n            return camelCase(embeddedPrefixes.join(\"_\")) + (customName ? titleCase(customName) : titleCase(propertyName));\r\n\r\n        return customName ? customName : propertyName;\r\n    }\r\n\r\n    relationName(propertyName: string): string {\r\n        return propertyName;\r\n    }\r\n\r\n    indexName(customName: string|undefined, tableName: string, columns: string[]): string {\r\n        if (customName)\r\n            return customName;\r\n\r\n        const key = \"ind_\" + tableName + \"_\" + columns.join(\"_\");\r\n        return \"ind_\" + RandomGenerator.sha1(key).substr(0, 27);\r\n    }\r\n\r\n    joinColumnName(relationName: string, referencedColumnName: string): string {\r\n        return camelCase(relationName + \"_\" + referencedColumnName);\r\n    }\r\n\r\n    joinTableName(firstTableName: string,\r\n                  secondTableName: string,\r\n                  firstPropertyName: string,\r\n                  secondPropertyName: string): string {\r\n        return snakeCase(firstTableName + \"_\" + firstPropertyName.replace(/\\./gi, \"_\") + \"_\" + secondTableName);\r\n    }\r\n\r\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string {\r\n        return columnName + \"_\" + index;\r\n    }\r\n\r\n    joinTableColumnName(tableName: string, propertyName: string, columnName?: string): string {\r\n        return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\r\n    }\r\n\r\n    foreignKeyName(tableName: string, columnNames: string[], referencedTableName: string, referencedColumnNames: string[]): string {\r\n        const key = `${tableName}_${columnNames.join(\"_\")}_${referencedTableName}_${referencedColumnNames.join(\"_\")}`;\r\n        return \"fk_\" + RandomGenerator.sha1(key).substr(0, 27); // todo: use crypto instead?\r\n    }\r\n\r\n    classTableInheritanceParentColumnName(parentTableName: any, parentTableIdPropertyName: any): string {\r\n        return camelCase(parentTableName + \"_\" + parentTableIdPropertyName);\r\n    }\r\n\r\n    /**\r\n     * Adds globally set prefix to the table name.\r\n     * This method is executed no matter if prefix was set or not.\r\n     * Table name is either user's given table name, either name generated from entity target.\r\n     * Note that table name comes here already normalized by #tableName method.\r\n     */\r\n    prefixTableName(prefix: string, tableName: string): string {\r\n        return prefix + tableName;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}