{"version":3,"sources":["../../src/naming-strategy/DefaultNamingStrategy.ts"],"names":[],"mappings":"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","file":"DefaultNamingStrategy.js","sourcesContent":["import {NamingStrategyInterface} from \"./NamingStrategyInterface\";\r\nimport {RandomGenerator} from \"../util/RandomGenerator\";\r\nimport {snakeCase, camelCase} from \"../util/StringUtils\";\r\n\r\n/**\r\n * Naming strategy that is used by default.\r\n */\r\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\r\n\r\n    tableName(className: string, customName: string): string {\r\n        return customName ? customName : snakeCase(className);\r\n    }\r\n\r\n    columnName(propertyName: string, customName: string): string {\r\n        return customName ? customName : propertyName;\r\n    }\r\n\r\n    embeddedColumnName(prefixes: string[], columnPropertyName: string, columnCustomName?: string): string {\r\n        // todo: need snake case property name but only if its a property name and not a custom embedded prefix\r\n        prefixes = prefixes.filter(prefix => !!prefix);\r\n        const embeddedPropertyName = prefixes.length ? prefixes.join(\"_\") + \"_\" : \"\";\r\n        return camelCase(embeddedPropertyName + (columnCustomName ? columnCustomName : columnPropertyName));\r\n    }\r\n\r\n    relationName(propertyName: string): string {\r\n        return propertyName;\r\n    }\r\n\r\n    indexName(customName: string|undefined, tableName: string, columns: string[]): string {\r\n        if (customName)\r\n            return customName;\r\n\r\n        const key = \"ind_\" + tableName + \"_\" + columns.join(\"_\");\r\n        return \"ind_\" + RandomGenerator.sha1(key).substr(0, 26);\r\n    }\r\n\r\n    joinColumnInverseSideName(joinColumnName: string, propertyName: string): string {\r\n        if (joinColumnName)\r\n            return joinColumnName;\r\n\r\n        return propertyName;\r\n    }\r\n\r\n    joinTableName(firstTableName: string,\r\n                  secondTableName: string,\r\n                  firstPropertyName: string,\r\n                  secondPropertyName: string,\r\n                  firstColumnName: string,\r\n                  secondColumnName: string): string {\r\n        return snakeCase(firstTableName + \"_\" + firstPropertyName + \"_\" + secondTableName + \"_\" + secondColumnName);\r\n    }\r\n\r\n    joinTableColumnName(tableName: string, columnName: string, secondTableName: string, secondColumnName: string): string {\r\n        const column1 = camelCase(tableName + \"_\" + columnName);\r\n        const column2 = camelCase(secondTableName + \"_\" + secondColumnName);\r\n        return column1 === column2 ? column1 + \"_1\" : column1; // todo: do we still need _1 prefix?!\r\n    }\r\n\r\n    joinTableInverseColumnName(tableName: string, columnName: string, secondTableName: string, secondColumnName: string): string {\r\n        const column1 = camelCase(tableName + \"_\" + columnName);\r\n        const column2 = camelCase(secondTableName + \"_\" + secondColumnName);\r\n        return column1 === column2 ? column1 + \"_2\" : column1; // todo: do we still need _2 prefix?!\r\n    }\r\n\r\n    closureJunctionTableName(tableName: string): string {\r\n        return tableName + \"_closure\";\r\n    }\r\n\r\n    foreignKeyName(tableName: string, columnNames: string[], referencedTableName: string, referencedColumnNames: string[]): string {\r\n        const key = `${tableName}_${columnNames.join(\"_\")}_${referencedTableName}_${referencedColumnNames.join(\"_\")}`;\r\n        return \"fk_\" + RandomGenerator.sha1(key).substr(0, 27); // todo: use crypto instead?\r\n    }\r\n\r\n    classTableInheritanceParentColumnName(parentTableName: any, parentTableIdPropertyName: any): string {\r\n        return camelCase(parentTableName + \"_\" + parentTableIdPropertyName);\r\n    }\r\n\r\n    /**\r\n     * Adds prefix to the table.\r\n     */\r\n    prefixTableName(prefix: string, originalTableName: string): string {\r\n        return prefix + originalTableName;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}