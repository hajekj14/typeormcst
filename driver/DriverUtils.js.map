{"version":3,"sources":["../../src/driver/DriverUtils.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH;IAAA;IAiEA,CAAC;IA/DG,4EAA4E;IAC5E,wBAAwB;IACxB,4EAA4E;IAE5E;;;OAGG;IACI,8BAAkB,GAAzB,UAA0B,OAAsB,EAAE,YAAkC;QAChF,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YACd,IAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACvD,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;gBACtC,IAAM,gBAAgB,GAAkB;oBACpC,IAAI,EAAE,OAAO,CAAC,IAAI;oBAClB,IAAI,EAAE,SAAS,CAAC,IAAI;oBACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;oBAC5B,QAAQ,EAAE,SAAS,CAAC,QAAQ;oBAC5B,IAAI,EAAE,SAAS,CAAC,IAAI;oBACpB,GAAG,EAAE,SAAS,CAAC,QAAQ;iBAC1B,CAAC;gBACF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YAEpD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAM,gBAAgB,GAAkB;oBACpC,IAAI,EAAE,OAAO,CAAC,IAAI;oBAClB,IAAI,EAAE,SAAS,CAAC,IAAI;oBACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;oBAC5B,QAAQ,EAAE,SAAS,CAAC,QAAQ;oBAC5B,IAAI,EAAE,SAAS,CAAC,IAAI;oBACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;iBAC/B,CAAC;gBACF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YACpD,CAAC;QACL,CAAC;QACD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IAED,4EAA4E;IAC5E,yBAAyB;IACzB,4EAA4E;IAE5E;;OAEG;IACY,8BAAkB,GAAjC,UAAkC,GAAW;QACzC,IAAM,YAAY,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvC,IAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QAC7C,IAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,IAAM,IAAI,GAAG,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,GAAG,OAAO,CAAC;QAC7E,IAAM,SAAS,GAAG,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;QAC/E,IAAA,oBAAoD,EAAnD,2BAAmB,EAAE,mBAAW,CAAoB;QACrD,IAAA,mCAAqD,EAApD,gBAAQ,EAAE,gBAAQ,CAAmC;QACtD,IAAA,2BAAqC,EAApC,YAAI,EAAE,YAAI,CAA2B;QAE5C,MAAM,CAAC;YACH,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,QAAQ;YAClB,IAAI,EAAE,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,SAAS;YACvC,QAAQ,EAAE,SAAS,IAAI,SAAS;SACnC,CAAC;IACN,CAAC;IAEL,kBAAC;AAAD,CAjEA,AAiEC,IAAA;AAjEY,kCAAW","file":"DriverUtils.js","sourcesContent":["import {DriverOptions} from \"./DriverOptions\";\r\n\r\n/**\r\n * Common driver utility functions.\r\n */\r\nexport class DriverUtils {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Normalizes and builds a new driver options.\r\n     * Extracts settings from connection url and sets to a new options object.\r\n     */\r\n    static buildDriverOptions(options: DriverOptions, buildOptions?: { useSid: boolean }): DriverOptions {\r\n        if (options.url) {\r\n            const parsedUrl = this.parseConnectionUrl(options.url);\r\n            if (buildOptions && buildOptions.useSid) {\r\n                const urlDriverOptions: DriverOptions = {\r\n                    type: options.type,\r\n                    host: parsedUrl.host,\r\n                    username: parsedUrl.username,\r\n                    password: parsedUrl.password,\r\n                    port: parsedUrl.port,\r\n                    sid: parsedUrl.database\r\n                };\r\n                return Object.assign(urlDriverOptions, options);\r\n\r\n            } else {\r\n                const urlDriverOptions: DriverOptions = {\r\n                    type: options.type,\r\n                    host: parsedUrl.host,\r\n                    username: parsedUrl.username,\r\n                    password: parsedUrl.password,\r\n                    port: parsedUrl.port,\r\n                    database: parsedUrl.database\r\n                };\r\n                return Object.assign(urlDriverOptions, options);\r\n            }\r\n        }\r\n        return Object.assign({}, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Extracts connection data from the connection url.\r\n     */\r\n    private static parseConnectionUrl(url: string) {\r\n        const firstSlashes = url.indexOf(\"//\");\r\n        const preBase = url.substr(firstSlashes + 2);\r\n        const secondSlash = preBase.indexOf(\"/\");\r\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\r\n        const afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\r\n        const [usernameAndPassword, hostAndPort] = base.split(\"@\");\r\n        const [username, password] = usernameAndPassword.split(\":\");\r\n        const [host, port] = hostAndPort.split(\":\");\r\n\r\n        return {\r\n            host: host,\r\n            username: username,\r\n            password: password,\r\n            port: port ? parseInt(port) : undefined,\r\n            database: afterBase || undefined\r\n        };\r\n    }\r\n\r\n}"],"sourceRoot":".."}