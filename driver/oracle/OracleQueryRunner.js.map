{"version":3,"sources":["../../src/driver/oracle/OracleQueryRunner.ts"],"names":[],"mappings":"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","file":"OracleQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {OracleDriver} from \"./OracleDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single mysql database connection.\r\n *\r\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\r\n */\r\nexport class OracleQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: OracleDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.beginTransaction();\r\n        try {\r\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\r\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\r\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\r\n\r\n            await this.query(disableForeignKeysCheckQuery);\r\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\r\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\r\n            await this.query(enableForeignKeysCheckQuery);\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        // await this.query(\"START TRANSACTION\");\r\n        this.databaseConnection.isTransactionActive = true;\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise((ok, fail) => {\r\n            this.logger.logQuery(query, parameters);\r\n            const handler = (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                }\r\n\r\n                ok(result.rows || result.outBinds);\r\n            };\r\n            const executionOptions = {\r\n                autoCommit: this.databaseConnection.isTransactionActive ? false : true\r\n            };\r\n            this.databaseConnection.connection.execute(query, parameters || {}, executionOptions, handler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map(key => \":\" + key).join(\", \");\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        const insertSql = columns.length > 0\r\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`\r\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\r\n        if (generatedColumn) {\r\n            const sql2 = `declare lastId number; begin ${insertSql} returning \"id\" into lastId; dbms_output.enable; dbms_output.put_line(lastId); dbms_output.get_line(:ln, :st); end;`;\r\n            const saveResult = await this.query(sql2, parameters.concat([\r\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.STRING, maxSize: 32767 },\r\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.NUMBER }\r\n            ]));\r\n            return parseInt(saveResult[0]);\r\n        } else {\r\n            return this.query(insertSql, parameters);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions).join(\" AND \");\r\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(sql, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\r\n        const tablesSql      = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN (${tableNamesString})`;\r\n        const columnsSql     = `SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN (${tableNamesString})`;\r\n        const indicesSql     = `SELECT ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS, LISTAGG(cols.COLUMN_NAME, ',') WITHIN GROUP (ORDER BY cols.COLUMN_NAME) AS COLUMN_NAMES\r\n                                FROM USER_INDEXES ind, USER_IND_COLUMNS cols \r\n                                WHERE ind.INDEX_NAME = cols.INDEX_NAME AND ind.TABLE_NAME IN (${tableNamesString})\r\n                                GROUP BY ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS`;\r\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\r\n        const uniqueKeysSql  = `SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = '${this.dbName}' AND CONSTRAINT_TYPE = 'UNIQUE'`;\r\n        const constraintsSql = `SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\r\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN (${tableNamesString}) \r\nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position`;\r\n        const [dbTables, dbColumns, dbIndices, /*dbForeignKeys, dbUniqueKeys, */constraints]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(indicesSql),\r\n            // this.query(foreignKeysSql),\r\n            // this.query(uniqueKeysSql),\r\n            this.query(constraintsSql),\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return dbTables.map(dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbColumn => {\r\n                    const isPrimary = !!constraints\r\n                        .find(constraint => {\r\n                            return  constraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"P\" &&\r\n                                    constraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\r\n                        });\r\n\r\n                    let columnType = dbColumn[\"DATA_TYPE\"].toLowerCase();\r\n                    if (dbColumn[\"DATA_TYPE\"].toLowerCase() === \"varchar2\" && dbColumn[\"DATA_LENGTH\"] !== null) {\r\n                        columnType += \"(\" + dbColumn[\"DATA_LENGTH\"] + \")\";\r\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null && dbColumn[\"DATA_SCALE\"] !== null) {\r\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \",\" + dbColumn[\"DATA_SCALE\"] + \")\";\r\n                    } else if (dbColumn[\"DATA_SCALE\"] !== null) {\r\n                        columnType += \"(0,\" + dbColumn[\"DATA_SCALE\"] + \")\";\r\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null) {\r\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \")\";\r\n                    }\r\n\r\n                    const columnSchema = new ColumnSchema();\r\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\r\n                    columnSchema.type = columnType;\r\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\r\n                    columnSchema.isNullable = dbColumn[\"NULLABLE\"] !== \"N\";\r\n                    columnSchema.isPrimary = isPrimary;\r\n                    columnSchema.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\"; // todo\r\n                    columnSchema.comment = \"\"; // todo\r\n                    return columnSchema;\r\n                });\r\n\r\n            // create primary key schema\r\n            tableSchema.primaryKeys = constraints\r\n                .filter(constraint => \r\n                    constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"P\"\r\n                )\r\n                .map(constraint => \r\n                    new PrimaryKeySchema(constraint[\"CONSTRAINT_NAME\"], constraint[\"COLUMN_NAME\"])\r\n                );\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            tableSchema.foreignKeys = constraints\r\n                .filter(constraint => constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"R\")\r\n                .map(constraint => new ForeignKeySchema(constraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create index schemas from the loaded indices\r\n            tableSchema.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return  dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\r\n                })\r\n                .map(dbIndex => {\r\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndex[\"INDEX_NAME\"], dbIndex[\"COLUMN_NAMES\"], !!(dbIndex[\"COLUMN_NAMES\"] === \"UNIQUE\"));\r\n                });\r\n\r\n            return tableSchema;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableName: string): Promise<void> {\r\n        let sql = `DROP TABLE \"${tableName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\r\n\r\n            if (newColumn.isGenerated) {\r\n                if (tableSchema.primaryKeys.length > 0 && oldColumn.isPrimary) {\r\n                    // console.log(tableSchema.primaryKeys);\r\n                    const dropPrimarySql = `ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"${tableSchema.primaryKeys[0].name}\"`;\r\n                    await this.query(dropPrimarySql);\r\n                }\r\n\r\n                // since modifying identity column is not supported yet, we need to recreate this column\r\n                const dropSql = `ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`;\r\n                await this.query(dropSql);\r\n\r\n                const createSql = `ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn)}`;\r\n                await this.query(createSql);\r\n\r\n            } else {\r\n                const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" DROP IDENTITY`;\r\n                await this.query(sql);\r\n\r\n            }\r\n        }\r\n\r\n        if (newColumn.isNullable !== oldColumn.isNullable) {\r\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type} ${newColumn.isNullable ? \"NULL\" : \"NOT NULL\"}`;\r\n            await this.query(sql);\r\n\r\n        } else if (newColumn.type !== oldColumn.type) { // elseif is used because\r\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type}`;\r\n            await this.query(sql);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\r\n        return this.query(`ALTER TABLE \"${tableName}\" DROP COLUMN \"${columnName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => \"\\\"\" + primaryKey.columnName + \"\\\"\");\r\n        // console.log(dbTable.primaryKeys);\r\n        if (dbTable.primaryKeys.length > 0 && dbTable.primaryKeys[0].name)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${dbTable.primaryKeys[0].name}\"`);\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnNames = foreignKey.columnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\",\");\r\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\r\n            `FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columns = index.columnNames.map(columnName => \"\\\"\" + columnName + \"\\\"\").join(\", \");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE\" : \"\"} INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `ALTER TABLE \"${tableName}\" DROP INDEX \"${indexName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                if (typeOptions.fixedLength) {\r\n                    return \"char(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                } else {\r\n                    return \"varchar2(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";                    \r\n                }\r\n            case \"text\":\r\n                return \"clob\";\r\n            case \"boolean\":\r\n                return \"number(1)\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                // if (column.isGenerated)\r\n                //     return `number(22)`;\r\n                if (typeOptions.precision && typeOptions.scale)\r\n                    return `number(${typeOptions.precision},${typeOptions.scale})`;\r\n                if (typeOptions.precision)\r\n                    return `number(${typeOptions.precision},0)`;\r\n                if (typeOptions.scale)\r\n                    return `number(0,${typeOptions.scale})`;\r\n\r\n                return \"number(10,0)\";\r\n            case \"smallint\":\r\n                return \"number(5)\";\r\n            case \"bigint\":\r\n                return \"number(20)\";\r\n            case \"float\":\r\n                if (typeOptions.precision && typeOptions.scale)\r\n                    return `float(${typeOptions.precision},${typeOptions.scale})`;\r\n                if (typeOptions.precision)\r\n                    return `float(${typeOptions.precision},0)`;\r\n                if (typeOptions.scale)\r\n                    return `float(0,${typeOptions.scale})`;\r\n\r\n                return `float(126)`;\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"float(126)\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(0,${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                return \"date\";\r\n            case \"datetime\":\r\n                return \"timestamp(0)\";\r\n            case \"json\":\r\n                return \"clob\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"varchar2(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"Oracle\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.schemaName as string;\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\r\n        return Object.keys(objectLiteral).map(key => this.driver.escapeColumnName(key) + \"=:\" + key);\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema) {\r\n        let c = `\"${column.name}\" ` + column.type;\r\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\r\n            c += \" NOT NULL\";\r\n        // if (column.isPrimary === true && addPrimary)\r\n        //     c += \" PRIMARY KEY\";\r\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" GENERATED BY DEFAULT ON NULL AS IDENTITY\";\r\n        // if (column.comment) // todo: less priority, fix it later\r\n        //     c += \" COMMENT '\" + column.comment + \"'\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n}"],"sourceRoot":"../.."}