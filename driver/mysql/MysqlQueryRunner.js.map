{"version":3,"sources":["../../src/driver/mysql/MysqlQueryRunner.ts"],"names":[],"mappings":"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","file":"MysqlQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {MysqlDriver} from \"./MysqlDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single mysql database connection.\r\n */\r\nexport class MysqlQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: MysqlDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.beginTransaction();\r\n        try {\r\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\r\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\r\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\r\n\r\n            await this.query(disableForeignKeysCheckQuery);\r\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\r\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\r\n            await this.query(enableForeignKeysCheckQuery);\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.databaseConnection.isTransactionActive = true;\r\n        await this.query(\"START TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise((ok, fail) => {\r\n            this.logger.logQuery(query, parameters);\r\n            this.databaseConnection.connection.query(query, parameters, (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                }\r\n\r\n                ok(result);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map(key => \"?\").join(\",\");\r\n        const parameters = keys.map(key => keyValues[key]);\r\n        const sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`;\r\n        const result = await this.query(sql, parameters);\r\n        return generatedColumn ? result.insertId : undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions).join(\" AND \");\r\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(sql, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\r\n        const tablesSql      = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\r\n        const columnsSql     = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}'`;\r\n        const indicesSql     = `SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = '${this.dbName}' AND INDEX_NAME != 'PRIMARY'`;\r\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\r\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(indicesSql),\r\n            this.query(foreignKeysSql)\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\r\n            const primaryKeys: ObjectLiteral[] = await this.query(`SHOW INDEX FROM \\`${dbTable[\"TABLE_NAME\"]}\\` WHERE Key_name = 'PRIMARY'`);\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbColumn => {\r\n                    const columnSchema = new ColumnSchema();\r\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\r\n                    columnSchema.type = dbColumn[\"COLUMN_TYPE\"].toLowerCase();\r\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\r\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\r\n                    columnSchema.isPrimary = dbColumn[\"COLUMN_KEY\"].indexOf(\"PRI\") !== -1;\r\n                    columnSchema.isUnique = dbColumn[\"COLUMN_KEY\"].indexOf(\"UNI\") !== -1;\r\n                    columnSchema.isGenerated = dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\r\n                    columnSchema.comment = dbColumn[\"COLUMN_COMMENT\"];\r\n                    return columnSchema;\r\n                });\r\n\r\n            // create primary keys\r\n            tableSchema.primaryKeys = primaryKeys.map(primaryKey => {\r\n                return new PrimaryKeySchema(primaryKey[\"Key_name\"], primaryKey[\"Column_name\"]);\r\n            });\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            tableSchema.foreignKeys = dbForeignKeys\r\n                .filter(dbForeignKey => dbForeignKey[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create index schemas from the loaded indices\r\n            tableSchema.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(dbIndexName => {\r\n                    const currentDbIndices = dbIndices.filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName);\r\n                    const columnNames = currentDbIndices.map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\r\n\r\n                    // find a special index - unique index and\r\n                    if (currentDbIndices.length === 1 && currentDbIndices[0][\"NON_UNIQUE\"] === 0) {\r\n                        const column = tableSchema.columns.find(column => column.name === currentDbIndices[0][\"INDEX_NAME\"] && column.name === currentDbIndices[0][\"COLUMN_NAME\"]);\r\n                        if (column) {\r\n                            column.isUnique = true;\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\r\n                })\r\n                .filter(index => !!index) as IndexSchema[]; // remove empty returns\r\n\r\n            return tableSchema;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table schema and column schemas inside it.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\r\n        let sql = `CREATE TABLE \\`${table.name}\\` (${columnDefinitions}`;\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\\`${column.name}\\``).join(\", \")})`;\r\n        sql += `) ENGINE=InnoDB;`; // todo: remove engine from here\r\n\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drop the table.\r\n     */\r\n    async dropTable(tableName: String): Promise<void> {\r\n        let sql = `DROP TABLE \\`${tableName}\\``;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \\`${tableName}\\` ADD ${this.buildCreateColumnSql(column, false)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        if (newColumn.isUnique === false && oldColumn.isUnique === true)\r\n            await this.query(`ALTER TABLE \\`${tableSchema.name}\\` DROP INDEX \\`${oldColumn.name}\\``);\r\n\r\n        return this.query(`ALTER TABLE \\`${tableSchema.name}\\` CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(newColumn, oldColumn.isPrimary)}`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\r\n        return this.query(`ALTER TABLE \\`${tableName}\\` DROP \\`${columnName}\\``);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableSchema: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!tableSchema.hasGeneratedColumn)\r\n            await this.query(`ALTER TABLE ${tableSchema.name} DROP PRIMARY KEY`);\r\n\r\n        const primaryColumnNames = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated).map(column => \"`\" + column.name + \"`\");\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE ${tableSchema.name} ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnNames = foreignKey.columnNames.map(column => \"`\" + column + \"`\").join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"`\" + column + \"`\").join(\",\");\r\n        let sql = `ALTER TABLE \\`${tableName}\\` ADD CONSTRAINT \\`${foreignKey.name}\\` ` +\r\n            `FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES \\`${foreignKey.referencedTableName}\\`(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        return this.query(`ALTER TABLE \\`${tableName}\\` DROP FOREIGN KEY \\`${foreignKey.name}\\``);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columns = index.columnNames.map(columnName => \"`\" + columnName + \"`\").join(\", \");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \\`${index.name}\\` ON \\`${tableName}\\`(${columns})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `ALTER TABLE \\`${tableName}\\` DROP INDEX \\`${indexName}\\``;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                if (typeOptions.fixedLength) {\r\n                    return \"char(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                } else {\r\n                    return \"varchar(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                }\r\n            case \"text\":\r\n                return \"text\";\r\n            case \"boolean\":\r\n                return \"tinyint(1)\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"int(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\r\n            case \"smallint\":\r\n                return \"smallint(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\r\n            case \"bigint\":\r\n                return \"bigint(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\r\n            case \"float\":\r\n                return \"float\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"double\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                return \"time\";\r\n            case \"datetime\":\r\n                return \"datetime\";\r\n            case \"json\":\r\n                return \"text\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"varchar(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"MySQL/MariaDB\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\r\n        return Object.keys(objectLiteral).map(key => this.driver.escapeColumnName(key) + \"=?\");\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\r\n        let c = \"`\" + column.name + \"` \" + column.type;\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isUnique === true)\r\n            c += \" UNIQUE\";\r\n        if (column.isGenerated && column.isPrimary && !skipPrimary)\r\n            c += \" PRIMARY KEY\";\r\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" AUTO_INCREMENT\";\r\n        if (column.comment)\r\n            c += \" COMMENT '\" + column.comment + \"'\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n        return c;\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}