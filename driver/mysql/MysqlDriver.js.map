{"version":3,"sources":["../../src/driver/mysql/MysqlDriver.ts"],"names":[],"mappings":"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","file":"MysqlDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {MysqlQueryRunner} from \"./MysqlQueryRunner\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\n\r\n/**\r\n * Organizes communication with MySQL DBMS.\r\n */\r\nexport class MysqlDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Mysql library.\r\n     */\r\n    protected mysql: any;\r\n\r\n    /**\r\n     * Connection to mysql database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Mysql pool.\r\n     */\r\n    protected pool: any;\r\n\r\n    /**\r\n     * Pool of database connections.\r\n     */\r\n    protected databaseConnectionPool: DatabaseConnection[] = [];\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, mysql?: any) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(options);\r\n        this.logger = logger;\r\n        this.mysql = mysql;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)))\r\n            throw new DriverOptionNotSetError(\"socketPath and host\");\r\n        if (!this.options.username)\r\n            throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // if mysql package instance was not set explicitly then try to load it\r\n        if (!mysql)\r\n            this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            host: this.options.host,\r\n            user: this.options.username,\r\n            password: this.options.password,\r\n            database: this.options.database,\r\n            port: this.options.port\r\n        }, this.options.extra || {});\r\n\r\n        // pooling is enabled either when its set explicitly to true,\r\n        // either when its not defined at all (e.g. enabled by default)\r\n        if (this.options.usePool === undefined || this.options.usePool === true) {\r\n            this.pool = this.mysql.createPool(options);\r\n            return Promise.resolve();\r\n\r\n        } else {\r\n            return new Promise<void>((ok, fail) => {\r\n                const connection = this.mysql.createConnection(options);\r\n                this.databaseConnection = {\r\n                    id: 1,\r\n                    connection: connection,\r\n                    isTransactionActive: false\r\n                };\r\n                this.databaseConnection.connection.connect((err: any) => err ? fail(err) : ok());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            throw new ConnectionIsNotSetError(\"mysql\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n\r\n            // if pooling is used, then disconnect from it\r\n            if (this.pool) {\r\n                this.pool.end(handler);\r\n                this.pool = undefined;\r\n                this.databaseConnectionPool = [];\r\n            }\r\n\r\n            // if single connection is opened, then close it\r\n            if (this.databaseConnection) {\r\n                this.databaseConnection.connection.end(handler);\r\n                this.databaseConnection = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mysql\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new MysqlQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.mysql,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\r\n            pool: this.pool\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            escapedParameters.push(parameters[key.substr(1)]);\r\n            return \"?\";\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return \"`\" + columnName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return \"`\" + aliasName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return \"`\" + tableName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n\r\n        if (this.pool) {\r\n            return new Promise((ok, fail) => {\r\n                this.pool.getConnection((err: any, connection: any) => {\r\n                    if (err)\r\n                        return fail(err);\r\n\r\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\r\n                    if (!dbConnection) {\r\n                        dbConnection = {\r\n                            id: this.databaseConnectionPool.length,\r\n                            connection: connection,\r\n                            isTransactionActive: false\r\n                        };\r\n                        dbConnection.releaseCallback = () => {\r\n                            if (this.pool && dbConnection) {\r\n                                connection.release();\r\n                                this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\r\n                            }\r\n                            return Promise.resolve();\r\n                        };\r\n                        this.databaseConnectionPool.push(dbConnection);\r\n                    }\r\n                    ok(dbConnection);\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"mysql\");\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.mysql = PlatformTools.load(\"mysql\");  // try to load first supported package\r\n\r\n        } catch (e) {\r\n            try {\r\n                this.mysql = PlatformTools.load(\"mysql2\"); // try to load second supported package\r\n\r\n            } catch (e) {\r\n                throw new DriverPackageNotInstalledError(\"Mysql\", \"mysql\");\r\n            }\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}