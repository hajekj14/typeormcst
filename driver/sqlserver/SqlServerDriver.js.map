{"version":3,"sources":["../../src/driver/sqlserver/SqlServerDriver.ts"],"names":[],"mappings":"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","file":"SqlServerDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {SqlServerQueryRunner} from \"./SqlServerQueryRunner\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\nimport {LazyRelationsWrapper} from \"../../lazy-loading/LazyRelationsWrapper\";\r\n\r\n/**\r\n * Organizes communication with SQL Server DBMS.\r\n */\r\nexport class SqlServerDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Used to wrap lazy relations to be able to perform lazy loadings.\r\n     */\r\n    lazyRelationsWrapper: LazyRelationsWrapper;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    /**\r\n     * SQL Server library.\r\n     */\r\n    public mssql: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection to mssql database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * SQL Server pool.\r\n     */\r\n    protected connection: any;\r\n\r\n    /**\r\n     * Pool of database connections.\r\n     */\r\n    protected databaseConnectionPool: DatabaseConnection[] = [];\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, mssql?: any) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(options);\r\n        this.logger = logger;\r\n        this.mssql = mssql;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.host)\r\n            throw new DriverOptionNotSetError(\"host\");\r\n        if (!this.options.username)\r\n            throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // if mssql package instance was not set explicitly then try to load it\r\n        if (!mssql)\r\n            this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            server: this.options.host,\r\n            user: this.options.username,\r\n            password: this.options.password,\r\n            database: this.options.database,\r\n            port: this.options.port\r\n        }, this.options.extra || {});\r\n\r\n        // set default useUTC option if it hasn't been set\r\n        if (!options.options) options.options = { useUTC: false };\r\n        else if (!options.options.useUTC) options.options.useUTC = false; \r\n\r\n        // pooling is enabled either when its set explicitly to true,\r\n        // either when its not defined at all (e.g. enabled by default)\r\n        return new Promise<void>((ok, fail) => {\r\n            const connection = new this.mssql.Connection(options).connect((err: any) => {\r\n                if (err) return fail(err);\r\n                this.connection = connection;\r\n                if (this.options.usePool === false) {\r\n                    this.databaseConnection = {\r\n                        id: 1,\r\n                        connection: new this.mssql.Request(connection),\r\n                        isTransactionActive: false\r\n                    };\r\n                }\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        if (!this.connection)\r\n            throw new ConnectionIsNotSetError(\"mssql\");\r\n\r\n        this.connection.close();\r\n        this.connection = undefined;\r\n        this.databaseConnection = undefined;\r\n        this.databaseConnectionPool = [];\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.connection)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mssql\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new SqlServerQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.mssql,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\r\n            pool: this.connection\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            const value = parameters[key.substr(1)];\r\n            if (value instanceof Array) {\r\n                return value.map((v: any) => {\r\n                    escapedParameters.push(v);\r\n                    return \"@\" + (escapedParameters.length - 1);\r\n                }).join(\", \");\r\n            } else {\r\n                escapedParameters.push(value);\r\n            }\r\n            return \"@\" + (escapedParameters.length - 1);\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return `\"${columnName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return `\"${aliasName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return `\"${tableName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n\r\n        if (!this.connection)\r\n            throw new ConnectionIsNotSetError(\"mssql\");\r\n\r\n        return new Promise((ok, fail) => {\r\n            if (this.databaseConnection)\r\n                return ok(this.databaseConnection);\r\n            // let dbConnection: DatabaseConnection|undefined;\r\n            // const connection = this.pool.connect((err: any) => {\r\n            //     if (err)\r\n            //         return fail(err);\r\n            //     ok(dbConnection);\r\n            // });\r\n            //\r\n            // console.log(connection);\r\n            // console.log(this.pool);\r\n            // console.log(this.pool === connection);\r\n\r\n            // const request = new this.mssql.Request(this.connection);\r\n            // console.log(\"request:\", request);\r\n            // let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\r\n            // if (!dbConnection) {\r\n            let dbConnection: DatabaseConnection = {\r\n                id: this.databaseConnectionPool.length,\r\n                connection: this.connection,\r\n                isTransactionActive: false\r\n            };\r\n            dbConnection.releaseCallback = () => {\r\n                // }\r\n                // if (this.connection && dbConnection) {\r\n                // request.release();\r\n                this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\r\n                return Promise.resolve();\r\n            };\r\n            this.databaseConnectionPool.push(dbConnection);\r\n            ok(dbConnection);\r\n            // }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.mssql = PlatformTools.load(\"mssql\");\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"SQL Server\", \"mssql\");\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}