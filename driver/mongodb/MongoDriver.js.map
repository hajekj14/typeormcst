{"version":3,"sources":["../../src/driver/mongodb/MongoDriver.ts"],"names":[],"mappings":"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","file":"MongoDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {MongoQueryRunner} from \"./MongoQueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\n\r\n/**\r\n * Organizes communication with MongoDB.\r\n */\r\nexport class MongoDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Mongodb does not require to dynamically create query runner each time,\r\n     * because it does not have a regular pool.\r\n     */\r\n    queryRunner: MongoQueryRunner;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Underlying mongodb driver.\r\n     */\r\n    protected mongodb: any;\r\n\r\n    /**\r\n     * Connection to mongodb database provided by native driver.\r\n     */\r\n    protected pool: any;\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, mongodb?: any) {\r\n\r\n        // validate options to make sure everything is correct and driver will be able to establish connection\r\n        this.validateOptions(options);\r\n\r\n        // if mongodb package instance was not set explicitly then try to load it\r\n        if (!mongodb)\r\n            mongodb = this.loadDependencies();\r\n\r\n        this.options = options;\r\n        this.logger = logger;\r\n        this.mongodb = mongodb;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    connect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.mongodb.MongoClient.connect(this.buildConnectionUrl(), this.options.extra, (err: any, database: any) => {\r\n                if (err) return fail(err);\r\n\r\n                this.pool = database;\r\n                const databaseConnection: DatabaseConnection = {\r\n                    id: 1,\r\n                    connection: this.pool,\r\n                    isTransactionActive: false\r\n                };\r\n                this.queryRunner = new MongoQueryRunner(databaseConnection, this, this.logger);\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        if (!this.pool)\r\n            throw new ConnectionIsNotSetError(\"mongodb\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n            this.pool.close(handler);\r\n            this.pool = undefined;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mongodb\"));\r\n\r\n        return this.queryRunner;\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.mongodb,\r\n            connection: this.pool\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        throw new Error(`This operation is not supported by Mongodb driver.`);\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return columnName;\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return aliasName;\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return tableName;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            // case ColumnTypes.BOOLEAN:\r\n            //     return value === true ? 1 : 0;\r\n            //\r\n            // case ColumnTypes.DATE:\r\n            //     return DataTransformationUtils.mixedDateToDateString(value);\r\n            //\r\n            // case ColumnTypes.TIME:\r\n            //     return DataTransformationUtils.mixedDateToTimeString(value);\r\n            //\r\n            // case ColumnTypes.DATETIME:\r\n            //     if (columnMetadata.localTimezone) {\r\n            //         return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n            //     } else {\r\n            //         return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n            //     }\r\n            //\r\n            // case ColumnTypes.JSON:\r\n            //     return JSON.stringify(value);\r\n            //\r\n            // case ColumnTypes.SIMPLE_ARRAY:\r\n            //     return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            // case ColumnTypes.BOOLEAN:\r\n            //     return value ? true : false;\r\n            //\r\n            // case ColumnTypes.JSON:\r\n            //     return JSON.parse(value);\r\n            //\r\n            // case ColumnTypes.SIMPLE_ARRAY:\r\n            //     return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        // if (columnMetadata.isObjectId)\r\n        //     return new ObjectID(value);\r\n\r\n        return value;\r\n    }\r\n\r\n    // todo: make better abstraction\r\n    async syncSchema(entityMetadatas: EntityMetadata[]): Promise<void> {\r\n        const queryRunner = await this.createQueryRunner() as MongoQueryRunner;\r\n        const promises: Promise<any>[] = [];\r\n        await Promise.all(entityMetadatas.map(metadata => {\r\n            metadata.indices.forEach(index => {\r\n                const columns = index.buildColumnsAsMap(1);\r\n                const options = { name: index.name };\r\n                promises.push(queryRunner.createCollectionIndex(metadata.table.name, columns, options));\r\n            });\r\n        }));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validate driver options to make sure everything is correct and driver will be able to establish connection.\r\n     */\r\n    protected validateOptions(options: DriverOptions) {\r\n        if (!options.url) {\r\n            if (!options.database)\r\n                throw new DriverOptionNotSetError(\"database\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): any {\r\n        try {\r\n            return PlatformTools.load(\"mongodb\");  // try to load native driver dynamically\r\n\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\"MongoDB\", \"mongodb\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds connection url that is passed to underlying driver to perform connection to the mongodb database.\r\n     */\r\n    protected buildConnectionUrl(): string {\r\n        if (this.options.url)\r\n            return this.options.url;\r\n\r\n        return `mongodb://${this.options.host || \"127.0.0.1\"}:${this.options.port || \"27017\"}/${this.options.database}`;\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}