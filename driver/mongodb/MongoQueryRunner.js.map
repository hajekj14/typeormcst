{"version":3,"sources":["../../src/driver/mongodb/MongoQueryRunner.ts"],"names":[],"mappings":"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","file":"MongoQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {MongoDriver} from \"./MongoDriver\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\nimport {\r\n    Cursor,\r\n    Db,\r\n    Collection,\r\n    MongoCountPreferences,\r\n    CollectionAggregationOptions,\r\n    AggregationCursor,\r\n    CollectionBluckWriteOptions,\r\n    BulkWriteOpResultObject,\r\n    MongodbIndexOptions,\r\n    CollectionOptions,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    ReadPreference,\r\n    Code,\r\n    OrderedBulkOperation,\r\n    UnorderedBulkOperation,\r\n    InsertWriteOpResult,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    InsertOneWriteOpResult,\r\n    CommandCursor,\r\n    MapReduceOptions,\r\n    ParallelCollectionScanOptions,\r\n    ReplaceOneOptions,\r\n    UpdateWriteOpResult,\r\n    CollStats\r\n} from \"./typings\";\r\n\r\n/**\r\n * Runs queries on a single MongoDB connection.\r\n */\r\nexport class MongoQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: MongoDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    cursor(collectionName: string, query?: ObjectLiteral): Cursor<any> {\r\n        return this.getCollection(collectionName).find(query || {});\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate(collectionName: string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<any> {\r\n        return this.getCollection(collectionName).aggregate(pipeline, options);\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    async bulkWrite(collectionName: string, operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).bulkWrite(operations, options);\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    async count(collectionName: string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        return await this.getCollection(collectionName).count(query || {}, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    async createCollectionIndex(collectionName: string, fieldOrSpec: string|any, options?: MongodbIndexOptions): Promise<string> {\r\n        return await this.getCollection(collectionName).createIndex(fieldOrSpec, options);\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    async createCollectionIndexes(collectionName: string, indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        return await this.getCollection(collectionName).createIndexes(indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    async deleteMany(collectionName: string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).deleteMany(query, options);\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    async deleteOne(collectionName: string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).deleteOne(query, options);\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    async distinct(collectionName: string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\r\n        return await this.getCollection(collectionName).distinct(key, query, options);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    async dropCollectionIndex(collectionName: string, indexName: string, options?: CollectionOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).dropIndex(indexName, options);\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    async dropCollectionIndexes(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).dropIndexes();\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndDelete(collectionName: string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndDelete(query, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndReplace(collectionName: string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndReplace(query, replacement, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndUpdate(collectionName: string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndUpdate(query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    async geoHaystackSearch(collectionName: string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).geoHaystackSearch(x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    async geoNear(collectionName: string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).geoNear(x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    async group(collectionName: string, keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\r\n        return await this.getCollection(collectionName).group(keys, condition, initial, reduce, finalize, command, options);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexes(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).indexes();\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexExists(collectionName: string, indexes: string|string[]): Promise<boolean> {\r\n        return await this.getCollection(collectionName).indexExists(indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    async collectionIndexInformation(collectionName: string, options?: { full: boolean }): Promise<any> {\r\n        return await this.getCollection(collectionName).indexInformation(options);\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp(collectionName: string, options?: CollectionOptions): OrderedBulkOperation {\r\n        return this.getCollection(collectionName).initializeOrderedBulkOp(options);\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp(collectionName: string, options?: CollectionOptions): UnorderedBulkOperation {\r\n        return this.getCollection(collectionName).initializeUnorderedBulkOp(options);\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    async insertMany(collectionName: string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        return await this.getCollection(collectionName).insertMany(docs, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    async insertOne(collectionName: string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        return await this.getCollection(collectionName).insertOne(doc, options);\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    async isCapped(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).isCapped();\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes(collectionName: string, options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\r\n        return this.getCollection(collectionName).listIndexes(options);\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    async mapReduce(collectionName: string, map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).mapReduce(map, reduce, options);\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    async parallelCollectionScan(collectionName: string, options?: ParallelCollectionScanOptions): Promise<Cursor<any>[]> {\r\n        return await this.getCollection(collectionName).parallelCollectionScan(options);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async reIndex(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).reIndex();\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async rename(collectionName: string, newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\r\n        return await this.getCollection(collectionName).rename(newName, options);\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    async replaceOne(collectionName: string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).replaceOne(query, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    async stats(collectionName: string, options?: { scale: number }): Promise<CollStats> {\r\n        return await this.getCollection(collectionName).stats(options);\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    async updateMany(collectionName: string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).updateMany(query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    async updateOne(collectionName: string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).updateOne(query, update, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods (from QueryRunner)\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * For MongoDB database we don't release connection, because its single connection.\r\n     */\r\n    async release(): Promise<void> {\r\n        // releasing connection are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Removes all collections from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        await this.databaseConnection.connection.dropDatabase();\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Executing SQL query is not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(collectionName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        const results = await this.databaseConnection\r\n            .connection\r\n            .collection(collectionName)\r\n            .insertOne(keyValues);\r\n\r\n        return results.insertedId;\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(collectionName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        await this.databaseConnection\r\n            .connection\r\n            .collection(collectionName)\r\n            .updateOne(conditions, valuesMap);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(collectionName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(collectionName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(collectionName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (typeof conditions === \"string\")\r\n            throw new Error(`String condition is not supported by MongoDB driver.`);\r\n\r\n        await this.databaseConnection\r\n            .connection\r\n            .collection(collectionName)\r\n            .deleteOne(conditions);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(collectionName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(collectionName: string): Promise<TableSchema|undefined> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(collectionNames: string[]): Promise<TableSchema[]> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n        // так я от тебя не слышу что ты получаешь удовольствие. все что я слышу это как ты делаешь холодные расчеты для вы\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(collectionName: string): Promise<boolean> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table schema and column schemas inside it.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(collectionName: string, columnName: string): Promise<boolean> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(collectionName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(collectionName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(collectionName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(collectionName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(collectionName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableSchema: TableSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(collectionName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(collectionName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(collectionName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(collectionName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(collectionName: string, index: IndexSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(collectionName: string, indexName: string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops collection.\r\n     */\r\n    async truncate(collectionName: string): Promise<void> {\r\n        await this.databaseConnection\r\n            .connection\r\n            .dropCollection(collectionName);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Gets collection from the database with a given name.\r\n     */\r\n    protected getCollection(collectionName: string): Collection {\r\n        return (this.databaseConnection.connection as Db).collection(collectionName);\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}