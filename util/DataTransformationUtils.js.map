{"version":3,"sources":["../../src/util/DataTransformationUtils.ts"],"names":[],"mappings":"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","file":"DataTransformationUtils.js","sourcesContent":["/**\r\n * Provides utilities to transform hydrated and persisted data.\r\n */\r\nexport class DataTransformationUtils {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Normalizes date object hydrated from the database.\r\n     */\r\n    static normalizeHydratedDate(mixedDate: Date|string|undefined, storedInLocal: boolean): Date|string|undefined {\r\n        if (!mixedDate)\r\n            return mixedDate;\r\n\r\n        const date = typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate as Date;\r\n        if (!storedInLocal) {\r\n\r\n            // else if it was not stored in local timezone, means it was stored in UTC\r\n            // because driver hydrates it with timezone applied why we need to add timezone hours to match a local timezone\r\n\r\n            const correctedDate = new Date();\r\n            correctedDate.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\r\n            correctedDate.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n            return correctedDate;\r\n        }\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\r\n     */\r\n    static mixedDateToDateString(value: Date|any): string|any {\r\n        if (value instanceof Date)\r\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into time string in a \"HH:mm:ss\" format.\r\n     */\r\n    static mixedDateToTimeString(value: Date|any): string|any {\r\n        if (value instanceof Date)\r\n            return this.formatZerolessValue(value.getHours()) + \":\" + this.formatZerolessValue(value.getMinutes()) + \":\" + this.formatZerolessValue(value.getSeconds());\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\r\n     */\r\n    static mixedTimeToString(value: string|any): string|any {\r\n        value = value instanceof Date ? (value.getHours() + \":\" + value.getMinutes() + \":\" + value.getSeconds()) : value;\r\n        if (typeof value === \"string\") {\r\n            return value.split(\":\")\r\n                .map(v => v.length === 1 ? \"0\" + v : v) // append zero at beginning if we have a first-zero-less number\r\n                .join(\":\");\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\r\n     */\r\n    static mixedDateToDatetimeString(value: Date|any): string|any {\r\n        if (typeof value === \"string\") {\r\n            value = new Date(value);\r\n        }\r\n        if (value instanceof Date) {\r\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" +\r\n                this.formatZerolessValue(value.getMonth() + 1) + \"-\" +\r\n                this.formatZerolessValue(value.getDate()) + \" \" +\r\n                this.formatZerolessValue(value.getHours()) + \":\" +\r\n                this.formatZerolessValue(value.getMinutes()) + \":\" +\r\n                this.formatZerolessValue(value.getSeconds());\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\r\n     */\r\n    static mixedDateToUtcDatetimeString(value: Date|any): string|any {\r\n        if (typeof value === \"string\") {\r\n            value = new Date(value);\r\n        }\r\n        if (value instanceof Date) {\r\n            return this.formatZerolessValue(value.getUTCFullYear()) + \"-\" +\r\n                this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" +\r\n                this.formatZerolessValue(value.getUTCDate()) + \" \" +\r\n                this.formatZerolessValue(value.getUTCHours()) + \":\" +\r\n                this.formatZerolessValue(value.getUTCMinutes()) + \":\" +\r\n                this.formatZerolessValue(value.getUTCSeconds());\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts each item in the given array to string joined by \",\" separator.\r\n     */\r\n    static simpleArrayToString(value: any[]|any): string[]|any {\r\n        if (value instanceof Array) {\r\n            return (value as any[])\r\n                .map(i => String(i))\r\n                .join(\",\");\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given string to simple array split by \",\" separator.\r\n     */\r\n    static stringToSimpleArray(value: string|any): string|any {\r\n        if (value instanceof String || typeof value === \"string\") {\r\n            return value.split(\",\");\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\r\n     */\r\n    private static formatZerolessValue(value: number): string {\r\n        if (value < 10)\r\n            return \"0\" + value;\r\n\r\n        return String(value);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}