{"version":3,"sources":["build/browser/typeorm/driver/DriverOptions.ts","build/browser/typeorm/metadata/types/ColumnTypes.ts","build/browser/typeorm/metadata/types/RelationTypes.ts","build/browser/typeorm/naming-strategy/NamingStrategyInterface.ts","build/browser/typeorm/metadata/types/OnDeleteType.ts","build/browser/typeorm/metadata/ForeignKeyMetadata.ts","build/browser/typeorm/common/ObjectLiteral.ts","build/browser/typeorm/metadata-args/EmbeddedMetadataArgs.ts","build/browser/typeorm/driver/error/ConnectionIsNotSetError.ts","build/browser/typeorm/driver/DatabaseConnection.ts","build/browser/typeorm/driver/error/DriverPackageNotInstalledError.ts","build/browser/typeorm/driver/DriverUtils.ts","build/browser/typeorm/logger/LoggerOptions.ts","build/browser/typeorm/platform/PlatformTools.ts","build/browser/typeorm/logger/Logger.ts","build/browser/typeorm/driver/error/TransactionAlreadyStartedError.ts","build/browser/typeorm/driver/error/TransactionNotStartedError.ts","build/browser/typeorm/driver/error/DataTypeNotSupportedByDriverError.ts","build/browser/typeorm/metadata-args/IndexMetadataArgs.ts","build/browser/typeorm/metadata/IndexMetadata.ts","build/browser/typeorm/schema-builder/schema/IndexSchema.ts","build/browser/typeorm/schema-builder/schema/ForeignKeySchema.ts","build/browser/typeorm/schema-builder/schema/PrimaryKeySchema.ts","build/browser/typeorm/schema-builder/schema/TableSchema.ts","build/browser/typeorm/query-runner/error/QueryRunnerAlreadyReleasedError.ts","build/browser/typeorm/driver/oracle/OracleQueryRunner.ts","build/browser/typeorm/driver/error/DriverOptionNotSetError.ts","build/browser/typeorm/util/DataTransformationUtils.ts","build/browser/typeorm/lazy-loading/LazyRelationsWrapper.ts","build/browser/typeorm/driver/oracle/OracleDriver.ts","build/browser/typeorm/query-builder/QueryBuilderUtils.ts","build/browser/typeorm/query-builder/Alias.ts","build/browser/typeorm/find-options/OrderByCondition.ts","build/browser/typeorm/query-builder/JoinOptions.ts","build/browser/typeorm/query-builder/JoinAttribute.ts","build/browser/typeorm/query-builder/relation-count/RelationCountAttribute.ts","build/browser/typeorm/query-builder/SelectQuery.ts","build/browser/typeorm/query-builder/QueryExpressionMap.ts","build/browser/typeorm/query-builder/relation-id/RelationIdAttribute.ts","build/browser/typeorm/query-builder/relation-id/RelationIdLoadResult.ts","build/browser/typeorm/query-builder/relation-count/RelationCountLoadResult.ts","build/browser/typeorm/util/OrmUtils.ts","build/browser/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.ts","build/browser/typeorm/driver/sqlserver/SqlServerQueryRunner.ts","build/browser/typeorm/driver/sqlserver/SqlServerDriver.ts","build/browser/typeorm/query-runner/QueryRunnerProvider.ts","build/browser/typeorm/query-builder/error/PessimisticLockTransactionRequiredError.ts","build/browser/typeorm/query-builder/error/NoVersionOrUpdateDateColumnError.ts","build/browser/typeorm/query-builder/error/OptimisticLockVersionMismatchError.ts","build/browser/typeorm/query-builder/error/OptimisticLockCanNotBeUsedError.ts","build/browser/typeorm/driver/postgres/PostgresQueryRunner.ts","build/browser/typeorm/driver/postgres/PostgresDriver.ts","build/browser/typeorm/driver/mysql/MysqlQueryRunner.ts","build/browser/typeorm/driver/mysql/MysqlDriver.ts","build/browser/typeorm/query-builder/error/LockNotSupportedOnGivenDriverError.ts","build/browser/typeorm/query-builder/relation-id/RelationIdLoader.ts","build/browser/typeorm/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.ts","build/browser/typeorm/query-builder/relation-count/RelationCountLoader.ts","build/browser/typeorm/metadata-args/RelationCountMetadataArgs.ts","build/browser/typeorm/metadata/RelationCountMetadata.ts","build/browser/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.ts","build/browser/typeorm/query-builder/QueryBuilder.ts","build/browser/typeorm/metadata-args/RelationIdMetadataArgs.ts","build/browser/typeorm/metadata/RelationIdMetadata.ts","build/browser/typeorm/metadata/EmbeddedMetadata.ts","build/browser/typeorm/decorator/options/RelationOptions.ts","build/browser/typeorm/metadata/types/PropertyTypeInFunction.ts","build/browser/typeorm/metadata/types/RelationTypeInFunction.ts","build/browser/typeorm/metadata-args/RelationMetadataArgs.ts","build/browser/typeorm/metadata/RelationMetadata.ts","build/browser/typeorm/metadata/types/TableTypes.ts","build/browser/typeorm/metadata-args/TableMetadataArgs.ts","build/browser/typeorm/metadata/types/EventListenerTypes.ts","build/browser/typeorm/metadata-args/EntityListenerMetadataArgs.ts","build/browser/typeorm/metadata/EntityListenerMetadata.ts","build/browser/typeorm/metadata/EntityMetadata.ts","build/browser/typeorm/decorator/options/ColumnOptions.ts","build/browser/typeorm/metadata-args/types/ColumnMode.ts","build/browser/typeorm/metadata-args/ColumnMetadataArgs.ts","build/browser/typeorm/metadata/ColumnMetadata.ts","build/browser/typeorm/schema-builder/schema/ColumnSchema.ts","build/browser/typeorm/query-runner/QueryRunner.ts","build/browser/typeorm/driver/Driver.ts","build/browser/typeorm/find-options/FindOneOptions.ts","build/browser/typeorm/find-options/FindManyOptions.ts","build/browser/typeorm/common/DeepPartial.ts","build/browser/typeorm/repository/SaveOptions.ts","build/browser/typeorm/repository/RemoveOptions.ts","build/browser/typeorm/common/ObjectType.ts","build/browser/typeorm/query-runner/error/QueryRunnerProviderAlreadyReleasedError.ts","build/browser/typeorm/persistence/Subject.ts","build/browser/typeorm/repository/SpecificRepository.ts","build/browser/typeorm/repository/TreeRepository.ts","build/browser/typeorm/driver/mongodb/typings.ts","build/browser/typeorm/driver/mongodb/MongoQueryRunner.ts","build/browser/typeorm/driver/mongodb/MongoDriver.ts","build/browser/typeorm/query-builder/transformer/DocumentToEntityTransformer.ts","build/browser/typeorm/find-options/FindOptionsUtils.ts","build/browser/typeorm/entity-manager/MongoEntityManager.ts","build/browser/typeorm/repository/MongoRepository.ts","build/browser/typeorm/repository/RepositoryFactory.ts","build/browser/typeorm/container.ts","build/browser/typeorm/repository/RepositoryAggregator.ts","build/browser/typeorm/entity-manager/error/NoNeedToReleaseEntityManagerError.ts","build/browser/typeorm/connection/error/RepositoryNotTreeError.ts","build/browser/typeorm/persistence/SubjectBuilder.ts","build/browser/typeorm/util/PromiseUtils.ts","build/browser/typeorm/persistence/SubjectOperationExecutor.ts","build/browser/typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer.ts","build/browser/typeorm/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.ts","build/browser/typeorm/repository/error/CustomRepositoryNotFoundError.ts","build/browser/typeorm/repository/error/CustomRepositoryDoesNotHaveEntityError.ts","build/browser/typeorm/repository/AbstractRepository.ts","build/browser/typeorm/repository/error/CustomRepositoryCannotInheritRepositoryError.ts","build/browser/typeorm/entity-manager/EntityManager.ts","build/browser/typeorm/repository/Repository.ts","build/browser/typeorm/subscriber/event/UpdateEvent.ts","build/browser/typeorm/subscriber/event/RemoveEvent.ts","build/browser/typeorm/subscriber/event/InsertEvent.ts","build/browser/typeorm/subscriber/EntitySubscriberInterface.ts","build/browser/typeorm/connection/error/RepositoryNotFoundError.ts","build/browser/typeorm/util/DirectoryExportedClassesLoader.ts","build/browser/typeorm/metadata-args/NamingStrategyMetadataArgs.ts","build/browser/typeorm/metadata-args/JoinColumnMetadataArgs.ts","build/browser/typeorm/metadata-args/JoinTableMetadataArgs.ts","build/browser/typeorm/metadata-args/EntitySubscriberMetadataArgs.ts","build/browser/typeorm/metadata-args/InheritanceMetadataArgs.ts","build/browser/typeorm/metadata-args/DiscriminatorValueMetadataArgs.ts","build/browser/typeorm/metadata-args/EntityRepositoryMetadataArgs.ts","build/browser/typeorm/metadata-args/TransactionEntityMetadataArgs.ts","build/browser/typeorm/metadata-builder/MetadataUtils.ts","build/browser/typeorm/metadata-args/MetadataArgsStorage.ts","build/browser/typeorm/metadata-builder/JunctionEntityMetadataBuilder.ts","build/browser/typeorm/metadata-builder/ClosureJunctionEntityMetadataBuilder.ts","build/browser/typeorm/metadata-builder/RelationJoinColumnBuilder.ts","build/browser/typeorm/metadata-builder/EntityMetadataBuilder.ts","build/browser/typeorm/util/RandomGenerator.ts","build/browser/typeorm/util/StringUtils.ts","build/browser/typeorm/naming-strategy/DefaultNamingStrategy.ts","build/browser/typeorm/connection/error/CannotImportAlreadyConnectedError.ts","build/browser/typeorm/connection/error/CannotCloseNotConnectedError.ts","build/browser/typeorm/connection/error/CannotConnectAlreadyConnectedError.ts","build/browser/typeorm/connection/error/NamingStrategyNotFoundError.ts","build/browser/typeorm/decorator/options/JoinColumnOptions.ts","build/browser/typeorm/decorator/options/JoinTableMuplipleColumnsOptions.ts","build/browser/typeorm/entity-schema/EntitySchema.ts","build/browser/typeorm/connection/error/CannotSyncNotConnectedError.ts","build/browser/typeorm/connection/error/CannotUseNamingStrategyNotConnectedError.ts","build/browser/typeorm/subscriber/Broadcaster.ts","build/browser/typeorm/schema-builder/SchemaBuilder.ts","build/browser/typeorm/metadata-args/error/EntityMetadataNotFound.ts","build/browser/typeorm/migration/MigrationInterface.ts","build/browser/typeorm/migration/Migration.ts","build/browser/typeorm/migration/MigrationExecutor.ts","build/browser/typeorm/connection/error/CannotRunMigrationNotConnectedError.ts","build/browser/typeorm/repository/error/CustomRepositoryReusedError.ts","build/browser/typeorm/decorator/options/JoinTableOptions.ts","build/browser/typeorm/entity-schema/EntitySchemaTransformer.ts","build/browser/typeorm/metadata-builder/error/MissingPrimaryColumnError.ts","build/browser/typeorm/metadata-builder/error/CircularRelationsError.ts","build/browser/typeorm/util/DepGraph.ts","build/browser/typeorm/metadata-builder/EntityMetadataValidator.ts","build/browser/typeorm/connection/Connection.ts","build/browser/typeorm/connection/error/ConnectionNotFoundError.ts","build/browser/typeorm/connection/ConnectionOptions.ts","build/browser/typeorm/connection/error/MissingDriverError.ts","build/browser/typeorm/connection/error/AlreadyHasActiveConnectionError.ts","build/browser/typeorm/driver/sqlite/SqliteQueryRunner.ts","build/browser/typeorm/driver/sqlite/SqliteDriver.ts","build/browser/typeorm/connection/error/CannotDetermineConnectionOptionsError.ts","build/browser/typeorm/driver/websql/WebsqlQueryRunner.ts","build/browser/typeorm/driver/websql/WebsqlDriver.ts","build/browser/typeorm/connection/ConnectionManager.ts","build/browser/typeorm/decorator/error/GeneratedOnlyForPrimaryError.ts","build/browser/typeorm/decorator/columns/Column.ts","build/browser/typeorm/decorator/columns/CreateDateColumn.ts","build/browser/typeorm/decorator/columns/DiscriminatorColumn.ts","build/browser/typeorm/decorator/error/PrimaryColumnCannotBeNullableError.ts","build/browser/typeorm/decorator/columns/PrimaryGeneratedColumn.ts","build/browser/typeorm/decorator/error/ColumnTypeUndefinedError.ts","build/browser/typeorm/decorator/columns/PrimaryColumn.ts","build/browser/typeorm/decorator/columns/UpdateDateColumn.ts","build/browser/typeorm/decorator/columns/VersionColumn.ts","build/browser/typeorm/decorator/columns/ObjectIdColumn.ts","build/browser/typeorm/decorator/listeners/AfterInsert.ts","build/browser/typeorm/decorator/listeners/AfterLoad.ts","build/browser/typeorm/decorator/listeners/AfterRemove.ts","build/browser/typeorm/decorator/listeners/AfterUpdate.ts","build/browser/typeorm/decorator/listeners/BeforeInsert.ts","build/browser/typeorm/decorator/listeners/BeforeRemove.ts","build/browser/typeorm/decorator/listeners/BeforeUpdate.ts","build/browser/typeorm/decorator/listeners/EventSubscriber.ts","build/browser/typeorm/decorator/options/IndexOptions.ts","build/browser/typeorm/decorator/options/EntityOptions.ts","build/browser/typeorm/decorator/relations/RelationCount.ts","build/browser/typeorm/decorator/relations/JoinColumn.ts","build/browser/typeorm/decorator/relations/JoinTable.ts","build/browser/typeorm/decorator/relations/ManyToMany.ts","build/browser/typeorm/decorator/relations/ManyToOne.ts","build/browser/typeorm/decorator/relations/OneToMany.ts","build/browser/typeorm/decorator/relations/OneToOne.ts","build/browser/typeorm/decorator/relations/RelationId.ts","build/browser/typeorm/decorator/entity/Entity.ts","build/browser/typeorm/decorator/entity/AbstractEntity.ts","build/browser/typeorm/decorator/entity/ClassEntityChild.ts","build/browser/typeorm/decorator/entity/ClosureEntity.ts","build/browser/typeorm/decorator/entity/EmbeddableEntity.ts","build/browser/typeorm/decorator/entity/SingleEntityChild.ts","build/browser/typeorm/decorator/entity/TableInheritance.ts","build/browser/typeorm/decorator/transaction/Transaction.ts","build/browser/typeorm/decorator/transaction/TransactionEntityManager.ts","build/browser/typeorm/decorator/tree/TreeLevelColumn.ts","build/browser/typeorm/decorator/tree/TreeParent.ts","build/browser/typeorm/decorator/tree/TreeChildren.ts","build/browser/typeorm/decorator/Index.ts","build/browser/typeorm/decorator/NamingStrategy.ts","build/browser/typeorm/decorator/Embedded.ts","build/browser/typeorm/decorator/DiscriminatorValue.ts","build/browser/typeorm/decorator/EntityRepository.ts","build/browser/typeorm/repository/EntityModel.ts","build/browser/typeorm/index.ts","build/browser/typeorm.ts","build/browser/typeorm/metadata-args/EntityMetadataArgs.ts","build/browser/typeorm/connection/error/CannotGetEntityManagerNotConnectedError.ts","build/browser/typeorm/connection/error/NoConnectionForRepositoryError.ts","build/browser/typeorm/driver/error/DriverPackageLoadError.ts","build/browser/typeorm/driver/error/DriverPoolingNotSupportedError.ts","build/browser/typeorm/metadata-builder/error/MetadataAlreadyExistsError.ts","build/browser/typeorm/metadata-builder/error/MetadataWithSuchNameAlreadyExistsError.ts","build/browser/typeorm/metadata-builder/error/MissingJoinColumnError.ts","build/browser/typeorm/metadata-builder/error/MissingJoinTableError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinColumnIsNotAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinColumnOnlyOnOneSideAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinTableIsNotAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinTableOnlyOnOneSideAllowedError.ts","build/browser/typeorm/persistence/error/CascadesNotAllowedError.ts","build/browser/typeorm/persistence/error/PersistedEntityNotFoundError.ts"],"names":[],"mappings":"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","file":"typeorm-browser.js","sourcesContent":["/**\r\n * Driver type.\r\n */\r\nexport type DriverType = \"mysql\"|\"postgres\"|\"mariadb\"|\"sqlite\"|\"oracle\"|\"mssql\"|\"websql\"|\"mongodb\";\r\n\r\n/**\r\n * Connectivity options used to connect to the database, and other database-driver-specific options.\r\n */\r\nexport interface DriverOptions {\r\n\r\n    /**\r\n     * Database type. This value is required.\r\n     */\r\n    readonly type: DriverType;\r\n\r\n    /**\r\n     * Connection url to where perform connection to.\r\n     */\r\n    readonly url?: string;\r\n\r\n    /**\r\n     * Database host.\r\n     */\r\n    readonly host?: string;\r\n\r\n    /**\r\n     * Database host port.\r\n     */\r\n    readonly port?: number;\r\n\r\n    /**\r\n     * Database username.\r\n     */\r\n    readonly username?: string;\r\n\r\n    /**\r\n     * Database password.\r\n     */\r\n    readonly password?: string;\r\n\r\n    /**\r\n     * Database name to connect to.\r\n     */\r\n    readonly database?: string;\r\n\r\n    /**\r\n     * Schema name. By default is \"public\" (used only in Postgres databases).\r\n     */\r\n    readonly schemaName?: string;\r\n\r\n    /**\r\n     * Connection SID (used for Oracle databases).\r\n     */\r\n    readonly sid?: string;\r\n\r\n    /**\r\n     * Storage type or path to the storage (used for SQLite databases).\r\n     */\r\n    readonly storage?: string;\r\n\r\n    /**\r\n     * Indicates if connection pooling should be used or not.\r\n     * Be default it is enabled if its supported by a platform.\r\n     * Set to false to disable it.\r\n     *\r\n     * @todo: rename to disablePool? What about mongodb pool?\r\n     */\r\n    readonly usePool?: boolean;\r\n\r\n    /**\r\n     * Extra connection options to be passed to the underlying driver.\r\n     */\r\n    readonly extra?: any;\r\n\r\n    /**\r\n     * Prefix to use on all tables (collections) of this connection in the database.\r\n     *\r\n     * @todo: rename to entityPrefix\r\n     */\r\n    readonly tablesPrefix?: string;\r\n\r\n}\r\n","/**\r\n * All data types that column can be.\r\n */\r\nexport type ColumnType = \"string\"|\"text\"|\"number\"|\"integer\"|\"int\"|\"smallint\"|\"bigint\"|\"float\"|\"double\"|\r\n                         \"decimal\"|\"date\"|\"time\"|\"datetime\"|\"boolean\"|\"json\"|\"jsonb\"|\"simple_array\"|\"uuid\";\r\n\r\n/**\r\n * All data types that column can be.\r\n */\r\nexport class ColumnTypes {\r\n\r\n    /**\r\n     * SQL VARCHAR type. Your class's property type should be a \"string\".\r\n     */\r\n    static STRING: ColumnType = \"string\";\r\n\r\n    /**\r\n     * SQL CLOB type. Your class's property type should be a \"string\".\r\n     */\r\n    static TEXT: ColumnType = \"text\";\r\n\r\n    /**\r\n     * SQL FLOAT type. Your class's property type should be a \"number\".\r\n     */\r\n    static NUMBER: ColumnType = \"number\";\r\n\r\n    /**\r\n     * SQL INT type. Your class's property type should be a \"number\".\r\n     */\r\n    static INTEGER: ColumnType = \"integer\";\r\n\r\n    /**\r\n     * SQL INT type. Your class's property type should be a \"number\".\r\n     */\r\n    static INT: ColumnType = \"int\";\r\n\r\n    /**\r\n     * SQL SMALLINT type. Your class's property type should be a \"number\".\r\n     */\r\n    static SMALLINT: ColumnType = \"smallint\";\r\n\r\n    /**\r\n     * SQL BIGINT type. Your class's property type should be a \"number\".\r\n     */\r\n    static BIGINT: ColumnType = \"bigint\";\r\n\r\n    /**\r\n     * SQL FLOAT type. Your class's property type should be a \"number\".\r\n     */\r\n    static FLOAT: ColumnType = \"float\";\r\n\r\n    /**\r\n     * SQL FLOAT type. Your class's property type should be a \"number\".\r\n     */\r\n    static DOUBLE: ColumnType = \"double\";\r\n\r\n    /**\r\n     * SQL DECIMAL type. Your class's property type should be a \"string\".\r\n     */\r\n    static DECIMAL: ColumnType = \"decimal\";\r\n\r\n    /**\r\n     * SQL DATETIME type. Your class's property type should be a \"Date\" object.\r\n     */\r\n    static DATE: ColumnType = \"date\";\r\n\r\n    /**\r\n     * SQL TIME type. Your class's property type should be a \"Date\" object.\r\n     */\r\n    static TIME: ColumnType = \"time\";\r\n\r\n    /**\r\n     * SQL DATETIME/TIMESTAMP type. Your class's property type should be a \"Date\" object.\r\n     */\r\n    static DATETIME: ColumnType = \"datetime\";\r\n\r\n    /**\r\n     * SQL BOOLEAN type. Your class's property type should be a \"boolean\".\r\n     */\r\n    static BOOLEAN: ColumnType = \"boolean\";\r\n\r\n    /**\r\n     * SQL CLOB type. Your class's property type should be any Object.\r\n     */\r\n    static JSON: ColumnType = \"json\";\r\n\r\n    /**\r\n     * Postgres jsonb type. Your class's property type should be any Object.\r\n     */\r\n    static JSONB: ColumnType = \"jsonb\";\r\n\r\n    /**\r\n     * SQL CLOB type. Your class's property type should be array of string. Note: value in this column should not contain\r\n     * a comma (\",\") since this symbol is used to create a string from the array, using .join(\",\") operator.\r\n     */\r\n    static SIMPLE_ARRAY: ColumnType = \"simple_array\";\r\n\r\n    /**\r\n     * UUID type. Serialized to a string in typescript or javascript\r\n     */\r\n    static UUID: ColumnType = \"uuid\";\r\n\r\n    /**\r\n     * Checks if given type in a string format is supported by ORM.\r\n     */\r\n    static isTypeSupported(type: string) {\r\n        return this.supportedTypes.indexOf(<ColumnType> type) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Returns list of all supported types by the ORM.\r\n     */\r\n    static get supportedTypes() {\r\n        return [\r\n            this.STRING,\r\n            this.TEXT,\r\n            this.NUMBER,\r\n            this.INTEGER,\r\n            this.INT,\r\n            this.SMALLINT,\r\n            this.BIGINT,\r\n            this.FLOAT,\r\n            this.DOUBLE,\r\n            this.DECIMAL,\r\n            this.DATE,\r\n            this.TIME,\r\n            this.DATETIME,\r\n            this.BOOLEAN,\r\n            this.JSON,\r\n            this.JSONB,\r\n            this.SIMPLE_ARRAY,\r\n            this.UUID\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Tries to guess a column type from the given function.\r\n     */\r\n    static determineTypeFromFunction(type: Function): ColumnType|undefined {\r\n        if (type instanceof Date) {\r\n            return ColumnTypes.DATETIME;\r\n\r\n        } else if (type instanceof Function) {\r\n            const typeName = (<any>type).name.toLowerCase();\r\n            switch (typeName) {\r\n                case \"number\":\r\n                    return ColumnTypes.NUMBER;\r\n                case \"boolean\":\r\n                    return ColumnTypes.BOOLEAN;\r\n                case \"string\":\r\n                    return ColumnTypes.STRING;\r\n                case \"date\":\r\n                    return ColumnTypes.DATETIME;\r\n                case \"object\":\r\n                    return ColumnTypes.JSON;\r\n            }\r\n\r\n        } else if (type instanceof Object) {\r\n            return ColumnTypes.JSON;\r\n\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    static typeToString(type: Function): string {\r\n        return (type as any).name.toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Checks if column type is numeric.\r\n     */\r\n    static isNumeric(type: ColumnType) {\r\n        return  type === ColumnTypes.NUMBER ||\r\n                type === ColumnTypes.INT ||\r\n                type === ColumnTypes.INTEGER ||\r\n                type === ColumnTypes.BIGINT ||\r\n                type === ColumnTypes.SMALLINT ||\r\n                type === ColumnTypes.DOUBLE ||\r\n                type === ColumnTypes.FLOAT;\r\n    }\r\n\r\n}","/**\r\n * All types that relation can be.\r\n */\r\nexport type RelationType = \"one-to-one\"|\"one-to-many\"|\"many-to-one\"|\"many-to-many\";","/**\r\n * Naming strategy defines how auto-generated names for such things like table name, or table column gonna be\r\n * generated.\r\n */\r\nexport interface NamingStrategyInterface {\r\n\r\n    /**\r\n     * Naming strategy name.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Normalizes table name.\r\n     *\r\n     * @param targetName Name of the target entity that can be used to generate a table name.\r\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\r\n     */\r\n    tableName(targetName: string, userSpecifiedName: string|undefined): string;\r\n\r\n    /**\r\n     * Creates a table name for a junction table of a closure table.\r\n     *\r\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\r\n     */\r\n    closureJunctionTableName(originalClosureTableName: string): string;\r\n\r\n    /**\r\n     * Gets the table's column name from the given property name.\r\n     */\r\n    columnName(propertyName: string, customName: string|undefined, embeddedPrefixes: string[]): string;\r\n\r\n    /**\r\n     * Gets the table's relation name from the given property name.\r\n     */\r\n    relationName(propertyName: string): string;\r\n\r\n    /**\r\n     * Gets the name of the index - simple and compose index.\r\n     */\r\n    indexName(customName: string|undefined, tableName: string, columns: string[]): string;\r\n\r\n    /**\r\n     * Gets the name of the join column used in the one-to-one and many-to-one relations.\r\n     */\r\n    joinColumnName(relationName: string, referencedColumnName: string): string;\r\n\r\n    /**\r\n     * Gets the name of the join table used in the many-to-many relations.\r\n     */\r\n    joinTableName(firstTableName: string,\r\n                  secondTableName: string,\r\n                  firstPropertyName: string,\r\n                  secondPropertyName: string): string;\r\n\r\n    /**\r\n     * Columns in join tables can have duplicate names in case of self-referencing.\r\n     * This method provide a resolution for such column names.\r\n     */\r\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string;\r\n\r\n    /**\r\n     * Gets the name of the column used for columns in the junction tables.\r\n     */\r\n    joinTableColumnName(tableName: string, propertyName: string, columnName?: string): string;\r\n\r\n    /**\r\n     * Gets the name of the foreign key.\r\n     */\r\n    foreignKeyName(tableName: string, columnNames: string[], referencedTableName: string, referencedColumnNames: string[]): string;\r\n\r\n    /**\r\n     * Gets the column name of the column with foreign key to the parent table used in the class table inheritance.\r\n     */\r\n    classTableInheritanceParentColumnName(parentTableName: any, parentTableIdPropertyName: any): string;\r\n\r\n    /**\r\n     * Adds globally set prefix to the table name.\r\n     * This method is executed no matter if prefix was set or not.\r\n     * Table name is either user's given table name, either name generated from entity target.\r\n     * Note that table name comes here already normalized by #tableName method.\r\n     */\r\n    prefixTableName(prefix: string, tableName: string): string;\r\n\r\n}","\r\n/**\r\n * ON_DELETE type to be used to specify delete strategy when some relation is being deleted from the database.\r\n */\r\nexport type OnDeleteType = \"RESTRICT\"|\"CASCADE\"|\"SET NULL\";\r\n","import {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {OnDeleteType} from \"./types/OnDeleteType\";\r\n\r\n/**\r\n * Contains all information about entity's foreign key.\r\n */\r\nexport class ForeignKeyMetadata {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this foreign key is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Entity metadata which this foreign key references.\r\n     */\r\n    referencedEntityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Array of columns of this foreign key.\r\n     */\r\n    columns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Array of referenced columns.\r\n     */\r\n    referencedColumns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * What to do with a relation on deletion of the row containing a foreign key.\r\n     */\r\n    onDelete?: OnDeleteType;\r\n\r\n    /**\r\n     * Gets the table name to which this foreign key is applied.\r\n     */\r\n    tableName: string;\r\n\r\n    /**\r\n     * Gets the table name to which this foreign key is referenced.\r\n     */\r\n    referencedTableName: string;\r\n\r\n    /**\r\n     * Gets foreign key name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Gets array of column names.\r\n     */\r\n    columnNames: string[] = [];\r\n\r\n    /**\r\n     * Gets array of referenced column names.\r\n     */\r\n    referencedColumnNames: string[] = [];\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        referencedEntityMetadata: EntityMetadata,\r\n        namingStrategy?: NamingStrategyInterface,\r\n        columns: ColumnMetadata[],\r\n        referencedColumns: ColumnMetadata[],\r\n        onDelete?: OnDeleteType\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.referencedEntityMetadata = options.referencedEntityMetadata;\r\n        this.columns = options.columns;\r\n        this.referencedColumns = options.referencedColumns;\r\n        this.onDelete = options.onDelete;\r\n        if (options.namingStrategy)\r\n            this.build(options.namingStrategy);\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend foreign key properties.\r\n     * Must be called after all entity metadatas and their columns are built.\r\n     */\r\n    build(namingStrategy: NamingStrategyInterface) {\r\n        this.columnNames = this.columns.map(column => column.databaseName);\r\n        this.referencedColumnNames = this.referencedColumns.map(column => column.databaseName);\r\n        this.tableName = this.entityMetadata.tableName;\r\n        this.referencedTableName = this.referencedEntityMetadata.tableName;\r\n        this.name = namingStrategy.foreignKeyName(this.tableName, this.columnNames, this.referencedEntityMetadata.tableName, this.referencedColumnNames);\r\n    }\r\n\r\n}","/**\r\n * Interface of the simple literal object with any string keys.\r\n */\r\nexport interface ObjectLiteral {\r\n    [key: string]: any;\r\n}\r\n","/**\r\n * Arguments for EmbeddedMetadata class.\r\n */\r\nexport interface EmbeddedMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this column is applied.\r\n     */\r\n    target: Function;\r\n\r\n    /**\r\n     * Class's property name to which this column is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * Indicates if this embedded is array or not.\r\n     */\r\n    isArray: boolean;\r\n\r\n    /**\r\n     * Prefix of the embedded, used instead of propertyName.\r\n     * If set to empty string, then prefix is not set at all.\r\n     */\r\n    prefix?: string|boolean;\r\n\r\n    /**\r\n     * Type of the class to be embedded.\r\n     */\r\n    type: ((type?: any) => Function);\r\n\r\n}\r\n","/**\r\n * Thrown when user tries to execute operation that requires connection to be established.\r\n */\r\nexport class ConnectionIsNotSetError extends Error {\r\n    name = \"ConnectionIsNotSetError\";\r\n\r\n    constructor(dbType: string) {\r\n        super();\r\n        this.message = `Connection with ${dbType} database is not established. Check connection configuration.`;\r\n    }\r\n\r\n}","/**\r\n * Represents a single connection to a database.\r\n */\r\nexport interface DatabaseConnection {\r\n\r\n    /**\r\n     * Id of the connection.\r\n     */\r\n    readonly id: number;\r\n\r\n    /**\r\n     * Native driver's connection object.\r\n     */\r\n    readonly connection: any;\r\n\r\n    /**\r\n     * Connection's transaction instance.\r\n     */\r\n    transaction?: any;\r\n\r\n    /**\r\n     * Indicates if transaction is active for this connection.\r\n     */\r\n    isTransactionActive: boolean;\r\n\r\n    /**\r\n     * Special function that holds a connection release logic.\r\n     * Releases connection when its called.\r\n     * After releasing connection cannot be used anymore.\r\n     */\r\n    releaseCallback?: () => Promise<void>;\r\n\r\n}","/**\r\n * Thrown when required driver's package is not installed.\r\n */\r\nexport class DriverPackageNotInstalledError extends Error {\r\n    name = \"DriverPackageNotInstalledError\";\r\n\r\n    constructor(driverName: string, packageName: string) {\r\n        super();\r\n        this.message = `${driverName} package has not been found installed. Try to install it: npm install ${packageName} --save`;\r\n    }\r\n\r\n}","import {DriverOptions} from \"./DriverOptions\";\r\n\r\n/**\r\n * Common driver utility functions.\r\n */\r\nexport class DriverUtils {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Normalizes and builds a new driver options.\r\n     * Extracts settings from connection url and sets to a new options object.\r\n     */\r\n    static buildDriverOptions(options: DriverOptions, buildOptions?: { useSid: boolean }): DriverOptions {\r\n        if (options.url) {\r\n            const parsedUrl = this.parseConnectionUrl(options.url);\r\n            if (buildOptions && buildOptions.useSid) {\r\n                const urlDriverOptions: DriverOptions = {\r\n                    type: options.type,\r\n                    host: parsedUrl.host,\r\n                    username: parsedUrl.username,\r\n                    password: parsedUrl.password,\r\n                    port: parsedUrl.port,\r\n                    sid: parsedUrl.database\r\n                };\r\n                return Object.assign(urlDriverOptions, options);\r\n\r\n            } else {\r\n                const urlDriverOptions: DriverOptions = {\r\n                    type: options.type,\r\n                    host: parsedUrl.host,\r\n                    username: parsedUrl.username,\r\n                    password: parsedUrl.password,\r\n                    port: parsedUrl.port,\r\n                    database: parsedUrl.database\r\n                };\r\n                return Object.assign(urlDriverOptions, options);\r\n            }\r\n        }\r\n        return Object.assign({}, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Extracts connection data from the connection url.\r\n     */\r\n    private static parseConnectionUrl(url: string) {\r\n        const firstSlashes = url.indexOf(\"//\");\r\n        const preBase = url.substr(firstSlashes + 2);\r\n        const secondSlash = preBase.indexOf(\"/\");\r\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\r\n        const afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\r\n        const [usernameAndPassword, hostAndPort] = base.split(\"@\");\r\n        const [username, password] = usernameAndPassword.split(\":\");\r\n        const [host, port] = hostAndPort.split(\":\");\r\n\r\n        return {\r\n            host: host,\r\n            username: username,\r\n            password: password,\r\n            port: port ? parseInt(port) : undefined,\r\n            database: afterBase || undefined\r\n        };\r\n    }\r\n\r\n}","/**\r\n * Logging options.\r\n */\r\nexport interface LoggerOptions {\r\n\r\n    /**\r\n     * Some specific logger to be used. By default it is a console.\r\n     */\r\n    readonly logger?: (level: string, message: any) => void;\r\n\r\n    /**\r\n     * Set to true if you want to log every executed query.\r\n     */\r\n    readonly logQueries?: boolean;\r\n\r\n    /**\r\n     * Set to true if you want to log only failed query.\r\n     */\r\n    readonly logOnlyFailedQueries?: boolean;\r\n\r\n    /**\r\n     * Set to true if you want to log error of the failed query.\r\n     */\r\n    readonly logFailedQueryError?: boolean;\r\n\r\n    /**\r\n     * If set to true then schema creation logs will be logged.\r\n     */\r\n    readonly logSchemaCreation?: boolean;\r\n\r\n}","/**\r\n * Browser's implementation of the platform-specific tools.\r\n *\r\n * This file gonna replace PlatformTools for browser environment.\r\n * For node.js environment this class is not getting packaged.\r\n * Don't use methods of this class in the code, use PlatformTools methods instead.\r\n */\r\nexport class PlatformTools {\r\n\r\n    /**\r\n     * Type of the currently running platform.\r\n     */\r\n    static type: \"browser\"|\"node\" = \"browser\";\r\n\r\n    /**\r\n     * Gets global variable where global stuff can be stored.\r\n     */\r\n    static getGlobalVariable(): any {\r\n        return window;\r\n    }\r\n\r\n    /**\r\n     * Loads (\"require\"-s) given file or package.\r\n     * This operation only supports on node platform\r\n     */\r\n    static load(name: string): any {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Normalizes given path. Does \"path.normalize\".\r\n     */\r\n    static pathNormilize(pathStr: string): string {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets file extension. Does \"path.extname\".\r\n     */\r\n    static pathExtname(pathStr: string): string {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Resolved given path. Does \"path.resolve\".\r\n     */\r\n    static pathResolve(pathStr: string): string {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\r\n     */\r\n    static fileExist(pathStr: string): boolean {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets environment variable.\r\n     */\r\n    static getEnvVariable(name: string): any {\r\n        // if (this.type === \"browser\")\r\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\r\n        return undefined;\r\n    }\r\n\r\n}","import {LoggerOptions} from \"./LoggerOptions\";\r\nimport {PlatformTools} from \"../platform/PlatformTools\";\r\n\r\n/**\r\n * Performs logging of the events in TypeORM.\r\n */\r\nexport class Logger {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private options: LoggerOptions) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Logs query and parameters used in it.\r\n     */\r\n    logQuery(query: string, parameters?: any[]) {\r\n        if (this.options.logQueries ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"log\", `executing query: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`);\r\n    }\r\n\r\n    /**\r\n     * Logs query that failed.\r\n     */\r\n    logFailedQuery(query: string, parameters?: any[]) {\r\n        if (this.options.logQueries ||\r\n            this.options.logOnlyFailedQueries ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"error\", `query failed: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`);\r\n    }\r\n\r\n    /**\r\n     * Logs failed query's error.\r\n     */\r\n    logQueryError(error: any) {\r\n        if (this.options.logFailedQueryError ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"error\", \"error during executing query:\" + error);\r\n    }\r\n\r\n    /**\r\n     * Logs events from the schema build process.\r\n     */\r\n    logSchemaBuild(message: string) {\r\n        if (this.options.logSchemaCreation ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"info\", message);\r\n    }\r\n\r\n    /**\r\n     * Perform logging using given logger, or by default to the console.\r\n     * Log has its own level and message.\r\n     */\r\n    log(level: \"log\"|\"info\"|\"warn\"|\"error\", message: any) {\r\n        if (!this.options) return;\r\n\r\n        if (this.options.logger) {\r\n            this.options.logger(level, message);\r\n        } else {\r\n            switch (level) {\r\n                case \"log\":\r\n                    console.log(message);\r\n                    break;\r\n                case \"info\":\r\n                    console.info(message);\r\n                    break;\r\n                case \"warn\":\r\n                    console.warn(message);\r\n                    break;\r\n                case \"error\":\r\n                    console.error(message);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Converts parameters to a string.\r\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\r\n     */\r\n    protected stringifyParams(parameters: any[]) {\r\n        try {\r\n            return JSON.stringify(parameters);\r\n\r\n        } catch (error) { // most probably circular objects in parameters\r\n            return parameters;\r\n        }\r\n    }\r\n\r\n}","/**\r\n * Thrown when transaction is already started and user tries to run it again.\r\n */\r\nexport class TransactionAlreadyStartedError extends Error {\r\n    name = \"TransactionAlreadyStartedError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Transaction already started for the given connection, commit current transaction before starting a new one.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown when transaction is not started yet and user tries to run commit or rollback.\r\n */\r\nexport class TransactionNotStartedError extends Error {\r\n    name = \"TransactionNotStartedError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Transaction is not started yet, start transaction before committing or rolling it back.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown if some data type is not supported by a driver.\r\n */\r\nexport class DataTypeNotSupportedByDriverError extends Error {\r\n    name = \"DataTypeNotSupportedByDriverError\";\r\n\r\n    constructor(dataType: string, driverName: string) {\r\n        super();\r\n        this.message = `Specified type (${dataType}) is not supported by ${driverName} driver.`;\r\n    }\r\n\r\n}","/**\r\n * Arguments for IndexMetadata class.\r\n */\r\nexport interface IndexMetadataArgs {\r\n\r\n    /**\r\n     * Class to which index is applied.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Index name.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Columns combination to be used as index.\r\n     */\r\n    columns?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\r\n\r\n    /**\r\n     * Indicates if index must be unique or not.\r\n     */\r\n    unique: boolean;\r\n\r\n}\r\n","import {EntityMetadata} from \"./EntityMetadata\";\r\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {ColumnMetadata} from \"./ColumnMetadata\";\r\n\r\n/**\r\n * Index metadata contains all information about table's index.\r\n */\r\nexport class IndexMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the class to which this index is applied.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Indicates if this index must be unique.\r\n     */\r\n    isUnique: boolean = false;\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    target?: Function|string;\r\n\r\n    /**\r\n     * Indexed columns.\r\n     */\r\n    columns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * User specified index name.\r\n     */\r\n    givenName?: string;\r\n\r\n    /**\r\n     * User specified column names.\r\n     */\r\n    givenColumnNames?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\r\n\r\n    /**\r\n     * Final index name.\r\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\r\n     * If index name was not given then its generated.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Gets the table name on which index is applied.\r\n     */\r\n    tableName: string;\r\n\r\n    /**\r\n     * Map of column names with order set.\r\n     * Used only by MongoDB driver.\r\n     */\r\n    columnNamesWithOrderingMap: { [key: string]: number } = {};\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        columns?: ColumnMetadata[],\r\n        args?: IndexMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        if (options.columns)\r\n            this.columns = options.columns;\r\n\r\n        if (options.args) {\r\n            this.target = options.args.target;\r\n            this.isUnique = options.args.unique;\r\n            this.givenName = options.args.name;\r\n            this.givenColumnNames = options.args.columns;\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Build Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend index properties.\r\n     * Must be called after all entity metadata's properties map, columns and relations are built.\r\n     */\r\n    build(namingStrategy: NamingStrategyInterface): this {\r\n\r\n        const map: { [key: string]: number } = {};\r\n        this.tableName = this.entityMetadata.tableName;\r\n\r\n        // if columns already an array of string then simply return it\r\n        if (this.givenColumnNames) {\r\n            let columnPropertyNames: string[] = [];\r\n            if (this.givenColumnNames instanceof Array) {\r\n                columnPropertyNames = this.givenColumnNames;\r\n                columnPropertyNames.forEach(name => map[name] = 1);\r\n            } else {\r\n                // if columns is a function that returns array of field names then execute it and get columns names from it\r\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\r\n                if (columnsFnResult instanceof Array) {\r\n                    columnPropertyNames = columnsFnResult.map((i: any) => String(i));\r\n                    columnPropertyNames.forEach(name => map[name] = 1);\r\n                } else {\r\n                    columnPropertyNames = Object.keys(columnsFnResult).map((i: any) => String(i));\r\n                    Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\r\n                }\r\n            }\r\n\r\n            // console.log(\"columnPropertyNames:\", columnPropertyNames);\r\n            // console.log(\"this.entityMetadata.columns:\", this.entityMetadata.columns);\r\n            const columns = this.entityMetadata.columns.filter(column => columnPropertyNames.indexOf(column.propertyPath) !== -1);\r\n            // console.log(\"columns:\", columns);\r\n            this.entityMetadata.relations\r\n                .filter(relation => relation.isWithJoinColumn && columnPropertyNames.indexOf(relation.propertyName) !== -1)\r\n                .forEach(relation => columns.push(...relation.joinColumns));\r\n\r\n            // todo: better to extract all validation into single place if possible\r\n            const missingColumnNames = columnPropertyNames.filter(columnPropertyName => {\r\n                return !this.entityMetadata.columns.find(column => column.propertyPath === columnPropertyName) &&\r\n                    !this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyPath === columnPropertyName);\r\n            });\r\n            if (missingColumnNames.length > 0) {\r\n                throw new Error(`Index ${this.givenName ? \"\\\"\" + this.givenName + \"\\\" \" : \"\"}contains columns that are missing in the entity: ` + missingColumnNames.join(\", \"));\r\n            }\r\n\r\n            this.columns = columns;\r\n        }\r\n\r\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\r\n            const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\r\n            if (column)\r\n                updatedMap[column.databaseName] = map[key];\r\n            return updatedMap;\r\n        }, {} as { [key: string]: number });\r\n        this.name = namingStrategy.indexName(this.givenName ? this.givenName : undefined, this.entityMetadata.tableName, this.columns.map(column => column.databaseName));\r\n        return this;\r\n    }\r\n\r\n}","import {IndexMetadata} from \"../../metadata/IndexMetadata\";\r\n\r\n/**\r\n * Database's table index stored in this class.\r\n */\r\nexport class IndexSchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Table name that contains this unique index.\r\n     */\r\n    tableName: string;\r\n\r\n    /**\r\n     * Index name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Columns included in this index.\r\n     */\r\n    columnNames: string[];\r\n\r\n    /**\r\n     * Indicates if this index is unique.\r\n     */\r\n    isUnique: boolean;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(tableName: string, name: string, columnNames: string[], isUnique: boolean) {\r\n        this.tableName = tableName;\r\n        this.name = name;\r\n        this.columnNames = columnNames;\r\n        this.isUnique = isUnique;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this index with exactly same properties.\r\n     */\r\n    clone() {\r\n        return new IndexSchema(this.tableName, this.name, this.columnNames.map(name => name), this.isUnique);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates index from the index metadata object.\r\n     */\r\n    static create(indexMetadata: IndexMetadata): IndexSchema {\r\n        return new IndexSchema(\r\n            indexMetadata.entityMetadata.tableName,\r\n            indexMetadata.name,\r\n            indexMetadata.columns.map(column => column.databaseName),\r\n            indexMetadata.isUnique\r\n        );\r\n    }\r\n\r\n}","import {ForeignKeyMetadata} from \"../../metadata/ForeignKeyMetadata\";\r\n\r\n/**\r\n * Foreign key from the database stored in this class.\r\n */\r\nexport class ForeignKeySchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Name of the table which contains this foreign key.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Column names which included by this foreign key.\r\n     */\r\n    columnNames: string[];\r\n\r\n    /**\r\n     * Table referenced in the foreign key.\r\n     */\r\n    referencedTableName: string;\r\n\r\n    /**\r\n     * Column names which included by this foreign key.\r\n     */\r\n    referencedColumnNames: string[];\r\n\r\n    /**\r\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\r\n     * referenced stuff is being deleted.\r\n     */\r\n    onDelete?: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string,\r\n                columnNames: string[],\r\n                referencedColumnNames: string[],\r\n                referencedTable: string,\r\n                onDelete?: string) {\r\n\r\n        this.name = name;\r\n        this.columnNames = columnNames;\r\n        this.referencedColumnNames = referencedColumnNames;\r\n        this.referencedTableName = referencedTable;\r\n        this.onDelete = onDelete;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this foreign key with exactly same properties.\r\n     */\r\n    clone() {\r\n        return new ForeignKeySchema(\r\n            this.name,\r\n            this.columnNames,\r\n            this.referencedColumnNames,\r\n            this.referencedTableName\r\n        );\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new foreign schema from the given foreign key metadata.\r\n     */\r\n    static create(metadata: ForeignKeyMetadata) {\r\n        return new ForeignKeySchema(\r\n            metadata.name,\r\n            metadata.columnNames,\r\n            metadata.referencedColumnNames,\r\n            metadata.referencedTableName,\r\n            metadata.onDelete\r\n        );\r\n    }\r\n\r\n}","/**\r\n * Primary key from the database stored in this class.\r\n */\r\nexport class PrimaryKeySchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Key name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Column to which this primary key is bind.\r\n     */\r\n    columnName: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string, columnName: string) {\r\n        this.name = name;\r\n        this.columnName = columnName;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this primary key with exactly same properties.\r\n     */\r\n    clone() {\r\n        return new PrimaryKeySchema(this.name, this.columnName);\r\n    }\r\n\r\n}","import {ColumnSchema} from \"./ColumnSchema\";\r\nimport {IndexSchema} from \"./IndexSchema\";\r\nimport {ForeignKeySchema} from \"./ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"./PrimaryKeySchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\n\r\n/**\r\n * Table schema in the database represented in this class.\r\n */\r\nexport class TableSchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Table name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Table columns.\r\n     */\r\n    columns: ColumnSchema[] = [];\r\n\r\n    /**\r\n     * Table indices.\r\n     */\r\n    indices: IndexSchema[] = [];\r\n\r\n    /**\r\n     * Table foreign keys.\r\n     */\r\n    foreignKeys: ForeignKeySchema[] = [];\r\n\r\n    /**\r\n     * Table primary keys.\r\n     */\r\n    primaryKeys: PrimaryKeySchema[] = [];\r\n\r\n    /**\r\n     * Indicates if table schema was just created.\r\n     * This is needed, for example to check if we need to skip primary keys creation\r\n     * for new table schemas.\r\n     */\r\n    justCreated: boolean = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string, columns?: ColumnSchema[]|ObjectLiteral[], justCreated?: boolean) {\r\n        this.name = name;\r\n        if (columns) {\r\n            this.columns = (columns as any[]).map(column => { // as any[] is a temporary fix (some weird compiler error)\r\n                if (column instanceof ColumnSchema) {\r\n                    return column;\r\n                } else {\r\n                    return new ColumnSchema(column);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (justCreated !== undefined)\r\n            this.justCreated = justCreated;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets only those primary keys that does not\r\n     */\r\n    get primaryKeysWithoutGenerated(): PrimaryKeySchema[] {\r\n        const generatedColumn = this.columns.find(column => column.isGenerated);\r\n        if (!generatedColumn)\r\n            return this.primaryKeys;\r\n\r\n        return this.primaryKeys.filter(primaryKey => {\r\n            return primaryKey.columnName !== generatedColumn.name;\r\n        });\r\n    }\r\n\r\n    get hasGeneratedColumn(): boolean {\r\n        return !!this.columns.find(column => column.isGenerated);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Clones this table schema to a new table schema with all properties cloned.\r\n     */\r\n    clone(): TableSchema {\r\n        const cloned = new TableSchema(this.name);\r\n        cloned.columns = this.columns.map(column => column.clone());\r\n        cloned.indices = this.indices.map(index => index.clone());\r\n        cloned.foreignKeys = this.foreignKeys.map(key => key.clone());\r\n        cloned.primaryKeys = this.primaryKeys.map(key => key.clone());\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Adds column schemas.\r\n     */\r\n    addColumns(columns: ColumnSchema[]) {\r\n        this.columns = this.columns.concat(columns);\r\n    }\r\n\r\n    /**\r\n     * Replaces given column.\r\n     */\r\n    replaceColumn(oldColumn: ColumnSchema, newColumn: ColumnSchema) {\r\n        this.columns[this.columns.indexOf(oldColumn)] = newColumn;\r\n    }\r\n\r\n    /**\r\n     * Removes a column schema from this table schema.\r\n     */\r\n    removeColumn(columnToRemove: ColumnSchema) {\r\n        const foundColumn = this.columns.find(column => column.name === columnToRemove.name);\r\n        if (foundColumn)\r\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\r\n    }\r\n\r\n    /**\r\n     * Remove all column schemas from this table schema.\r\n     */\r\n    removeColumns(columns: ColumnSchema[]) {\r\n        columns.forEach(column => this.removeColumn(column));\r\n    }\r\n\r\n    /**\r\n     * Adds all given primary keys.\r\n     */\r\n    addPrimaryKeys(addedKeys: PrimaryKeySchema[]) {\r\n        addedKeys.forEach(key => this.primaryKeys.push(key));\r\n    }\r\n\r\n    /**\r\n     * Removes all given primary keys.\r\n     */\r\n    removePrimaryKeys(droppedKeys: PrimaryKeySchema[]) {\r\n        droppedKeys.forEach(key => {\r\n            this.primaryKeys.splice(this.primaryKeys.indexOf(key), 1);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes primary keys of the given columns.\r\n     */\r\n    removePrimaryKeysOfColumns(columns: ColumnSchema[]) {\r\n        this.primaryKeys = this.primaryKeys.filter(primaryKey => {\r\n            return !columns.find(column => column.name === primaryKey.columnName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds foreign key schemas.\r\n     */\r\n    addForeignKeys(foreignKeys: ForeignKeySchema[]) {\r\n        this.foreignKeys = this.foreignKeys.concat(foreignKeys);\r\n    }\r\n\r\n    /**\r\n     * Removes foreign key from this table schema.\r\n     */\r\n    removeForeignKey(removedForeignKey: ForeignKeySchema) {\r\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name); // this must be by name\r\n        if (fk)\r\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\r\n    }\r\n\r\n    /**\r\n     * Removes all foreign keys from this table schema.\r\n     */\r\n    removeForeignKeys(dbForeignKeys: ForeignKeySchema[]) {\r\n        dbForeignKeys.forEach(foreignKey => this.removeForeignKey(foreignKey));\r\n    }\r\n\r\n    /**\r\n     * Removes index schema from this table schema.\r\n     */\r\n    removeIndex(indexSchema: IndexSchema) {\r\n        const index = this.indices.find(index => index.name === indexSchema.name);\r\n        if (index)\r\n            this.indices.splice(this.indices.indexOf(index), 1);\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table schema and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(queryRunner: QueryRunner, columnMetadatas: ColumnMetadata[]): ColumnSchema[] {\r\n        return this.columns.filter(columnSchema => {\r\n            const columnMetadata = columnMetadatas.find(columnMetadata => columnMetadata.databaseName === columnSchema.name);\r\n            if (!columnMetadata)\r\n                return false; // we don't need new columns, we only need exist and changed\r\n\r\n            return  columnSchema.name !== columnMetadata.databaseName ||\r\n                    columnSchema.type !== queryRunner.normalizeType(columnMetadata) ||\r\n                    columnSchema.comment !== columnMetadata.comment ||\r\n                    (!columnSchema.isGenerated && !queryRunner.compareDefaultValues(columnMetadata.default, columnSchema.default)) || // we included check for generated here, because generated columns already can have default values\r\n                    columnSchema.isNullable !== columnMetadata.isNullable ||\r\n                    columnSchema.isUnique !== columnMetadata.isUnique ||\r\n                    // columnSchema.isPrimary !== columnMetadata.isPrimary ||\r\n                    columnSchema.isGenerated !== columnMetadata.isGenerated;\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates table schema from a given entity metadata.\r\n     *\r\n     * todo: need deeper implementation\r\n     */\r\n    static create(entityMetadata: EntityMetadata, queryRunner: QueryRunner) {\r\n        const tableSchema = new TableSchema(entityMetadata.tableName);\r\n        entityMetadata.columns.forEach(column => {\r\n            tableSchema.columns.push(ColumnSchema.create(column, queryRunner.normalizeType(column)));\r\n        });\r\n\r\n        return tableSchema;\r\n    }\r\n\r\n}","/**\r\n */\r\nexport class QueryRunnerAlreadyReleasedError extends Error {\r\n    name = \"QueryRunnerAlreadyReleasedError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Query runner already released. Cannot run queries anymore.`;\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {OracleDriver} from \"./OracleDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single mysql database connection.\r\n *\r\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\r\n */\r\nexport class OracleQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: OracleDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.beginTransaction();\r\n        try {\r\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\r\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\r\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\r\n\r\n            await this.query(disableForeignKeysCheckQuery);\r\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\r\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\r\n            await this.query(enableForeignKeysCheckQuery);\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        // await this.query(\"START TRANSACTION\");\r\n        this.databaseConnection.isTransactionActive = true;\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise((ok, fail) => {\r\n            this.logger.logQuery(query, parameters);\r\n            const handler = (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                }\r\n\r\n                ok(result.rows || result.outBinds);\r\n            };\r\n            const executionOptions = {\r\n                autoCommit: this.databaseConnection.isTransactionActive ? false : true\r\n            };\r\n            this.databaseConnection.connection.execute(query, parameters || {}, executionOptions, handler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map(key => \":\" + key).join(\", \");\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        const insertSql = columns.length > 0\r\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`\r\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\r\n        if (generatedColumn) {\r\n            const sql2 = `declare lastId number; begin ${insertSql} returning \"id\" into lastId; dbms_output.enable; dbms_output.put_line(lastId); dbms_output.get_line(:ln, :st); end;`;\r\n            const saveResult = await this.query(sql2, parameters.concat([\r\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.STRING, maxSize: 32767 },\r\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.NUMBER }\r\n            ]));\r\n            return parseInt(saveResult[0]);\r\n        } else {\r\n            return this.query(insertSql, parameters);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions).join(\" AND \");\r\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(sql, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\r\n        const tablesSql      = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN (${tableNamesString})`;\r\n        const columnsSql     = `SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN (${tableNamesString})`;\r\n        const indicesSql     = `SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = '${this.dbName}' AND INDEX_NAME != 'PRIMARY'`;\r\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\r\n        const uniqueKeysSql  = `SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = '${this.dbName}' AND CONSTRAINT_TYPE = 'UNIQUE'`;\r\n        const constraintsSql = `SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\r\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN (${tableNamesString}) \r\nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position`;\r\n        const [dbTables, dbColumns, /*dbIndices, dbForeignKeys, dbUniqueKeys, */constraints]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            // this.query(indicesSql),\r\n            // this.query(foreignKeysSql),\r\n            // this.query(uniqueKeysSql),\r\n            this.query(constraintsSql),\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return dbTables.map(dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbColumn => {\r\n                    const isPrimary = !!constraints\r\n                        .find(constraint => {\r\n                            return  constraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"P\" &&\r\n                                    constraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\r\n                        });\r\n\r\n                    let columnType = dbColumn[\"DATA_TYPE\"].toLowerCase();\r\n                    if (dbColumn[\"DATA_TYPE\"].toLowerCase() === \"varchar2\" && dbColumn[\"DATA_LENGTH\"] !== null) {\r\n                        columnType += \"(\" + dbColumn[\"DATA_LENGTH\"] + \")\";\r\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null && dbColumn[\"DATA_SCALE\"] !== null) {\r\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \",\" + dbColumn[\"DATA_SCALE\"] + \")\";\r\n                    } else if (dbColumn[\"DATA_SCALE\"] !== null) {\r\n                        columnType += \"(0,\" + dbColumn[\"DATA_SCALE\"] + \")\";\r\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null) {\r\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \")\";\r\n                    }\r\n\r\n                    const columnSchema = new ColumnSchema();\r\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\r\n                    columnSchema.type = columnType;\r\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\r\n                    columnSchema.isNullable = dbColumn[\"NULLABLE\"] !== \"N\";\r\n                    columnSchema.isPrimary = isPrimary;\r\n                    columnSchema.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\"; // todo\r\n                    columnSchema.comment = \"\"; // todo\r\n                    return columnSchema;\r\n                });\r\n\r\n            // create primary key schema\r\n            tableSchema.primaryKeys = constraints\r\n                .filter(constraint => constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"P\")\r\n                .map(constraint => new PrimaryKeySchema(constraint[\"CONSTRAINT_NAME\"], constraint[\"COLUMN_NAME\"]));\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            tableSchema.foreignKeys = constraints\r\n                .filter(constraint => constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"R\")\r\n                .map(constraint => new ForeignKeySchema(constraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // console.log(tableSchema);\r\n\r\n            // create index schemas from the loaded indices\r\n            // tableSchema.indices = dbIndices\r\n            //     .filter(dbIndex => {\r\n            //         return  dbIndex[\"table_name\"] === tableSchema.name &&\r\n            //             (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\r\n            //             (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\r\n            //     })\r\n            //     .map(dbIndex => dbIndex[\"INDEX_NAME\"])\r\n            //     .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n            //     .map(dbIndexName => {\r\n            //         const columnNames = dbIndices\r\n            //             .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName)\r\n            //             .map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\r\n            //\r\n            //         return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\r\n            //     });\r\n\r\n            return tableSchema;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\r\n\r\n            if (newColumn.isGenerated) {\r\n                if (tableSchema.primaryKeys.length > 0 && oldColumn.isPrimary) {\r\n                    // console.log(tableSchema.primaryKeys);\r\n                    const dropPrimarySql = `ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"${tableSchema.primaryKeys[0].name}\"`;\r\n                    await this.query(dropPrimarySql);\r\n                }\r\n\r\n                // since modifying identity column is not supported yet, we need to recreate this column\r\n                const dropSql = `ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`;\r\n                await this.query(dropSql);\r\n\r\n                const createSql = `ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn)}`;\r\n                await this.query(createSql);\r\n\r\n            } else {\r\n                const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" DROP IDENTITY`;\r\n                await this.query(sql);\r\n\r\n            }\r\n        }\r\n\r\n        if (newColumn.isNullable !== oldColumn.isNullable) {\r\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type} ${newColumn.isNullable ? \"NULL\" : \"NOT NULL\"}`;\r\n            await this.query(sql);\r\n\r\n        } else if (newColumn.type !== oldColumn.type) { // elseif is used because\r\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type}`;\r\n            await this.query(sql);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\r\n        return this.query(`ALTER TABLE \"${tableName}\" DROP COLUMN \"${columnName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => \"\\\"\" + primaryKey.columnName + \"\\\"\");\r\n        // console.log(dbTable.primaryKeys);\r\n        if (dbTable.primaryKeys.length > 0 && dbTable.primaryKeys[0].name)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${dbTable.primaryKeys[0].name}\"`);\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnNames = foreignKey.columnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\",\");\r\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\r\n            `FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columns = index.columnNames.map(columnName => \"\\\"\" + columnName + \"\\\"\").join(\", \");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE\" : \"\"} INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `ALTER TABLE \"${tableName}\" DROP INDEX \"${indexName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                if (typeOptions.fixedLength) {\r\n                    return \"char(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                } else {\r\n                    return \"varchar2(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";                    \r\n                }\r\n            case \"text\":\r\n                return \"clob\";\r\n            case \"boolean\":\r\n                return \"number(1)\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                // if (column.isGenerated)\r\n                //     return `number(22)`;\r\n                if (typeOptions.precision && typeOptions.scale)\r\n                    return `number(${typeOptions.precision},${typeOptions.scale})`;\r\n                if (typeOptions.precision)\r\n                    return `number(${typeOptions.precision},0)`;\r\n                if (typeOptions.scale)\r\n                    return `number(0,${typeOptions.scale})`;\r\n\r\n                return \"number(10,0)\";\r\n            case \"smallint\":\r\n                return \"number(5)\";\r\n            case \"bigint\":\r\n                return \"number(20)\";\r\n            case \"float\":\r\n                if (typeOptions.precision && typeOptions.scale)\r\n                    return `float(${typeOptions.precision},${typeOptions.scale})`;\r\n                if (typeOptions.precision)\r\n                    return `float(${typeOptions.precision},0)`;\r\n                if (typeOptions.scale)\r\n                    return `float(0,${typeOptions.scale})`;\r\n\r\n                return `float(126)`;\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"float(126)\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(0,${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                return \"date\";\r\n            case \"datetime\":\r\n                return \"timestamp(0)\";\r\n            case \"json\":\r\n                return \"clob\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"varchar2(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"Oracle\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\r\n        return Object.keys(objectLiteral).map(key => this.driver.escapeColumnName(key) + \"=:\" + key);\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema) {\r\n        let c = `\"${column.name}\" ` + column.type;\r\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\r\n            c += \" NOT NULL\";\r\n        // if (column.isPrimary === true && addPrimary)\r\n        //     c += \" PRIMARY KEY\";\r\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" GENERATED BY DEFAULT ON NULL AS IDENTITY\";\r\n        // if (column.comment) // todo: less priority, fix it later\r\n        //     c += \" COMMENT '\" + column.comment + \"'\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n}","/**\r\n * Thrown if some required driver's option is not set.\r\n */\r\nexport class DriverOptionNotSetError extends Error {\r\n    name = \"DriverOptionNotSetError\";\r\n\r\n    constructor(optionName: string) {\r\n        super();\r\n        this.message = `Driver option (${optionName}) is not set. Please set it to perform connection to the database.`;\r\n    }\r\n\r\n}","/**\r\n * Provides utilities to transform hydrated and persisted data.\r\n */\r\nexport class DataTransformationUtils {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Normalizes date object hydrated from the database.\r\n     */\r\n    static normalizeHydratedDate(mixedDate: Date|string|undefined, storedInLocal: boolean): Date|string|undefined {\r\n        if (!mixedDate)\r\n            return mixedDate;\r\n\r\n        const date = typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate as Date;\r\n        if (!storedInLocal) {\r\n\r\n            // else if it was not stored in local timezone, means it was stored in UTC\r\n            // because driver hydrates it with timezone applied why we need to add timezone hours to match a local timezone\r\n\r\n            const correctedDate = new Date();\r\n            correctedDate.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\r\n            correctedDate.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n            return correctedDate;\r\n        }\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\r\n     */\r\n    static mixedDateToDateString(value: Date|any): string|any {\r\n        if (value instanceof Date)\r\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into time string in a \"HH:mm:ss\" format.\r\n     */\r\n    static mixedDateToTimeString(value: Date|any): string|any {\r\n        if (value instanceof Date)\r\n            return this.formatZerolessValue(value.getHours()) + \":\" + this.formatZerolessValue(value.getMinutes()) + \":\" + this.formatZerolessValue(value.getSeconds());\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\r\n     */\r\n    static mixedTimeToString(value: string|any): string|any {\r\n        value = value instanceof Date ? (value.getHours() + \":\" + value.getMinutes() + \":\" + value.getSeconds()) : value;\r\n        if (typeof value === \"string\") {\r\n            return value.split(\":\")\r\n                .map(v => v.length === 1 ? \"0\" + v : v) // append zero at beginning if we have a first-zero-less number\r\n                .join(\":\");\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\r\n     */\r\n    static mixedDateToDatetimeString(value: Date|any): string|any {\r\n        if (typeof value === \"string\") {\r\n            value = new Date(value);\r\n        }\r\n        if (value instanceof Date) {\r\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" +\r\n                this.formatZerolessValue(value.getMonth() + 1) + \"-\" +\r\n                this.formatZerolessValue(value.getDate()) + \" \" +\r\n                this.formatZerolessValue(value.getHours()) + \":\" +\r\n                this.formatZerolessValue(value.getMinutes()) + \":\" +\r\n                this.formatZerolessValue(value.getSeconds());\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\r\n     */\r\n    static mixedDateToUtcDatetimeString(value: Date|any): string|any {\r\n        if (typeof value === \"string\") {\r\n            value = new Date(value);\r\n        }\r\n        if (value instanceof Date) {\r\n            return this.formatZerolessValue(value.getUTCFullYear()) + \"-\" +\r\n                this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" +\r\n                this.formatZerolessValue(value.getUTCDate()) + \" \" +\r\n                this.formatZerolessValue(value.getUTCHours()) + \":\" +\r\n                this.formatZerolessValue(value.getUTCMinutes()) + \":\" +\r\n                this.formatZerolessValue(value.getUTCSeconds());\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts each item in the given array to string joined by \",\" separator.\r\n     */\r\n    static simpleArrayToString(value: any[]|any): string[]|any {\r\n        if (value instanceof Array) {\r\n            return (value as any[])\r\n                .map(i => String(i))\r\n                .join(\",\");\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given string to simple array split by \",\" separator.\r\n     */\r\n    static stringToSimpleArray(value: string|any): string|any {\r\n        if (value instanceof String || typeof value === \"string\") {\r\n            return value.split(\",\");\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\r\n     */\r\n    private static formatZerolessValue(value: number): string {\r\n        if (value < 10)\r\n            return \"0\" + value;\r\n\r\n        return String(value);\r\n    }\r\n\r\n}\r\n","import {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\n/**\r\n * Wraps entities and creates getters/setters for their relations\r\n * to be able to lazily load relations when accessing these relations.\r\n */\r\nexport class LazyRelationsWrapper {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Wraps given entity and creates getters/setters for its given relation\r\n     * to be able to lazily load data when accessing these relation.\r\n     */\r\n    wrap(object: ObjectLiteral, relation: RelationMetadata) {\r\n        const that = this;\r\n        const dataIndex = \"__\" + relation.propertyName + \"__\"; // in what property of the entity loaded data will be stored\r\n        const promiseIndex = \"__promise_\" + relation.propertyName + \"__\"; // in what property of the entity loading promise will be stored\r\n        const resolveIndex = \"__has_\" + relation.propertyName + \"__\"; // indicates if relation data already was loaded or not\r\n\r\n        Object.defineProperty(object, relation.propertyName, {\r\n            get: function() {\r\n                if (this[resolveIndex] === true) // if related data already was loaded then simply return it\r\n                    return Promise.resolve(this[dataIndex]);\r\n\r\n                if (this[promiseIndex]) // if related data is loading then return a promise that loads it\r\n                    return this[promiseIndex];\r\n\r\n                // nothing is loaded yet, load relation data and save it in the model once they are loaded\r\n                this[promiseIndex] = that.loadRelationResults(relation, this).then(result => {\r\n                    this[dataIndex] = result;\r\n                    this[resolveIndex] = true;\r\n                    delete this[promiseIndex];\r\n                    return this[dataIndex];\r\n\r\n                }); // .catch((err: any) => { throw err; });\r\n                return this[promiseIndex];\r\n            },\r\n            set: function(promise: Promise<any>) {\r\n                if (promise instanceof Promise) { // if set data is a promise then wait for its resolve and save in the object\r\n                    promise.then(result => {\r\n                        this[dataIndex] = result;\r\n                        this[resolveIndex] = true;\r\n                    });\r\n\r\n                } else { // if its direct data set (non promise, probably not safe-typed)\r\n                    this[dataIndex] = promise;\r\n                    this[resolveIndex] = true;\r\n                }\r\n            },\r\n            configurable: true\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads relation data for the given entity and its relation.\r\n     */\r\n    protected loadRelationResults(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\r\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            return this.loadManyToOneOrOneToOneOwner(relation, entity);\r\n\r\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            return this.loadOneToManyOrOneToOneNotOwner(relation, entity);\r\n\r\n        } else if (relation.isManyToManyOwner) {\r\n            return this.loadManyToManyOwner(relation, entity);\r\n\r\n        } else { // many-to-many non owner\r\n            return this.loadManyToManyNotOwner(relation, entity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads data for many-to-one and one-to-one owner relations.\r\n     *\r\n     * (ow) post.category<=>category.post\r\n     * loaded: category from post\r\n     * example: SELECT category.id AS category_id, category.name AS category_name FROM category category\r\n     *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\r\n     */\r\n    protected loadManyToOneOrOneToOneOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\r\n        const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\r\n        const conditions = joinColumns.map(joinColumn => {\r\n            return `${relation.entityMetadata.name}.${relation.propertyName} = ${relation.propertyName}.${joinColumn.referencedColumn!.propertyName}`;\r\n        }).join(\" AND \");\r\n\r\n        const qb = new QueryBuilder(this.connection)\r\n            .select(relation.propertyName) // category\r\n            .from(relation.type, relation.propertyName) // Category, category\r\n            .innerJoin(relation.entityMetadata.target as Function, relation.entityMetadata.name, conditions);\r\n\r\n        joinColumns.forEach(joinColumn => {\r\n            qb.andWhere(`${relation.entityMetadata.name}.${joinColumn.referencedColumn!.databaseName} = :${joinColumn.referencedColumn!.databaseName}`)\r\n                .setParameter(`${joinColumn.referencedColumn!.databaseName}`, joinColumn.referencedColumn!.getEntityValue(entity));\r\n        });\r\n        return qb.getOne();\r\n    }\r\n\r\n    /**\r\n     * Loads data for one-to-many and one-to-one not owner relations.\r\n     *\r\n     * SELECT post\r\n     * FROM post post\r\n     * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]\r\n     */\r\n    protected loadOneToManyOrOneToOneNotOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\r\n        const qb = new QueryBuilder(this.connection)\r\n            .select(relation.propertyName)\r\n            .from(relation.inverseRelation!.entityMetadata.target, relation.propertyName);\r\n\r\n        relation.inverseRelation!.joinColumns.forEach(joinColumn => {\r\n            qb.andWhere(`${relation.propertyName}.${joinColumn.propertyName} = :${joinColumn.referencedColumn!.propertyName}`)\r\n                .setParameter(`${joinColumn.referencedColumn!.propertyName}`, joinColumn.referencedColumn!.getEntityValue(entity));\r\n        });\r\n        return relation.isOneToMany ? qb.getMany() : qb.getOne();\r\n    }\r\n\r\n    /**\r\n     * Loads data for many-to-many owner relations.\r\n     *\r\n     * SELECT category\r\n     * FROM category category\r\n     * INNER JOIN post_categories post_categories\r\n     * ON post_categories.postId = :postId\r\n     * AND post_categories.categoryId = category.id\r\n     */\r\n    protected loadManyToManyOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\r\n        const mainAlias = relation.propertyName;\r\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\r\n        const joinColumnConditions = relation.joinColumns.map(joinColumn => {\r\n            return `${joinAlias}.${joinColumn.propertyName} = :${joinColumn.propertyName}`;\r\n        });\r\n        const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {\r\n            return `${joinAlias}.${inverseJoinColumn.propertyName}=${mainAlias}.${inverseJoinColumn.referencedColumn!.propertyName}`;\r\n        });\r\n        const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\r\n            parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(entity);\r\n            return parameters;\r\n        }, {} as ObjectLiteral);\r\n\r\n        return new QueryBuilder(this.connection)\r\n            .select(mainAlias)\r\n            .from(relation.type, mainAlias)\r\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\r\n            .setParameters(parameters)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Loads data for many-to-many not owner relations.\r\n     *\r\n     * SELECT post\r\n     * FROM post post\r\n     * INNER JOIN post_categories post_categories\r\n     * ON post_categories.postId = post.id\r\n     * AND post_categories.categoryId = post_categories.categoryId\r\n     */\r\n    protected loadManyToManyNotOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\r\n        const mainAlias = relation.propertyName;\r\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\r\n        const joinColumnConditions = relation.inverseRelation!.joinColumns.map(joinColumn => {\r\n            return `${joinAlias}.${joinColumn.propertyName} = ${mainAlias}.${joinColumn.referencedColumn!.propertyName}`;\r\n        });\r\n        const inverseJoinColumnConditions = relation.inverseRelation!.inverseJoinColumns.map(inverseJoinColumn => {\r\n            return `${joinAlias}.${inverseJoinColumn.propertyName} = :${inverseJoinColumn.propertyName}`;\r\n        });\r\n        const parameters = relation.inverseRelation!.inverseJoinColumns.reduce((parameters, joinColumn) => {\r\n            parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(entity);\r\n            return parameters;\r\n        }, {} as ObjectLiteral);\r\n\r\n        return new QueryBuilder(this.connection)\r\n            .select(mainAlias)\r\n            .from(relation.type, mainAlias)\r\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\r\n            .setParameters(parameters)\r\n            .getMany();\r\n    }\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {OracleQueryRunner} from \"./OracleQueryRunner\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\nimport {LazyRelationsWrapper} from \"../../lazy-loading/LazyRelationsWrapper\";\r\n\r\n/**\r\n * Organizes communication with Oracle DBMS.\r\n *\r\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\r\n */\r\nexport class OracleDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Used to wrap lazy relations to be able to perform lazy loadings.\r\n     */\r\n    lazyRelationsWrapper: LazyRelationsWrapper;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Oracle library.\r\n     */\r\n    oracle: any;\r\n\r\n    /**\r\n     * Connection to oracle database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Oracle pool.\r\n     */\r\n    protected pool: any;\r\n\r\n    /**\r\n     * Pool of database connections.\r\n     */\r\n    protected databaseConnectionPool: DatabaseConnection[] = [];\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, oracle?: any) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(options, { useSid: true });\r\n        this.logger = logger;\r\n        this.oracle = oracle;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.host)\r\n            throw new DriverOptionNotSetError(\"host\");\r\n        if (!this.options.username)\r\n            throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.sid)\r\n            throw new DriverOptionNotSetError(\"sid\");\r\n\r\n        // if oracle package instance was not set explicitly then try to load it\r\n        if (!oracle)\r\n            this.loadDependencies();\r\n\r\n        this.oracle.outFormat = this.oracle.OBJECT;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            user: this.options.username,\r\n            password: this.options.password,\r\n            connectString: this.options.host + \":\" + this.options.port + \"/\" + this.options.sid,\r\n        }, this.options.extra || {});\r\n\r\n        // pooling is enabled either when its set explicitly to true,\r\n        // either when its not defined at all (e.g. enabled by default)\r\n        if (this.options.usePool === undefined || this.options.usePool === true) {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.oracle.createPool(options, (err: any, pool: any) => {\r\n                    if (err)\r\n                        return fail(err);\r\n\r\n                    this.pool = pool;\r\n                    ok();\r\n                });\r\n            });\r\n\r\n        } else {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.oracle.getConnection(options, (err: any, connection: any) => {\r\n                    if (err)\r\n                        return fail(err);\r\n\r\n                    this.databaseConnection = {\r\n                        id: 1,\r\n                        connection: connection,\r\n                        isTransactionActive: false\r\n                    };\r\n                    this.databaseConnection.connection.connect((err: any) => err ? fail(err) : ok());\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            throw new ConnectionIsNotSetError(\"oracle\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n\r\n            // if pooling is used, then disconnect from it\r\n            if (this.pool) {\r\n                this.pool.close(handler);\r\n                this.pool = undefined;\r\n                this.databaseConnectionPool = [];\r\n            }\r\n\r\n            // if single connection is opened, then close it\r\n            if (this.databaseConnection) {\r\n                this.databaseConnection.connection.close(handler);\r\n                this.databaseConnection = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"oracle\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new OracleQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.oracle,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\r\n            pool: this.pool\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            escapedParameters.push(parameters[key.substr(1)]);\r\n            return key;\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return `\"${columnName}\"`; // \"`\" + columnName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return `\"${aliasName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return `\"${tableName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n\r\n        if (this.pool) {\r\n            return new Promise((ok, fail) => {\r\n                this.pool.getConnection((err: any, connection: any) => {\r\n                    if (err)\r\n                        return fail(err);\r\n\r\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\r\n                    if (!dbConnection) {\r\n                        dbConnection = {\r\n                            id: this.databaseConnectionPool.length,\r\n                            connection: connection,\r\n                            isTransactionActive: false\r\n                        };\r\n                        dbConnection.releaseCallback = () => {\r\n                            return new Promise<void>((ok, fail) => {\r\n                                connection.close((err: any) => {\r\n                                    if (err)\r\n                                        return fail(err);\r\n\r\n                                    if (this.pool && dbConnection) {\r\n                                        this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\r\n                                    }\r\n                                    ok();\r\n                                });\r\n                            });\r\n                        };\r\n                        this.databaseConnectionPool.push(dbConnection);\r\n                    }\r\n                    ok(dbConnection);\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"oracle\");\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.oracle = PlatformTools.load(\"oracledb\");\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"Oracle\", \"oracledb\");\r\n        }\r\n    }\r\n\r\n}","/**\r\n * Helper utility functions for QueryBuilder.\r\n */\r\nexport class QueryBuilderUtils {\r\n\r\n    /**\r\n     * Checks if given value is a string representation of alias property,\r\n     * e.g. \"post.category\" or \"post.id\".\r\n     */\r\n    static isAliasProperty(str: any): str is string {\r\n\r\n        // alias property must be a string and must have a dot separator\r\n        if (typeof str !== \"string\" || str.indexOf(\".\") === -1)\r\n            return false;\r\n\r\n        // extra alias and its property relation\r\n        const [aliasName, propertyName] = str.split(\".\"); // todo: what about relations in embedded?\r\n        if (!aliasName || !propertyName)\r\n            return false;\r\n\r\n        // alias and property must be represented in a special format\r\n        const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\r\n        if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\n/**\r\n */\r\nexport class Alias {\r\n\r\n    name: string;\r\n\r\n    /**\r\n     * Table on which this alias is applied.\r\n     * Used only for aliases which select custom tables.\r\n     */\r\n    tableName?: string;\r\n\r\n    constructor(alias?: Alias) {\r\n        Object.assign(this, alias || {});\r\n    }\r\n\r\n    private _metadata?: EntityMetadata;\r\n\r\n    get target(): Function|string {\r\n        return this.metadata.target;\r\n    }\r\n\r\n    get hasMetadata(): boolean {\r\n        return !!this._metadata;\r\n    }\r\n\r\n    set metadata(metadata: EntityMetadata) {\r\n        this._metadata = metadata;\r\n    }\r\n\r\n    get metadata(): EntityMetadata {\r\n        if (!this._metadata)\r\n            throw new Error(`Cannot get entity metadata for the given alias \"${this.name}\"`);\r\n\r\n        return this._metadata;\r\n    }\r\n\r\n}","export type OrderByCondition = { [columnName: string]: \"ASC\"|\"DESC\" };\r\n","export interface JoinOptions {\r\n    limit?: number;\r\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {JoinOptions} from \"./JoinOptions\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {QueryBuilderUtils} from \"./QueryBuilderUtils\";\r\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\r\nimport {Alias} from \"./Alias\";\r\n\r\n/**\r\n * Stores all join attributes which will be used to build a JOIN query.\r\n */\r\nexport class JoinAttribute {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Join direction.\r\n     */\r\n    direction: \"LEFT\"|\"INNER\";\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias: Alias;\r\n\r\n    /**\r\n     * Joined table, entity target, or relation in \"post.category\" format.\r\n     */\r\n    entityOrProperty: Function|string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    condition?: string;\r\n\r\n    /**\r\n     * Property + alias of the object where to joined data should be mapped.\r\n     */\r\n    mapToProperty?: string;\r\n\r\n    /**\r\n     * Indicates if user maps one or many objects from the join.\r\n     */\r\n    isMappingMany?: boolean;\r\n\r\n    /**\r\n     * Extra join options.\r\n     */\r\n    options?: JoinOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection,\r\n                private queryExpressionMap: QueryExpressionMap,\r\n                private joinAttribute?: JoinAttribute) {\r\n        Object.assign(this, joinAttribute || {});\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    get isMany(): boolean {\r\n        if (this.isMappingMany !== undefined)\r\n            return this.isMappingMany;\r\n\r\n        if (this.relation)\r\n            return this.relation.isManyToMany || this.relation.isOneToMany;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Name of the table which we should join.\r\n     */\r\n    get tableName(): string {\r\n        return this.metadata ? this.metadata.tableName : this.entityOrProperty as string;\r\n    }\r\n\r\n    /**\r\n     * Alias of the parent of this join.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get parentAlias(): string|undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n            return undefined;\r\n\r\n        return this.entityOrProperty.substr(0, this.entityOrProperty.indexOf(\".\"));\r\n    }\r\n\r\n    /**\r\n     * Relation property name of the parent.\r\n     * This is used to understand what is joined.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relationPropertyPath(): string|undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n            return undefined;\r\n\r\n        return this.entityOrProperty.substr(this.entityOrProperty.indexOf(\".\") + 1);\r\n    }\r\n\r\n    /**\r\n     * Relation of the parent.\r\n     * This is used to understand what is joined.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     * Relation can be undefined if entityOrProperty is regular entity or custom table.\r\n     */\r\n    get relation(): RelationMetadata|undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n            return undefined;\r\n\r\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\r\n        const metadata = relationOwnerSelection.metadata.parentEntityMetadata\r\n            ? relationOwnerSelection.metadata.parentEntityMetadata\r\n            : relationOwnerSelection.metadata;\r\n        const relation = metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Metadata of the joined entity.\r\n     * If table without entity was joined, then it will return undefined.\r\n     */\r\n    get metadata(): EntityMetadata|undefined {\r\n\r\n        // entityOrProperty is Entity class\r\n        if (this.entityOrProperty instanceof Function)\r\n            return this.connection.getMetadata(this.entityOrProperty);\r\n\r\n        // entityOrProperty is relation, e.g. \"post.category\"\r\n        if (this.relation)\r\n            return this.relation.inverseEntityMetadata;\r\n\r\n        if (typeof this.entityOrProperty === \"string\") { // entityOrProperty is a custom table\r\n\r\n            // first try to find entity with such name, this is needed when entity does not have a target class,\r\n            // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)\r\n            const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);\r\n            if (metadata)\r\n                return metadata;\r\n\r\n            // check if we have entity with such table name, and use its metadata if found\r\n            return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Generates alias of junction table, whose ids we get.\r\n     */\r\n    get junctionAlias(): string {\r\n        if (!this.relation)\r\n            throw new Error(`Cannot get junction table for join without relation.`);\r\n\r\n        return this.relation.isOwning ? this.parentAlias + \"_\" + this.alias.name : this.alias.name + \"_\" + this.parentAlias;\r\n    }\r\n\r\n    get mapToPropertyParentAlias(): string|undefined {\r\n        if (!this.mapToProperty)\r\n            return undefined;\r\n\r\n        return this.mapToProperty!.split(\".\")[0];\r\n    }\r\n\r\n    get mapToPropertyPropertyName(): string|undefined {\r\n        if (!this.mapToProperty)\r\n            return undefined;\r\n\r\n        return this.mapToProperty!.split(\".\")[1];\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\r\nimport {QueryBuilder} from \"../QueryBuilder\";\r\n\r\nexport class RelationCountAttribute {\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias?: string;\r\n\r\n    /**\r\n     * Name of relation.\r\n     */\r\n    relationName: string;\r\n\r\n    /**\r\n     * Property + alias of the object where to joined data should be mapped.\r\n     */\r\n    mapToProperty: string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private expressionMap: QueryExpressionMap,\r\n                private relationCountAttribute?: Partial<RelationCountAttribute>) {\r\n        Object.assign(this, relationCountAttribute || {});\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    get joinInverseSideMetadata(): EntityMetadata {\r\n        return this.relation.inverseEntityMetadata;\r\n    }\r\n\r\n    /**\r\n     * Alias of the parent of this join.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get parentAlias(): string {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value must be a string representation of alias property`);\r\n\r\n        return this.relationName.split(\".\")[0];\r\n    }\r\n\r\n    /**\r\n     * Relation property name of the parent.\r\n     * This is used to understand what is joined.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relationProperty(): string|undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value is a string representation of alias property`);\r\n\r\n        return this.relationName.split(\".\")[1];\r\n    }\r\n\r\n    get junctionAlias(): string {\r\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\r\n        return parentAlias + \"_\" + relationProperty + \"_relation_count\";\r\n    }\r\n\r\n    /**\r\n     * Relation of the parent.\r\n     * This is used to understand what is joined.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relation(): RelationMetadata {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value is a string representation of alias property`);\r\n\r\n        const [parentAlias, propertyPath] = this.relationName.split(\".\");\r\n        const relationOwnerSelection = this.expressionMap.findAliasByName(parentAlias);\r\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Metadata of the joined entity.\r\n     * If table without entity was joined, then it will return undefined.\r\n     */\r\n    get metadata(): EntityMetadata {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value is a string representation of alias property`);\r\n\r\n        const parentAlias = this.relationName.split(\".\")[0];\r\n        const selection = this.expressionMap.findAliasByName(parentAlias);\r\n        return selection.metadata;\r\n    }\r\n\r\n    get mapToPropertyPropertyName(): string {\r\n        return this.mapToProperty!.split(\".\")[1];\r\n    }\r\n\r\n}\r\n","export interface SelectQuery {\r\n    selection: string;\r\n    aliasName?: string;\r\n}","import {Alias} from \"./Alias\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {JoinAttribute} from \"./JoinAttribute\";\r\nimport {RelationIdAttribute} from \"./relation-id/RelationIdAttribute\";\r\nimport {RelationCountAttribute} from \"./relation-count/RelationCountAttribute\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {SelectQuery} from \"./SelectQuery\";\r\n\r\n/**\r\n * Contains all properties of the QueryBuilder that needs to be build a final query.\r\n */\r\nexport class QueryExpressionMap {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Main alias is a main selection object selected by QueryBuilder.\r\n     */\r\n    mainAlias?: Alias;\r\n\r\n    /**\r\n     * All aliases (including main alias) used in the query.\r\n     */\r\n    aliases: Alias[] = [];\r\n\r\n    /**\r\n     * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\r\n     */\r\n    queryType: \"select\"|\"update\"|\"delete\" = \"select\";\r\n\r\n    /**\r\n     * Data needs to be SELECT-ed.\r\n     */\r\n    selects: SelectQuery[] = [];\r\n\r\n    /**\r\n     * If update query was used, it needs \"update set\" - properties which will be updated by this query.\r\n     */\r\n    updateSet?: ObjectLiteral;\r\n\r\n    /**\r\n     * JOIN queries.\r\n     */\r\n    joinAttributes: JoinAttribute[] = [];\r\n\r\n    /**\r\n     * RelationId queries.\r\n     */\r\n    relationIdAttributes: RelationIdAttribute[] = [];\r\n\r\n    /**\r\n     * Relation count queries.\r\n     */\r\n    relationCountAttributes: RelationCountAttribute[] = [];\r\n\r\n    /**\r\n     * WHERE queries.\r\n     */\r\n    wheres: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\r\n\r\n    /**\r\n     * HAVING queries.\r\n     */\r\n    havings: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\r\n\r\n    /**\r\n     * ORDER BY queries.\r\n     */\r\n    orderBys: OrderByCondition = {};\r\n\r\n    /**\r\n     * GROUP BY queries.\r\n     */\r\n    groupBys: string[] = [];\r\n\r\n    /**\r\n     * LIMIT query.\r\n     */\r\n    limit?: number;\r\n\r\n    /**\r\n     * OFFSET query.\r\n     */\r\n    offset?: number;\r\n\r\n    /**\r\n     * Number of rows to skip of result using pagination.\r\n     */\r\n    skip?: number;\r\n\r\n    /**\r\n     * Number of rows to take using pagination.\r\n     */\r\n    take?: number;\r\n\r\n    /**\r\n     * Locking mode.\r\n     */\r\n    lockMode?: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\";\r\n\r\n    /**\r\n     * Current version of the entity, used for locking.\r\n     */\r\n    lockVersion?: number|Date;\r\n\r\n    /**\r\n     * Parameters used to be escaped in final query.\r\n     */\r\n    parameters: ObjectLiteral = {};\r\n\r\n    /**\r\n     * Indicates if alias, table names and column names will be ecaped by driver, or not.\r\n     *\r\n     * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\r\n     */\r\n    disableEscaping: boolean = true;\r\n\r\n    /**\r\n     * todo: needs more information.\r\n     */\r\n    ignoreParentTablesJoins: boolean = false;\r\n\r\n    /**\r\n     * Indicates if virtual columns should be included in entity result.\r\n     *\r\n     * todo: what to do with it? is it properly used? what about persistence?\r\n     */\r\n    enableRelationIdValues: boolean = false;\r\n\r\n    /**\r\n     * Extra where condition appended to the end of original where conditions with AND keyword.\r\n     * Original condition will be wrapped into brackets.\r\n     */\r\n    extraAppendedAndWhereCondition: string = \"\";\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    createMainAlias(options: { name: string }): Alias;\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    createMainAlias(options: { name: string, metadata: EntityMetadata }): Alias;\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    createMainAlias(options: { name?: string, target: Function|string }): Alias;\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    createMainAlias(options: { name?: string, tableName: string }): Alias;\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    createMainAlias(options: { name?: string, target?: Function|string, tableName?: string, metadata?: EntityMetadata }): Alias {\r\n        const alias = this.createAlias(options as any);\r\n\r\n        // if main alias is already set then remove it from the array\r\n        if (this.mainAlias)\r\n            this.aliases.splice(this.aliases.indexOf(this.mainAlias));\r\n\r\n        // set new main alias\r\n        this.mainAlias = alias;\r\n\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { name: string }): Alias;\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { name: string, metadata: EntityMetadata }): Alias;\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { name?: string, target: Function|string }): Alias;\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { name?: string, tableName: string }): Alias;\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { name?: string, target?: Function|string, tableName?: string, metadata?: EntityMetadata }): Alias {\r\n\r\n        let aliasName = options.name;\r\n        if (!aliasName && options.tableName)\r\n            aliasName = options.tableName;\r\n        if (!aliasName && options.target instanceof Function)\r\n            aliasName = options.target.name;\r\n        if (!aliasName && typeof options.target === \"string\")\r\n            aliasName = options.target;\r\n\r\n        const alias = new Alias();\r\n        if (aliasName)\r\n            alias.name = aliasName;\r\n        if (options.metadata)\r\n            alias.metadata = options.metadata;\r\n        if (options.target && !alias.hasMetadata)\r\n            alias.metadata = this.connection.getMetadata(options.target);\r\n        if (options.tableName)\r\n            alias.tableName = options.tableName;\r\n\r\n        this.aliases.push(alias);\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * Finds alias with the given name.\r\n     * If alias was not found it throw an exception.\r\n     */\r\n    findAliasByName(aliasName: string): Alias {\r\n        const alias = this.aliases.find(alias => alias.name === aliasName);\r\n        if (!alias)\r\n            throw new Error(`\"${aliasName}\" alias was not found. Maybe you forgot to join it?`);\r\n\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * Copies all properties of the current QueryExpressionMap into a new one.\r\n     * Useful when QueryBuilder needs to create a copy of itself.\r\n     */\r\n    clone(): QueryExpressionMap {\r\n        const map = new QueryExpressionMap(this.connection);\r\n        map.queryType = this.queryType;\r\n        map.selects = this.selects.map(select => select);\r\n        this.aliases.forEach(alias => map.aliases.push(new Alias(alias)));\r\n        map.mainAlias = this.mainAlias;\r\n        map.updateSet = this.updateSet;\r\n        map.joinAttributes = this.joinAttributes.map(join => new JoinAttribute(this.connection, this, join));\r\n        map.relationIdAttributes = this.relationIdAttributes.map(relationId => new RelationIdAttribute(this, relationId));\r\n        map.relationCountAttributes = this.relationCountAttributes.map(relationCount => new RelationCountAttribute(this, relationCount));\r\n        map.wheres = this.wheres.map(where => ({ ...where }));\r\n        map.havings = this.havings.map(having => ({ ...having }));\r\n        map.orderBys = Object.assign({}, this.orderBys);\r\n        map.groupBys = this.groupBys.map(groupBy => groupBy);\r\n        map.limit = this.limit;\r\n        map.offset = this.offset;\r\n        map.skip = this.skip;\r\n        map.take = this.take;\r\n        map.lockMode = this.lockMode;\r\n        map.lockVersion = this.lockVersion;\r\n        map.parameters = Object.assign({}, this.parameters);\r\n        map.disableEscaping = this.disableEscaping;\r\n        map.ignoreParentTablesJoins = this.ignoreParentTablesJoins;\r\n        map.enableRelationIdValues = this.enableRelationIdValues;\r\n        return map;\r\n    }\r\n\r\n}","import {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {QueryBuilder} from \"../QueryBuilder\";\r\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\r\n\r\n/**\r\n * Stores all join relation id attributes which will be used to build a JOIN query.\r\n */\r\nexport class RelationIdAttribute {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias?: string;\r\n\r\n    /**\r\n     * Name of relation.\r\n     */\r\n    relationName: string;\r\n\r\n    /**\r\n     * Property + alias of the object where to joined data should be mapped.\r\n     */\r\n    mapToProperty: string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>;\r\n\r\n    /**\r\n     * Indicates if relation id should NOT be loaded as id map.\r\n     */\r\n    disableMixedMap = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private queryExpressionMap: QueryExpressionMap,\r\n                        relationIdAttribute?: Partial<RelationIdAttribute>) {\r\n        Object.assign(this, relationIdAttribute || {});\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    get joinInverseSideMetadata(): EntityMetadata {\r\n        return this.relation.inverseEntityMetadata;\r\n    }\r\n\r\n    /**\r\n     * Alias of the parent of this join.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get parentAlias(): string {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value must be a string representation of alias property`);\r\n\r\n        return this.relationName.substr(0, this.relationName.indexOf(\".\"));\r\n    }\r\n\r\n    /**\r\n     * Relation property name of the parent.\r\n     * This is used to understand what is joined.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relationPropertyPath(): string {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value must be a string representation of alias property`);\r\n\r\n        return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\r\n    }\r\n\r\n    /**\r\n     * Relation of the parent.\r\n     * This is used to understand what is joined.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relation(): RelationMetadata {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value must be a string representation of alias property`);\r\n\r\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\r\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Generates alias of junction table, whose ids we get.\r\n     */\r\n    get junctionAlias(): string {\r\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\r\n        return parentAlias + \"_\" + relationProperty + \"_relation_id\";\r\n    }\r\n\r\n    /**\r\n     * Metadata of the joined entity.\r\n     * If extra condition without entity was joined, then it will return undefined.\r\n     */\r\n    get junctionMetadata(): EntityMetadata {\r\n        return this.relation.junctionEntityMetadata!;\r\n    }\r\n\r\n    get mapToPropertyParentAlias(): string {\r\n        return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\r\n    }\r\n\r\n    get mapToPropertyPropertyPath(): string {\r\n        return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\r\n    }\r\n\r\n}","import {RelationIdAttribute} from \"./RelationIdAttribute\";\r\n\r\nexport interface RelationIdLoadResult {\r\n    relationIdAttribute: RelationIdAttribute;\r\n    results: any[];\r\n}","import {RelationCountAttribute} from \"./RelationCountAttribute\";\r\n\r\nexport interface RelationCountLoadResult {\r\n    relationCountAttribute: RelationCountAttribute;\r\n    results: { cnt: any, parentId: any }[];\r\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\nexport class OrmUtils {\r\n\r\n    static groupBy<T, R>(array: T[], propertyCallback: (item: T) => R): { id: R, items: T[] }[] {\r\n        return array.reduce((groupedArray, value) => {\r\n            const key = propertyCallback(value);\r\n            let grouped = groupedArray.find(i => i.id === key);\r\n            if (!grouped) {\r\n                grouped = { id: key, items: [] };\r\n                groupedArray.push(grouped);\r\n            }\r\n            grouped.items.push(value);\r\n            return groupedArray;\r\n        }, [] as Array<{ id: R, items: T[] }>);\r\n    }\r\n\r\n    static isObject(item: any) {\r\n        return (item && typeof item === \"object\" && !Array.isArray(item));\r\n    }\r\n\r\n    /**\r\n     * Deep Object.assign.\r\n     *\r\n     * @see http://stackoverflow.com/a/34749873\r\n     */\r\n    static mergeDeep(target: any, ...sources: any[]): any {\r\n        if (!sources.length) return target;\r\n        const source = sources.shift();\r\n\r\n        if (this.isObject(target) && this.isObject(source)) {\r\n            for (const key in source) {\r\n                if (this.isObject(source[key])) {\r\n                    if (!target[key]) Object.assign(target, { [key]: {} });\r\n                    this.mergeDeep(target[key], source[key]);\r\n                } else {\r\n                    Object.assign(target, { [key]: source[key] });\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.mergeDeep(target, ...sources);\r\n    }\r\n\r\n    /**\r\n     * Deep compare objects.\r\n     *\r\n     * @see http://stackoverflow.com/a/1144249\r\n     */\r\n    static deepCompare(...args: any[]) {\r\n        let i: any, l: any, leftChain: any, rightChain: any;\r\n\r\n        function compare2Objects(x: any, y: any) {\r\n            let p;\r\n\r\n            // remember that NaN === NaN returns false\r\n            // and isNaN(undefined) returns true\r\n            if (isNaN(x) && isNaN(y) && typeof x === \"number\" && typeof y === \"number\")\r\n                return true;\r\n\r\n            // Compare primitives and functions.\r\n            // Check if both arguments link to the same object.\r\n            // Especially useful on the step where we compare prototypes\r\n            if (x === y)\r\n                return true;\r\n\r\n            if (x.equals instanceof Function && x.equals(y))\r\n                return true;\r\n\r\n            // Works in case when functions are created in constructor.\r\n            // Comparing dates is a common scenario. Another built-ins?\r\n            // We can even handle functions passed across iframes\r\n            if ((typeof x === \"function\" && typeof y === \"function\") ||\r\n                (x instanceof Date && y instanceof Date) ||\r\n                (x instanceof RegExp && y instanceof RegExp) ||\r\n                (x instanceof String && y instanceof String) ||\r\n                (x instanceof Number && y instanceof Number))\r\n                return x.toString() === y.toString();\r\n\r\n            // At last checking prototypes as good as we can\r\n            if (!(x instanceof Object && y instanceof Object))\r\n                return false;\r\n\r\n            if (x.isPrototypeOf(y) || y.isPrototypeOf(x))\r\n                return false;\r\n\r\n            if (x.constructor !== y.constructor)\r\n                return false;\r\n\r\n            if (x.prototype !== y.prototype)\r\n                return false;\r\n\r\n            // Check for infinitive linking loops\r\n            if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1)\r\n                return false;\r\n\r\n            // Quick checking of one object being a subset of another.\r\n            // todo: cache the structure of arguments[0] for performance\r\n            for (p in y) {\r\n                if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\r\n                    return false;\r\n                }\r\n                else if (typeof y[p] !== typeof x[p]) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            for (p in x) {\r\n                if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\r\n                    return false;\r\n                }\r\n                else if (typeof y[p] !== typeof x[p]) {\r\n                    return false;\r\n                }\r\n\r\n                switch (typeof (x[p])) {\r\n                    case \"object\":\r\n                    case \"function\":\r\n\r\n                        leftChain.push(x);\r\n                        rightChain.push(y);\r\n\r\n                        if (!compare2Objects (x[p], y[p])) {\r\n                            return false;\r\n                        }\r\n\r\n                        leftChain.pop();\r\n                        rightChain.pop();\r\n                        break;\r\n\r\n                    default:\r\n                        if (x[p] !== y[p]) {\r\n                            return false;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        if (arguments.length < 1) {\r\n            return true; // Die silently? Don't know how to handle such case, please help...\r\n            // throw \"Need two or more arguments to compare\";\r\n        }\r\n\r\n        for (i = 1, l = arguments.length; i < l; i++) {\r\n\r\n            leftChain = []; // Todo: this can be cached\r\n            rightChain = [];\r\n\r\n            if (!compare2Objects(arguments[0], arguments[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transforms given value into boolean value.\r\n     */\r\n    static toBoolean(value: any): boolean {\r\n        if (typeof value === \"boolean\")\r\n            return value;\r\n\r\n        if (typeof value === \"string\")\r\n            return value === \"true\" || value === \"1\";\r\n\r\n        if (typeof value === \"number\")\r\n            return value > 0;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Composes an object from the given array of keys and values.\r\n     */\r\n    static zipObject(keys: any[], values: any[]): ObjectLiteral {\r\n        return keys.reduce((object, column, index) => {\r\n            object[column] = values[index];\r\n            return object;\r\n        }, {} as ObjectLiteral);\r\n    }\r\n\r\n}","import {Driver} from \"../../driver/Driver\";\r\nimport {RelationIdLoadResult} from \"../relation-id/RelationIdLoadResult\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {Alias} from \"../Alias\";\r\nimport {JoinAttribute} from \"../JoinAttribute\";\r\nimport {RelationCountLoadResult} from \"../relation-count/RelationCountLoadResult\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\n\r\n/**\r\n * Transforms raw sql results returned from the database into entity object.\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class RawSqlResultsToEntityTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected driver: Driver,\r\n                protected joinAttributes: JoinAttribute[],\r\n                protected rawRelationIdResults: RelationIdLoadResult[],\r\n                protected rawRelationCountResults: RelationCountLoadResult[]) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\r\n     * we need to group our result and we must have some unique id (primary key in our case)\r\n     */\r\n    transform(rawResults: any[], alias: Alias): any[] {\r\n        return this.group(rawResults, alias)\r\n            .map(group => this.transformRawResultsGroup(group, alias))\r\n            .filter(res => !!res);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Groups given raw results by ids of given alias.\r\n     */\r\n    protected group(rawResults: any[], alias: Alias): any[][] {\r\n        const groupedResults: { id: any, items: any[] }[] = [];\r\n        rawResults.forEach(rawResult => {\r\n            const id = alias.metadata.primaryColumns.map(column => rawResult[alias.name + \"_\" + column.databaseName]).join(\"_\"); // todo: check partial\r\n            if (!id) return;\r\n\r\n            let group = groupedResults.find(groupedResult => groupedResult.id === id);\r\n            if (!group) {\r\n                group = { id: id, items: [] };\r\n                groupedResults.push(group);\r\n            }\r\n\r\n            group.items.push(rawResult);\r\n        });\r\n        return groupedResults.map(group => group.items);\r\n    }\r\n\r\n    /**\r\n     * Transforms set of data results into single entity.\r\n     */\r\n    protected transformRawResultsGroup(rawResults: any[], alias: Alias): ObjectLiteral|undefined {\r\n        let hasColumns = false, hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false, hasRelations = false, hasRelationIds = false, hasRelationCounts = false;\r\n        let entity: any = alias.metadata.create();\r\n\r\n        if (alias.metadata.discriminatorColumn) {\r\n            const discriminatorValues = rawResults.map(result => result[alias.name + \"_\" + alias.metadata.discriminatorColumn!.databaseName]);\r\n            const metadata = alias.metadata.childEntityMetadatas.find(childEntityMetadata => {\r\n                return !!discriminatorValues.find(value => value === childEntityMetadata.discriminatorValue);\r\n            });\r\n            if (metadata)\r\n                entity = metadata.create();\r\n        }\r\n\r\n        // get value from columns selections and put them into newly created entity\r\n        hasColumns = this.transformColumns(rawResults, alias, entity, alias.metadata.columns);\r\n\r\n        // add columns tables metadata\r\n        if (alias.metadata.parentEntityMetadata)\r\n            hasParentColumns = this.transformColumns(rawResults, alias, entity, alias.metadata.parentEntityMetadata.columns);\r\n\r\n        hasRelations = this.transformJoins(rawResults, entity, alias);\r\n        hasRelationIds = this.transformRelationIds(rawResults, alias, entity);\r\n        hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);\r\n\r\n        return (hasColumns || hasEmbeddedColumns || hasParentColumns || hasParentEmbeddedColumns || hasRelations || hasRelationIds || hasRelationCounts) ? entity : undefined;\r\n    }\r\n\r\n    // get value from columns selections and put them into object\r\n    protected transformColumns(rawResults: any[], alias: Alias, entity: ObjectLiteral, columns: ColumnMetadata[]): boolean {\r\n        let hasData = false;\r\n        columns.forEach(column => {\r\n            const value = rawResults[0][alias.name + \"_\" + column.databaseName];\r\n            if (value === undefined || value === null || column.isVirtual || column.isParentId || column.isDiscriminator)\r\n                return;\r\n\r\n            column.setEntityValue(entity, this.driver.prepareHydratedValue(value, column));\r\n            hasData = true;\r\n        });\r\n        return hasData;\r\n    }\r\n\r\n    /**\r\n     * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity,l\r\n     */\r\n    protected transformJoins(rawResults: any[], entity: ObjectLiteral, alias: Alias) {\r\n        let hasData = false;\r\n        let discriminatorValue: string = \"\";\r\n\r\n        if (alias.metadata.discriminatorColumn)\r\n            discriminatorValue = rawResults[0][alias.name + \"_\" + alias.metadata.discriminatorColumn!.databaseName];\r\n\r\n        this.joinAttributes.forEach(join => {\r\n\r\n            // skip joins without metadata\r\n            if (!join.metadata)\r\n                return;\r\n\r\n            // this check need to avoid setting properties than not belong to entity when single table inheritance used.\r\n            const metadata = alias.metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);\r\n            if (metadata && join.relation && metadata.target !== join.relation.target)\r\n                return;\r\n\r\n            // some checks to make sure this join is for current alias\r\n            if (join.mapToProperty) {\r\n                if (join.mapToPropertyParentAlias !== alias.name)\r\n                    return;\r\n            } else {\r\n                if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation!.propertyPath)\r\n                    return;\r\n            }\r\n\r\n            // transform joined data into entities\r\n            const mappedEntities = this.transform(rawResults, join.alias);\r\n            const result = !join.isMany ? mappedEntities[0] : mappedEntities;\r\n            if (!result) // if nothing was joined then simply return\r\n                return;\r\n\r\n            // if join was mapped to some property then save result to that property\r\n            if (join.mapToPropertyPropertyName) {\r\n                entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds\r\n\r\n            } else { // otherwise set to relation\r\n                // console.log(result);\r\n                join.relation!.setEntityValue(entity, result);\r\n            }\r\n\r\n            hasData = true;\r\n        });\r\n        return hasData;\r\n    }\r\n\r\n    protected transformRelationIds(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral): boolean {\r\n        let hasData = false;\r\n        this.rawRelationIdResults.forEach(rawRelationIdResult => {\r\n            if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name)\r\n                return;\r\n\r\n            const relation = rawRelationIdResult.relationIdAttribute.relation;\r\n            const valueMap = this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);\r\n            if (valueMap === undefined || valueMap === null)\r\n                return;\r\n\r\n            const idMaps = rawRelationIdResult.results.map(result => {\r\n                const entityPrimaryIds = this.extractEntityPrimaryIds(relation, result);\r\n                if (!alias.metadata.compareIds(entityPrimaryIds, valueMap))\r\n                    return;\r\n\r\n                let columns: ColumnMetadata[];\r\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n                    columns = relation.joinColumns.map(joinColumn => joinColumn);\r\n                } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n                    columns = relation.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\r\n                } else { // ManyToMany\r\n                    if (relation.isOwning) {\r\n                        columns = relation.inverseJoinColumns.map(joinColumn => joinColumn);\r\n                    } else {\r\n                        columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\r\n                    }\r\n                }\r\n\r\n                // const idMapColumns = (relation.isOneToMany || relation.isOneToOneNotOwner) ? columns : columns.map(column => column.referencedColumn!);\r\n                // const idMap = idMapColumns.reduce((idMap, column) => {\r\n                //     return OrmUtils.mergeDeep(idMap, column.createValueMap(result[column.databaseName]));\r\n                // }, {} as ObjectLiteral); // need to create reusable function for this process\r\n\r\n                const idMap = columns.reduce((idMap, column) => {\r\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n                        return OrmUtils.mergeDeep(idMap, column.createValueMap(result[column.databaseName]));\r\n                    } else {\r\n                        return OrmUtils.mergeDeep(idMap, column.referencedColumn!.createValueMap(result[column.databaseName]));\r\n                    }\r\n                }, {} as ObjectLiteral);\r\n\r\n                if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {\r\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n                        return columns[0].getEntityValue(idMap);\r\n                    } else {\r\n                        return columns[0].referencedColumn!.getEntityValue(idMap);\r\n                    }\r\n                }\r\n                return idMap;\r\n            }).filter(result => result);\r\n\r\n            const properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(\".\");\r\n            const mapToProperty = (properties: string[], map: ObjectLiteral, value: any): any => {\r\n\r\n                const property = properties.shift();\r\n                if (property && properties.length === 0) {\r\n                    map[property] = value;\r\n                    return map;\r\n                } else if (property && properties.length > 0) {\r\n                    mapToProperty(properties, map[property], value);\r\n                } else {\r\n                    return map;\r\n                }\r\n            };\r\n            if (relation.isOneToOne || relation.isManyToOne) {\r\n                mapToProperty(properties, entity, idMaps[0]);\r\n            } else {\r\n                mapToProperty(properties, entity, idMaps);\r\n            }\r\n            hasData = true;\r\n        });\r\n\r\n        return hasData;\r\n    }\r\n\r\n    protected transformRelationCounts(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral): boolean {\r\n        let hasData = false;\r\n        this.rawRelationCountResults\r\n            .filter(rawRelationCountResult => rawRelationCountResult.relationCountAttribute.parentAlias === alias.name)\r\n            .forEach(rawRelationCountResult => {\r\n                const relation = rawRelationCountResult.relationCountAttribute.relation;\r\n                let referenceColumnName: string;\r\n\r\n                if (relation.isOneToMany) {\r\n                    referenceColumnName = relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;  // todo: fix joinColumns[0]\r\n\r\n                } else {\r\n                    referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn!.databaseName : relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;\r\n                }\r\n\r\n                const referenceColumnValue = rawSqlResults[0][alias.name + \"_\" + referenceColumnName]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work\r\n                if (referenceColumnValue !== undefined && referenceColumnValue !== null) {\r\n                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;\r\n                    rawRelationCountResult.results\r\n                        .filter(result => result[\"parentId\"] === referenceColumnValue)\r\n                        .forEach(result => {\r\n                            entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result[\"cnt\"]);\r\n                            hasData = true;\r\n                        });\r\n                }\r\n            });\r\n\r\n        return hasData;\r\n    }\r\n\r\n    private createValueMapFromJoinColumns(relation: RelationMetadata, parentAlias: string, rawSqlResults: any[]): ObjectLiteral {\r\n        let columns: ColumnMetadata[];\r\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\r\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\r\n        } else {\r\n            if (relation.isOwning) {\r\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\r\n            } else {\r\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\r\n            }\r\n        }\r\n        return columns.reduce((valueMap, column) => {\r\n            rawSqlResults.forEach(rawSqlResult => {\r\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n                    valueMap[column.databaseName] = rawSqlResult[parentAlias + \"_\" + column.databaseName];\r\n                } else {\r\n                    valueMap[column.databaseName] =  rawSqlResult[parentAlias + \"_\" + column.referencedColumn!.databaseName];\r\n                }\r\n            });\r\n            return valueMap;\r\n        }, {} as ObjectLiteral);\r\n\r\n    }\r\n\r\n    private extractEntityPrimaryIds(relation: RelationMetadata, relationIdRawResult: any) {\r\n        let columns: ColumnMetadata[];\r\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\r\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\r\n        } else {\r\n            if (relation.isOwning) {\r\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\r\n            } else {\r\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\r\n            }\r\n        }\r\n        return columns.reduce((data, column) => {\r\n            data[column.databaseName] = relationIdRawResult[column.databaseName];\r\n            return data;\r\n        }, {} as ObjectLiteral);\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {SqlServerDriver} from \"./SqlServerDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single mysql database connection.\r\n */\r\nexport class SqlServerQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: SqlServerDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.beginTransaction();\r\n        try {\r\n            const allTablesSql = `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'`;\r\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\r\n            const tableNames = allTablesResults.map(result => result[\"TABLE_NAME\"]);\r\n            await Promise.all(tableNames.map(async tableName => {\r\n                const dropForeignKeySql = `SELECT 'ALTER TABLE ' +  OBJECT_SCHEMA_NAME(parent_object_id) + '.[' + OBJECT_NAME(parent_object_id) + '] DROP CONSTRAINT ' + name as query FROM sys.foreign_keys WHERE referenced_object_id = object_id('${tableName}')`;\r\n                const dropFkQueries: ObjectLiteral[] = await this.query(dropForeignKeySql);\r\n                return Promise.all(dropFkQueries.map(result => result[\"query\"]).map(dropQuery => {\r\n                    return this.query(dropQuery);\r\n                }));\r\n            }));\r\n            await Promise.all(tableNames.map(tableName => {\r\n                const dropTableSql = `DROP TABLE \"${tableName}\"`;\r\n                return this.query(dropTableSql);\r\n            }));\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n        }\r\n\r\n        // const selectDropsQuery = `SELECT 'DROP TABLE \"' + TABLE_NAME + '\"' as query FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';`;\r\n        // const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n        // const allQueries = [`EXEC sp_msforeachtable \"ALTER TABLE ? NOCHECK CONSTRAINT all\"`]\r\n        //     .concat(dropQueries.map(q => this.query(q[\"query\"])).join(\"; \"));\r\n        //\r\n        // return new Promise<void>((ok, fail) => {\r\n        //\r\n        //     const request = new this.driver.mssql.Request(this.isTransactionActive() ? this.databaseConnection.transaction : this.databaseConnection.connection);\r\n        //     request.multiple = true;\r\n        //     request.query(allQueries, (err: any, result: any) => {\r\n        //         if (err) {\r\n        //             this.logger.logFailedQuery(allQueries);\r\n        //             this.logger.logQueryError(err);\r\n        //             return fail(err);\r\n        //         }\r\n        //\r\n        //         ok();\r\n        //     });\r\n        // });\r\n\r\n        // const selectDropsQuery = `SELECT 'DROP TABLE \"' + TABLE_NAME + '\";' as query FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';`;\r\n        // const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n        // await this.query(`EXEC sp_msforeachtable \"ALTER TABLE ? NOCHECK CONSTRAINT all\"`);\r\n        // await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n        // await this.query(`EXEC sp_msforeachtable 'drop table [?]'`);\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            this.databaseConnection.isTransactionActive = true;\r\n            this.databaseConnection.transaction = this.databaseConnection.connection.transaction();\r\n            this.databaseConnection.transaction.begin((err: any) => {\r\n                if (err) {\r\n                    this.databaseConnection.isTransactionActive = false;\r\n                    return fail(err);\r\n                }\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            this.databaseConnection.transaction.commit((err: any) => {\r\n                if (err) return fail(err);\r\n                this.databaseConnection.isTransactionActive = false;\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            this.databaseConnection.transaction.rollback((err: any) => {\r\n                if (err) return fail(err);\r\n                this.databaseConnection.isTransactionActive = false;\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise((ok, fail) => {\r\n\r\n            this.logger.logQuery(query, parameters);\r\n            const request = new this.driver.mssql.Request(this.isTransactionActive() ? this.databaseConnection.transaction : this.databaseConnection.connection);\r\n            if (parameters && parameters.length) {\r\n                parameters.forEach((parameter, index) => {\r\n                    request.input(index, parameters![index]);\r\n                });\r\n            }\r\n            request.query(query, (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                }\r\n\r\n                ok(result);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map((key, index) => \"@\" + index).join(\",\");\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        const sql = columns.length > 0\r\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) ${ generatedColumn ? \"OUTPUT INSERTED.\" + generatedColumn.databaseName + \" \" : \"\" }VALUES (${values})`\r\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} ${ generatedColumn ? \"OUTPUT INSERTED.\" + generatedColumn.databaseName + \" \" : \"\" }DEFAULT VALUES `;\r\n\r\n        const result = await this.query(sql, parameters);\r\n        return generatedColumn ? result instanceof Array ? result[0][generatedColumn.databaseName] : result[generatedColumn.databaseName] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions, updateParams.length).join(\" AND \");\r\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n\r\n        await this.query(sql, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\r\n        const tablesSql          = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\r\n        const columnsSql         = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = '${this.dbName}'`;\r\n        const constraintsSql     = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages ` +\r\n`LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME ` +\r\n`WHERE columnUsages.TABLE_CATALOG = '${this.dbName}' AND tableConstraints.TABLE_CATALOG = '${this.dbName}'`;\r\n        const identityColumnsSql = `SELECT COLUMN_NAME, TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = '${this.dbName}' AND COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1;`;\r\n        const indicesSql         = `SELECT TABLE_NAME = t.name, INDEX_NAME = ind.name, IndexId = ind.index_id, ColumnId = ic.index_column_id, COLUMN_NAME = col.name, ind.*, ic.*, col.* ` +\r\n`FROM sys.indexes ind INNER JOIN sys.index_columns ic ON ind.object_id = ic.object_id and ind.index_id = ic.index_id INNER JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id ` +\r\n`INNER JOIN sys.tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 AND ind.is_unique = 0 AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0 ORDER BY t.name, ind.name, ind.index_id, ic.index_column_id`;\r\n        const [dbTables, dbColumns, dbConstraints, dbIdentityColumns, dbIndices]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(constraintsSql),\r\n            this.query(identityColumnsSql),\r\n            this.query(indicesSql),\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbColumn => {\r\n\r\n                    const isPrimary = !!dbConstraints.find(dbConstraint => {\r\n                        return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\r\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\r\n                    });\r\n                    const isGenerated = !!dbIdentityColumns.find(column => {\r\n                        return  column[\"TABLE_NAME\"] === tableSchema.name &&\r\n                                column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\r\n                    });\r\n                    const isUnique = !!dbConstraints.find(dbConstraint => {\r\n                        return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\r\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\r\n                    });\r\n\r\n                    const columnSchema = new ColumnSchema();\r\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\r\n                    columnSchema.type = dbColumn[\"DATA_TYPE\"].toLowerCase() + (dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] ? \"(\" + dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] + \")\" : \"\"); // todo: use normalize type?\r\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\r\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\r\n                    columnSchema.isPrimary = isPrimary;\r\n                    columnSchema.isGenerated = isGenerated;\r\n                    columnSchema.isUnique = isUnique;\r\n                    columnSchema.comment = \"\"; // todo: less priority, implement this later\r\n                    return columnSchema;\r\n                });\r\n\r\n            // create primary key schema\r\n            tableSchema.primaryKeys = dbConstraints\r\n                .filter(dbConstraint => {\r\n                    return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\r\n                })\r\n                .map(keyColumnUsage => {\r\n                    return new PrimaryKeySchema(keyColumnUsage[\"CONSTRAINT_NAME\"], keyColumnUsage[\"COLUMN_NAME\"]);\r\n                });\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            tableSchema.foreignKeys = dbConstraints\r\n                .filter(dbConstraint => {\r\n                    return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"FOREIGN KEY\";\r\n                })\r\n                .map(dbConstraint => new ForeignKeySchema(dbConstraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create index schemas from the loaded indices\r\n            tableSchema.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return  dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\r\n                            (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\r\n                            (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(dbIndexName => {\r\n                    const columnNames = dbIndices\r\n                        .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName)\r\n                        .map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\r\n\r\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness? */);\r\n                });\r\n\r\n            return tableSchema;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        sql += table.columns\r\n            .filter(column => column.isUnique)\r\n            .map(column => `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`)\r\n            .join(\" \");\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        // to update an identy column we have to drop column and recreate it again\r\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\r\n            await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`);\r\n            await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn)}`);\r\n        }\r\n\r\n        const sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN ${this.buildCreateColumnSql(newColumn, true)}`; // todo: CHANGE OR MODIFY COLUMN ????\r\n        await this.query(sql);\r\n\r\n        if (newColumn.isUnique !== oldColumn.isUnique) {\r\n            if (newColumn.isUnique === true) {\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"uk_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\r\n\r\n            } else if (newColumn.isUnique === false) {\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"uk_${newColumn.name}\"`);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\r\n        return this.query(`ALTER TABLE \"${tableName}\" DROP COLUMN \"${columnName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const oldPrimaryKeySql = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages\r\nLEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME AND tableConstraints.CONSTRAINT_TYPE = 'PRIMARY KEY'\r\nWHERE columnUsages.TABLE_CATALOG = '${this.dbName}' AND tableConstraints.TABLE_CATALOG = '${this.dbName}'`;\r\n        const oldPrimaryKey = await this.query(oldPrimaryKeySql);\r\n        if (oldPrimaryKey.length > 0)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${oldPrimaryKey[0][\"CONSTRAINT_NAME\"]}\"`);\r\n\r\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => `\"` + primaryKey.columnName + `\"`);\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\r\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\r\n            `FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `DROP INDEX \"${tableName}\".\"${indexName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                if (typeOptions.fixedLength) {\r\n                    return \"nchar(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                } else {\r\n                    return \"nvarchar(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                }\r\n            case \"text\":\r\n                return \"ntext\";\r\n            case \"boolean\":\r\n                return \"bit\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"int\";\r\n            case \"smallint\":\r\n                return \"smallint\";\r\n            case \"bigint\":\r\n                return \"bigint\";\r\n            case \"float\":\r\n                return \"float\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"real\";\r\n            case \"decimal\":\r\n                // if (column.precision && column.scale) {\r\n                //     return `decimal(${column.precision},${column.scale})`;\r\n                //\r\n                // } else if (column.scale) {\r\n                //     return `decimal(${column.scale})`;\r\n                //\r\n                // } else if (column.precision) {\r\n                //     return `decimal(${column.precision})`;\r\n                //\r\n                // } else {\r\n                    return \"decimal\";\r\n                // }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                return \"time\";\r\n            case \"datetime\":\r\n                return \"datetime\";\r\n            case \"json\":\r\n                return \"text\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"nvarchar(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"SQLServer\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startFrom: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => {\r\n            return this.driver.escapeColumnName(key) + \"=@\" + (startFrom + index);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema, skipIdentity: boolean = false) {\r\n        let c = `\"${column.name}\" ${column.type}`;\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isGenerated === true && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" IDENTITY(1,1)\";\r\n        // if (column.isPrimary === true && !skipPrimary)\r\n        //     c += \" PRIMARY KEY\";\r\n        if (column.comment)\r\n            c += \" COMMENT '\" + column.comment + \"'\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"1\" : \"0\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n        return c;\r\n    }\r\n\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {SqlServerQueryRunner} from \"./SqlServerQueryRunner\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\nimport {LazyRelationsWrapper} from \"../../lazy-loading/LazyRelationsWrapper\";\r\n\r\n/**\r\n * Organizes communication with SQL Server DBMS.\r\n */\r\nexport class SqlServerDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Used to wrap lazy relations to be able to perform lazy loadings.\r\n     */\r\n    lazyRelationsWrapper: LazyRelationsWrapper;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    /**\r\n     * SQL Server library.\r\n     */\r\n    public mssql: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection to mssql database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * SQL Server pool.\r\n     */\r\n    protected connection: any;\r\n\r\n    /**\r\n     * Pool of database connections.\r\n     */\r\n    protected databaseConnectionPool: DatabaseConnection[] = [];\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, mssql?: any) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(options);\r\n        this.logger = logger;\r\n        this.mssql = mssql;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.host)\r\n            throw new DriverOptionNotSetError(\"host\");\r\n        if (!this.options.username)\r\n            throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // if mssql package instance was not set explicitly then try to load it\r\n        if (!mssql)\r\n            this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            server: this.options.host,\r\n            user: this.options.username,\r\n            password: this.options.password,\r\n            database: this.options.database,\r\n            port: this.options.port\r\n        }, this.options.extra || {});\r\n\r\n        // set default useUTC option if it hasn't been set\r\n        if (!options.options) options.options = { useUTC: false };\r\n        else if (!options.options.useUTC) options.options.useUTC = false; \r\n\r\n        // pooling is enabled either when its set explicitly to true,\r\n        // either when its not defined at all (e.g. enabled by default)\r\n        return new Promise<void>((ok, fail) => {\r\n            const connection = new this.mssql.Connection(options).connect((err: any) => {\r\n                if (err) return fail(err);\r\n                this.connection = connection;\r\n                if (this.options.usePool === false) {\r\n                    this.databaseConnection = {\r\n                        id: 1,\r\n                        connection: new this.mssql.Request(connection),\r\n                        isTransactionActive: false\r\n                    };\r\n                }\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        if (!this.connection)\r\n            throw new ConnectionIsNotSetError(\"mssql\");\r\n\r\n        this.connection.close();\r\n        this.connection = undefined;\r\n        this.databaseConnection = undefined;\r\n        this.databaseConnectionPool = [];\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.connection)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mssql\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new SqlServerQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.mssql,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\r\n            pool: this.connection\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            const value = parameters[key.substr(1)];\r\n            if (value instanceof Array) {\r\n                return value.map((v: any) => {\r\n                    escapedParameters.push(v);\r\n                    return \"@\" + (escapedParameters.length - 1);\r\n                }).join(\", \");\r\n            } else {\r\n                escapedParameters.push(value);\r\n            }\r\n            return \"@\" + (escapedParameters.length - 1);\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return `\"${columnName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return `\"${aliasName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return `\"${tableName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n\r\n        if (!this.connection)\r\n            throw new ConnectionIsNotSetError(\"mssql\");\r\n\r\n        return new Promise((ok, fail) => {\r\n            if (this.databaseConnection)\r\n                return ok(this.databaseConnection);\r\n            // let dbConnection: DatabaseConnection|undefined;\r\n            // const connection = this.pool.connect((err: any) => {\r\n            //     if (err)\r\n            //         return fail(err);\r\n            //     ok(dbConnection);\r\n            // });\r\n            //\r\n            // console.log(connection);\r\n            // console.log(this.pool);\r\n            // console.log(this.pool === connection);\r\n\r\n            // const request = new this.mssql.Request(this.connection);\r\n            // console.log(\"request:\", request);\r\n            // let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\r\n            // if (!dbConnection) {\r\n            let dbConnection: DatabaseConnection = {\r\n                id: this.databaseConnectionPool.length,\r\n                connection: this.connection,\r\n                isTransactionActive: false\r\n            };\r\n            dbConnection.releaseCallback = () => {\r\n                // }\r\n                // if (this.connection && dbConnection) {\r\n                // request.release();\r\n                this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\r\n                return Promise.resolve();\r\n            };\r\n            this.databaseConnectionPool.push(dbConnection);\r\n            ok(dbConnection);\r\n            // }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.mssql = PlatformTools.load(\"mssql\");\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"SQL Server\", \"mssql\");\r\n        }\r\n    }\r\n\r\n}\r\n","import {QueryRunner} from \"./QueryRunner\";\r\nimport {Driver} from \"../driver/Driver\";\r\n\r\n/**\r\n * Represents functionality to provide a new query runners, and release old ones.\r\n * Also can provide always same query runner.\r\n */\r\nexport class QueryRunnerProvider {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected reusableQueryRunner: QueryRunner;\r\n\r\n    protected reusableQueryRunnerPromise: Promise<QueryRunner>;\r\n\r\n    /**\r\n     * Indicates if this entity manager is released.\r\n     * Entity manager can be released only if custom queryRunnerProvider is provided.\r\n     * Once entity manager is released, its repositories and some other methods can't be used anymore.\r\n     */\r\n    protected _isReleased: boolean;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected driver: Driver,\r\n                protected useSingleQueryRunner: boolean = false) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    get isReleased() {\r\n        return this._isReleased;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Provides a new query runner used to run repository queries.\r\n     * If use useSingleQueryRunner mode is enabled then reusable query runner will be provided instead.\r\n     */\r\n    provide(): Promise<QueryRunner> {\r\n        if (this.useSingleQueryRunner) {\r\n            if (!this.reusableQueryRunner) {\r\n                if (!this.reusableQueryRunnerPromise) {\r\n                    // we do this because this method can be created multiple times\r\n                    // this will lead to multiple query runner creations\r\n                    this.reusableQueryRunnerPromise = this.driver\r\n                        .createQueryRunner()\r\n                        .then(reusableQueryRunner => {\r\n                            this.reusableQueryRunner = reusableQueryRunner;\r\n                            return reusableQueryRunner;\r\n                        });\r\n                }\r\n                return this.reusableQueryRunnerPromise;\r\n            }\r\n            return Promise.resolve(this.reusableQueryRunner);\r\n        }\r\n        return this.driver.createQueryRunner();\r\n    }\r\n\r\n    /**\r\n     * Query runner release logic extracted into separated methods intently,\r\n     * to make possible to create a subclass with its own release query runner logic.\r\n     * Note: release only query runners that provided by a provide() method.\r\n     * This is important and by design.\r\n     */\r\n    async release(queryRunner: QueryRunner): Promise<void> {\r\n        if (queryRunner === this.reusableQueryRunner)\r\n            return;\r\n\r\n        return queryRunner.release();\r\n    }\r\n\r\n    /**\r\n     * Releases reused query runner.\r\n     */\r\n    async releaseReused(): Promise<void> {\r\n        this._isReleased = true;\r\n        if (this.reusableQueryRunner)\r\n            return this.reusableQueryRunner.release();\r\n    }\r\n\r\n}","/**\r\n * Thrown when a transaction is required for the current operation, but there is none open.\r\n */\r\nexport class PessimisticLockTransactionRequiredError extends Error {\r\n    name = \"PessimisticLockTransactionRequiredError\";\r\n\r\n    constructor() {\r\n        super();\r\n        Object.setPrototypeOf(this, PessimisticLockTransactionRequiredError.prototype);\r\n        this.message = `An open transaction is required for pessimistic lock.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown when an entity does not have no version and no update date column.\r\n */\r\nexport class NoVersionOrUpdateDateColumnError extends Error {\r\n    name = \"NoVersionOrUpdateDateColumnError\";\r\n\r\n    constructor(entity: string) {\r\n        super();\r\n        Object.setPrototypeOf(this, NoVersionOrUpdateDateColumnError.prototype);\r\n        this.message = `Entity ${entity} does not have version or update date columns.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown when a version check on an object that uses optimistic locking through a version field fails.\r\n */\r\nexport class OptimisticLockVersionMismatchError extends Error {\r\n    name = \"OptimisticLockVersionMismatchError\";\r\n\r\n    constructor(entity: string, expectedVersion: number|Date, actualVersion: number|Date) {\r\n        super();\r\n        Object.setPrototypeOf(this, OptimisticLockVersionMismatchError.prototype);\r\n        this.message = `The optimistic lock on entity ${entity} failed, version ${expectedVersion} was expected, but is actually ${actualVersion}.`;\r\n    }\r\n\r\n}\r\n","/**\r\n * Thrown when an optimistic lock cannot be used in query builder.\r\n */\r\nexport class OptimisticLockCanNotBeUsedError extends Error {\r\n    name = \"OptimisticLockCanNotBeUsedError\";\r\n\r\n    constructor() {\r\n        super();\r\n        Object.setPrototypeOf(this, OptimisticLockCanNotBeUsedError.prototype);\r\n        this.message = `The optimistic lock can be used only with getOne() method.`;\r\n    }\r\n\r\n}\r\n","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {PostgresDriver} from \"./PostgresDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single postgres database connection.\r\n */\r\nexport class PostgresQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    private schemaName: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: PostgresDriver,\r\n                protected logger: Logger) {\r\n        this.schemaName = driver.schemaName || \"public\";\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.beginTransaction();\r\n        try {\r\n            const selectDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || tablename || '\" CASCADE;' as query FROM pg_tables WHERE schemaname = '${this.schemaName}'`;\r\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.databaseConnection.isTransactionActive = true;\r\n        await this.query(\"START TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // console.log(\"query: \", query);\r\n        // console.log(\"parameters: \", parameters);\r\n        return new Promise<any[]>((ok, fail) => {\r\n            this.logger.logQuery(query, parameters);\r\n            this.databaseConnection.connection.query(query, parameters, (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    fail(err);\r\n                } else {\r\n                    ok(result.rows);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\r\n        const sql = columns.length > 0\r\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values}) ${ generatedColumn ? \" RETURNING \" + this.driver.escapeColumnName(generatedColumn.databaseName) : \"\" }`\r\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES ${ generatedColumn ? \" RETURNING \" + this.driver.escapeColumnName(generatedColumn.databaseName) : \"\" }`;\r\n        const parameters = keys.map(key => keyValues[key]);\r\n        const result: ObjectLiteral[] = await this.query(sql, parameters);\r\n        if (generatedColumn)\r\n            return result[0][generatedColumn.databaseName];\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\r\n        const query = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(query, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\r\n        const tablesSql      = `SELECT * FROM information_schema.tables WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name IN (${tableNamesString})`;\r\n        const columnsSql     = `SELECT * FROM information_schema.columns WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}'`;\r\n        const indicesSql     = `SELECT t.relname AS table_name, i.relname AS index_name, a.attname AS column_name  FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace ns\r\nWHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid\r\nAND a.attnum = ANY(ix.indkey) AND t.relkind = 'r' AND t.relname IN (${tableNamesString}) AND t.relnamespace = ns.OID AND ns.nspname ='${this.schemaName}' ORDER BY t.relname, i.relname`;\r\n        const foreignKeysSql = `SELECT table_name, constraint_name FROM information_schema.table_constraints WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND constraint_type = 'FOREIGN KEY'`;\r\n        const uniqueKeysSql  = `SELECT * FROM information_schema.table_constraints WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND constraint_type = 'UNIQUE'`;\r\n        const primaryKeysSql = `SELECT c.column_name, tc.table_name, tc.constraint_name FROM information_schema.table_constraints tc\r\nJOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)\r\nJOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name\r\nwhere constraint_type = 'PRIMARY KEY' AND c.table_schema = '${this.schemaName}' and tc.table_catalog = '${this.dbName}'`;\r\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys, dbUniqueKeys, primaryKeys]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(indicesSql),\r\n            this.query(foreignKeysSql),\r\n            this.query(uniqueKeysSql),\r\n            this.query(primaryKeysSql),\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return dbTables.map(dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"table_name\"]);\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"table_name\"] === tableSchema.name)\r\n                .map(dbColumn => {\r\n                    const columnType = dbColumn[\"data_type\"].toLowerCase() + (dbColumn[\"character_maximum_length\"] !== undefined && dbColumn[\"character_maximum_length\"] !== null ? (\"(\" + dbColumn[\"character_maximum_length\"] + \")\") : \"\");\r\n                    const isGenerated = dbColumn[\"column_default\"] === `nextval('${dbColumn[\"table_name\"]}_id_seq'::regclass)` \r\n                        || dbColumn[\"column_default\"] === `nextval('\"${dbColumn[\"table_name\"]}_id_seq\"'::regclass)` \r\n                        || /^uuid\\_generate\\_v\\d\\(\\)/.test(dbColumn[\"column_default\"]);\r\n\r\n                    const columnSchema = new ColumnSchema();\r\n                    columnSchema.name = dbColumn[\"column_name\"];\r\n                    columnSchema.type = columnType;\r\n                    columnSchema.default = dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined ? dbColumn[\"column_default\"] : undefined;\r\n                    columnSchema.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\r\n                    // columnSchema.isPrimary = dbColumn[\"column_key\"].indexOf(\"PRI\") !== -1;\r\n                    columnSchema.isGenerated = isGenerated;\r\n                    columnSchema.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\r\n                    columnSchema.isUnique = !!dbUniqueKeys.find(key => key[\"constraint_name\"] ===  `uk_${dbColumn[\"table_name\"]}_${dbColumn[\"column_name\"]}`);\r\n                    return columnSchema;\r\n                });\r\n\r\n            // create primary key schema\r\n            tableSchema.primaryKeys = primaryKeys\r\n                .filter(primaryKey => primaryKey[\"table_name\"] === tableSchema.name)\r\n                .map(primaryKey => new PrimaryKeySchema(primaryKey[\"constraint_name\"], primaryKey[\"column_name\"]));\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            tableSchema.foreignKeys = dbForeignKeys\r\n                .filter(dbForeignKey => dbForeignKey[\"table_name\"] === tableSchema.name)\r\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"constraint_name\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create unique key schemas from the loaded indices\r\n            /*tableSchema.uniqueKeys = dbUniqueKeys\r\n                .filter(dbUniqueKey => dbUniqueKey[\"table_name\"] === tableSchema.name)\r\n                .map(dbUniqueKey => {\r\n                    return new UniqueKeySchema(dbUniqueKey[\"TABLE_NAME\"], dbUniqueKey[\"CONSTRAINT_NAME\"], [/!* todo *!/]);\r\n                });*/\r\n\r\n            // create index schemas from the loaded indices\r\n            tableSchema.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return dbIndex[\"table_name\"] === tableSchema.name &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"index_name\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"index_name\"])) &&\r\n                        (!dbUniqueKeys.find(key => key[\"constraint_name\"] === dbIndex[\"index_name\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"index_name\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(dbIndexName => {\r\n                    const columnNames = dbIndices\r\n                        .filter(dbIndex => dbIndex[\"table_name\"] === tableSchema.name && dbIndex[\"index_name\"] === dbIndexName)\r\n                        .map(dbIndex => dbIndex[\"column_name\"]);\r\n\r\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\r\n                });\r\n\r\n            return tableSchema;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM information_schema.tables WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\r\n        await this.query(`CREATE SCHEMA IF NOT EXISTS \"${this.schemaName}\"`);\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        sql += table.columns\r\n            .filter(column => column.isUnique)\r\n            .map(column => `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`)\r\n            .join(\" \");\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM information_schema.columns WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name = '${tableName}' AND column_name = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column, false)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        if (oldColumn.type !== newColumn.type ||\r\n            oldColumn.name !== newColumn.name) {\r\n\r\n            let sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\"`;\r\n            if (oldColumn.type !== newColumn.type) {\r\n                sql += ` TYPE ${newColumn.type}`;\r\n            }\r\n            if (oldColumn.name !== newColumn.name) { // todo: make rename in a separate query too\r\n                sql += ` RENAME TO ` + newColumn.name;\r\n            }\r\n            await this.query(sql);\r\n        }\r\n\r\n        if (oldColumn.isNullable !== newColumn.isNullable) {\r\n            let sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\"`;\r\n            if (newColumn.isNullable) {\r\n                sql += ` DROP NOT NULL`;\r\n            } else {\r\n                sql += ` SET NOT NULL`;\r\n            }\r\n            await this.query(sql);\r\n        }\r\n\r\n        // update sequence generation\r\n        if (oldColumn.isGenerated !== newColumn.isGenerated) {\r\n            if (!oldColumn.isGenerated && newColumn.type !== \"uuid\") {\r\n                await this.query(`CREATE SEQUENCE \"${tableSchema.name}_id_seq\" OWNED BY \"${tableSchema.name}\".\"${oldColumn.name}\"`);\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT nextval('\"${tableSchema.name}_id_seq\"')`);\r\n            } else {\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\" DROP DEFAULT`);\r\n                await this.query(`DROP SEQUENCE \"${tableSchema.name}_id_seq\"`);\r\n            }\r\n        }\r\n\r\n        if (oldColumn.comment !== newColumn.comment) {\r\n            await this.query(`COMMENT ON COLUMN \"${tableSchema.name}\".\"${oldColumn.name}\" is '${newColumn.comment}'`);\r\n        }\r\n\r\n        if (oldColumn.isUnique !== newColumn.isUnique) {\r\n            if (newColumn.isUnique === true) {\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"uk_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\r\n\r\n            } else if (newColumn.isUnique === false) {\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"uk_${newColumn.name}\"`);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\r\n        return this.query(`ALTER TABLE \"${tableName}\" DROP \"${columnName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => `\"${primaryKey.columnName}\"`);\r\n        await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT IF EXISTS \"${dbTable.name}_pkey\"`);\r\n        await this.query(`DROP INDEX IF EXISTS \"${dbTable.name}_pkey\"`);\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\r\n            `FOREIGN KEY (\"${foreignKey.columnNames.join(\"\\\", \\\"\")}\") ` +\r\n            `REFERENCES \"${foreignKey.referencedTableName}\"(\"${foreignKey.referencedColumnNames.join(\"\\\", \\\"\")}\")`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string, isGenerated: boolean = false): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (isGenerated) {\r\n            await this.query(`ALTER SEQUENCE \"${tableName}_id_seq\" OWNED BY NONE`);\r\n        }\r\n\r\n        const sql = `DROP INDEX \"${indexName}\"`; // todo: make sure DROP INDEX should not be used here\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                if (typeOptions.fixedLength) {\r\n                    return \"character(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                } else {\r\n                    return \"character varying(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                }\r\n            case \"text\":\r\n                return \"text\";\r\n            case \"boolean\":\r\n                return \"boolean\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"integer\";\r\n            case \"smallint\":\r\n                return \"smallint\";\r\n            case \"bigint\":\r\n                return \"bigint\";\r\n            case \"float\":\r\n                return \"real\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"double precision\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                if (typeOptions.timezone) {\r\n                    return \"time with time zone\";\r\n                } else {\r\n                    return \"time without time zone\";\r\n                }\r\n            case \"datetime\":\r\n                if (typeOptions.timezone) {\r\n                    return \"timestamp with time zone\";\r\n                } else {\r\n                    return \"timestamp without time zone\";\r\n                }\r\n            case \"json\":\r\n                return \"json\";\r\n            case \"jsonb\":\r\n                return \"jsonb\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"character varying(\" + typeOptions.length + \")\" : \"text\";\r\n            case \"uuid\":\r\n                return \"uuid\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"Postgres\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => this.driver.escapeColumnName(key) + \"=$\" + (startIndex + index + 1));\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\r\n        let c = \"\\\"\" + column.name + \"\\\"\";\r\n        if (column.isGenerated === true && column.type !== \"uuid\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" SERIAL\";\r\n        if (!column.isGenerated || column.type === \"uuid\")\r\n            c += \" \" + column.type;\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isGenerated)\r\n            c += \" PRIMARY KEY\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n        if (column.isGenerated && column.type === \"uuid\" && !column.default)\r\n            c += \" DEFAULT uuid_generate_v4()\";\r\n        return c;\r\n    }\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {PostgresQueryRunner} from \"./PostgresQueryRunner\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\nimport {LazyRelationsWrapper} from \"../../lazy-loading/LazyRelationsWrapper\";\r\n\r\n// todo(tests):\r\n// check connection with url\r\n// check if any of required option is not set exception to be thrown\r\n//\r\n\r\n/**\r\n * Organizes communication with PostgreSQL DBMS.\r\n */\r\nexport class PostgresDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Used to wrap lazy relations to be able to perform lazy loadings.\r\n     */\r\n    lazyRelationsWrapper: LazyRelationsWrapper;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Postgres library.\r\n     */\r\n    protected postgres: any;\r\n\r\n    /**\r\n     * Connection to postgres database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Postgres pool.\r\n     */\r\n    protected pool: any;\r\n\r\n    /**\r\n     * Pool of database connections.\r\n     */\r\n    protected databaseConnectionPool: DatabaseConnection[] = [];\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    /**\r\n     * Schema name. (Only used in Postgres)\r\n     * default: \"public\"\r\n     */\r\n    public schemaName?: string;\r\n    \r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connectionOptions: DriverOptions, logger: Logger, postgres?: any) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(connectionOptions);\r\n        this.logger = logger;\r\n        this.postgres = postgres;\r\n        this.schemaName = connectionOptions.schemaName || \"public\";\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.host)\r\n            throw new DriverOptionNotSetError(\"host\");\r\n        if (!this.options.username)\r\n            throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // if postgres package instance was not set explicitly then try to load it\r\n        if (!postgres)\r\n            this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            host: this.options.host,\r\n            user: this.options.username,\r\n            password: this.options.password,\r\n            database: this.options.database,\r\n            port: this.options.port\r\n        }, this.options.extra || {});\r\n\r\n        // pooling is enabled either when its set explicitly to true,\r\n        // either when its not defined at all (e.g. enabled by default)\r\n        if (this.options.usePool === undefined || this.options.usePool === true) {\r\n            this.pool = new this.postgres.Pool(options);\r\n            return Promise.resolve();\r\n\r\n        } else {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.databaseConnection = {\r\n                    id: 1,\r\n                    connection: new this.postgres.Client(options),\r\n                    isTransactionActive: false\r\n                };\r\n                this.databaseConnection.connection.connect((err: any) => {\r\n                    if (err) {\r\n                        fail(err);\r\n                    } else {\r\n                        this.databaseConnection!.connection.query(`SET search_path TO '${this.schemaName}', 'public';`, (err: any, result: any) => {\r\n                            if (err) {\r\n                                this.logger.logFailedQuery(`SET search_path TO '${this.schemaName}', 'public';`);\r\n                                this.logger.logQueryError(err);\r\n                                fail(err);\r\n                            } else {\r\n                                ok();\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            throw new ConnectionIsNotSetError(\"postgres\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n\r\n            if (this.databaseConnection) {\r\n                this.databaseConnection.connection.end(/*handler*/); // todo: check if it can emit errors\r\n                this.databaseConnection = undefined;\r\n            }\r\n\r\n            if (this.pool) {\r\n                this.databaseConnectionPool.forEach(dbConnection => {\r\n                    if (dbConnection && dbConnection.releaseCallback) {\r\n                        dbConnection.releaseCallback();\r\n                    }\r\n                });\r\n                this.pool.end(handler);\r\n                this.pool = undefined;\r\n                this.databaseConnectionPool = [];\r\n            }\r\n\r\n            ok();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"postgres\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new PostgresQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.postgres,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\r\n            pool: this.pool\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, column: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (column.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (column.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n            case ColumnTypes.JSONB:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n            case ColumnTypes.JSONB:\r\n                // pg(pg-types) have done JSON.parse conversion\r\n                // https://github.com/brianc/node-pg-types/blob/ed2d0e36e33217b34530727a98d20b325389e73a/lib/textParsers.js#L170\r\n                return value;\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n\r\n        const builtParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\r\n            const value = parameters[key.substr(1)];\r\n            if (value instanceof Array) {\r\n                return value.map((v: any) => {\r\n                    builtParameters.push(v);\r\n                    return \"$\" + builtParameters.length;\r\n                }).join(\", \");\r\n            } else {\r\n                builtParameters.push(value);\r\n            }\r\n            return \"$\" + builtParameters.length;\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, builtParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return \"\\\"\" + columnName + \"\\\"\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return \"\\\"\" + aliasName + \"\\\"\";\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return \"\\\"\" + tableName + \"\\\"\";\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n        if (this.pool) {\r\n            return new Promise((ok, fail) => {\r\n                this.pool.connect((err: any, connection: any, release: Function) => {\r\n                    if (err) {\r\n                        fail(err);\r\n                        return;\r\n                    }\r\n\r\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\r\n                    if (!dbConnection) {\r\n                        dbConnection = {\r\n                            id: this.databaseConnectionPool.length,\r\n                            connection: connection,\r\n                            isTransactionActive: false\r\n                        };\r\n                        this.databaseConnectionPool.push(dbConnection);\r\n                    }\r\n                    dbConnection.releaseCallback = () => {\r\n                        if (dbConnection) {\r\n                            this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\r\n                        }\r\n                        release();\r\n                        return Promise.resolve();\r\n                    };\r\n                    dbConnection.connection.query(`SET search_path TO '${this.schemaName}', 'public';`, (err: any) => {\r\n                        if (err) {\r\n                            this.logger.logFailedQuery(`SET search_path TO '${this.schemaName}', 'public';`);\r\n                            this.logger.logQueryError(err);\r\n                            fail(err);\r\n                        } else {\r\n                            ok(dbConnection);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"postgres\");\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.postgres = PlatformTools.load(\"pg\");\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"Postgres\", \"pg\");\r\n        }\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {MysqlDriver} from \"./MysqlDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single mysql database connection.\r\n */\r\nexport class MysqlQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: MysqlDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.beginTransaction();\r\n        try {\r\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\r\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\r\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\r\n\r\n            await this.query(disableForeignKeysCheckQuery);\r\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\r\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\r\n            await this.query(enableForeignKeysCheckQuery);\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.databaseConnection.isTransactionActive = true;\r\n        await this.query(\"START TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise((ok, fail) => {\r\n            this.logger.logQuery(query, parameters);\r\n            this.databaseConnection.connection.query(query, parameters, (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                }\r\n\r\n                ok(result);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map(key => \"?\").join(\",\");\r\n        const parameters = keys.map(key => keyValues[key]);\r\n        const sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`;\r\n        const result = await this.query(sql, parameters);\r\n        return generatedColumn ? result.insertId : undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions).join(\" AND \");\r\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(sql, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\r\n        const tablesSql      = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\r\n        const columnsSql     = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}'`;\r\n        const indicesSql     = `SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = '${this.dbName}' AND INDEX_NAME != 'PRIMARY'`;\r\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\r\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(indicesSql),\r\n            this.query(foreignKeysSql)\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\r\n            const primaryKeys: ObjectLiteral[] = await this.query(`SHOW INDEX FROM \\`${dbTable[\"TABLE_NAME\"]}\\` WHERE Key_name = 'PRIMARY'`);\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbColumn => {\r\n                    const columnSchema = new ColumnSchema();\r\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\r\n                    columnSchema.type = dbColumn[\"COLUMN_TYPE\"].toLowerCase();\r\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\r\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\r\n                    columnSchema.isPrimary = dbColumn[\"COLUMN_KEY\"].indexOf(\"PRI\") !== -1;\r\n                    columnSchema.isUnique = dbColumn[\"COLUMN_KEY\"].indexOf(\"UNI\") !== -1;\r\n                    columnSchema.isGenerated = dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\r\n                    columnSchema.comment = dbColumn[\"COLUMN_COMMENT\"];\r\n                    return columnSchema;\r\n                });\r\n\r\n            // create primary keys\r\n            tableSchema.primaryKeys = primaryKeys.map(primaryKey => {\r\n                return new PrimaryKeySchema(primaryKey[\"Key_name\"], primaryKey[\"Column_name\"]);\r\n            });\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            tableSchema.foreignKeys = dbForeignKeys\r\n                .filter(dbForeignKey => dbForeignKey[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create index schemas from the loaded indices\r\n            tableSchema.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(dbIndexName => {\r\n                    const currentDbIndices = dbIndices.filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName);\r\n                    const columnNames = currentDbIndices.map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\r\n\r\n                    // find a special index - unique index and\r\n                    if (currentDbIndices.length === 1 && currentDbIndices[0][\"NON_UNIQUE\"] === 0) {\r\n                        const column = tableSchema.columns.find(column => column.name === currentDbIndices[0][\"INDEX_NAME\"] && column.name === currentDbIndices[0][\"COLUMN_NAME\"]);\r\n                        if (column) {\r\n                            column.isUnique = true;\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\r\n                })\r\n                .filter(index => !!index) as IndexSchema[]; // remove empty returns\r\n\r\n            return tableSchema;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table schema and column schemas inside it.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\r\n        let sql = `CREATE TABLE \\`${table.name}\\` (${columnDefinitions}`;\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\\`${column.name}\\``).join(\", \")})`;\r\n        sql += `) ENGINE=InnoDB;`; // todo: remove engine from here\r\n\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \\`${tableName}\\` ADD ${this.buildCreateColumnSql(column, false)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        if (newColumn.isUnique === false && oldColumn.isUnique === true)\r\n            await this.query(`ALTER TABLE \\`${tableSchema.name}\\` DROP INDEX \\`${oldColumn.name}\\``);\r\n\r\n        return this.query(`ALTER TABLE \\`${tableSchema.name}\\` CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(newColumn, oldColumn.isPrimary)}`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\r\n        return this.query(`ALTER TABLE \\`${tableName}\\` DROP \\`${columnName}\\``);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableSchema: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!tableSchema.hasGeneratedColumn)\r\n            await this.query(`ALTER TABLE \\`${tableSchema.name}\\` DROP PRIMARY KEY`);\r\n\r\n        const primaryColumnNames = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated).map(column => \"`\" + column.name + \"`\");\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE \\`${tableSchema.name}\\` ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnNames = foreignKey.columnNames.map(column => \"`\" + column + \"`\").join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"`\" + column + \"`\").join(\",\");\r\n        let sql = `ALTER TABLE \\`${tableName}\\` ADD CONSTRAINT \\`${foreignKey.name}\\` ` +\r\n            `FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES \\`${foreignKey.referencedTableName}\\`(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        return this.query(`ALTER TABLE \\`${tableName}\\` DROP FOREIGN KEY \\`${foreignKey.name}\\``);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columns = index.columnNames.map(columnName => \"`\" + columnName + \"`\").join(\", \");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \\`${index.name}\\` ON \\`${tableName}\\`(${columns})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `ALTER TABLE \\`${tableName}\\` DROP INDEX \\`${indexName}\\``;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                if (typeOptions.fixedLength) {\r\n                    return \"char(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                } else {\r\n                    return \"varchar(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                }\r\n            case \"text\":\r\n                return \"text\";\r\n            case \"boolean\":\r\n                return \"tinyint(1)\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"int(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\r\n            case \"smallint\":\r\n                return \"smallint(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\r\n            case \"bigint\":\r\n                return \"bigint(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\r\n            case \"float\":\r\n                return \"float\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"double\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                return \"time\";\r\n            case \"datetime\":\r\n                return \"datetime\";\r\n            case \"json\":\r\n                return \"text\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"varchar(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"MySQL/MariaDB\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\r\n        return Object.keys(objectLiteral).map(key => this.driver.escapeColumnName(key) + \"=?\");\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\r\n        let c = \"`\" + column.name + \"` \" + column.type;\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isUnique === true)\r\n            c += \" UNIQUE\";\r\n        if (column.isGenerated && column.isPrimary && !skipPrimary)\r\n            c += \" PRIMARY KEY\";\r\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" AUTO_INCREMENT\";\r\n        if (column.comment)\r\n            c += \" COMMENT '\" + column.comment + \"'\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n        return c;\r\n    }\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {MysqlQueryRunner} from \"./MysqlQueryRunner\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\nimport {LazyRelationsWrapper} from \"../../lazy-loading/LazyRelationsWrapper\";\r\n\r\n/**\r\n * Organizes communication with MySQL DBMS.\r\n */\r\nexport class MysqlDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Used to wrap lazy relations to be able to perform lazy loadings.\r\n     */\r\n    lazyRelationsWrapper: LazyRelationsWrapper;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Mysql library.\r\n     */\r\n    protected mysql: any;\r\n\r\n    /**\r\n     * Connection to mysql database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Mysql pool.\r\n     */\r\n    protected pool: any;\r\n\r\n    /**\r\n     * Pool of database connections.\r\n     */\r\n    protected databaseConnectionPool: DatabaseConnection[] = [];\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, mysql?: any) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(options);\r\n        this.logger = logger;\r\n        this.mysql = mysql;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)))\r\n            throw new DriverOptionNotSetError(\"socketPath and host\");\r\n        if (!this.options.username)\r\n            throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // if mysql package instance was not set explicitly then try to load it\r\n        if (!mysql)\r\n            this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            host: this.options.host,\r\n            user: this.options.username,\r\n            password: this.options.password,\r\n            database: this.options.database,\r\n            port: this.options.port\r\n        }, this.options.extra || {});\r\n\r\n        // pooling is enabled either when its set explicitly to true,\r\n        // either when its not defined at all (e.g. enabled by default)\r\n        if (this.options.usePool === undefined || this.options.usePool === true) {\r\n            this.pool = this.mysql.createPool(options);\r\n            return Promise.resolve();\r\n\r\n        } else {\r\n            return new Promise<void>((ok, fail) => {\r\n                const connection = this.mysql.createConnection(options);\r\n                this.databaseConnection = {\r\n                    id: 1,\r\n                    connection: connection,\r\n                    isTransactionActive: false\r\n                };\r\n                this.databaseConnection.connection.connect((err: any) => err ? fail(err) : ok());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            throw new ConnectionIsNotSetError(\"mysql\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n\r\n            // if pooling is used, then disconnect from it\r\n            if (this.pool) {\r\n                this.pool.end(handler);\r\n                this.pool = undefined;\r\n                this.databaseConnectionPool = [];\r\n            }\r\n\r\n            // if single connection is opened, then close it\r\n            if (this.databaseConnection) {\r\n                this.databaseConnection.connection.end(handler);\r\n                this.databaseConnection = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mysql\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new MysqlQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.mysql,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\r\n            pool: this.pool\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            escapedParameters.push(parameters[key.substr(1)]);\r\n            return \"?\";\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return \"`\" + columnName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return \"`\" + aliasName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return \"`\" + tableName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n\r\n        if (this.pool) {\r\n            return new Promise((ok, fail) => {\r\n                this.pool.getConnection((err: any, connection: any) => {\r\n                    if (err)\r\n                        return fail(err);\r\n\r\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\r\n                    if (!dbConnection) {\r\n                        dbConnection = {\r\n                            id: this.databaseConnectionPool.length,\r\n                            connection: connection,\r\n                            isTransactionActive: false\r\n                        };\r\n                        dbConnection.releaseCallback = () => {\r\n                            if (this.pool && dbConnection) {\r\n                                connection.release();\r\n                                this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\r\n                            }\r\n                            return Promise.resolve();\r\n                        };\r\n                        this.databaseConnectionPool.push(dbConnection);\r\n                    }\r\n                    ok(dbConnection);\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"mysql\");\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.mysql = PlatformTools.load(\"mysql\");  // try to load first supported package\r\n\r\n        } catch (e) {\r\n            try {\r\n                this.mysql = PlatformTools.load(\"mysql2\"); // try to load second supported package\r\n\r\n            } catch (e) {\r\n                throw new DriverPackageNotInstalledError(\"Mysql\", \"mysql\");\r\n            }\r\n        }\r\n    }\r\n\r\n}","/**\r\n * Thrown when selected sql driver does not supports locking.\r\n */\r\nexport class LockNotSupportedOnGivenDriverError extends Error {\r\n    name = \"LockNotSupportedOnGivenDriverError\";\r\n\r\n    constructor() {\r\n        super();\r\n        Object.setPrototypeOf(this, LockNotSupportedOnGivenDriverError.prototype);\r\n        this.message = `Locking not supported on giver driver.`;\r\n    }\r\n\r\n}","import {RelationIdAttribute} from \"./RelationIdAttribute\";\r\nimport {QueryBuilder} from \"../QueryBuilder\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {QueryRunnerProvider} from \"../../query-runner/QueryRunnerProvider\";\r\nimport {RelationIdLoadResult} from \"./RelationIdLoadResult\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\n\r\nexport class RelationIdLoader {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected queryRunnerProvider: QueryRunnerProvider|undefined,\r\n                protected relationIdAttributes: RelationIdAttribute[]) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    async load(rawEntities: any[]): Promise<RelationIdLoadResult[]> {\r\n\r\n        const promises = this.relationIdAttributes.map(async relationIdAttr => {\r\n\r\n            if (relationIdAttr.relation.isManyToOne || relationIdAttr.relation.isOneToOneOwner) {\r\n                // example: Post and Tag\r\n                // loadRelationIdAndMap(\"post.tagId\", \"post.tag\")\r\n                // we expect it to load id of tag\r\n\r\n                if (relationIdAttr.queryBuilderFactory)\r\n                    throw new Error(\"Additional condition can not be used with ManyToOne or OneToOne owner relations.\");\r\n\r\n                const results = rawEntities.map(rawEntity => {\r\n                    const result: ObjectLiteral = {};\r\n                    relationIdAttr.relation.joinColumns.forEach(joinColumn => {\r\n                        result[joinColumn.databaseName] = rawEntity[relationIdAttr.parentAlias + \"_\" + joinColumn.databaseName];\r\n                    });\r\n\r\n                    relationIdAttr.relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\r\n                        result[primaryColumn.databaseName] = rawEntity[relationIdAttr.parentAlias + \"_\" + primaryColumn.databaseName];\r\n                    });\r\n                    return result;\r\n                });\r\n\r\n                return {\r\n                    relationIdAttribute: relationIdAttr,\r\n                    results: results\r\n                };\r\n\r\n            } else if (relationIdAttr.relation.isOneToMany || relationIdAttr.relation.isOneToOneNotOwner) {\r\n                // example: Post and Category\r\n                // loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\r\n                // we expect it to load array of category ids\r\n\r\n                const relation = relationIdAttr.relation; // \"post.categories\"\r\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\r\n                const table = relation.inverseEntityMetadata.target; // category\r\n                const tableName = relation.inverseEntityMetadata.tableName; // category\r\n                const tableAlias = relationIdAttr.alias || tableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\r\n\r\n                const parameters: ObjectLiteral = {};\r\n                const condition = rawEntities.map((rawEntity, index) => {\r\n                    return joinColumns.map(joinColumn => {\r\n                        const parameterName = joinColumn.databaseName + index;\r\n                        parameters[parameterName] = rawEntity[relationIdAttr.parentAlias + \"_\" + joinColumn.referencedColumn!.databaseName];\r\n                        return tableAlias + \".\" + joinColumn.propertyPath + \" = :\" + parameterName;\r\n                    }).join(\" AND \");\r\n                }).map(condition => \"(\" + condition + \")\")\r\n                    .join(\" OR \");\r\n\r\n                // ensure we won't perform redundant queries for joined data which was not found in selection\r\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\r\n                if (!condition)\r\n                    return { relationIdAttribute: relationIdAttr, results: [] };\r\n\r\n                // generate query:\r\n                // SELECT category.id, category.postId FROM category category ON category.postId = :postId\r\n                const qb = new QueryBuilder(this.connection, this.queryRunnerProvider);\r\n\r\n                joinColumns.forEach(joinColumn => {\r\n                    qb.addSelect(tableAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName);\r\n                });\r\n\r\n                relation.inverseRelation!.entityMetadata.primaryColumns.forEach(primaryColumn => {\r\n                    qb.addSelect(tableAlias + \".\" + primaryColumn.propertyPath, primaryColumn.databaseName);\r\n                });\r\n\r\n                qb.from(table, tableAlias)\r\n                    .where(\"(\" + condition + \")\") // need brackets because if we have additional condition and no brackets, it looks like (a = 1) OR (a = 2) AND b = 1, that is incorrect\r\n                    .setParameters(parameters);\r\n\r\n                // apply condition (custom query builder factory)\r\n                if (relationIdAttr.queryBuilderFactory)\r\n                    relationIdAttr.queryBuilderFactory(qb);\r\n\r\n                return {\r\n                    relationIdAttribute: relationIdAttr,\r\n                    results: await qb.getRawMany()\r\n                };\r\n\r\n            } else {\r\n                // example: Post and Category\r\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\r\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\r\n                // we expect it to load array of post ids\r\n\r\n                const relation = relationIdAttr.relation;\r\n                const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.inverseJoinColumns;\r\n                const inverseJoinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\r\n                const junctionAlias = relationIdAttr.junctionAlias;\r\n                const inverseSideTableName = relationIdAttr.joinInverseSideMetadata.tableName;\r\n                const inverseSideTableAlias = relationIdAttr.alias || inverseSideTableName;\r\n                const junctionTableName = relation.junctionEntityMetadata!.tableName;\r\n\r\n                const mappedColumns = rawEntities.map(rawEntity => {\r\n                    return joinColumns.reduce((map, joinColumn) => {\r\n                        map[joinColumn.propertyPath] = rawEntity[relationIdAttr.parentAlias + \"_\" + joinColumn.referencedColumn!.databaseName];\r\n                        return map;\r\n                    }, {} as ObjectLiteral);\r\n                });\r\n\r\n                // ensure we won't perform redundant queries for joined data which was not found in selection\r\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\r\n                if (mappedColumns.length === 0)\r\n                    return { relationIdAttribute: relationIdAttr, results: [] };\r\n\r\n                const parameters: ObjectLiteral = {};\r\n                const joinColumnConditions = mappedColumns.map((mappedColumn, index) => {\r\n                    return Object.keys(mappedColumn).map(key => {\r\n                        const parameterName = key + index;\r\n                        parameters[parameterName] = mappedColumn[key];\r\n                        return junctionAlias + \".\" + key + \" = :\" + parameterName;\r\n                    }).join(\" AND \");\r\n                });\r\n\r\n                const inverseJoinColumnCondition = inverseJoinColumns.map(joinColumn => {\r\n                    return junctionAlias + \".\" + joinColumn.propertyPath + \" = \" + inverseSideTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\r\n                }).join(\" AND \");\r\n\r\n                const condition = joinColumnConditions.map(condition => {\r\n                    return \"(\" + condition + \" AND \" + inverseJoinColumnCondition + \")\";\r\n                }).join(\" OR \");\r\n\r\n                const qb = new QueryBuilder(this.connection, this.queryRunnerProvider);\r\n\r\n                inverseJoinColumns.forEach(joinColumn => {\r\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\r\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\r\n                });\r\n\r\n                joinColumns.forEach(joinColumn => {\r\n                    qb.addSelect(junctionAlias + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\r\n                    .addOrderBy(junctionAlias + \".\" + joinColumn.propertyPath);\r\n                });\r\n\r\n                qb.fromTable(inverseSideTableName, inverseSideTableAlias)\r\n                    .innerJoin(junctionTableName, junctionAlias, condition)\r\n                    .setParameters(parameters);\r\n\r\n                // apply condition (custom query builder factory)\r\n                if (relationIdAttr.queryBuilderFactory)\r\n                    relationIdAttr.queryBuilderFactory(qb);\r\n\r\n                return {\r\n                    relationIdAttribute: relationIdAttr,\r\n                    results: await qb.getRawMany()\r\n                };\r\n            }\r\n        });\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n}","import {RelationIdAttribute} from \"./RelationIdAttribute\";\r\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\r\nimport {RelationIdMetadata} from \"../../metadata/RelationIdMetadata\";\r\n\r\nexport class RelationIdMetadataToAttributeTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected expressionMap: QueryExpressionMap) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transform() {\r\n\r\n        // by example:\r\n        // post has relation id:\r\n        // @RelationId(post => post.categories) categoryIds\r\n        // category has relation id\r\n        // @RelationId(category => category.images) imageIds\r\n        // we load post and join category\r\n        // we expect post.categoryIds and post.category.imageIds to have relation ids\r\n\r\n        // first create relation id attributes for all relation id metadatas of the main selected object (post from example)\r\n        if (this.expressionMap.mainAlias) {\r\n            this.expressionMap.mainAlias.metadata.relationIds.forEach(relationId => {\r\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias!.name, relationId);\r\n                this.expressionMap.relationIdAttributes.push(attribute);\r\n            });\r\n        }\r\n\r\n        // second create relation id attributes for all relation id metadatas of all joined objects (category from example)\r\n        this.expressionMap.joinAttributes.forEach(join => {\r\n\r\n            // ensure this join has a metadata, because relation id can only work for real orm entities\r\n            if (!join.metadata || join.metadata.isJunction)\r\n                return;\r\n\r\n            join.metadata.relationIds.forEach(relationId => {\r\n                const attribute = this.metadataToAttribute(join.alias.name, relationId);\r\n                this.expressionMap.relationIdAttributes.push(attribute);\r\n            });\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    private metadataToAttribute(parentAliasName: string, relationId: RelationIdMetadata): RelationIdAttribute {\r\n        return new RelationIdAttribute(this.expressionMap, {\r\n            relationName: parentAliasName + \".\" + relationId.relation.propertyName, // category.images\r\n            mapToProperty: parentAliasName + \".\" + relationId.propertyName, // category.imageIds\r\n            alias: relationId.alias,\r\n            queryBuilderFactory: relationId.queryBuilderFactory\r\n        });\r\n    }\r\n\r\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {QueryBuilder} from \"../QueryBuilder\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {QueryRunnerProvider} from \"../../query-runner/QueryRunnerProvider\";\r\nimport {RelationCountAttribute} from \"./RelationCountAttribute\";\r\nimport {RelationCountLoadResult} from \"./RelationCountLoadResult\";\r\n\r\nexport class RelationCountLoader {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected queryRunnerProvider: QueryRunnerProvider|undefined,\r\n                protected relationCountAttributes: RelationCountAttribute[]) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    async load(rawEntities: any[]): Promise<RelationCountLoadResult[]> {\r\n\r\n        const promises = this.relationCountAttributes.map(async relationCountAttr => {\r\n\r\n            if (relationCountAttr.relation.isOneToMany) {\r\n                // example: Post and Category\r\n                // loadRelationCountAndMap(\"post.categoryCount\", \"post.categories\")\r\n                // we expect it to load array of post ids\r\n\r\n                // todo(dima): fix issues wit multiple primary keys and remove joinColumns[0]\r\n                const relation = relationCountAttr.relation; // \"category.posts\"\r\n                const inverseRelation = relation.inverseRelation!; // \"post.category\"\r\n                const referenceColumnName = inverseRelation.joinColumns[0].referencedColumn!.propertyName; // post id\r\n                const inverseSideTable = relation.inverseEntityMetadata.target; // Post\r\n                const inverseSideTableName = relation.inverseEntityMetadata.tableName; // post\r\n                const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName; // if condition (custom query builder factory) is set then relationIdAttr.alias defined\r\n                const inverseSidePropertyName = inverseRelation.propertyName; // \"category\" from \"post.category\"\r\n\r\n                const referenceColumnValues = rawEntities\r\n                    .map(rawEntity => rawEntity[relationCountAttr.parentAlias + \"_\" + referenceColumnName])\r\n                    .filter(value => !!value);\r\n\r\n                // ensure we won't perform redundant queries for joined data which was not found in selection\r\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\r\n                if (referenceColumnValues.length === 0)\r\n                    return { relationCountAttribute: relationCountAttr, results: [] };\r\n\r\n                // generate query:\r\n                // SELECT category.post as parentId, COUNT(category.id) AS cnt FROM category category WHERE category.post IN (1, 2) GROUP BY category.post\r\n                const qb = new QueryBuilder(this.connection, this.queryRunnerProvider);\r\n                qb.select(inverseSideTableAlias + \".\" + inverseSidePropertyName, \"parentId\")\r\n                    .addSelect(\"COUNT(\" + qb.escapeAlias(inverseSideTableAlias) + \".\" + qb.escapeColumn(referenceColumnName) + \")\", \"cnt\")\r\n                    .from(inverseSideTable, inverseSideTableAlias)\r\n                    .where(inverseSideTableAlias + \".\" + inverseSidePropertyName + \" IN (:ids)\")\r\n                    .addGroupBy(inverseSideTableAlias + \".\" + inverseSidePropertyName)\r\n                    .setParameter(\"ids\", referenceColumnValues);\r\n\r\n                // apply condition (custom query builder factory)\r\n                if (relationCountAttr.queryBuilderFactory)\r\n                    relationCountAttr.queryBuilderFactory(qb);\r\n\r\n                return {\r\n                    relationCountAttribute: relationCountAttr,\r\n                    results: await qb.getRawMany()\r\n                };\r\n\r\n            } else {\r\n                // example: Post and Category\r\n                // owner side: loadRelationIdAndMap(\"post.categoryIds\", \"post.categories\")\r\n                // inverse side: loadRelationIdAndMap(\"category.postIds\", \"category.posts\")\r\n                // we expect it to load array of post ids\r\n\r\n                let joinTableColumnName: string;\r\n                let inverseJoinColumnName: string;\r\n                let firstJunctionColumn: ColumnMetadata;\r\n                let secondJunctionColumn: ColumnMetadata;\r\n\r\n                if (relationCountAttr.relation.isOwning) { // todo fix joinColumns[0] and inverseJoinColumns[0].\r\n                    joinTableColumnName = relationCountAttr.relation.joinColumns[0].referencedColumn!.databaseName;\r\n                    inverseJoinColumnName = relationCountAttr.relation.inverseJoinColumns[0].referencedColumn!.databaseName;\r\n                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[0];\r\n                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[1];\r\n\r\n                } else {\r\n                    joinTableColumnName = relationCountAttr.relation.inverseRelation!.inverseJoinColumns[0].referencedColumn!.databaseName;\r\n                    inverseJoinColumnName = relationCountAttr.relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;\r\n                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[1];\r\n                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata!.columns[0];\r\n                }\r\n\r\n                const referenceColumnValues = rawEntities\r\n                    .map(rawEntity => rawEntity[relationCountAttr.parentAlias + \"_\" + joinTableColumnName])\r\n                    .filter(value => value);\r\n\r\n                // ensure we won't perform redundant queries for joined data which was not found in selection\r\n                // example: if post.category was not found in db then no need to execute query for category.imageIds\r\n                if (referenceColumnValues.length === 0)\r\n                    return { relationCountAttribute: relationCountAttr, results: [] };\r\n\r\n                const junctionAlias = relationCountAttr.junctionAlias;\r\n                const inverseSideTableName = relationCountAttr.joinInverseSideMetadata.tableName;\r\n                const inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\r\n                const junctionTableName = relationCountAttr.relation.junctionEntityMetadata!.tableName;\r\n                const condition = junctionAlias + \".\" + firstJunctionColumn.propertyName + \" IN (\" + referenceColumnValues + \")\" +\r\n                    \" AND \" + junctionAlias + \".\" + secondJunctionColumn.propertyName + \" = \" + inverseSideTableAlias + \".\" + inverseJoinColumnName;\r\n\r\n                const qb = new QueryBuilder(this.connection, this.queryRunnerProvider);\r\n                qb.select(junctionAlias + \".\" + firstJunctionColumn.propertyName, \"parentId\")\r\n                    .addSelect(\"COUNT(\" + qb.escapeAlias(inverseSideTableAlias) + \".\" + qb.escapeColumn(inverseJoinColumnName) + \")\", \"cnt\")\r\n                    .fromTable(inverseSideTableName, inverseSideTableAlias)\r\n                    .innerJoin(junctionTableName, junctionAlias, condition)\r\n                    .addGroupBy(junctionAlias + \".\" + firstJunctionColumn.propertyName);\r\n\r\n                // apply condition (custom query builder factory)\r\n                if (relationCountAttr.queryBuilderFactory)\r\n                    relationCountAttr.queryBuilderFactory(qb);\r\n\r\n                return {\r\n                    relationCountAttribute: relationCountAttr,\r\n                    results: await qb.getRawMany()\r\n                };\r\n            }\r\n        });\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n}","import {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\n/**\r\n * Arguments for RelationCountMetadata class.\r\n */\r\nexport interface RelationCountMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this decorator is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Class's property name to which this decorator is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Target's relation which it should count.\r\n     */\r\n    readonly relation: string|((object: any) => any);\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    readonly alias?: string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    readonly queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>;\r\n\r\n}\r\n","import {RelationCountMetadataArgs} from \"../metadata-args/RelationCountMetadataArgs\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\n\r\n/**\r\n * Contains all information about entity's relation count.\r\n */\r\nexport class RelationCountMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this column metadata is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Relation which needs to be counted.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * Relation name which need to count.\r\n     */\r\n    relationNameOrFactory: string|((object: any) => any);\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias?: string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        args: RelationCountMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.target = options.args.target;\r\n        this.propertyName = options.args.propertyName;\r\n        this.relationNameOrFactory = options.args.relation;\r\n        this.alias = options.args.alias;\r\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend relation count metadata properties.\r\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\r\n     */\r\n    build() {\r\n        const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\r\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationCount decorator.`);\r\n\r\n        this.relation = relation;\r\n    }\r\n\r\n}","import {QueryExpressionMap} from \"../QueryExpressionMap\";\r\nimport {RelationCountMetadata} from \"../../metadata/RelationCountMetadata\";\r\nimport {RelationCountAttribute} from \"./RelationCountAttribute\";\r\n\r\nexport class RelationCountMetadataToAttributeTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected expressionMap: QueryExpressionMap) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transform() {\r\n\r\n        // by example:\r\n        // post has relation count:\r\n        // @RelationCount(post => post.categories) categoryCount\r\n        // category has relation count\r\n        // @RelationCount(category => category.images) imageCount\r\n        // we load post and join category\r\n        // we expect post.categoryCount and post.category.imageCount to have relation counts\r\n\r\n        // first create relation count attributes for all relation count metadatas of the main selected object (post from example)\r\n        if (this.expressionMap.mainAlias) {\r\n            this.expressionMap.mainAlias.metadata.relationCounts.forEach(relationCount => {\r\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias!.name, relationCount);\r\n                this.expressionMap.relationCountAttributes.push(attribute);\r\n            });\r\n        }\r\n\r\n        // second create relation count attributes for all relation count metadatas of all joined objects (category from example)\r\n        this.expressionMap.joinAttributes.forEach(join => {\r\n\r\n            // ensure this join has a metadata, because relation count can only work for real orm entities\r\n            if (!join.metadata || join.metadata.isJunction)\r\n                return;\r\n\r\n            join.metadata.relationCounts.forEach(relationCount => {\r\n                const attribute = this.metadataToAttribute(join.alias.name, relationCount);\r\n                this.expressionMap.relationCountAttributes.push(attribute);\r\n            });\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    private metadataToAttribute(parentAliasName: string, relationCount: RelationCountMetadata): RelationCountAttribute {\r\n        return new RelationCountAttribute(this.expressionMap, {\r\n            relationName: parentAliasName + \".\" + relationCount.relation.propertyName, // category.images\r\n            mapToProperty: parentAliasName + \".\" + relationCount.propertyName, // category.imageIds\r\n            alias: relationCount.alias,\r\n            queryBuilderFactory: relationCount.queryBuilderFactory\r\n        });\r\n    }\r\n\r\n}","import { OracleDriver } from '../driver/oracle/OracleDriver';\r\nimport { RawSqlResultsToEntityTransformer } from \"./transformer/RawSqlResultsToEntityTransformer\";\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\";\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\";\r\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\r\nimport { Connection } from \"../connection/Connection\";\r\nimport { JoinOptions } from \"./JoinOptions\";\r\nimport { QueryRunnerProvider } from \"../query-runner/QueryRunnerProvider\";\r\nimport { PessimisticLockTransactionRequiredError } from \"./error/PessimisticLockTransactionRequiredError\";\r\nimport { NoVersionOrUpdateDateColumnError } from \"./error/NoVersionOrUpdateDateColumnError\";\r\nimport { OptimisticLockVersionMismatchError } from \"./error/OptimisticLockVersionMismatchError\";\r\nimport { OptimisticLockCanNotBeUsedError } from \"./error/OptimisticLockCanNotBeUsedError\";\r\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\r\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\r\nimport { LockNotSupportedOnGivenDriverError } from \"./error/LockNotSupportedOnGivenDriverError\";\r\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\r\nimport { JoinAttribute } from \"./JoinAttribute\";\r\nimport { RelationIdAttribute } from \"./relation-id/RelationIdAttribute\";\r\nimport { RelationCountAttribute } from \"./relation-count/RelationCountAttribute\";\r\nimport { QueryExpressionMap } from \"./QueryExpressionMap\";\r\nimport { SelectQuery } from \"./SelectQuery\";\r\nimport { RelationIdLoader } from \"./relation-id/RelationIdLoader\";\r\nimport { RelationIdLoadResult } from \"./relation-id/RelationIdLoadResult\";\r\nimport { RelationIdMetadataToAttributeTransformer } from \"./relation-id/RelationIdMetadataToAttributeTransformer\";\r\nimport { RelationCountLoadResult } from \"./relation-count/RelationCountLoadResult\";\r\nimport { RelationCountLoader } from \"./relation-count/RelationCountLoader\";\r\nimport { RelationCountMetadataToAttributeTransformer } from \"./relation-count/RelationCountMetadataToAttributeTransformer\";\r\n\r\n\r\n// todo: fix problem with long aliases eg getMaxIdentifierLength\r\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\r\n// todo: implement joinAlways in relations and relationId\r\n// todo: implement @Select decorator\r\n// todo: add quoting functions\r\n// todo: .addCount and .addCountSelect()\r\n// todo: add selectAndMap\r\n\r\n// todo: tests for:\r\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\r\n// todo: think about subselect in joins syntax\r\n// todo: create multiple representations of QueryBuilder: UpdateQueryBuilder, DeleteQueryBuilder\r\n// qb.update() returns UpdateQueryBuilder\r\n// qb.delete() returns DeleteQueryBuilder\r\n// qb.select() returns SelectQueryBuilder\r\n// todo: COMPLETELY COVER QUERY BUILDER WITH TESTS\r\n\r\n// todo: SUBSELECT IMPLEMENTATION\r\n// .whereSubselect(qb => qb.select().from().where())\r\n// todo: also create qb.createSubQueryBuilder()\r\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\r\n// todo: STREAMING\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class QueryBuilder<Entity> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Contains all properties of the QueryBuilder that needs to be build a final query.\r\n     */\r\n    protected expressionMap: QueryExpressionMap;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n        protected queryRunnerProvider?: QueryRunnerProvider) {\r\n        this.expressionMap = new QueryExpressionMap(connection);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets the main alias string used in this query builder.\r\n     */\r\n    get alias(): string {\r\n        if (!this.expressionMap.mainAlias)\r\n            throw new Error(`Main alias is not set`); // todo: better exception\r\n\r\n        return this.expressionMap.mainAlias.name;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates SELECT query.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(selection: string, selectionAliasName?: string): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(selection: string[]): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(selection?: string | string[], selectionAliasName?: string): this {\r\n        this.expressionMap.queryType = \"select\";\r\n        if (selection instanceof Array) {\r\n            this.expressionMap.selects = selection.map(selection => ({ selection: selection }));\r\n        } else if (selection) {\r\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string, selectionAliasName?: string): this;\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string[]): this;\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string | string[], selectionAliasName?: string): this {\r\n        if (selection instanceof Array) {\r\n            this.expressionMap.selects = this.expressionMap.selects.concat(selection.map(selection => ({ selection: selection })));\r\n        } else {\r\n            this.expressionMap.selects.push({ selection: selection, aliasName: selectionAliasName });\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given entity and applies given update values.\r\n     */\r\n    update(entity: Function | string, updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given table name and applies given update values.\r\n     */\r\n    update(tableName: string, updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(entityOrTableNameUpdateSet?: string | Function | ObjectLiteral, maybeUpdateSet?: ObjectLiteral): this {\r\n        const updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet as ObjectLiteral | undefined;\r\n\r\n        if (entityOrTableNameUpdateSet instanceof Function) { // entityOrTableNameUpdateSet is entity class\r\n            this.expressionMap.createMainAlias({\r\n                target: entityOrTableNameUpdateSet\r\n            });\r\n\r\n        } else if (typeof entityOrTableNameUpdateSet === \"string\") { // todo: check if entityOrTableNameUpdateSet is entity target string\r\n            this.expressionMap.createMainAlias({\r\n                tableName: entityOrTableNameUpdateSet\r\n            });\r\n        }\r\n\r\n        this.expressionMap.queryType = \"update\";\r\n        this.expressionMap.updateSet = updateSet;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates DELETE query.\r\n     */\r\n    delete(): this {\r\n        this.expressionMap.queryType = \"delete\";\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies FROM which entity's table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    from(entityTarget: Function | string, aliasName: string): this {\r\n        this.expressionMap.createMainAlias({\r\n            name: aliasName,\r\n            target: entityTarget\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies FROM which table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    fromTable(tableName: string, aliasName: string) {\r\n\r\n        // if table has a metadata then find it to properly escape its properties\r\n        const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\r\n        if (metadata) {\r\n            this.expressionMap.createMainAlias({\r\n                name: aliasName,\r\n                metadata: metadata,\r\n            });\r\n\r\n        } else {\r\n            this.expressionMap.createMainAlias({\r\n                name: aliasName,\r\n                tableName: tableName,\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs (without selection) entity's property.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection) given entity's table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(entity: Function | string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection) given table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection).\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.join(\"INNER\", entityOrProperty, aliasName, condition, options);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) entity's property.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) entity's table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(entity: Function | string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) given table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection).\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.join(\"LEFT\", entityOrProperty, aliasName, condition, options);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property and adds all selection properties to SELECT.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(entity: Function | string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.innerJoin(entityOrProperty, aliasName, condition, options);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property and adds all selection properties to SELECT.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(entity: Function | string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(tableName: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.leftJoin(entityOrProperty, aliasName, condition, options);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, entity: Function | string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.join(\"INNER\", entityOrProperty, aliasName, condition, options, mapToProperty, true);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, entity: Function | string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.join(\"INNER\", entityOrProperty, aliasName, condition, options, mapToProperty, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, entity: Function | string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.join(\"LEFT\", entityOrProperty, aliasName, condition, options, mapToProperty, true);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, property: string, aliasName: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, entity: Function | string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, tableName: string, aliasName: string, condition: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, entityOrProperty: Function | string, aliasName: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(aliasName);\r\n        this.join(\"LEFT\", entityOrProperty, aliasName, condition, options, mapToProperty, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    loadRelationIdAndMap(mapToProperty: string, relationName: string): this;\r\n\r\n    /**\r\n     * LEFT JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    loadRelationIdAndMap(mapToProperty: string, relationName: string, options: { disableMixedMap: boolean }): this;\r\n\r\n    /**\r\n     * LEFT JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    loadRelationIdAndMap(mapToProperty: string, relationName: string, aliasName: string, queryBuilderFactory: (qb: QueryBuilder<any>) => QueryBuilder<any>): this;\r\n\r\n    /**\r\n     * LEFT JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    loadRelationIdAndMap(mapToProperty: string,\r\n        relationName: string,\r\n        aliasNameOrOptions?: string | { disableMixedMap?: boolean },\r\n        queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>): this {\r\n        const relationIdAttribute = new RelationIdAttribute(this.expressionMap);\r\n        relationIdAttribute.mapToProperty = mapToProperty;\r\n        relationIdAttribute.relationName = relationName;\r\n        if (typeof aliasNameOrOptions === \"string\")\r\n            relationIdAttribute.alias = aliasNameOrOptions;\r\n        if (aliasNameOrOptions instanceof Object && (aliasNameOrOptions as any).disableMixedMap)\r\n            relationIdAttribute.disableMixedMap = true;\r\n\r\n        relationIdAttribute.queryBuilderFactory = queryBuilderFactory;\r\n        this.expressionMap.relationIdAttributes.push(relationIdAttribute);\r\n\r\n        if (relationIdAttribute.relation.junctionEntityMetadata) {\r\n            this.expressionMap.createAlias({\r\n                name: relationIdAttribute.junctionAlias,\r\n                metadata: relationIdAttribute.relation.junctionEntityMetadata\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Counts number of entities of entity's relation and maps the value into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    loadRelationCountAndMap(mapToProperty: string, relationName: string, aliasName?: string, queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>): this {\r\n        const relationCountAttribute = new RelationCountAttribute(this.expressionMap);\r\n        relationCountAttribute.mapToProperty = mapToProperty;\r\n        relationCountAttribute.relationName = relationName;\r\n        relationCountAttribute.alias = aliasName;\r\n        relationCountAttribute.queryBuilderFactory = queryBuilderFactory;\r\n        this.expressionMap.relationCountAttributes.push(relationCountAttribute);\r\n\r\n        this.expressionMap.createAlias({\r\n            name: relationCountAttribute.junctionAlias\r\n        });\r\n        if (relationCountAttribute.relation.junctionEntityMetadata) {\r\n            this.expressionMap.createAlias({\r\n                name: relationCountAttribute.junctionAlias,\r\n                metadata: relationCountAttribute.relation.junctionEntityMetadata\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"simple\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"and\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"or\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets HAVING condition in the query builder.\r\n     * If you had previously HAVING expression defined,\r\n     * calling this function will override previously set HAVING conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    having(having: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.havings.push({ type: \"simple\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND HAVING condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andHaving(having: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.havings.push({ type: \"and\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR HAVING condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orHaving(having: string, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.havings.push({ type: \"or\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets GROUP BY condition in the query builder.\r\n     * If you had previously GROUP BY expression defined,\r\n     * calling this function will override previously set GROUP BY conditions.\r\n     */\r\n    groupBy(groupBy: string): this {\r\n        this.expressionMap.groupBys = [groupBy];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds GROUP BY condition in the query builder.\r\n     */\r\n    addGroupBy(groupBy: string): this {\r\n        this.expressionMap.groupBys.push(groupBy);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort: string, order?: \"ASC\" | \"DESC\"): this;\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort: undefined): this;\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort?: string, order: \"ASC\" | \"DESC\" = \"ASC\"): this {\r\n        if (sort) {\r\n            this.expressionMap.orderBys = { [sort]: order };\r\n        } else {\r\n            this.expressionMap.orderBys = {};\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds ORDER BY condition in the query builder.\r\n     */\r\n    addOrderBy(sort: string, order: \"ASC\" | \"DESC\" = \"ASC\"): this {\r\n        this.expressionMap.orderBys[sort] = order;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set's LIMIT - maximum number of rows to be selected.\r\n     * NOTE that it may not work as you expect if you are using joins.\r\n     * If you want to implement pagination, and you are having join in your query,\r\n     * then use instead take method instead.\r\n     */\r\n    setLimit(limit?: number): this {\r\n        this.expressionMap.limit = limit;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set's OFFSET - selection offset.\r\n     * NOTE that it may not work as you expect if you are using joins.\r\n     * If you want to implement pagination, and you are having join in your query,\r\n     * then use instead skip method instead.\r\n     */\r\n    setOffset(offset?: number): this {\r\n        this.expressionMap.offset = offset;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets maximal number of entities to take.\r\n     */\r\n    take(take?: number): this {\r\n        this.expressionMap.take = take;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets number of entities to skip.\r\n     */\r\n    skip(skip?: number): this {\r\n        this.expressionMap.skip = skip;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets maximal number of entities to take.\r\n     *\r\n     * @deprecated use take method instead\r\n     */\r\n    setMaxResults(take?: number): this {\r\n        this.expressionMap.take = take;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets number of entities to skip.\r\n     *\r\n     * @deprecated use skip method instead\r\n     */\r\n    setFirstResult(skip?: number): this {\r\n        this.expressionMap.skip = skip;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\", lockVersion: number): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\", lockVersion: Date): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"pessimistic_read\" | \"pessimistic_write\"): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\" | \"pessimistic_read\" | \"pessimistic_write\", lockVersion?: number | Date): this {\r\n        this.expressionMap.lockMode = lockMode;\r\n        this.expressionMap.lockVersion = lockVersion;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets given parameter's value.\r\n     */\r\n    setParameter(key: string, value: any): this {\r\n        this.expressionMap.parameters[key] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds all parameters from the given object.\r\n     */\r\n    setParameters(parameters: ObjectLiteral): this {\r\n        Object.keys(parameters).forEach(key => {\r\n            this.expressionMap.parameters[key] = parameters[key];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets all parameters.\r\n     */\r\n    getParameters(): ObjectLiteral {\r\n        const parameters: ObjectLiteral = Object.assign({}, this.expressionMap.parameters);\r\n\r\n        // add discriminator column parameter if it exist\r\n        if (this.expressionMap.mainAlias!.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\r\n                const values = metadata.childEntityMetadatas\r\n                    .filter(childMetadata => childMetadata.discriminatorColumn)\r\n                    .map(childMetadata => childMetadata.discriminatorValue);\r\n                values.push(metadata.discriminatorValue);\r\n                parameters[\"discriminatorColumnValues\"] = values;\r\n            }\r\n        }\r\n\r\n        return parameters;\r\n    }\r\n\r\n    /**\r\n     * Gets generated sql that will be executed.\r\n     * Parameters in the query are escaped for the currently used driver.\r\n     */\r\n    getSql(): string {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        sql = this.createSpecificExpression(sql);\r\n        [sql] = this.connection.driver.escapeQueryWithParameters(sql, this.expressionMap.parameters);\r\n        return sql.trim();\r\n    }\r\n\r\n    createSpecificExpression(sql: string): string {\r\n        if ((this.expressionMap.offset || this.expressionMap.limit) && this.connection.driver instanceof OracleDriver) {\r\n            sql = 'SELECT * FROM ('+sql+') WHERE ';\r\n            if (this.expressionMap.offset) {\r\n                sql += \"\\\"RN\\\" > \" + this.expressionMap.offset;\r\n            }\r\n            if (this.expressionMap.limit) {\r\n                sql += (this.expressionMap.offset ? \" AND \" : \"\") + \"\\\"RN\\\" < \" + ((this.expressionMap.offset || 0) + this.expressionMap.limit);\r\n            }\r\n        }\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Gets generated sql without parameters being replaced.\r\n     */\r\n    getGeneratedQuery(): string {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        sql = this.createSpecificExpression(sql);\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Gets sql to be executed with all parameters used in it.\r\n     */\r\n    getSqlWithParameters(options?: { skipOrderBy?: boolean }): [string, any[]] {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        if (!options || !options.skipOrderBy)\r\n            sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        sql = this.createSpecificExpression(sql);\r\n        return this.connection.driver.escapeQueryWithParameters(sql, this.getParameters());\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<any> {\r\n        const queryRunner = await this.getQueryRunner();\r\n        const [sql, parameters] = this.getSqlWithParameters();\r\n        try {\r\n            return await queryRunner.query(sql, parameters);  // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\r\n     */\r\n    async getEntitiesAndRawResults(): Promise<{ entities: Entity[], rawResults: any[] }> {\r\n        const queryRunner = await this.getQueryRunner();\r\n        const relationIdLoader = new RelationIdLoader(this.connection, this.queryRunnerProvider, this.expressionMap.relationIdAttributes);\r\n        const relationCountLoader = new RelationCountLoader(this.connection, this.queryRunnerProvider, this.expressionMap.relationCountAttributes);\r\n        const relationIdMetadataTransformer = new RelationIdMetadataToAttributeTransformer(this.expressionMap);\r\n        relationIdMetadataTransformer.transform();\r\n        const relationCountMetadataTransformer = new RelationCountMetadataToAttributeTransformer(this.expressionMap);\r\n        relationCountMetadataTransformer.transform();\r\n\r\n        try {\r\n            if (!this.expressionMap.mainAlias)\r\n                throw new Error(`Alias is not set. Looks like nothing is selected. Use select*, delete, update method to set an alias.`);\r\n\r\n            if ((this.expressionMap.lockMode === \"pessimistic_read\" || this.expressionMap.lockMode === \"pessimistic_write\") && !queryRunner.isTransactionActive())\r\n                throw new PessimisticLockTransactionRequiredError();\r\n\r\n            if (this.expressionMap.lockMode === \"optimistic\") {\r\n                const metadata = this.expressionMap.mainAlias!.metadata;\r\n                if (!metadata.versionColumn && !metadata.updateDateColumn)\r\n                    throw new NoVersionOrUpdateDateColumnError(metadata.name);\r\n            }\r\n\r\n            const mainAliasName = this.expressionMap.mainAlias.name;\r\n            if (this.expressionMap.skip || this.expressionMap.take) {\r\n                // we are skipping order by here because its not working in subqueries anyway\r\n                // to make order by working we need to apply it on a distinct query\r\n                const [sql, parameters] = this.getSqlWithParameters({ skipOrderBy: true });\r\n                const [selects, orderBys] = this.createOrderByCombinedWithSelectExpression(\"distinctAlias\");\r\n\r\n                const distinctAlias = this.escapeTable(\"distinctAlias\");\r\n                const metadata = this.expressionMap.mainAlias!.metadata;\r\n                let idsQuery = `SELECT `;\r\n                idsQuery += metadata.primaryColumns.map((primaryColumn, index) => {\r\n                    const propertyName = this.escapeAlias(mainAliasName + \"_\" + primaryColumn.databaseName);\r\n                    if (index === 0) {\r\n                        return `DISTINCT(${distinctAlias}.${propertyName}) as ids_${primaryColumn.databaseName}`;\r\n                    } else {\r\n                        return `${distinctAlias}.${propertyName}) as ids_${primaryColumn.databaseName}`;\r\n                    }\r\n                }).join(\", \");\r\n                if (selects.length > 0)\r\n                    idsQuery += \", \" + selects;\r\n\r\n                idsQuery += ` FROM (${sql}) ${distinctAlias}`; // TODO: WHAT TO DO WITH PARAMETERS HERE? DO THEY WORK?\r\n\r\n                if (orderBys.length > 0) {\r\n                    idsQuery += \" ORDER BY \" + orderBys;\r\n                } else {\r\n                    idsQuery += ` ORDER BY \"ids_${metadata.primaryColumns[0].databaseName}\"`; // this is required for mssql driver if firstResult is used. Other drivers don't care about it\r\n                }\r\n\r\n                if (this.connection.driver instanceof SqlServerDriver) { // todo: temporary. need to refactor and make a proper abstraction\r\n\r\n                    if (this.expressionMap.skip || this.expressionMap.take) {\r\n                        idsQuery += ` OFFSET ${this.expressionMap.skip || 0} ROWS`;\r\n                        if (this.expressionMap.take)\r\n                            idsQuery += \" FETCH NEXT \" + this.expressionMap.take + \" ROWS ONLY\";\r\n                    }\r\n                } else {\r\n\r\n                    if (this.expressionMap.take)\r\n                        idsQuery += \" LIMIT \" + this.expressionMap.take;\r\n                    if (this.expressionMap.skip)\r\n                        idsQuery += \" OFFSET \" + this.expressionMap.skip;\r\n                }\r\n\r\n                let entities: any[] = [];\r\n                let rawResults: any[] = await queryRunner.query(idsQuery, parameters);\r\n                if (rawResults.length > 0) {\r\n                    let condition = \"\";\r\n                    const parameters: ObjectLiteral = {};\r\n                    if (metadata.hasMultiplePrimaryKeys) {\r\n                        condition = rawResults.map(result => {\r\n                            return metadata.primaryColumns.map(primaryColumn => {\r\n                                parameters[\"ids_\" + primaryColumn.propertyName] = result[\"ids_\" + primaryColumn.propertyName];\r\n                                return mainAliasName + \".\" + primaryColumn.propertyName + \"=:ids_\" + primaryColumn.propertyName;\r\n                            }).join(\" AND \");\r\n                        }).join(\" OR \");\r\n                    } else {\r\n                        const ids = rawResults.map(result => result[\"ids_\" + metadata.primaryColumns[0].propertyName]);\r\n                        const areAllNumbers = ids.every((id: any) => typeof id === \"number\");\r\n                        if (areAllNumbers) {\r\n                            // fixes #190. if all numbers then its safe to perform query without parameter\r\n                            condition = `${mainAliasName}.${metadata.primaryColumns[0].propertyName} IN (${ids.join(\", \")})`;\r\n                        } else {\r\n                            parameters[\"ids\"] = ids;\r\n                            condition = mainAliasName + \".\" + metadata.primaryColumns[0].propertyName + \" IN (:ids)\";\r\n                        }\r\n                    }\r\n                    const clonnedQb = this.clone({ queryRunnerProvider: this.queryRunnerProvider });\r\n                    clonnedQb.expressionMap.extraAppendedAndWhereCondition = condition;\r\n                    const [queryWithIdsSql, queryWithIdsParameters] = clonnedQb\r\n                        .setParameters(parameters)\r\n                        .getSqlWithParameters();\r\n                    rawResults = await queryRunner.query(queryWithIdsSql, queryWithIdsParameters);\r\n                    const rawRelationIdResults = await relationIdLoader.load(rawResults);\r\n                    const rawRelationCountResults = await relationCountLoader.load(rawResults);\r\n                    entities = this.rawResultsToEntities(rawResults, rawRelationIdResults, rawRelationCountResults);\r\n                    if (this.expressionMap.mainAlias.hasMetadata)\r\n                        await this.connection.broadcaster.broadcastLoadEventsForAll(this.expressionMap.mainAlias.target, rawResults);\r\n\r\n                }\r\n                return {\r\n                    entities: entities,\r\n                    rawResults: rawResults\r\n                };\r\n\r\n            } else {\r\n\r\n                const [sql, parameters] = this.getSqlWithParameters();\r\n\r\n                const rawResults = await queryRunner.query(sql, parameters);\r\n\r\n                const rawRelationIdResults = await relationIdLoader.load(rawResults);\r\n                const rawRelationCountResults = await relationCountLoader.load(rawResults);\r\n                const entities = this.rawResultsToEntities(rawResults, rawRelationIdResults, rawRelationCountResults);\r\n                if (this.expressionMap.mainAlias.hasMetadata)\r\n                    await this.connection.broadcaster.broadcastLoadEventsForAll(this.expressionMap.mainAlias.target, rawResults);\r\n\r\n                return {\r\n                    entities: entities,\r\n                    rawResults: rawResults\r\n                };\r\n            }\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets count - number of entities selected by sql generated by this query builder.\r\n     * Count excludes all limitations set by setFirstResult and setMaxResults methods call.\r\n     */\r\n    async getCount(): Promise<number> {\r\n        if (this.expressionMap.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const queryRunner = await this.getQueryRunner();\r\n\r\n        const mainAlias = this.expressionMap.mainAlias!.name; // todo: will this work with \"fromTableName\"?\r\n        const metadata = this.expressionMap.mainAlias!.metadata;\r\n\r\n        const distinctAlias = this.escapeAlias(mainAlias);\r\n        let countSql = `COUNT(` + metadata.primaryColumns.map((primaryColumn, index) => {\r\n            const propertyName = this.escapeColumn(primaryColumn.databaseName);\r\n            if (index === 0) {\r\n                return `DISTINCT(${distinctAlias}.${propertyName})`;\r\n            } else {\r\n                return `${distinctAlias}.${propertyName})`;\r\n            }\r\n        }).join(\", \") + \") as \\\"cnt\\\"\";\r\n\r\n        const countQueryBuilder = this\r\n            .clone({ queryRunnerProvider: this.queryRunnerProvider })\r\n            .orderBy(undefined)\r\n            .setOffset(undefined)\r\n            .setLimit(undefined)\r\n            .select(countSql);\r\n        countQueryBuilder.expressionMap.ignoreParentTablesJoins = true;\r\n\r\n        const [countQuerySql, countQueryParameters] = countQueryBuilder.getSqlWithParameters();\r\n\r\n        try {\r\n            const results = await queryRunner.query(countQuerySql, countQueryParameters);\r\n            if (!results || !results[0] || !results[0][\"cnt\"])\r\n                return 0;\r\n\r\n            return parseInt(results[0][\"cnt\"]);\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all raw results returned by execution of generated query builder sql.\r\n     */\r\n    async getRawMany(): Promise<any[]> {\r\n        if (this.expressionMap.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        return this.execute();\r\n    }\r\n\r\n    /**\r\n     * Gets first raw result returned by execution of generated query builder sql.\r\n     */\r\n    async getRawOne(): Promise<any> {\r\n        if (this.expressionMap.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const results = await this.execute();\r\n        return results[0];\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets entities and count returned by execution of generated query builder sql.\r\n     */\r\n    async getManyAndCount(): Promise<[Entity[], number]> {\r\n        if (this.expressionMap.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        // todo: share database connection and counter\r\n        return Promise.all([\r\n            this.getMany(),\r\n            this.getCount()\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Gets entities returned by execution of generated query builder sql.\r\n     */\r\n    async getMany(): Promise<Entity[]> {\r\n        if (this.expressionMap.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const results = await this.getEntitiesAndRawResults();\r\n        return results.entities;\r\n    }\r\n\r\n    /**\r\n     * Gets single entity returned by execution of generated query builder sql.\r\n     */\r\n    async getOne(): Promise<Entity | undefined> {\r\n        const results = await this.getEntitiesAndRawResults();\r\n        const result = results.entities[0] as any;\r\n\r\n        if (result && this.expressionMap.lockMode === \"optimistic\" && this.expressionMap.lockVersion) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n\r\n            if (this.expressionMap.lockVersion instanceof Date) {\r\n                const actualVersion = result[metadata.updateDateColumn!.propertyName]; // what if columns arent set?\r\n                this.expressionMap.lockVersion.setMilliseconds(0);\r\n                if (actualVersion.getTime() !== this.expressionMap.lockVersion.getTime())\r\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\r\n\r\n            } else {\r\n                const actualVersion = result[metadata.versionColumn!.propertyName]; // what if columns arent set?\r\n                if (actualVersion !== this.expressionMap.lockVersion)\r\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clones query builder as it is.\r\n     */\r\n    clone(options?: { queryRunnerProvider?: QueryRunnerProvider }): QueryBuilder<Entity> {\r\n        const qb = new QueryBuilder(this.connection, options ? options.queryRunnerProvider : undefined);\r\n        qb.expressionMap = this.expressionMap.clone();\r\n        return qb;\r\n    }\r\n\r\n    /**\r\n     * Disables escaping.\r\n     */\r\n    disableEscaping(): this {\r\n        this.expressionMap.disableEscaping = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Escapes alias name using current database's escaping character.\r\n     */\r\n    escapeAlias(name: string) {\r\n        if (!this.expressionMap.disableEscaping)\r\n            return name;\r\n        return this.connection.driver.escapeAliasName(name);\r\n    }\r\n\r\n    /**\r\n     * Escapes column name using current database's escaping character.\r\n     */\r\n    escapeColumn(name: string) {\r\n        if (!this.expressionMap.disableEscaping)\r\n            return name;\r\n        return this.connection.driver.escapeColumnName(name);\r\n    }\r\n\r\n    /**\r\n     * Escapes table name using current database's escaping character.\r\n     */\r\n    escapeTable(name: string) {\r\n        if (!this.expressionMap.disableEscaping)\r\n            return name;\r\n        return this.connection.driver.escapeTableName(name);\r\n    }\r\n\r\n    /**\r\n     * Enables special query builder options.\r\n     *\r\n     * @deprecated looks like enableRelationIdValues is not used anymore. What to do? Remove this method? What about persistence?\r\n     */\r\n    enableAutoRelationIdsLoad(): this {\r\n        this.expressionMap.mainAlias!.metadata.relations.forEach(relation => {\r\n            this.loadRelationIdAndMap(this.expressionMap.mainAlias!.name + \".\" + relation.propertyPath,\r\n                this.expressionMap.mainAlias!.name + \".\" + relation.propertyPath,\r\n                { disableMixedMap: true });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     *\r\n     * @experimental Maybe this method should be moved to repository?\r\n     * @deprecated\r\n     */\r\n    andWhereInIds(ids: any[]): this {\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.andWhere(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     *\r\n     * @experimental Maybe this method should be moved to repository?\r\n     * @deprecated\r\n     */\r\n    orWhereInIds(ids: any[]): this {\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.orWhere(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected join(direction: \"INNER\" | \"LEFT\", entityOrProperty: Function | string, aliasName: string, condition?: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): void {\r\n\r\n        const joinAttribute = new JoinAttribute(this.connection, this.expressionMap);\r\n        joinAttribute.direction = direction;\r\n        joinAttribute.mapToProperty = mapToProperty;\r\n        joinAttribute.options = options;\r\n        joinAttribute.isMappingMany = isMappingMany;\r\n        joinAttribute.entityOrProperty = entityOrProperty; // relationName\r\n        joinAttribute.condition = condition; // joinInverseSideCondition\r\n        // joinAttribute.junctionAlias = joinAttribute.relation.isOwning ? parentAlias + \"_\" + destinationTableAlias : destinationTableAlias + \"_\" + parentAlias;\r\n        this.expressionMap.joinAttributes.push(joinAttribute);\r\n\r\n        // todo: find and set metadata right there?\r\n        joinAttribute.alias = this.expressionMap.createAlias({\r\n            name: aliasName,\r\n            metadata: joinAttribute.metadata!\r\n        });\r\n        if (joinAttribute.relation && joinAttribute.relation.junctionEntityMetadata) {\r\n            this.expressionMap.createAlias({\r\n                name: joinAttribute.junctionAlias,\r\n                metadata: joinAttribute.relation.junctionEntityMetadata\r\n            });\r\n        }\r\n    }\r\n\r\n    protected rawResultsToEntities(results: any[], rawRelationIdResults: RelationIdLoadResult[], rawRelationCountResults: RelationCountLoadResult[]) {\r\n        return new RawSqlResultsToEntityTransformer(this.connection.driver, this.expressionMap.joinAttributes, rawRelationIdResults, rawRelationCountResults)\r\n            .transform(results, this.expressionMap.mainAlias!);\r\n    }\r\n\r\n    protected buildEscapedEntityColumnSelects(aliasName: string, metadata: EntityMetadata): SelectQuery[] {\r\n        const hasMainAlias = this.expressionMap.selects.some(select => select.selection === aliasName);\r\n\r\n        const columns: ColumnMetadata[] = hasMainAlias ? metadata.columns : metadata.columns.filter(column => {\r\n            return this.expressionMap.selects.some(select => select.selection === aliasName + \".\" + column.propertyName);\r\n        });\r\n\r\n        return columns.map(column => {\r\n            const selection = this.expressionMap.selects.find(select => select.selection === aliasName + \".\" + column.propertyName);\r\n            return {\r\n                selection: this.escapeAlias(aliasName) + \".\" + this.escapeColumn(column.databaseName),\r\n                aliasName: selection && selection.aliasName ? selection.aliasName : aliasName + \"_\" + column.databaseName,\r\n                // todo: need to keep in mind that custom selection.aliasName breaks hydrator. fix it later!\r\n            };\r\n            // return this.escapeAlias(aliasName) + \".\" + this.escapeColumn(column.fullName) +\r\n            //     \" AS \" + this.escapeAlias(aliasName + \"_\" + column.fullName);\r\n        });\r\n    }\r\n\r\n    protected findEntityColumnSelects(aliasName: string, metadata: EntityMetadata): SelectQuery[] {\r\n        const mainSelect = this.expressionMap.selects.find(select => select.selection === aliasName);\r\n        if (mainSelect)\r\n            return [mainSelect];\r\n\r\n        return this.expressionMap.selects.filter(select => {\r\n            return metadata.columns.some(column => select.selection === aliasName + \".\" + column.propertyName);\r\n        });\r\n    }\r\n\r\n    // todo: extract all create expression methods to separate class QueryExpressionBuilder\r\n\r\n    protected createSelectExpression() {\r\n\r\n        if (!this.expressionMap.mainAlias)\r\n            throw new Error(\"Cannot build query because main alias is not set (call qb#from method)\");\r\n\r\n        // separate escaping functions are used to reduce code size and complexity below\r\n        const et = (aliasName: string) => this.escapeTable(aliasName);\r\n        const ea = (aliasName: string) => this.escapeAlias(aliasName);\r\n        const ec = (aliasName: string) => this.escapeColumn(aliasName);\r\n\r\n        // todo throw exception if selects or from is missing\r\n\r\n        let tableName: string;\r\n        const allSelects: SelectQuery[] = [];\r\n        const excludedSelects: SelectQuery[] = [];\r\n\r\n        const aliasName = this.expressionMap.mainAlias.name;\r\n\r\n        if (this.expressionMap.mainAlias.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias.metadata;\r\n            tableName = metadata.tableName;\r\n\r\n            allSelects.push(...this.buildEscapedEntityColumnSelects(aliasName, metadata));\r\n            excludedSelects.push(...this.findEntityColumnSelects(aliasName, metadata));\r\n\r\n        } else { // if alias does not have metadata - selections will be from custom table\r\n            tableName = this.expressionMap.mainAlias.tableName!;\r\n        }\r\n\r\n        // add selects from joins\r\n        this.expressionMap.joinAttributes\r\n            .forEach(join => {\r\n                if (join.metadata) {\r\n                    allSelects.push(...this.buildEscapedEntityColumnSelects(join.alias.name!, join.metadata));\r\n                    excludedSelects.push(...this.findEntityColumnSelects(join.alias.name!, join.metadata));\r\n                } else {\r\n                    const hasMainAlias = this.expressionMap.selects.some(select => select.selection === join.alias.name);\r\n                    if (hasMainAlias) {\r\n                        allSelects.push({ selection: ea(join.alias.name!) + \".*\" });\r\n                        excludedSelects.push({ selection: ea(join.alias.name!) });\r\n                    }\r\n                }\r\n            });\r\n\r\n        if (!this.expressionMap.ignoreParentTablesJoins && this.expressionMap.mainAlias.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias.metadata;\r\n            if (metadata.parentEntityMetadata && metadata.parentEntityMetadata.inheritanceType === \"class-table\" && metadata.parentIdColumns) {\r\n                const alias = \"parentIdColumn_\" + metadata.parentEntityMetadata.tableName;\r\n                metadata.parentEntityMetadata.columns.forEach(column => {\r\n                    // TODO implement partial select\r\n                    allSelects.push({ selection: ea(alias) + \".\" + ec(column.databaseName), aliasName: alias + \"_\" + column.databaseName });\r\n                });\r\n            }\r\n        }\r\n\r\n        // add selects from relation id joins\r\n        // this.relationIdAttributes.forEach(relationIdAttr => {\r\n        // });\r\n\r\n        /*if (this.enableRelationIdValues) {\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(this.aliasMap.mainAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.aliasMap.mainAlias.name);\r\n\r\n            const metadata = this.connection.entityMetadatas.findByTarget(this.aliasMap.mainAlias.target);\r\n            metadata.manyToManyRelations.forEach(relation => {\r\n\r\n                const junctionMetadata = relation.junctionEntityMetadata;\r\n                junctionMetadata.columns.forEach(column => {\r\n                    const select = ea(this.aliasMap.mainAlias.name + \"_\" + junctionMetadata.table.name + \"_ids\") + \".\" +\r\n                        ec(column.name) + \" AS \" +\r\n                        ea(this.aliasMap.mainAlias.name + \"_\" + relation.name + \"_ids_\" + column.name);\r\n                    allSelects.push(select);\r\n                });\r\n            });\r\n        }*/\r\n\r\n        // add all other selects\r\n        this.expressionMap.selects\r\n            .filter(select => excludedSelects.indexOf(select) === -1)\r\n            .forEach(select => allSelects.push({ selection: this.replacePropertyNames(select.selection), aliasName: select.aliasName }));\r\n\r\n        // if still selection is empty, then simply set it to all (*)\r\n        if (allSelects.length === 0)\r\n            allSelects.push({ selection: \"*\" });\r\n\r\n        let lock: string = \"\";\r\n        if (this.connection.driver instanceof SqlServerDriver) {\r\n            switch (this.expressionMap.lockMode) {\r\n                case \"pessimistic_read\":\r\n                    lock = \" WITH (HOLDLOCK, ROWLOCK)\";\r\n                    break;\r\n                case \"pessimistic_write\":\r\n                    lock = \" WITH (UPDLOCK, ROWLOCK)\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // create a selection query\r\n        switch (this.expressionMap.queryType) {\r\n            case \"select\":\r\n                const selection = allSelects.map(select => select.selection + (select.aliasName ? \" AS \" + ea(select.aliasName) : \"\")).join(\", \");\r\n                if ((this.expressionMap.limit || this.expressionMap.offset) && this.connection.driver instanceof OracleDriver) {\r\n                    return \"SELECT ROWNUM \\\"RN\\\",\" + selection + \" FROM \" + this.escapeTable(tableName) + \" \" + ea(aliasName) + lock;\r\n                }\r\n                return \"SELECT \" + selection + \" FROM \" + this.escapeTable(tableName) + \" \" + ea(aliasName) + lock;\r\n            case \"delete\":\r\n                return \"DELETE FROM \" + et(tableName);\r\n            // return \"DELETE \" + (alias ? ea(alias) : \"\") + \" FROM \" + this.escapeTable(tableName) + \" \" + (alias ? ea(alias) : \"\"); // TODO: only mysql supports aliasing, so what to do with aliases in DELETE queries? right now aliases are used however we are relaying that they will always match a table names\r\n            case \"update\":\r\n                const updateSet = Object.keys(this.expressionMap.updateSet).map(key => key + \"=:updateSet__\" + key);\r\n                const params = Object.keys(this.expressionMap.updateSet).reduce((object, key) => {\r\n                    // todo: map propertyNames to names ?\r\n                    object[\"updateSet_\" + key] = this.expressionMap.updateSet![key];\r\n                    return object;\r\n                }, {} as ObjectLiteral);\r\n                this.setParameters(params);\r\n                return \"UPDATE \" + tableName + \" \" + (aliasName ? ea(aliasName) : \"\") + \" SET \" + updateSet;\r\n        }\r\n\r\n        throw new Error(\"No query builder type is specified.\");\r\n    }\r\n\r\n    protected createHavingExpression() {\r\n        if (!this.expressionMap.havings || !this.expressionMap.havings.length) return \"\";\r\n        const conditions = this.expressionMap.havings.map((having, index) => {\r\n            switch (having.type) {\r\n                case \"and\":\r\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(having.condition);\r\n                case \"or\":\r\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(having.condition);\r\n                default:\r\n                    return this.replacePropertyNames(having.condition);\r\n            }\r\n        }).join(\" \");\r\n\r\n        if (!conditions.length) return \"\";\r\n        return \" HAVING \" + conditions;\r\n    }\r\n\r\n    protected createWhereExpression() {\r\n\r\n        const conditions = this.expressionMap.wheres.map((where, index) => {\r\n            switch (where.type) {\r\n                case \"and\":\r\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(where.condition);\r\n                case \"or\":\r\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(where.condition);\r\n                default:\r\n                    return this.replacePropertyNames(where.condition);\r\n            }\r\n        }).join(\" \");\r\n\r\n        if (this.expressionMap.mainAlias!.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\r\n                const condition = `${this.replacePropertyNames(this.expressionMap.mainAlias!.name + \".\" + metadata.discriminatorColumn.databaseName)} IN (:discriminatorColumnValues)`;\r\n                return ` WHERE ${conditions.length ? \"(\" + conditions + \") AND\" : \"\"} ${condition}`;\r\n            }\r\n        }\r\n\r\n        if (!conditions.length) // TODO copy in to discriminator condition\r\n            return this.expressionMap.extraAppendedAndWhereCondition ? \" WHERE \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : \"\";\r\n\r\n        if (this.expressionMap.extraAppendedAndWhereCondition)\r\n            return \" WHERE (\" + conditions + \") AND \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);\r\n\r\n        return \" WHERE \" + conditions;\r\n    }\r\n\r\n    /**\r\n     * Replaces all entity's propertyName to name in the given statement.\r\n     */\r\n    protected replacePropertyNames(statement: string) {\r\n        this.expressionMap.aliases.forEach(alias => {\r\n            if (!alias.hasMetadata) return;\r\n            alias.metadata.columns.forEach(column => {\r\n                const expression = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + column.propertyPath + \"([ =\\)\\,]|.{0}$)\";\r\n                statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + this.escapeAlias(alias.name) + \".\" + this.escapeColumn(column.databaseName) + \"$2\");\r\n                const expression2 = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + column.propertyName + \"([ =\\)\\,]|.{0}$)\";\r\n                statement = statement.replace(new RegExp(expression2, \"gm\"), \"$1\" + this.escapeAlias(alias.name) + \".\" + this.escapeColumn(column.databaseName) + \"$2\");\r\n            });\r\n            alias.metadata.relations.forEach(relation => {\r\n                [...relation.joinColumns, ...relation.inverseJoinColumns].forEach(joinColumn => {\r\n                    const expression = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + relation.propertyPath + \"\\\\.\" + joinColumn.referencedColumn!.propertyPath + \"([ =\\)\\,]|.{0}$)\";\r\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + this.escapeAlias(alias.name) + \".\" + this.escapeColumn(joinColumn.databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\r\n                });\r\n                if (relation.joinColumns.length > 0) {\r\n                    const expression = \"([ =\\(]|^.{0})\" + alias.name + \"\\\\.\" + relation.propertyPath + \"([ =\\)\\,]|.{0}$)\";\r\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + this.escapeAlias(alias.name) + \".\" + this.escapeColumn(relation.joinColumns[0].databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\r\n                }\r\n            });\r\n        });\r\n        return statement;\r\n    }\r\n\r\n    protected createJoinExpression(): string {\r\n\r\n        // separate escaping functions are used to reduce code size and complexity below\r\n        const et = (aliasName: string) => this.escapeTable(aliasName);\r\n        const ea = (aliasName: string) => this.escapeAlias(aliasName);\r\n        const ec = (aliasName: string) => this.escapeColumn(aliasName);\r\n\r\n        // examples:\r\n        // select from owning side\r\n        // qb.select(\"post\")\r\n        //     .leftJoinAndSelect(\"post.category\", \"category\");\r\n        // select from non-owning side\r\n        // qb.select(\"category\")\r\n        //     .leftJoinAndSelect(\"category.post\", \"post\");\r\n\r\n        const joins = this.expressionMap.joinAttributes.map(joinAttr => {\r\n\r\n            const relation = joinAttr.relation;\r\n            const destinationTableName = joinAttr.tableName;\r\n            const destinationTableAlias = joinAttr.alias.name;\r\n            const appendedCondition = joinAttr.condition ? \" AND (\" + joinAttr.condition + \")\" : \"\";\r\n            const parentAlias = joinAttr.parentAlias;\r\n\r\n            // if join was build without relation (e.g. without \"post.category\") then it means that we have direct\r\n            // table to join, without junction table involved. This means we simply join direct table.\r\n            if (!parentAlias || !relation)\r\n                return \" \" + joinAttr.direction + \" JOIN \" + et(destinationTableName) + \" \" + ea(destinationTableAlias) +\r\n                    (joinAttr.condition ? \" ON \" + this.replacePropertyNames(joinAttr.condition) : \"\");\r\n\r\n            // if real entity relation is involved\r\n            if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n\r\n                // JOIN `category` `category` ON `category`.`id` = `post`.`categoryId`\r\n                const condition = relation.joinColumns.map(joinColumn => {\r\n                    return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" +\r\n                        parentAlias + \".\" + relation.propertyPath + \".\" + joinColumn.referencedColumn!.propertyPath;\r\n                }).join(\" AND \");\r\n\r\n                return \" \" + joinAttr.direction + \" JOIN \" + et(destinationTableName) + \" \" + ea(destinationTableAlias) + \" ON \" + this.replacePropertyNames(condition + appendedCondition);\r\n\r\n            } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n\r\n                // JOIN `post` `post` ON `post`.`categoryId` = `category`.`id`\r\n                const condition = relation.inverseRelation!.joinColumns.map(joinColumn => {\r\n                    return destinationTableAlias + \".\" + relation.inverseRelation!.propertyPath + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" +\r\n                        parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\r\n                }).join(\" AND \");\r\n\r\n                return \" \" + joinAttr.direction + \" JOIN \" + et(destinationTableName) + \" \" + ea(destinationTableAlias) + \" ON \" + this.replacePropertyNames(condition + appendedCondition);\r\n\r\n            } else { // means many-to-many\r\n                const junctionTableName = relation.junctionEntityMetadata!.tableName;\r\n\r\n                const junctionAlias = joinAttr.junctionAlias;\r\n                let junctionCondition = \"\", destinationCondition = \"\";\r\n\r\n                if (relation.isOwning) {\r\n\r\n                    junctionCondition = relation.joinColumns.map(joinColumn => {\r\n                        // `post_category`.`postId` = `post`.`id`\r\n                        return junctionAlias + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\r\n                    }).join(\" AND \");\r\n\r\n                    destinationCondition = relation.inverseJoinColumns.map(joinColumn => {\r\n                        // `category`.`id` = `post_category`.`categoryId`\r\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" + junctionAlias + \".\" + joinColumn.propertyPath;\r\n                    }).join(\" AND \");\r\n\r\n                } else {\r\n                    junctionCondition = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => {\r\n                        // `post_category`.`categoryId` = `category`.`id`\r\n                        return junctionAlias + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn!.propertyPath;\r\n                    }).join(\" AND \");\r\n\r\n                    destinationCondition = relation.inverseRelation!.joinColumns.map(joinColumn => {\r\n                        // `post`.`id` = `post_category`.`postId`\r\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn!.propertyPath + \"=\" + junctionAlias + \".\" + joinColumn.propertyPath;\r\n                    }).join(\" AND \");\r\n                }\r\n\r\n                return \" \" + joinAttr.direction + \" JOIN \" + et(junctionTableName) + \" \" + ea(junctionAlias) + \" ON \" + this.replacePropertyNames(junctionCondition) +\r\n                    \" \" + joinAttr.direction + \" JOIN \" + et(destinationTableName) + \" \" + ea(destinationTableAlias) + \" ON \" + this.replacePropertyNames(destinationCondition + appendedCondition);\r\n\r\n            }\r\n        });\r\n\r\n        if (!this.expressionMap.ignoreParentTablesJoins && this.expressionMap.mainAlias!.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n            if (metadata.parentEntityMetadata && metadata.parentEntityMetadata.inheritanceType === \"class-table\" && metadata.parentIdColumns) {\r\n                const alias = \"parentIdColumn_\" + metadata.parentEntityMetadata.tableName;\r\n                const condition = metadata.parentIdColumns.map(parentIdColumn => {\r\n                    return this.expressionMap.mainAlias!.name + \".\" + parentIdColumn.databaseName + \"=\" + ea(alias) + \".\" + parentIdColumn.propertyName;\r\n                }).join(\" AND \");\r\n                const join = \" JOIN \" + et(metadata.parentEntityMetadata.tableName) + \" \" + ea(alias) + \" ON \" + condition;\r\n                joins.push(join);\r\n            }\r\n        }\r\n\r\n        return joins.join(\" \");\r\n    }\r\n\r\n    protected createGroupByExpression() {\r\n        if (!this.expressionMap.groupBys || !this.expressionMap.groupBys.length) return \"\";\r\n        return \" GROUP BY \" + this.replacePropertyNames(this.expressionMap.groupBys.join(\", \"));\r\n    }\r\n\r\n    protected createOrderByCombinedWithSelectExpression(parentAlias: string) {\r\n\r\n        // if table has a default order then apply it\r\n        let orderBys = this.expressionMap.orderBys;\r\n        if (!Object.keys(orderBys).length && this.expressionMap.mainAlias!.hasMetadata) {\r\n            orderBys = this.expressionMap.mainAlias!.metadata.orderBy || {};\r\n        }\r\n\r\n        const selectString = Object.keys(orderBys)\r\n            .map(columnName => {\r\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\r\n                return this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(alias + \"_\" + column + embeddedProperties.join(\"_\"));\r\n            })\r\n            .join(\", \");\r\n\r\n        const orderByString = Object.keys(orderBys)\r\n            .map(columnName => {\r\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\r\n                return this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(alias + \"_\" + column + embeddedProperties.join(\"_\")) + \" \" + this.expressionMap.orderBys[columnName];\r\n            })\r\n            .join(\", \");\r\n\r\n        return [selectString, orderByString];\r\n    }\r\n\r\n    protected createOrderByExpression() {\r\n\r\n        let orderBys = this.expressionMap.orderBys;\r\n\r\n        // if table has a default order then apply it\r\n        if (!Object.keys(orderBys).length && this.expressionMap.mainAlias!.hasMetadata) {\r\n            orderBys = this.expressionMap.mainAlias!.metadata.orderBy || {};\r\n        }\r\n\r\n        // if user specified a custom order then apply it\r\n        if (Object.keys(orderBys).length > 0)\r\n            return \" ORDER BY \" + Object.keys(orderBys)\r\n                .map(columnName => {\r\n                    return this.replacePropertyNames(columnName) + \" \" + this.expressionMap.orderBys[columnName];\r\n                })\r\n                .join(\", \");\r\n\r\n        return \"\";\r\n    }\r\n\r\n    protected createLimitExpression(): string {\r\n        if (!this.expressionMap.limit || this.connection.driver instanceof OracleDriver) return \"\";\r\n        return \" LIMIT \" + this.expressionMap.limit;\r\n    }\r\n\r\n    protected createOffsetExpression(): string {\r\n        if (!this.expressionMap.offset || this.connection.driver instanceof OracleDriver) return \"\";\r\n        return \" OFFSET \" + this.expressionMap.offset;\r\n    }\r\n\r\n    protected createLockExpression(): string {\r\n        switch (this.expressionMap.lockMode) {\r\n            case \"pessimistic_read\":\r\n                if (this.connection.driver instanceof MysqlDriver) {\r\n                    return \" LOCK IN SHARE MODE\";\r\n\r\n                } else if (this.connection.driver instanceof PostgresDriver) {\r\n                    return \" FOR SHARE\";\r\n\r\n                } else if (this.connection.driver instanceof SqlServerDriver) {\r\n                    return \"\";\r\n\r\n                } else {\r\n                    throw new LockNotSupportedOnGivenDriverError();\r\n                }\r\n            case \"pessimistic_write\":\r\n                if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof PostgresDriver) {\r\n                    return \" FOR UPDATE\";\r\n\r\n                } else if (this.connection.driver instanceof SqlServerDriver) {\r\n                    return \"\";\r\n\r\n                } else {\r\n                    throw new LockNotSupportedOnGivenDriverError();\r\n                }\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\r\n     */\r\n    protected createWhereIdsExpression(ids: any[]): [string, ObjectLiteral] {\r\n        const metadata = this.expressionMap.mainAlias!.metadata;\r\n\r\n        // create shortcuts for better readability\r\n        const ea = (aliasName: string) => this.escapeAlias(aliasName);\r\n        const ec = (columnName: string) => this.escapeColumn(columnName);\r\n\r\n        const alias = this.expressionMap.mainAlias!.name;\r\n        const parameters: ObjectLiteral = {};\r\n        const whereStrings = ids.map((id, index) => {\r\n            const whereSubStrings: string[] = [];\r\n            // if (metadata.hasMultiplePrimaryKeys) {\r\n            metadata.primaryColumns.forEach((primaryColumn, secondIndex) => {\r\n                whereSubStrings.push(ea(alias) + \".\" + ec(primaryColumn.databaseName) + \"=:id_\" + index + \"_\" + secondIndex);\r\n                parameters[\"id_\" + index + \"_\" + secondIndex] = primaryColumn.getEntityValue(id);\r\n            });\r\n            metadata.parentIdColumns.forEach((primaryColumn, secondIndex) => {\r\n                whereSubStrings.push(ea(alias) + \".\" + ec(id[primaryColumn.databaseName]) + \"=:parentId_\" + index + \"_\" + secondIndex);\r\n                parameters[\"parentId_\" + index + \"_\" + secondIndex] = primaryColumn.getEntityValue(id);\r\n            });\r\n            // } else {\r\n            //     if (metadata.primaryColumns.length > 0) {\r\n            //         whereSubStrings.push(ea(alias) + \".\" + ec(metadata.firstPrimaryColumn.fullName) + \"=:id_\" + index);\r\n            //         parameters[\"id_\" + index] = id;\r\n            //\r\n            //     } else if (metadata.parentIdColumns.length > 0) {\r\n            //         whereSubStrings.push(ea(alias) + \".\" + ec(metadata.parentIdColumns[0].fullName) + \"=:parentId_\" + index);\r\n            //         parameters[\"parentId_\" + index] = id;\r\n            //     }\r\n            // }\r\n            return whereSubStrings.join(\" AND \");\r\n        });\r\n\r\n        const whereString = whereStrings.length > 1 ? \"(\" + whereStrings.join(\" OR \") + \")\" : whereStrings[0];\r\n        return [whereString, parameters];\r\n    }\r\n\r\n    protected async getQueryRunner(): Promise<QueryRunner> {\r\n\r\n        if (this.queryRunnerProvider instanceof QueryRunnerProvider) {\r\n            return this.queryRunnerProvider.provide();\r\n\r\n        } else { // means its empty\r\n            return this.connection.driver.createQueryRunner();\r\n        }\r\n    }\r\n\r\n    protected hasOwnQueryRunner(): boolean {\r\n        return !this.queryRunnerProvider;\r\n    }\r\n\r\n}\r\n","import {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\n/**\r\n * Arguments for RelationIdMetadataArgs class.\r\n */\r\nexport interface RelationIdMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this decorator is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Class's property name to which this decorator is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Target's relation which it should count.\r\n     */\r\n    readonly relation: string|((object: any) => any);\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    readonly alias?: string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    readonly queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>;\r\n\r\n}\r\n","import {RelationIdMetadataArgs} from \"../metadata-args/RelationIdMetadataArgs\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\n\r\n/**\r\n * Contains all information about entity's relation count.\r\n */\r\nexport class RelationIdMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this column metadata is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Relation from which ids will be extracted.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * Relation name which need to count.\r\n     */\r\n    relationNameOrFactory: string|((object: any) => any);\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias?: string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        args: RelationIdMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.target = options.args.target;\r\n        this.propertyName = options.args.propertyName;\r\n        this.relationNameOrFactory = options.args.relation;\r\n        this.alias = options.args.alias;\r\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend relation id properties.\r\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\r\n     */\r\n    build() {\r\n        const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\r\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`);\r\n\r\n        this.relation = relation;\r\n    }\r\n\r\n}","import {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\r\nimport {RelationIdMetadata} from \"./RelationIdMetadata\";\r\nimport {RelationCountMetadata} from \"./RelationCountMetadata\";\r\n\r\n/**\r\n * Contains all information about entity's embedded property.\r\n */\r\nexport class EmbeddedMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this embedded is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Parent embedded in the case if this embedded inside other embedded.\r\n     */\r\n    parentEmbeddedMetadata?: EmbeddedMetadata;\r\n\r\n    /**\r\n     * Embedded target type.\r\n     */\r\n    type: Function;\r\n\r\n    /**\r\n     * Property name on which this embedded is attached.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * Columns inside this embed.\r\n     */\r\n    columns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Relations inside this embed.\r\n     */\r\n    relations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Nested embeddable in this embeddable (which has current embedded as parent embedded).\r\n     */\r\n    embeddeds: EmbeddedMetadata[] = [];\r\n\r\n    /**\r\n     * Indicates if this embedded is in array mode.\r\n     *\r\n     * This option works only in monogodb.\r\n     */\r\n    isArray: boolean = false;\r\n\r\n    /**\r\n     * Prefix of the embedded, used instead of propertyName.\r\n     * If set to empty string, then prefix is not set at all.\r\n     */\r\n    customPrefix: string|boolean|undefined;\r\n\r\n    /**\r\n     * Gets the prefix of the columns.\r\n     * By default its a property name of the class where this prefix is.\r\n     * But if custom prefix is set then it takes its value as a prefix.\r\n     * However if custom prefix is set to empty string prefix to column is not applied at all.\r\n     */\r\n    prefix: string;\r\n\r\n    /**\r\n     * Returns array of property names of current embed and all its parent embeds.\r\n     *\r\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\r\n     * we need to get value of \"id\" column from the post real entity object.\r\n     * this method will return [\"data\", \"information\", \"counters\"]\r\n     */\r\n    parentPropertyNames: string[] = [];\r\n\r\n    /**\r\n     * Returns embed metadatas from all levels of the parent tree.\r\n     *\r\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\r\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\r\n     */\r\n    embeddedMetadataTree: EmbeddedMetadata[] = [];\r\n\r\n    /**\r\n     * Embed metadatas from all levels of the parent tree.\r\n     *\r\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\r\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\r\n     */\r\n    columnsFromTree: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Relations of this embed and all relations from its child embeds.\r\n     */\r\n    relationsFromTree: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Relation ids of this embed and all relation ids from its child embeds.\r\n     */\r\n    relationIdsFromTree: RelationIdMetadata[] = [];\r\n\r\n    /**\r\n     * Relation counts of this embed and all relation counts from its child embeds.\r\n     */\r\n    relationCountsFromTree: RelationCountMetadata[] = [];\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        args: EmbeddedMetadataArgs,\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.type = options.args.type();\r\n        this.propertyName = options.args.propertyName;\r\n        this.customPrefix = options.args.prefix;\r\n        this.isArray = options.args.isArray;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new embedded object.\r\n     */\r\n    create(): any {\r\n        return new (this.type as any);\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    build(namingStrategy: NamingStrategyInterface): this {\r\n        this.embeddeds.forEach(embedded => embedded.build(namingStrategy));\r\n        this.prefix = this.buildPrefix();\r\n        this.parentPropertyNames = this.buildParentPropertyNames();\r\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\r\n        this.columnsFromTree = this.buildColumnsFromTree();\r\n        this.relationsFromTree = this.buildRelationsFromTree();\r\n        return this;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Protected Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    protected buildPrefix(): string {\r\n        let prefixes: string[] = [];\r\n        if (this.parentEmbeddedMetadata)\r\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix());\r\n\r\n        if (this.customPrefix === undefined) {\r\n            prefixes.push(this.propertyName);\r\n\r\n        } else if (typeof this.customPrefix === \"string\") {\r\n            prefixes.push(this.customPrefix);\r\n        }\r\n\r\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\r\n    }\r\n\r\n    protected buildParentPropertyNames(): string[] {\r\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\r\n    }\r\n\r\n    protected buildEmbeddedMetadataTree(): EmbeddedMetadata[] {\r\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\r\n    }\r\n\r\n    protected buildColumnsFromTree(): ColumnMetadata[] {\r\n        return this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.buildColumnsFromTree()), this.columns);\r\n    }\r\n\r\n    protected buildRelationsFromTree(): RelationMetadata[] {\r\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationsFromTree()), this.relations);\r\n    }\r\n\r\n}","import {OnDeleteType} from \"../../metadata/types/OnDeleteType\";\r\n\r\n// todo: add ON_UPDATE\r\n\r\n/**\r\n * Describes all relation's options.\r\n */\r\nexport interface RelationOptions {\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be inserted / updated / removed to the db.\r\n     * This is option a shortcut if you would like to set cascadeInsert, cascadeUpdate and cascadeRemove to true.\r\n     */\r\n    cascadeAll?: boolean;\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be inserted to the db.\r\n     */\r\n    cascadeInsert?: boolean;\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be updated in the db.\r\n     */\r\n    cascadeUpdate?: boolean;\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be remove from the db.\r\n     */\r\n    cascadeRemove?: boolean;\r\n\r\n    /**\r\n     * Indicates if relation column value can be nullable or not.\r\n     */\r\n    nullable?: boolean;\r\n\r\n    /**\r\n     * Database cascade action on delete.\r\n     */\r\n    onDelete?: OnDeleteType;\r\n\r\n    /**\r\n     * Indicates if this relation will be a primary key.\r\n     * Can be used only for many-to-one and owner one-to-one relations.\r\n     */\r\n    primary?: boolean;\r\n\r\n    /**\r\n     * Set this relation to be lazy. Note: lazy relations are promises. When you call them they return promise\r\n     * which resolve relation result then. If your property's type is Promise then this relation is set to lazy automatically.\r\n     */\r\n    lazy?: boolean;\r\n\r\n}","/**\r\n * Contains the name of the property of the object, or the function that returns this name.\r\n */\r\nexport type PropertyTypeFactory<T> = string|((t: T) => string|any);\r\n","/**\r\n * Function that returns a type of the field. Returned value must be a class used on the relation.\r\n */\r\nexport type RelationTypeInFunction = ((type?: any) => Function)|Function|string; // todo: |string ?\r\n\r\n","import {RelationType} from \"../metadata/types/RelationTypes\";\r\nimport {RelationOptions} from \"../decorator/options/RelationOptions\";\r\nimport {PropertyTypeFactory} from \"../metadata/types/PropertyTypeInFunction\";\r\nimport {RelationTypeInFunction} from \"../metadata/types/RelationTypeInFunction\";\r\n\r\n/**\r\n * Arguments for RelationMetadata class.\r\n */\r\nexport interface RelationMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this relation is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * In the case if this relation is without a target, targetId must be specified.\r\n     * This is used for entity schemas without classes.\r\n     */\r\n    // readonly targetId?: string;\r\n\r\n    /**\r\n     * Class's property name to which this relation is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Indicates if this relation will be lazily loaded.\r\n     */\r\n    readonly isLazy: boolean;\r\n\r\n    /**\r\n     * Original (reflected) class's property type.\r\n     *\r\n     * todo: this can be empty for relations from entity schemas.\r\n     */\r\n    // readonly propertyType?: any;\r\n\r\n    /**\r\n     * Type of relation. Can be one of the value of the RelationTypes class.\r\n     */\r\n    readonly relationType: RelationType;\r\n\r\n    /**\r\n     * Type of the relation. This type is in function because of language specifics and problems with recursive\r\n     * referenced classes.\r\n     */\r\n    readonly type: RelationTypeInFunction;\r\n\r\n    /**\r\n     * Inverse side of the relation.\r\n     */\r\n    readonly inverseSideProperty?: PropertyTypeFactory<any>;\r\n\r\n    /**\r\n     * Additional relation options.\r\n     */\r\n    readonly options: RelationOptions;\r\n\r\n    /**\r\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\r\n     */\r\n    readonly isTreeParent?: boolean;\r\n\r\n    /**\r\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\r\n     */\r\n    readonly isTreeChildren?: boolean;\r\n\r\n}","import {RelationType} from \"./types/RelationTypes\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {ForeignKeyMetadata} from \"./ForeignKeyMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\r\nimport {OnDeleteType} from \"./types/OnDeleteType\";\r\nimport {PropertyTypeFactory} from \"./types/PropertyTypeInFunction\";\r\n\r\n/**\r\n * Contains all information about some entity's relation.\r\n */\r\nexport class RelationMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the entity where this relation is placed.\r\n     *\r\n     * For example for @ManyToMany(type => Category) in Post, entityMetadata will be metadata of Post entity.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Entity metadata of the entity that is targeted by this relation.\r\n     *\r\n     * For example for @ManyToMany(type => Category) in Post, inverseEntityMetadata will be metadata of Category entity.\r\n     */\r\n    inverseEntityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Entity metadata of the junction table.\r\n     * Junction tables have their own entity metadata objects.\r\n     * Defined only for many-to-many relations.\r\n     */\r\n    junctionEntityMetadata?: EntityMetadata;\r\n\r\n    /**\r\n     * Embedded metadata where this relation is.\r\n     * If this relation is not in embed then this property value is undefined.\r\n     */\r\n    embeddedMetadata?: EmbeddedMetadata;\r\n\r\n    /**\r\n     * Relation type, e.g. is it one-to-one, one-to-many, many-to-one or many-to-many.\r\n     */\r\n    relationType: RelationType;\r\n\r\n    /**\r\n     * Target entity to which this relation is applied.\r\n     * Target IS NOT equal to entityMetadata.target, because relation\r\n     *\r\n     * For example for @ManyToMany(type => Category) in Post, target will be Post.\r\n     * If @ManyToMany(type => Category) is in Counters which is embedded into Post, target will be Counters.\r\n     * If @ManyToMany(type => Category) is in abstract class BaseUser which Post extends, target will be BaseUser.\r\n     * Target can be string if its defined in entity schema instead of class.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which relation decorator is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * Gets full path to this column property (including relation name).\r\n     * Full path is relevant when column is used in embeds (one or multiple nested).\r\n     * For example it will return \"counters.subcounters.likes\".\r\n     * If property is not in embeds then it returns just property name of the column.\r\n     */\r\n    propertyPath: string;\r\n\r\n    /**\r\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\r\n     */\r\n    isTreeParent: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\r\n     */\r\n    isTreeChildren: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this relation's column is a primary key.\r\n     * Can be used only for many-to-one and owner one-to-one relations.\r\n     */\r\n    isPrimary: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this relation is lazily loaded.\r\n     */\r\n    isLazy: boolean = false;\r\n\r\n    /**\r\n     * If set to true then related objects are allowed to be inserted to the database.\r\n     */\r\n    isCascadeInsert: boolean = false;\r\n\r\n    /**\r\n     * If set to true then related objects are allowed to be updated in the database.\r\n     */\r\n    isCascadeUpdate: boolean = false;\r\n\r\n    /**\r\n     * If set to true then related objects are allowed to be remove from the database.\r\n     */\r\n    isCascadeRemove: boolean = false;\r\n\r\n    /**\r\n     * Indicates if relation column value can be nullable or not.\r\n     */\r\n    isNullable: boolean = true;\r\n\r\n    /**\r\n     * What to do with a relation on deletion of the row containing a foreign key.\r\n     */\r\n    onDelete?: OnDeleteType;\r\n\r\n    /**\r\n     * Gets the property's type to which this relation is applied.\r\n     *\r\n     * For example for @ManyToMany(type => Category) in Post, target will be Category.\r\n     */\r\n    type: Function|string;\r\n\r\n    /**\r\n     * Indicates if this side is an owner of this relation.\r\n     */\r\n    isOwning: boolean = false;\r\n\r\n    /**\r\n     * Checks if this relation's type is \"one-to-one\".\r\n     */\r\n    isOneToOne: boolean = false;\r\n\r\n    /**\r\n     * Checks if this relation is owner side of the \"one-to-one\" relation.\r\n     * Owner side means this side of relation has a join column in the table.\r\n     */\r\n    isOneToOneOwner: boolean = false;\r\n\r\n    /**\r\n     * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).\r\n     */\r\n    isWithJoinColumn: boolean = false;\r\n\r\n    /**\r\n     * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\r\n     * NOT owner side means this side of relation does not have a join column in the table.\r\n     */\r\n    isOneToOneNotOwner: boolean = false;\r\n\r\n    /**\r\n     * Checks if this relation's type is \"one-to-many\".\r\n     */\r\n    isOneToMany: boolean = false;\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-one\".\r\n     */\r\n    isManyToOne: boolean = false;\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-many\".\r\n     */\r\n    isManyToMany: boolean = false;\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\r\n     * Owner side means this side of relation has a join table.\r\n     */\r\n    isManyToManyOwner: boolean = false;\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\r\n     * Not owner side means this side of relation does not have a join table.\r\n     */\r\n    isManyToManyNotOwner: boolean = false;\r\n\r\n    /**\r\n     * Gets the property path of the inverse side of the relation.\r\n     */\r\n    inverseSidePropertyPath: string;\r\n\r\n    /**\r\n     * Inverse side of the relation set by user.\r\n     *\r\n     * Inverse side set in the relation can be either string - property name of the column on inverse side,\r\n     * either can be a function that accepts a map of properties with the object and returns one of them.\r\n     * Second approach is used to achieve type-safety.\r\n     */\r\n    givenInverseSidePropertyFactory: PropertyTypeFactory<any>;\r\n\r\n    /**\r\n     * Gets the relation metadata of the inverse side of this relation.\r\n     */\r\n    inverseRelation?: RelationMetadata;\r\n\r\n    /**\r\n     * Join table name.\r\n     */\r\n    joinTableName: string;\r\n\r\n    /**\r\n     * Foreign keys created for this relation.\r\n     */\r\n    foreignKeys: ForeignKeyMetadata[] = [];\r\n\r\n    /**\r\n     * Join table columns.\r\n     * Join columns can be obtained only from owner side of the relation.\r\n     * From non-owner side of the relation join columns will be empty.\r\n     * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.\r\n     * If this relation is many-to-many then it takes all owner join columns from the junction entity.\r\n     */\r\n    joinColumns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Inverse join table columns.\r\n     * Inverse join columns are supported only for many-to-many relations\r\n     * and can be obtained only from owner side of the relation.\r\n     * From non-owner side of the relation join columns will be undefined.\r\n     */\r\n    inverseJoinColumns: ColumnMetadata[] = [];\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        embeddedMetadata?: EmbeddedMetadata,\r\n        args: RelationMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.embeddedMetadata = options.embeddedMetadata!;\r\n        const args = options.args;\r\n        this.target = args.target;\r\n        this.propertyName = args.propertyName;\r\n        this.relationType = args.relationType;\r\n\r\n        if (args.inverseSideProperty)\r\n            this.givenInverseSidePropertyFactory = args.inverseSideProperty;\r\n\r\n        this.isLazy = args.isLazy || false;\r\n        this.isCascadeInsert = args.options.cascadeInsert || args.options.cascadeAll || false;\r\n        this.isCascadeUpdate = args.options.cascadeUpdate || args.options.cascadeAll || false;\r\n        this.isCascadeRemove = args.options.cascadeRemove || args.options.cascadeAll || false;\r\n        this.isNullable = args.options.nullable !== false;\r\n        this.onDelete = args.options.onDelete;\r\n        this.isPrimary = args.options.primary || false;\r\n        this.isTreeParent = args.isTreeParent || false;\r\n        this.isTreeChildren = args.isTreeChildren || false;\r\n        this.type = args.type instanceof Function ? (args.type as () => any)() : args.type;\r\n\r\n        this.isOneToOne = this.relationType === \"one-to-one\";\r\n        this.isOneToMany = this.relationType === \"one-to-many\";\r\n        this.isManyToOne = this.relationType === \"many-to-one\";\r\n        this.isManyToMany = this.relationType === \"many-to-many\";\r\n        this.isOneToOneNotOwner = this.isOneToOne ? true : false;\r\n        this.isManyToManyNotOwner = this.isManyToMany ? true : false;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Extracts column value from the given entity.\r\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\r\n     */\r\n    getEntityValue(entity: ObjectLiteral): any|undefined {\r\n\r\n        // extract column value from embeddeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\r\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                return propertyName ? extractEmbeddedColumnValue(propertyNames, value[propertyName]) : value;\r\n            };\r\n\r\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\r\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\r\n            return embeddedObject ? embeddedObject[this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName] : undefined;\r\n\r\n        } else { // no embeds - no problems. Simply return column name by property name of the entity\r\n            return entity[this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets given entity's relation's value.\r\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\r\n     */\r\n    setEntityValue(entity: ObjectLiteral, value: any): void {\r\n        const propertyName = this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName;\r\n\r\n        if (this.embeddedMetadata) {\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const extractEmbeddedColumnValue = (embeddedMetadatas: EmbeddedMetadata[], map: ObjectLiteral): any => {\r\n                // if (!object[embeddedMetadata.propertyName])\r\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\r\n\r\n                const embeddedMetadata = embeddedMetadatas.shift();\r\n                if (embeddedMetadata) {\r\n                    if (!map[embeddedMetadata.propertyName])\r\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\r\n\r\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\r\n                    return map;\r\n                }\r\n                map[propertyName] = value;\r\n                return map;\r\n            };\r\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\r\n\r\n        } else {\r\n            entity[propertyName] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates entity id map from the given entity ids array.\r\n     */\r\n    createValueMap(value: any) {\r\n\r\n        // extract column value from embeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object and return it in a\r\n            // { data: { information: { counters: { id: ... } } } } format\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // now need to access post[data][information][counters] to get column value from the counters\r\n            // and on each step we need to create complex literal object, e.g. first { data },\r\n            // then { data: { information } }, then { data: { information: { counters } } },\r\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\r\n            // this recursive function helps doing that\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], map: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                if (propertyName) {\r\n                    map[propertyName] = {};\r\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\r\n                    return map;\r\n                }\r\n                map[this.propertyName] = value;\r\n                return map;\r\n            };\r\n            return extractEmbeddedColumnValue(propertyNames, {});\r\n\r\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\r\n            return { [this.propertyName]: value };\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend relation metadata properties.\r\n     * This builder method should be used only after embedded metadata tree was build.\r\n     */\r\n    build() {\r\n        this.propertyPath = this.buildPropertyPath();\r\n    }\r\n\r\n    /**\r\n     * Registers given foreign keys in the relation.\r\n     * This builder method should be used to register foreign key in the relation.\r\n     */\r\n    registerForeignKeys(...foreignKeys: ForeignKeyMetadata[]) {\r\n        this.foreignKeys.push(...foreignKeys);\r\n        this.joinColumns = this.foreignKeys[0] ? this.foreignKeys[0].columns : [];\r\n        this.inverseJoinColumns = this.foreignKeys[1] ? this.foreignKeys[1].columns : [];\r\n        this.isOwning = this.isManyToOne || ((this.isManyToMany || this.isOneToOne) && this.joinColumns.length > 0);\r\n        this.isOneToOneOwner = this.isOneToOne && this.isOwning;\r\n        this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning;\r\n        this.isManyToManyOwner = this.isManyToMany && this.isOwning;\r\n        this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning;\r\n        this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner;\r\n    }\r\n\r\n    /**\r\n     * Registers a given junction entity metadata.\r\n     * This builder method can be called after junction entity metadata for the many-to-many relation was created.\r\n     */\r\n    registerJunctionEntityMetadata(junctionEntityMetadata: EntityMetadata) {\r\n        this.junctionEntityMetadata = junctionEntityMetadata;\r\n        this.joinTableName = junctionEntityMetadata.tableName;\r\n        if (this.inverseRelation) {\r\n            this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\r\n            this.joinTableName = junctionEntityMetadata.tableName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds inverse side property path based on given inverse side property factory.\r\n     * This builder method should be used only after properties map of the inverse entity metadata was build.\r\n     */\r\n    buildInverseSidePropertyPath(): string {\r\n\r\n        if (this.givenInverseSidePropertyFactory) {\r\n            const ownerEntityPropertiesMap = this.inverseEntityMetadata.propertiesMap;\r\n            if (typeof this.givenInverseSidePropertyFactory === \"function\")\r\n                return this.givenInverseSidePropertyFactory(ownerEntityPropertiesMap);\r\n\r\n            if (typeof this.givenInverseSidePropertyFactory === \"string\")\r\n                return this.givenInverseSidePropertyFactory;\r\n\r\n        } else if (this.isTreeParent && this.entityMetadata.treeChildrenRelation) {\r\n            return this.entityMetadata.treeChildrenRelation.propertyName;\r\n\r\n        } else if (this.isTreeChildren && this.entityMetadata.treeParentRelation) {\r\n            return this.entityMetadata.treeParentRelation.propertyName;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Builds relation's property path based on its embedded tree.\r\n     */\r\n    buildPropertyPath(): string {\r\n        if (!this.embeddedMetadata || !this.embeddedMetadata.parentPropertyNames.length)\r\n            return this.propertyName;\r\n\r\n        return this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\" + this.propertyName;\r\n    }\r\n\r\n}","/**\r\n * Table type. Tables can be abstract, closure, junction, embedded, etc.\r\n */\r\nexport type TableType = \"regular\"|\"abstract\"|\"junction\"|\"closure\"|\"closure-junction\"|\r\n    \"embeddable\"|\"single-table-child\"|\"class-table-child\";\r\n\r\n/**\r\n * Represents a class with constants - list of all possible table types.\r\n *\r\n * todo: remove if only regular table will left here\r\n */\r\nexport class TableTypes {\r\n\r\n    /**\r\n     * All non-specific tables are just regular tables. Its a default table type.\r\n     */\r\n    static REGULAR: TableType = \"regular\";\r\n\r\n    /**\r\n     * This type is for the tables that does not exist in the database,\r\n     * but provide columns and relations for the tables of the child classes who inherit them.\r\n     *\r\n     * @deprecated\r\n     */\r\n    static ABSTRACT: TableType = \"abstract\";\r\n\r\n    /**\r\n     * Junction table is a table automatically created by many-to-many relationship.\r\n     *\r\n     * todo: remove and isJunction condition is enough in entity metadata?\r\n     */\r\n    static JUNCTION: TableType = \"junction\";\r\n\r\n    /**\r\n     * Closure table is one of the tree-specific tables that supports closure database pattern.\r\n     *\r\n     * todo: maybe we can determine if it is closure if it has some closure-specific decorator?\r\n     * todo: or if its not possible then maybe create a separate decorator for closure?\r\n     */\r\n    static CLOSURE: TableType = \"closure\";\r\n\r\n    /**\r\n     * This type is for tables that contain junction metadata of the closure tables.\r\n     *\r\n     * todo: remove and isClosureJunction condition is enough in entity metadata?\r\n     */\r\n    static CLOSURE_JUNCTION: TableType = \"closure-junction\";\r\n\r\n    /**\r\n     * Embeddable tables are not stored in the database as separate tables.\r\n     * Instead their columns are embed into tables who owns them.\r\n     *\r\n     * @deprecated\r\n     */\r\n    static EMBEDDABLE: TableType = \"embeddable\";\r\n\r\n    /**\r\n     * Special table type for tables that are mapped into single table using Single Table Inheritance pattern.\r\n     *\r\n     * todo: create separate decorators?\r\n     */\r\n    static SINGLE_TABLE_CHILD: TableType = \"single-table-child\";\r\n\r\n    /**\r\n     * Special table type for tables that are mapped into multiple tables using Class Table Inheritance pattern.\r\n     *\r\n     * todo: create separate decorators?\r\n     */\r\n    static CLASS_TABLE_CHILD: TableType = \"class-table-child\";\r\n}","import {TableType} from \"../metadata/types/TableTypes\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\n\r\n/**\r\n * Arguments for TableMetadata class, helps to construct an TableMetadata object.\r\n */\r\nexport interface TableMetadataArgs {\r\n\r\n    /**\r\n     * Class to which table is applied.\r\n     * Function target is a table defined in the class.\r\n     * String target is a table defined in a json schema.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Table's name. If name is not set then table's name will be generated from target's name.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\r\n     */\r\n    type: TableType;\r\n\r\n    /**\r\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\r\n     */\r\n    orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\r\n\r\n    /**\r\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\r\n     */\r\n    engine?: string;\r\n\r\n    /**\r\n     * Whether table must be synced during schema build or not\r\n     */\r\n    skipSchemaSync?: boolean;\r\n\r\n}\r\n","/**\r\n * All types that entity listener can be.\r\n */\r\nexport type EventListenerType = \"after-load\"|\"before-insert\"|\"after-insert\"|\"before-update\"|\"after-update\"|\"before-remove\"|\"after-remove\";\r\n\r\n/**\r\n * Provides a constants for each entity listener type.\r\n */\r\nexport class EventListenerTypes {\r\n    static AFTER_LOAD: EventListenerType = \"after-load\";\r\n    static BEFORE_INSERT: EventListenerType = \"before-insert\";\r\n    static AFTER_INSERT: EventListenerType = \"after-insert\";\r\n    static BEFORE_UPDATE: EventListenerType = \"before-update\";\r\n    static AFTER_UPDATE: EventListenerType = \"after-update\";\r\n    static BEFORE_REMOVE: EventListenerType = \"before-remove\";\r\n    static AFTER_REMOVE: EventListenerType = \"after-remove\";\r\n}","import {EventListenerType} from \"../metadata/types/EventListenerTypes\";\r\n\r\n/**\r\n * Arguments for EntityListenerMetadata class.\r\n */\r\nexport interface EntityListenerMetadataArgs {\r\n\r\n    /**\r\n     * Class to which listener is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Class's property name to which listener is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * The type of the listener.\r\n     */\r\n    readonly type: EventListenerType;\r\n\r\n}\r\n","import {EventListenerType} from \"./types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../metadata-args/EntityListenerMetadataArgs\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\n/**\r\n * This metadata contains all information about entity's listeners.\r\n */\r\nexport class EntityListenerMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * The type of the listener.\r\n     */\r\n    type: EventListenerType;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(args: EntityListenerMetadataArgs) {\r\n        this.target = args.target;\r\n        this.propertyName = args.propertyName;\r\n        this.type = args.type;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if entity listener is allowed to be executed on the given entity.\r\n     */\r\n    isAllowed(entity: ObjectLiteral) { // todo: create in entity metadata method like isInherited?\r\n        return this.target === entity.constructor || // todo: .constructor won't work for entity schemas\r\n            (this.target instanceof Function && entity.constructor.prototype instanceof this.target); // todo: also need to implement entity schema inheritance\r\n    }\r\n\r\n}","import {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\nimport {IndexMetadata} from \"./IndexMetadata\";\r\nimport {ForeignKeyMetadata} from \"./ForeignKeyMetadata\";\r\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\r\nimport {RelationIdMetadata} from \"./RelationIdMetadata\";\r\nimport {RelationCountMetadata} from \"./RelationCountMetadata\";\r\nimport {TableType} from \"./types/TableTypes\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {EntityListenerMetadata} from \"./EntityListenerMetadata\";\r\nimport {PropertyTypeFactory} from \"./types/PropertyTypeInFunction\";\r\n\r\n/**\r\n * Contains all entity metadata.\r\n */\r\nexport class EntityMetadata {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Used to wrap lazy relations.\r\n     */\r\n    lazyRelationsWrapper: LazyRelationsWrapper;\r\n\r\n    /**\r\n     * If entity's table is a closure-typed table, then this entity will have a closure junction table metadata.\r\n     */\r\n    closureJunctionTable: EntityMetadata;\r\n\r\n    /**\r\n     * If this is entity metadata for a junction closure table then its owner closure table metadata will be set here.\r\n     */\r\n    parentClosureEntityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Parent's entity metadata. Used in inheritance patterns.\r\n     */\r\n    parentEntityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Children entity metadatas. Used in inheritance patterns.\r\n     */\r\n    childEntityMetadatas: EntityMetadata[] = [];\r\n\r\n    /**\r\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\r\n     */\r\n    tableType: TableType = \"regular\";\r\n\r\n    /**\r\n     * Target class to which this entity metadata is bind.\r\n     * Note, that when using table inheritance patterns target can be different rather then table's target.\r\n     * For virtual tables which lack of real entity (like junction tables) target is equal to their table name.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Indicates if this entity metadata of a junction table, or not.\r\n     * Junction table is a table created by many-to-many relationship.\r\n     *\r\n     * Its also possible to understand if entity is junction via tableType.\r\n     */\r\n    isJunction: boolean = false;\r\n\r\n    /**\r\n     * Entity's name.\r\n     * Equal to entity target class's name if target is set to table.\r\n     * If target class is not then then it equals to table name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Gets the name of the target.\r\n     */\r\n    targetName: string;\r\n\r\n    /**\r\n     * Original user-given table name (taken from schema or @Entity(tableName) decorator).\r\n     * If user haven't specified a table name this property will be undefined.\r\n     */\r\n    givenTableName?: string;\r\n\r\n    /**\r\n     * Entity table name in the database.\r\n     * This is final table name of the entity.\r\n     * This name already passed naming strategy, and generated based on\r\n     * multiple criteria, including user table name and global table prefix.\r\n     */\r\n    tableName: string;\r\n\r\n    /**\r\n     * Gets the table name without global table prefix.\r\n     * When querying table you need a table name with prefix, but in some scenarios,\r\n     * for example when you want to name a junction table that contains names of two other tables,\r\n     * you may want a table name without prefix.\r\n     */\r\n    tableNameWithoutPrefix: string;\r\n\r\n    /**\r\n     * Indicates if schema sync is skipped for this entity.\r\n     */\r\n    skipSchemaSync: boolean;\r\n\r\n    /**\r\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\r\n     */\r\n    engine?: string;\r\n\r\n    /**\r\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\r\n     */\r\n    orderBy?: OrderByCondition;\r\n\r\n    /**\r\n     * Entity's column metadatas defined by user.\r\n     */\r\n    ownColumns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Entity's relation metadatas.\r\n     */\r\n    ownRelations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Relations of the entity, including relations that are coming from the embeddeds of this entity.\r\n     */\r\n    relations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Columns of the entity, including columns that are coming from the embeddeds of this entity.\r\n     */\r\n    columns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Entity's relation id metadatas.\r\n     */\r\n    relationIds: RelationIdMetadata[] = [];\r\n\r\n    /**\r\n     * Entity's relation id metadatas.\r\n     */\r\n    relationCounts: RelationCountMetadata[] = [];\r\n\r\n    /**\r\n     * Entity's index metadatas.\r\n     */\r\n    indices: IndexMetadata[] = [];\r\n\r\n    /**\r\n     * Entity's foreign key metadatas.\r\n     */\r\n    foreignKeys: ForeignKeyMetadata[] = [];\r\n\r\n    /**\r\n     * Entity's embedded metadatas.\r\n     */\r\n    embeddeds: EmbeddedMetadata[] = [];\r\n\r\n    /**\r\n     * Entity listener metadatas.\r\n     */\r\n    listeners: EntityListenerMetadata[] = [];\r\n\r\n    /**\r\n     * If this entity metadata's table using one of the inheritance patterns,\r\n     * then this will contain what pattern it uses.\r\n     */\r\n    inheritanceType?: \"single-table\"|\"class-table\";\r\n\r\n    /**\r\n     * If this entity metadata is a child table of some table, it should have a discriminator value.\r\n     * Used to store a value in a discriminator column.\r\n     */\r\n    discriminatorValue?: string;\r\n\r\n    /**\r\n     * Checks if entity's table has multiple primary columns.\r\n     */\r\n    hasMultiplePrimaryKeys: boolean;\r\n\r\n    /**\r\n     * Gets the column with generated flag.\r\n     */\r\n    generatedColumn?: ColumnMetadata;\r\n\r\n    /**\r\n     * Gets the object id column used with mongodb database.\r\n     */\r\n    objectIdColumn?: ColumnMetadata;\r\n\r\n    /**\r\n     * Gets entity column which contains a create date value.\r\n     */\r\n    createDateColumn?: ColumnMetadata;\r\n\r\n    /**\r\n     * Gets entity column which contains an update date value.\r\n     */\r\n    updateDateColumn?: ColumnMetadata;\r\n\r\n    /**\r\n     * Gets entity column which contains an entity version.\r\n     */\r\n    versionColumn?: ColumnMetadata;\r\n\r\n    /**\r\n     * Gets the discriminator column used to store entity identificator in single-table inheritance tables.\r\n     */\r\n    discriminatorColumn?: ColumnMetadata;\r\n\r\n    /**\r\n     * Special column that stores tree level in tree entities.\r\n     */\r\n    treeLevelColumn?: ColumnMetadata;\r\n\r\n    /**\r\n     * Gets the primary columns.\r\n     */\r\n    primaryColumns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Id columns in the parent table (used in table inheritance).\r\n     */\r\n    parentIdColumns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Gets only one-to-one relations of the entity.\r\n     */\r\n    oneToOneRelations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Gets only owner one-to-one relations of the entity.\r\n     */\r\n    ownerOneToOneRelations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Gets only one-to-many relations of the entity.\r\n     */\r\n    oneToManyRelations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Gets only many-to-one relations of the entity.\r\n     */\r\n    manyToOneRelations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Gets only many-to-many relations of the entity.\r\n     */\r\n    manyToManyRelations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Gets only owner many-to-many relations of the entity.\r\n     */\r\n    ownerManyToManyRelations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Gets only owner one-to-one and many-to-one relations.\r\n     */\r\n    relationsWithJoinColumns: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Tree parent relation. Used only in tree-tables.\r\n     */\r\n    treeParentRelation?: RelationMetadata;\r\n\r\n    /**\r\n     * Tree children relation. Used only in tree-tables.\r\n     */\r\n    treeChildrenRelation?: RelationMetadata;\r\n\r\n    /**\r\n     * Checks if there any non-nullable column exist in this entity.\r\n     */\r\n    hasNonNullableRelations: boolean;\r\n\r\n    /**\r\n     * Checks if this table is regular.\r\n     * All non-specific tables are just regular tables. Its a default table type.\r\n     */\r\n    isRegular: boolean;\r\n\r\n    /**\r\n     * Checks if this table is abstract.\r\n     * This type is for the tables that does not exist in the database,\r\n     * but provide columns and relations for the tables of the child classes who inherit them.\r\n     */\r\n    isAbstract: boolean;\r\n\r\n    /**\r\n     * Checks if this table is a closure table.\r\n     * Closure table is one of the tree-specific tables that supports closure database pattern.\r\n     */\r\n    isClosure: boolean;\r\n\r\n    /**\r\n     * Checks if this table is a junction table of the closure table.\r\n     * This type is for tables that contain junction metadata of the closure tables.\r\n     */\r\n    isClosureJunction: boolean;\r\n\r\n    /**\r\n     * Checks if this table is an embeddable table.\r\n     * Embeddable tables are not stored in the database as separate tables.\r\n     * Instead their columns are embed into tables who owns them.\r\n     */\r\n    isEmbeddable: boolean;\r\n\r\n    /**\r\n     * Checks if this table is a single table child.\r\n     * Special table type for tables that are mapped into single table using Single Table Inheritance pattern.\r\n     */\r\n    isSingleTableChild: boolean;\r\n\r\n    /**\r\n     * Checks if this table is a class table child.\r\n     * Special table type for tables that are mapped into multiple tables using Class Table Inheritance pattern.\r\n     */\r\n    isClassTableChild: boolean;\r\n\r\n    /**\r\n     * Map of columns and relations of the entity.\r\n     *\r\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\r\n     * This method will create following object:\r\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\r\n     */\r\n    propertiesMap: ObjectLiteral;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        connection: Connection,\r\n        parentClosureEntityMetadata?: EntityMetadata,\r\n        args: TableMetadataArgs\r\n    }) {\r\n        const namingStrategy = options.connection.driver.namingStrategy;\r\n        const tablesPrefix = options.connection.driver.options.tablesPrefix;\r\n        this.lazyRelationsWrapper = options.connection.driver.lazyRelationsWrapper;\r\n        this.parentClosureEntityMetadata = options.parentClosureEntityMetadata!;\r\n        this.target = options.args.target;\r\n        this.tableType = options.args.type;\r\n        this.engine = options.args.engine;\r\n        this.givenTableName = options.args.name;\r\n        this.skipSchemaSync = options.args.skipSchemaSync || false;\r\n        this.targetName = options.args.target instanceof Function ? (options.args.target as any).name : options.args.target;\r\n        this.tableNameWithoutPrefix = this.tableType === \"closure-junction\" ? namingStrategy.closureJunctionTableName(this.givenTableName!) : namingStrategy.tableName(this.targetName, this.givenTableName);\r\n        this.tableName = tablesPrefix ? namingStrategy.prefixTableName(tablesPrefix, this.tableNameWithoutPrefix) : this.tableNameWithoutPrefix;\r\n        this.target = this.target ? this.target : this.tableName;\r\n        this.name = this.targetName ? this.targetName : this.tableName;\r\n\r\n        this.isClassTableChild = this.tableType === \"class-table-child\";\r\n        this.isSingleTableChild = this.tableType === \"single-table-child\";\r\n        this.isEmbeddable = this.tableType === \"embeddable\";\r\n        this.isJunction = this.tableType === \"closure-junction\" || this.tableType === \"junction\";\r\n        this.isClosureJunction = this.tableType === \"closure-junction\";\r\n        this.isClosure = this.tableType === \"closure\";\r\n        this.isAbstract = this.tableType === \"abstract\";\r\n        this.isRegular = this.tableType === \"regular\";\r\n        this.orderBy = (options.args.orderBy instanceof Function) ? options.args.orderBy(this.propertiesMap) : options.args.orderBy;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new entity.\r\n     */\r\n    create(): any {\r\n\r\n        // if target is set to a function (e.g. class) that can be created then create it\r\n        if (this.target instanceof Function)\r\n            return new (<any> this.target)();\r\n\r\n        // otherwise simply return a new empty object\r\n        const newObject = {};\r\n        this.relations\r\n            .filter(relation => relation.isLazy)\r\n            .forEach(relation => this.lazyRelationsWrapper.wrap(newObject, relation));\r\n\r\n        return newObject;\r\n    }\r\n\r\n    /**\r\n     * Checks if given entity has an id.\r\n     */\r\n    hasId(entity: ObjectLiteral): boolean {\r\n        if (!entity)\r\n            return false;\r\n\r\n        return this.primaryColumns.every(primaryColumn => { /// todo: this.metadata.parentEntityMetadata ?\r\n            const value = primaryColumn.getEntityValue(entity);\r\n            return value !== null && value !== undefined && value !== \"\";\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Compares ids of the two entities.\r\n     * Returns true if they match, false otherwise.\r\n     */\r\n    compareIds(firstId: ObjectLiteral|undefined, secondId: ObjectLiteral|undefined): boolean {\r\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\r\n            return false;\r\n\r\n        return OrmUtils.deepCompare(firstId, secondId);\r\n    }\r\n\r\n    /**\r\n     * Compares two different entity instances by their ids.\r\n     * Returns true if they match, false otherwise.\r\n     */\r\n    compareEntities(firstEntity: ObjectLiteral, secondEntity: ObjectLiteral): boolean {\r\n\r\n        // if any entity ids are empty then they aren't equal\r\n        const isFirstEntityEmpty = this.isEntityMapEmpty(firstEntity);\r\n        const isSecondEntityEmpty = this.isEntityMapEmpty(secondEntity);\r\n        if (isFirstEntityEmpty || isSecondEntityEmpty)\r\n            return false;\r\n\r\n        const firstEntityIds = this.getEntityIdMap(firstEntity);\r\n        const secondEntityIds = this.getEntityIdMap(secondEntity);\r\n        return this.compareIds(firstEntityIds, secondEntityIds);\r\n    }\r\n\r\n    /**\r\n     * Finds relation with the given name.\r\n     */\r\n    findRelationWithDbName(dbName: string): RelationMetadata|undefined {\r\n        return this.relationsWithJoinColumns.find(relation => {\r\n            return !!relation.joinColumns.find(column => column.databaseName === dbName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Finds relation with the given property path.\r\n     */\r\n    findRelationWithPropertyPath(propertyPath: string): RelationMetadata|undefined {\r\n        return this.relations.find(relation => relation.propertyPath === propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Computes property name of the entity using given PropertyTypeInFunction.\r\n     */\r\n    computePropertyPath(nameOrFn: PropertyTypeFactory<any>) {\r\n        return typeof nameOrFn === \"string\" ? nameOrFn : nameOrFn(this.propertiesMap);\r\n    }\r\n\r\n    /**\r\n     * Creates entity id map from the given entity ids array.\r\n     */\r\n    createEntityIdMap(ids: any[]) {\r\n        const primaryColumns = this.parentEntityMetadata ? this.primaryColumns : this.primaryColumns;\r\n        return primaryColumns.reduce((map, column, index) => Object.assign(map, column.createValueMap(ids[index])), {});\r\n    }\r\n\r\n    /**\r\n     * Checks each id in the given entity id map if they all aren't empty.\r\n     * If they all aren't empty it returns true.\r\n     * If at least one id in the given map is empty it returns false.\r\n     */\r\n    isEntityMapEmpty(entity: ObjectLiteral): boolean {\r\n        const primaryColumns = this.parentEntityMetadata ? this.primaryColumns : this.primaryColumns;\r\n        return !primaryColumns.every(column => {\r\n            const value = column.getEntityValue(entity);\r\n            return value !== null && value !== undefined;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets primary keys of the entity and returns them in a literal object.\r\n     * For example, for Post{ id: 1, title: \"hello\" } where id is primary it will return { id: 1 }\r\n     * For multiple primary keys it returns multiple keys in object.\r\n     * For primary keys inside embeds it returns complex object literal with keys in them.\r\n     */\r\n    getEntityIdMap(entity: ObjectLiteral|undefined): ObjectLiteral|undefined {\r\n        if (!entity) // todo: shall it accept an empty entity? try to remove this\r\n            return undefined;\r\n\r\n        const primaryColumns = this.parentEntityMetadata ? this.primaryColumns : this.primaryColumns;\r\n        const map = primaryColumns.reduce((map, column) => {\r\n            if (column.isObjectId)\r\n                return Object.assign(map, column.getEntityValueMap(entity));\r\n\r\n            return OrmUtils.mergeDeep(map, column.getEntityValueMap(entity));\r\n        }, {});\r\n        return Object.keys(map).length > 0 ? map : undefined;\r\n    }\r\n\r\n    /**\r\n     * Same as getEntityIdMap, but instead of id column property names it returns database column names.\r\n     */\r\n    getDatabaseEntityIdMap(entity: ObjectLiteral): ObjectLiteral|undefined {\r\n        const map: ObjectLiteral = {};\r\n        const primaryColumns = this.parentEntityMetadata ? this.primaryColumns : this.primaryColumns;\r\n        primaryColumns.forEach(column => {\r\n            const entityValue = column.getEntityValue(entity);\r\n            if (entityValue === null || entityValue === undefined)\r\n                return;\r\n\r\n            map[column.databaseName] = entityValue;\r\n        });\r\n        const hasAllIds = Object.keys(map).every(key => {\r\n            return map[key] !== undefined && map[key] !== null;\r\n        });\r\n        return hasAllIds ? map : undefined;\r\n    }\r\n\r\n    /**\r\n     * Creates a \"mixed id map\".\r\n     * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.\r\n     * But if entity has a single primary key then it will return just value of the id column of the entity, just value.\r\n     * This is called mixed id map.\r\n     */\r\n    getEntityIdMixedMap(entity: ObjectLiteral|undefined): ObjectLiteral|undefined {\r\n        if (!entity) // todo: undefined entities should not go there??\r\n            return undefined;\r\n\r\n        const idMap = this.getEntityIdMap(entity);\r\n        if (this.hasMultiplePrimaryKeys) {\r\n            return idMap;\r\n        } else if (idMap) {\r\n            return idMap[this.primaryColumns[0].propertyName]; // todo: what about parent primary column?\r\n        }\r\n\r\n        return idMap;\r\n    }\r\n\r\n    /**\r\n     * Checks if given object contains ALL primary keys entity must have.\r\n     * Returns true if it contains all of them, false if at least one of them is not defined.\r\n     */\r\n    checkIfObjectContainsAllPrimaryKeys(object: ObjectLiteral) {\r\n        return this.primaryColumns.every(primaryColumn => {\r\n            return object.hasOwnProperty(primaryColumn.propertyName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Iterates throw entity and finds and extracts all values from relations in the entity.\r\n     * If relation value is an array its being flattened.\r\n     */\r\n    extractRelationValuesFromEntity(entity: ObjectLiteral, relations: RelationMetadata[]): [RelationMetadata, any, EntityMetadata][] {\r\n        const relationsAndValues: [RelationMetadata, any, EntityMetadata][] = [];\r\n        relations.forEach(relation => {\r\n            const value = relation.getEntityValue(entity);\r\n            if (value instanceof Array) {\r\n                value.forEach(subValue => relationsAndValues.push([relation, subValue, relation.inverseEntityMetadata]));\r\n            } else if (value) {\r\n                relationsAndValues.push([relation, value, relation.inverseEntityMetadata]);\r\n            }\r\n        });\r\n        return relationsAndValues;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Registers a new column in the entity and recomputes all depend properties.\r\n     */\r\n    registerColumn(column: ColumnMetadata) {\r\n        this.ownColumns.push(column);\r\n        this.columns = this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), this.ownColumns);\r\n        this.primaryColumns = this.columns.filter(column => column.isPrimary);\r\n        this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1;\r\n        this.propertiesMap = this.createPropertiesMap();\r\n    }\r\n\r\n    /**\r\n     * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)\r\n     * in a special format - { propertyName: propertyName }.\r\n     *\r\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\r\n     * This method will create following object:\r\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\r\n     */\r\n    createPropertiesMap(): { [name: string]: string|any } {\r\n        const map: { [name: string]: string|any } = {};\r\n        this.columns.forEach(column => OrmUtils.mergeDeep(map, column.createValueMap(column.propertyPath)));\r\n        this.relations.forEach(relation => OrmUtils.mergeDeep(map, relation.createValueMap(relation.propertyPath)));\r\n        return map;\r\n    }\r\n\r\n}","import {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Describes all column's options.\r\n */\r\nexport interface ColumnOptions {\r\n\r\n    /**\r\n     * Column type. Must be one of the value from the ColumnTypes class.\r\n     */\r\n    type?: ColumnType;\r\n\r\n    /**\r\n     * Column name in the database.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Column type's length. Used only on some column types.\r\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\r\n     */\r\n    length?: string|number;\r\n\r\n    /**\r\n     * Indicates if this column is PRIMARY.\r\n     * Same can be achieved if @PrimaryColumn decorator will be used.\r\n     */\r\n    primary?: boolean;\r\n\r\n    /**\r\n     * Specifies if this column will use auto increment (sequence, generated identity).\r\n     * Note that only one column in entity can be marked as generated, and it must be a primary column.\r\n     * (todo: create validation logic for this condition)\r\n     */\r\n    generated?: boolean; // |\"uuid\"|\"sequence\";\r\n\r\n    /**\r\n     * Specifies if column's value must be unique or not.\r\n     */\r\n    unique?: boolean;\r\n\r\n    /**\r\n     * Indicates if column's value can be set to NULL.\r\n     */\r\n    nullable?: boolean;\r\n\r\n    /**\r\n     * Column comment.\r\n     */\r\n    comment?: string;\r\n\r\n    /**\r\n     * Default database value.\r\n     */\r\n    default?: any;\r\n\r\n    /**\r\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\r\n     * number of digits that are stored for the values.\r\n     */\r\n    precision?: number;\r\n\r\n    /**\r\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\r\n     * of digits to the right of the decimal point and must not be greater than precision.\r\n     */\r\n    scale?: number;\r\n\r\n    /**\r\n     * Indicates if this date column will contain a timezone.\r\n     * Used only for date-typed column types.\r\n     * Note that timezone option is not supported by all databases (only postgres for now).\r\n     */\r\n    timezone?: boolean;\r\n\r\n    /**\r\n     * Indicates if date object must be stored in given date's timezone.\r\n     * By default date is saved in UTC timezone.\r\n     * Works only with \"datetime\" columns.\r\n     */\r\n    localTimezone?: boolean;\r\n\r\n    /**\r\n     * Indicates if column's type will be set as a fixed-length data type.\r\n     * Works only with \"string\" columns.\r\n     */\r\n    fixedLength?: boolean;\r\n\r\n}\r\n","/**\r\n * Kinda type of the column. Not a type in the database, but locally used type to determine what kind of column\r\n * we are working with.\r\n * For example, \"primary\" means that it will be a primary column, or \"createDate\" means that it will create a create\r\n * date column.\r\n */\r\nexport type ColumnMode = \"regular\"|\"virtual\"|\"createDate\"|\"updateDate\"|\"version\"|\"treeChildrenCount\"|\"treeLevel\"|\"discriminator\"|\"parentId\"|\"objectId\"|\"array\";\r\n","import {ColumnOptions} from \"../decorator/options/ColumnOptions\";\r\nimport {ColumnMode} from \"./types/ColumnMode\";\r\n\r\n/**\r\n * Arguments for ColumnMetadata class.\r\n */\r\nexport interface ColumnMetadataArgs {\r\n\r\n    /**\r\n     * Class to which column is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Class's property name to which column is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Class's property type (reflected) to which column is applied.\r\n     *\r\n     * todo: check when this is not set, because for the entity schemas we don't set it.\r\n     */\r\n    // readonly propertyType?: string;\r\n\r\n    /**\r\n     * Column mode in which column will work.\r\n     *\r\n     * todo: find name better then \"mode\".\r\n     */\r\n    readonly mode: ColumnMode;\r\n\r\n    /**\r\n     * Extra column options.\r\n     */\r\n    readonly options: ColumnOptions;\r\n\r\n}\r\n","import {ColumnType} from \"./types/ColumnTypes\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * This metadata contains all information about entity's column.\r\n */\r\nexport class ColumnMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this column metadata is.\r\n     *\r\n     * For example for @Column() name: string in Post, entityMetadata will be metadata of Post entity.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Embedded metadata where this column metadata is.\r\n     * If this column is not in embed then this property value is undefined.\r\n     */\r\n    embeddedMetadata?: EmbeddedMetadata;\r\n\r\n    /**\r\n     * If column is a foreign key of some relation then this relation's metadata will be there.\r\n     * If this column does not have a foreign key then this property value is undefined.\r\n     */\r\n    relationMetadata?: RelationMetadata;\r\n\r\n    /**\r\n     * Class's property name on which this column is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * The database type of the column.\r\n     */\r\n    type: ColumnType;\r\n\r\n    /**\r\n     * Type's length in the database.\r\n     */\r\n    length: string = \"\";\r\n\r\n    /**\r\n     * Indicates if this column is a primary key.\r\n     */\r\n    isPrimary: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column is generated (auto increment or generated other way).\r\n     */\r\n    isGenerated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column value in the database should be unique or not.\r\n     */\r\n    isUnique: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column can contain nulls or not.\r\n     */\r\n    isNullable: boolean = false;\r\n\r\n    /**\r\n     * Column comment.\r\n     * This feature is not supported by all databases.\r\n     */\r\n    comment: string = \"\";\r\n\r\n    /**\r\n     * Default database value.\r\n     */\r\n    default?: any;\r\n\r\n    /**\r\n     * The precision for a decimal (exact numeric) column (applies only for decimal column),\r\n     * which is the maximum number of digits that are stored for the values.\r\n     */\r\n    precision?: number;\r\n\r\n    /**\r\n     * The scale for a decimal (exact numeric) column (applies only for decimal column),\r\n     * which represents the number of digits to the right of the decimal point and must not be greater than precision.\r\n     */\r\n    scale?: number;\r\n\r\n    /**\r\n     * Indicates if date column will contain a timezone.\r\n     * Used only for date-typed column types.\r\n     * Note that timezone option is not supported by all databases (only postgres for now).\r\n     */\r\n    timezone: boolean = false;\r\n\r\n    /**\r\n     * Indicates if date object must be stored in given date's timezone.\r\n     * By default date is saved in UTC timezone.\r\n     * Works only with \"datetime\" columns.\r\n     */\r\n    localTimezone: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column's type will be set as a fixed-length data type.\r\n     * Works only with \"string\" columns.\r\n     */\r\n    fixedLength: boolean = false;\r\n\r\n    /**\r\n     * Gets full path to this column property (including column property name).\r\n     * Full path is relevant when column is used in embeds (one or multiple nested).\r\n     * For example it will return \"counters.subcounters.likes\".\r\n     * If property is not in embeds then it returns just property name of the column.\r\n     */\r\n    propertyPath: string;\r\n\r\n    /**\r\n     * Complete column name in the database including its embedded prefixes.\r\n     */\r\n    databaseName: string;\r\n\r\n    /**\r\n     * Database name in the database without embedded prefixes applied.\r\n     */\r\n    databaseNameWithoutPrefixes: string;\r\n\r\n    /**\r\n     * Database name set by entity metadata builder, not yet passed naming strategy process and without embedded prefixes.\r\n     */\r\n    givenDatabaseName?: string;\r\n\r\n    /**\r\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\r\n     */\r\n    isVirtual: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is a parent id. Parent id columns are not mapped to the entity.\r\n     */\r\n    isParentId: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\r\n     */\r\n    isDiscriminator: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\r\n     */\r\n    isTreeLevel: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an entity creation date.\r\n     */\r\n    isCreateDate: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an entity update date.\r\n     */\r\n    isUpdateDate: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an entity version.\r\n     */\r\n    isVersion: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an object id.\r\n     */\r\n    isObjectId: boolean = false;\r\n\r\n    /**\r\n     * If this column is foreign key then it references some other column,\r\n     * and this property will contain reference to this column.\r\n     */\r\n    referencedColumn: ColumnMetadata|undefined;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        embeddedMetadata?: EmbeddedMetadata,\r\n        referencedColumn?: ColumnMetadata,\r\n        args: ColumnMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.embeddedMetadata = options.embeddedMetadata!;\r\n        this.referencedColumn = options.referencedColumn;\r\n        if (options.args.propertyName)\r\n            this.propertyName = options.args.propertyName;\r\n        if (options.args.options.name)\r\n            this.givenDatabaseName = options.args.options.name;\r\n        if (options.args.options.type)\r\n            this.type = options.args.options.type;\r\n        if (options.args.options.length)\r\n            this.length = String(options.args.options.length);\r\n        if (options.args.options.primary)\r\n            this.isPrimary = options.args.options.primary;\r\n        if (options.args.options.generated)\r\n            this.isGenerated = options.args.options.generated;\r\n        if (options.args.options.unique)\r\n            this.isUnique = options.args.options.unique;\r\n        if (options.args.options.nullable)\r\n            this.isNullable = options.args.options.nullable;\r\n        if (options.args.options.comment)\r\n            this.comment = options.args.options.comment;\r\n        if (options.args.options.default !== undefined)\r\n            this.default = options.args.options.default;\r\n        if (options.args.options.scale)\r\n            this.scale = options.args.options.scale;\r\n        if (options.args.options.precision)\r\n            this.precision = options.args.options.precision;\r\n        if (options.args.options.timezone)\r\n            this.timezone = options.args.options.timezone;\r\n        if (options.args.options.localTimezone)\r\n            this.localTimezone = options.args.options.localTimezone;\r\n        if (options.args.options.fixedLength)\r\n            this.fixedLength = options.args.options.fixedLength;\r\n        if (options.args.mode) {\r\n            this.isVirtual = options.args.mode === \"virtual\";\r\n            this.isParentId = options.args.mode === \"parentId\";\r\n            this.isDiscriminator = options.args.mode === \"discriminator\";\r\n            this.isTreeLevel = options.args.mode === \"treeLevel\";\r\n            this.isCreateDate = options.args.mode === \"createDate\";\r\n            this.isUpdateDate = options.args.mode === \"updateDate\";\r\n            this.isVersion = options.args.mode === \"version\";\r\n            this.isObjectId = options.args.mode === \"objectId\";\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates entity id map from the given entity ids array.\r\n     */\r\n    createValueMap(value: any) {\r\n\r\n        // extract column value from embeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object and return it in a\r\n            // { data: { information: { counters: { id: ... } } } } format\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // now need to access post[data][information][counters] to get column value from the counters\r\n            // and on each step we need to create complex literal object, e.g. first { data },\r\n            // then { data: { information } }, then { data: { information: { counters } } },\r\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\r\n            // this recursive function helps doing that\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], map: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                if (propertyName) {\r\n                    map[propertyName] = {};\r\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\r\n                    return map;\r\n                }\r\n                map[this.propertyName] = value;\r\n                return map;\r\n            };\r\n            return extractEmbeddedColumnValue(propertyNames, {});\r\n\r\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\r\n            return { [this.propertyName]: value };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts column value and returns its column name with this value in a literal object.\r\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\r\n     *\r\n     * Examples what this method can return depend if this column is in embeds.\r\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\r\n     */\r\n    getEntityValueMap(entity: ObjectLiteral): ObjectLiteral {\r\n\r\n        // extract column value from embeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object and return it in a\r\n            // { data: { information: { counters: { id: ... } } } } format\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // now need to access post[data][information][counters] to get column value from the counters\r\n            // and on each step we need to create complex literal object, e.g. first { data },\r\n            // then { data: { information } }, then { data: { information: { counters } } },\r\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\r\n            // this recursive function helps doing that\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral, map: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                if (propertyName) {\r\n                    map[propertyName] = {};\r\n                    extractEmbeddedColumnValue(propertyNames, value ? value[propertyName] : undefined, map[propertyName]);\r\n                    return map;\r\n                }\r\n                map[this.propertyName] = value ? value[this.propertyName] : undefined;\r\n                return map;\r\n            };\r\n            return extractEmbeddedColumnValue(propertyNames, entity, {});\r\n\r\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\r\n            return { [this.propertyName]: entity[this.propertyName] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts column value from the given entity.\r\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\r\n     */\r\n    getEntityValue(entity: ObjectLiteral): any|undefined {\r\n        // if (entity === undefined || entity === null) return undefined; // uncomment if needed\r\n\r\n        // extract column value from embeddeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\r\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                return propertyName ? extractEmbeddedColumnValue(propertyNames, value[propertyName]) : value;\r\n            };\r\n\r\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\r\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\r\n            if (embeddedObject) {\r\n                if (this.relationMetadata && this.referencedColumn && this.isVirtual) {\r\n                    const relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);\r\n                    return relatedEntity ? this.referencedColumn.getEntityValue(relatedEntity) : undefined;\r\n                } else {\r\n                    return embeddedObject[this.propertyName];\r\n                }\r\n            }\r\n            return undefined;\r\n            // return embeddedObject ? embeddedObject[this.propertyName] : undefined;\r\n\r\n        } else { // no embeds - no problems. Simply return column name by property name of the entity\r\n            if (this.relationMetadata && this.referencedColumn && this.isVirtual) {\r\n                const relatedEntity = this.relationMetadata.getEntityValue(entity);\r\n                return relatedEntity ? this.referencedColumn.getEntityValue(relatedEntity) : undefined;\r\n            } else {\r\n                return entity[this.propertyName];\r\n            }\r\n            // return entity[this.propertyName];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets given entity's column value.\r\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\r\n     */\r\n    setEntityValue(entity: ObjectLiteral, value: any): void {\r\n        if (this.embeddedMetadata) {\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const extractEmbeddedColumnValue = (embeddedMetadatas: EmbeddedMetadata[], map: ObjectLiteral): any => {\r\n                // if (!object[embeddedMetadata.propertyName])\r\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\r\n\r\n                const embeddedMetadata = embeddedMetadatas.shift();\r\n                if (embeddedMetadata) {\r\n                    if (!map[embeddedMetadata.propertyName])\r\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\r\n\r\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\r\n                    return map;\r\n                }\r\n                map[this.propertyName] = value;\r\n                return map;\r\n            };\r\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\r\n\r\n        } else {\r\n            entity[this.propertyName] = value;\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    build(namingStrategy: NamingStrategyInterface): this {\r\n        this.propertyPath = this.buildPropertyPath();\r\n        this.databaseName = this.buildDatabaseName(namingStrategy);\r\n        this.databaseNameWithoutPrefixes = namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);\r\n        return this;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Protected Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    protected buildPropertyPath(): string {\r\n        let path = \"\";\r\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\r\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\r\n\r\n        if (this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName)\r\n            path += this.referencedColumn.propertyName + \".\";\r\n\r\n        return path + this.propertyName;\r\n    }\r\n\r\n    protected buildDatabaseName(namingStrategy: NamingStrategyInterface): string {\r\n        const propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPropertyNames : [];\r\n        return namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);\r\n    }\r\n\r\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\n\r\n/**\r\n * Table's column's schema in the database represented in this class.\r\n */\r\nexport class ColumnSchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Column name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Column type.\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Column's default value.\r\n     */\r\n    default: any;\r\n\r\n    /**\r\n     * Indicates if column is NULL, or is NOT NULL in the database.\r\n     */\r\n    isNullable: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is auto-generated sequence.\r\n     */\r\n    isGenerated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is a primary key.\r\n     */\r\n    isPrimary: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column has unique value.\r\n     */\r\n    isUnique: boolean = false;\r\n\r\n    /**\r\n     * Column's comment.\r\n     */\r\n    comment: string|undefined;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options?: {\r\n        name?: string,\r\n        type?: string,\r\n        default?: any,\r\n        isNullable?: boolean,\r\n        isGenerated?: boolean,\r\n        isPrimary?: boolean,\r\n        isUnique?: boolean,\r\n        comment?: string\r\n    }) {\r\n        if (options) {\r\n            this.name = options.name || \"\";\r\n            this.type = options.type || \"\";\r\n            this.default = options.default;\r\n            this.isNullable = options.isNullable || false;\r\n            this.isGenerated = options.isGenerated || false;\r\n            this.isPrimary = options.isPrimary || false;\r\n            this.isUnique = options.isUnique || false;\r\n            this.comment = options.comment;\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Clones this column schema to a new column schema with exact same properties as this column schema has.\r\n     */\r\n    clone(): ColumnSchema {\r\n        const newColumnSchema = new ColumnSchema();\r\n        newColumnSchema.name = this.name;\r\n        newColumnSchema.type = this.type;\r\n        newColumnSchema.default = this.default;\r\n        newColumnSchema.isNullable = this.isNullable;\r\n        newColumnSchema.isGenerated = this.isGenerated;\r\n        newColumnSchema.isPrimary = this.isPrimary;\r\n        newColumnSchema.isUnique = this.isUnique;\r\n        newColumnSchema.comment = this.comment;\r\n        return newColumnSchema;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new column based on the given column metadata.\r\n     */\r\n    static create(columnMetadata: ColumnMetadata, normalizedType: string): ColumnSchema {\r\n        const columnSchema = new ColumnSchema();\r\n        columnSchema.name = columnMetadata.databaseName;\r\n        columnSchema.default = columnMetadata.default;\r\n        columnSchema.comment = columnMetadata.comment;\r\n        columnSchema.isGenerated = columnMetadata.isGenerated;\r\n        columnSchema.isNullable = columnMetadata.isNullable;\r\n        columnSchema.type = normalizedType;\r\n        columnSchema.isPrimary = columnMetadata.isPrimary;\r\n        columnSchema.isUnique = columnMetadata.isUnique;\r\n        return columnSchema;\r\n    }\r\n\r\n}","import {ColumnSchema} from \"../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../schema-builder/schema/ForeignKeySchema\";\r\nimport {IndexSchema} from \"../schema-builder/schema/IndexSchema\";\r\nimport {ColumnType} from \"../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single database connection.\r\n *\r\n * todo: extract schema build operations out of query runner.\r\n */\r\nexport interface QueryRunner {\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void>;\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    clearDatabase(): Promise<void>;\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    beginTransaction(): Promise<void>;\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    commitTransaction(): Promise<void>;\r\n\r\n    /**\r\n     * Ends transaction.\r\n     */\r\n    rollbackTransaction(): Promise<void>;\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean;\r\n\r\n    /**\r\n     * Executes a given SQL query and returns raw database results.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any>;\r\n\r\n    /**\r\n     * Updates rows that match given simple conditions in the given table.\r\n     */\r\n    update(tableName: string, valuesMap: Object, conditions: Object): Promise<void>;\r\n\r\n    /**\r\n     * Inserts a new row into given table.\r\n     */\r\n    insert(tableName: string, valuesMap: Object, generatedColumn?: ColumnMetadata): Promise<any>;\r\n\r\n    /**\r\n     * Performs a simple DELETE query by a given conditions in a given table.\r\n     */\r\n    delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Performs a simple DELETE query by a given conditions in a given table.\r\n     */\r\n    delete(tableName: string, conditions: Object): Promise<void>;\r\n\r\n    /**\r\n     * Inserts new values into closure table.\r\n     */\r\n    insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number>;\r\n\r\n    /**\r\n     * Converts a column type of the metadata to the database column's type.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string;\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean;\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    loadTableSchema(tableName: string): Promise<TableSchema|undefined>;\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    loadTableSchemas(tableNames: string[]): Promise<TableSchema[]>;\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    hasTable(tableName: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    createTable(table: TableSchema): Promise<void>;\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    hasColumn(tableName: string, columnName: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Adds a new column in the table.\r\n     */\r\n    addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new column in the table.\r\n     */\r\n    addColumn(table: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Adds new columns in the table.\r\n     */\r\n    addColumns(tableSchema: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Adds new columns in the table.\r\n     */\r\n    addColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(table: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a columns in the table.\r\n     */\r\n    changeColumns(table: TableSchema, changedColumns: { oldColumn: ColumnSchema, newColumn: ColumnSchema }[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the column in the table.\r\n     */\r\n    dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops the column in the table.\r\n     */\r\n    dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops the column in the table.\r\n     */\r\n    dropColumn(table: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Updates primary keys in the table.\r\n     */\r\n    updatePrimaryKeys(table: TableSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    createForeignKeys(table: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    dropForeignKey(table: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    dropForeignKey(table: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    dropForeignKeys(table: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    dropForeignKeys(table: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    createIndex(tableName: string, index: IndexSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    dropIndex(tableName: string, indexName: string): Promise<void>;\r\n\r\n    /**\r\n     * Truncates table.\r\n     *\r\n     * todo: probably this should be renamed to drop or clear?\r\n     */\r\n    truncate(tableName: string): Promise<void>;\r\n\r\n}","import {DriverOptions} from \"./DriverOptions\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\r\n\r\n/**\r\n * Driver organizes TypeORM communication with specific database management system.\r\n */\r\nexport interface Driver {\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Used to wrap lazy relations to be able to perform lazy loadings.\r\n     */\r\n    lazyRelationsWrapper: LazyRelationsWrapper;\r\n\r\n    /**\r\n     * Driver options contains connectivity options used to connection to the database.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    /**\r\n     * Creates repository instance of this driver.\r\n     */\r\n    // createRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): Repository<any>;\r\n\r\n    /**\r\n     * Creates tree repository instance of this driver.\r\n     */\r\n    // createTreeRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): TreeRepository<any>;\r\n\r\n    /**\r\n     * Creates specific repository instance of this driver.\r\n     */\r\n    // createSpecificRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): SpecificRepository<any>;\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void>;\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    disconnect(): Promise<void>;\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface(): any;\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    createQueryRunner(): Promise<QueryRunner>;\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]];\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string;\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string;\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string;\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, column: ColumnMetadata): any;\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column metadata.\r\n     */\r\n    prepareHydratedValue(value: any, type: ColumnMetadata): any;\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type.\r\n     */\r\n    prepareHydratedValue(value: any, column: ColumnMetadata): any;\r\n\r\n\r\n}","/**\r\n * Defines a special criteria to find specific entity.\r\n */\r\nexport interface FindOneOptions<Entity> {\r\n\r\n    /**\r\n     * Simple condition that should be applied to match entities.\r\n     */\r\n    where?: Partial<Entity>;\r\n\r\n    /**\r\n     * Specifies what relations should be loaded.\r\n     */\r\n    join?: JoinOptions;\r\n\r\n    /**\r\n     * Order, in which entities should be ordered.\r\n     */\r\n    order?: { [P in keyof Entity]?: \"ASC\"|\"DESC\" };\r\n\r\n}\r\n","import {FindOneOptions} from \"./FindOneOptions\";\r\n\r\n/**\r\n * Defines a special criteria to find specific entities.\r\n */\r\nexport interface FindManyOptions<Entity> extends FindOneOptions<Entity> {\r\n\r\n    /**\r\n     * Offset (paginated) where from entities should be taken.\r\n     */\r\n    skip?: number;\r\n\r\n    /**\r\n     * Limit (paginated) - max number of entities should be taken.\r\n     */\r\n    take?: number;\r\n\r\n}\r\n","/**\r\n * Same as Partial<T> but goes deeper and makes Partial<T> all its properties and sub-properties.\r\n */\r\nexport type DeepPartial<T> = {\r\n    [P in keyof T]?: DeepPartial<T[P]>;\r\n};\r\n","/**\r\n * Special options passed to Repository#persist method.\r\n */\r\nexport interface SaveOptions {\r\n\r\n    /**\r\n     * Additional data to be passed with persist method.\r\n     * This data can be used in subscribers then.\r\n     */\r\n    data?: any;\r\n\r\n}","/**\r\n * Special options passed to Repository#remove method.\r\n */\r\nexport interface RemoveOptions {\r\n\r\n    /**\r\n     * Additional data to be passed with remove method.\r\n     * This data can be used in subscribers then.\r\n     */\r\n    data?: any;\r\n\r\n}","/**\r\n * Represents some Type of the Object.\r\n */\r\nexport type ObjectType<T> = { new (): T }|Function;\r\n","/**\r\n * Thrown when consumer tries to use query runner from query runner provider after it was released.\r\n */\r\nexport class QueryRunnerProviderAlreadyReleasedError extends Error {\r\n    name = \"QueryRunnerProviderAlreadyReleasedError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {ColumnTypes} from \"../metadata/types/ColumnTypes\";\r\nimport {DataTransformationUtils} from \"../util/DataTransformationUtils\";\r\n\r\n/**\r\n * Holds information about insert operation into junction table.\r\n */\r\nexport interface JunctionInsert {\r\n\r\n    /**\r\n     * Relation of the junction table.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * Entities that needs to be \"bind\" to the subject.\r\n     */\r\n    junctionEntities: ObjectLiteral[];\r\n}\r\n\r\n/**\r\n * Holds information about remove operation from the junction table.\r\n */\r\nexport interface JunctionRemove {\r\n\r\n    /**\r\n     * Relation of the junction table.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * Entity ids that needs to be removed from the junction table.\r\n     */\r\n    junctionRelationIds: any[];\r\n}\r\n\r\n/**\r\n * Holds information about relation update in some subject.\r\n */\r\nexport interface RelationUpdate {\r\n\r\n    /**\r\n     * Relation that needs to be updated.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * New value that needs to be set into into new relation.\r\n     */\r\n    value: any;\r\n}\r\n\r\n/**\r\n * Subject is a subject of persistence.\r\n * It holds information about each entity that needs to be persisted:\r\n * - what entity should be persisted\r\n * - what is database representation of the persisted entity\r\n * - what entity metadata of the persisted entity\r\n * - what is allowed to with persisted entity (insert/update/remove)\r\n *\r\n * Having this collection of subjects we can perform database queries.\r\n */\r\nexport class Subject {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Persist entity (changed entity).\r\n     */\r\n    private _persistEntity?: ObjectLiteral;\r\n\r\n    /**\r\n     * Database entity.\r\n     */\r\n    private _databaseEntity?: ObjectLiteral;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the subject entity.\r\n     */\r\n    readonly metadata: EntityMetadata;\r\n\r\n    /**\r\n     * Date when this entity is persisted.\r\n     */\r\n    readonly date: Date = new Date();\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if this subject can be inserted into the database.\r\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\r\n     */\r\n    canBeInserted: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this subject can be updated in the database.\r\n     * This means that this subject either was persisted, either can be updated by cascades.\r\n     */\r\n    canBeUpdated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this subject MUST be removed from the database.\r\n     * This means that this subject either was removed, either was removed by cascades.\r\n     */\r\n    mustBeRemoved: boolean = false;\r\n\r\n    /**\r\n     * Differentiated columns between persisted and database entities.\r\n     */\r\n    diffColumns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Differentiated relations between persisted and database entities.\r\n     */\r\n    diffRelations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * List of relations which need to be unset.\r\n     * This is used to update relation from inverse side.\r\n     */\r\n    relationUpdates: RelationUpdate[] = [];\r\n\r\n    /**\r\n     * Records that needs to be inserted into the junction tables of this subject.\r\n     */\r\n    junctionInserts: JunctionInsert[] = [];\r\n\r\n    /**\r\n     * Records that needs to be removed from the junction tables of this subject.\r\n     */\r\n    junctionRemoves: JunctionRemove[] = [];\r\n\r\n    /**\r\n     * When subject is newly persisted it may have a generated entity id.\r\n     * In this case it should be written here.\r\n     */\r\n    newlyGeneratedId?: any;\r\n\r\n    /**\r\n     * When subject is newly persisted it may have a generated object id.\r\n     * This value will be stored here. This is actual only for mongodb database.\r\n     */\r\n    generatedObjectId?: any;\r\n\r\n    /**\r\n     * Generated id of the parent entity. Used in the class-table-inheritance.\r\n     */\r\n    parentGeneratedId?: any;\r\n\r\n    /**\r\n     * Used in newly persisted entities which are tree tables.\r\n     */\r\n    treeLevel?: number;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral) {\r\n        this.metadata = metadata;\r\n        this._persistEntity = entity;\r\n        this._databaseEntity = databaseEntity;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets entity sent to the persistence (e.g. changed entity).\r\n     * Throws error if persisted entity was not set.\r\n     */\r\n    get entity(): ObjectLiteral {\r\n        if (!this._persistEntity)\r\n            throw new Error(`Persistence entity is not set for the given subject.`);\r\n\r\n        return this._persistEntity;\r\n    }\r\n\r\n    /**\r\n     * Checks if subject has a persisted entity.\r\n     */\r\n    get hasEntity(): boolean {\r\n        return !!this._persistEntity;\r\n    }\r\n\r\n    /**\r\n     * Gets entity from the database (e.g. original entity).\r\n     * THIS IS NOT RAW ENTITY DATA.\r\n     * Throws error if database entity was not set.\r\n     */\r\n    get databaseEntity(): ObjectLiteral {\r\n        if (!this._databaseEntity)\r\n            throw new Error(`Database entity is not set for the given subject.`);\r\n\r\n        return this._databaseEntity;\r\n    }\r\n\r\n    /**\r\n     * Checks if subject has a database entity.\r\n     */\r\n    get hasDatabaseEntity(): boolean {\r\n        return !!this._databaseEntity;\r\n    }\r\n\r\n    /**\r\n     * Sets entity from the database (e.g. original entity).\r\n     * Once database entity set it calculates differentiated columns and relations\r\n     * between persistent entity and database entity.\r\n     */\r\n    set databaseEntity(databaseEntity: ObjectLiteral) {\r\n        this._databaseEntity = databaseEntity;\r\n        this.recompute();\r\n    }\r\n\r\n    /**\r\n     * Gets entity target from the entity metadata of this subject.\r\n     */\r\n    get entityTarget(): Function|string {\r\n        return this.metadata.target;\r\n    }\r\n\r\n    /**\r\n     * Checks if this subject must be inserted into the database.\r\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\r\n     * and if it does not have database entity set.\r\n     */\r\n    get mustBeInserted() {\r\n        return this.canBeInserted && !this.hasDatabaseEntity;\r\n    }\r\n\r\n    /**\r\n     * Checks if this subject must be updated into the database.\r\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\r\n     * and if it does have differentiated columns or relations.\r\n     */\r\n    get mustBeUpdated() {\r\n        return this.canBeUpdated && (this.diffColumns.length > 0 || this.diffRelations.length > 0);\r\n    }\r\n\r\n    /**\r\n     * Checks if this subject has relations to be updated.\r\n     */\r\n    get hasRelationUpdates(): boolean {\r\n        return this.relationUpdates.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets id of the persisted entity.\r\n     * If entity is not set then it returns undefined.\r\n     * If entity itself has an id then it simply returns it.\r\n     * If entity does not have an id then it returns newly generated id.\r\n\r\n    get getPersistedEntityIdMap(): any|undefined {\r\n        if (!this.hasEntity)\r\n            return undefined;\r\n\r\n        const entityIdMap = this.metadata.getDatabaseEntityIdMap(this.entity);\r\n        if (entityIdMap)\r\n            return entityIdMap;\r\n\r\n        if (this.newlyGeneratedId)\r\n            return this.metadata.createSimpleDatabaseIdMap(this.newlyGeneratedId);\r\n\r\n        return undefined;\r\n    }*/\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validates this subject for errors.\r\n     * Subject cannot be at the same time inserted and updated, removed and inserted, removed and updated.\r\n     */\r\n    validate() {\r\n\r\n        if (this.mustBeInserted && this.mustBeRemoved)\r\n            throw new Error(`Removed entity ${this.metadata.name} is also scheduled for insert operation. This looks like ORM problem. Please report a github issue.`);\r\n\r\n        if (this.mustBeUpdated && this.mustBeRemoved)\r\n            throw new Error(`Removed entity \"${this.metadata.name}\" is also scheduled for update operation. ` +\r\n                `Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).`);\r\n\r\n        if (this.mustBeInserted && this.mustBeUpdated)\r\n            throw new Error(`Inserted entity ${this.metadata.name} is also scheduled for updated operation. This looks like ORM problem. Please report a github issue.`);\r\n\r\n    }\r\n\r\n    /**\r\n     * Performs entity re-computations.\r\n     */\r\n    recompute() {\r\n        if (this.hasEntity && this._databaseEntity) {\r\n            this.computeDiffColumns();\r\n            this.computeDiffRelationalColumns();\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Differentiate columns from the updated entity and entity stored in the database.\r\n     */\r\n    protected computeDiffColumns(): void {\r\n        this.diffColumns = this.metadata.columns.filter(column => {\r\n\r\n            // prepare both entity and database values to make comparision\r\n            let entityValue = column.getEntityValue(this.entity);\r\n            let databaseValue = column.getEntityValue(this.databaseEntity);\r\n            if (entityValue === undefined)\r\n                return false;\r\n\r\n            // normalize special values to make proper comparision\r\n            if (entityValue !== null && entityValue !== undefined) {\r\n                if (column.type === ColumnTypes.DATE) {\r\n                    entityValue = DataTransformationUtils.mixedDateToDateString(entityValue);\r\n\r\n                } else if (column.type === ColumnTypes.TIME) {\r\n                    entityValue = DataTransformationUtils.mixedDateToTimeString(entityValue);\r\n\r\n                } else if (column.type === ColumnTypes.DATETIME) {\r\n                    // if (column.loadInLocalTimezone) {\r\n                    //     entityValue = DataTransformationUtils.mixedDateToDatetimeString(entityValue);\r\n                    //     databaseValue = DataTransformationUtils.mixedDateToDatetimeString(databaseValue);\r\n                    // } else {\r\n                        entityValue = DataTransformationUtils.mixedDateToUtcDatetimeString(entityValue);\r\n                        databaseValue = DataTransformationUtils.mixedDateToUtcDatetimeString(databaseValue);\r\n                    // }\r\n\r\n                } else if (column.type === ColumnTypes.JSON) {\r\n                    entityValue = JSON.stringify(entityValue);\r\n                    if (databaseValue !== null && databaseValue !== undefined)\r\n                        databaseValue = JSON.stringify(databaseValue);\r\n\r\n                } else if (column.type === ColumnTypes.SIMPLE_ARRAY) {\r\n                    entityValue = DataTransformationUtils.simpleArrayToString(entityValue);\r\n                    databaseValue = DataTransformationUtils.simpleArrayToString(databaseValue);\r\n                }\r\n            }\r\n            // todo: this mechanism does not get in count embeddeds in embeddeds\r\n\r\n            // if value is not defined then no need to update it\r\n            // if (!column.isInEmbedded && this.entity[column.propertyName] === undefined)\r\n            //     return false;\r\n            //\r\n            // if value is in embedded and is not defined then no need to update it\r\n            // if (column.isInEmbedded && (this.entity[column.embeddedProperty] === undefined || this.entity[column.embeddedProperty][column.propertyName] === undefined))\r\n            //     return false;\r\n\r\n            // if its a special column or value is not changed - then do nothing\r\n            if (column.isVirtual ||\r\n                column.isParentId ||\r\n                column.isDiscriminator ||\r\n                column.isUpdateDate ||\r\n                column.isVersion ||\r\n                column.isCreateDate ||\r\n                entityValue === databaseValue)\r\n                return false;\r\n\r\n            // filter out \"relational columns\" only in the case if there is a relation object in entity\r\n            const relation = this.metadata.findRelationWithDbName(column.databaseName);\r\n            if (relation) {\r\n                const value = relation.getEntityValue(this.entity);\r\n                if (value !== null && value !== undefined)\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Difference columns of the owning one-to-one and many-to-one columns.\r\n     */\r\n    protected computeDiffRelationalColumns(/*todo: updatesByRelations: UpdateByRelationOperation[], */): void {\r\n        this.diffRelations = this.metadata.relations.filter(relation => {\r\n            if (!relation.isManyToOne && !(relation.isOneToOne && relation.isOwning))\r\n                return false;\r\n\r\n            // here we cover two scenarios:\r\n            // 1. related entity can be another entity which is natural way\r\n            // 2. related entity can be entity id which is hacked way of updating entity\r\n            // todo: what to do if there is a column with relationId? (cover this too?)\r\n            const entityValue = relation.getEntityValue(this.entity);\r\n            const updatedEntityRelationId: any = entityValue instanceof Object\r\n                    ? relation.inverseEntityMetadata.getEntityIdMixedMap(entityValue)\r\n                    : entityValue;\r\n\r\n            const dbEntityRelationId = relation.getEntityValue(this.databaseEntity);\r\n\r\n            // todo: try to find if there is update by relation operation - we dont need to generate update relation operation for this\r\n            // todo: if (updatesByRelations.find(operation => operation.targetEntity === this && operation.updatedRelation === relation))\r\n            // todo:     return false;\r\n\r\n            // we don't perform operation over undefined properties\r\n            if (updatedEntityRelationId === undefined)\r\n                return false;\r\n\r\n            // if both are empty totally no need to do anything\r\n            if ((updatedEntityRelationId === undefined || updatedEntityRelationId === null) &&\r\n                (dbEntityRelationId === undefined || dbEntityRelationId === null))\r\n                return false;\r\n\r\n            // if relation ids aren't equal then we need to update them\r\n            return updatedEntityRelationId !== dbEntityRelationId;\r\n        });\r\n    }\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {Subject} from \"../persistence/Subject\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\n\r\n/**\r\n * Repository for more specific operations.\r\n *\r\n * @deprecated Don't use it yet\r\n */\r\nexport class SpecificRepository<Entity extends ObjectLiteral> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected metadata: EntityMetadata,\r\n                protected queryRunnerProvider?: QueryRunnerProvider) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setRelation(relationName: string, entityId: any, relatedEntityId: any): Promise<void>;\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityId: any): Promise<void>;\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setRelation(relationProperty: string|((t: Entity) => string|any), entityId: any, relatedEntityId: any): Promise<void> {\r\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\r\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\r\n        // if (relation.isManyToMany || relation.isOneToMany || relation.isOneToOneNotOwner)\r\n        //     throw new Error(`Only many-to-one and one-to-one with join column are supported for this operation. ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\r\n        if (relation.isManyToMany)\r\n            throw new Error(`Many-to-many relation is not supported for this operation. Use #addToRelation method for many-to-many relations.`);\r\n\r\n        // todo: fix issues with joinColumns[0]\r\n\r\n        let table: string, values: any = {}, conditions: any = {};\r\n        if (relation.isOwning) {\r\n            table = relation.entityMetadata.tableName;\r\n            values[relation.joinColumns[0].referencedColumn!.databaseName] = relatedEntityId;\r\n            conditions[relation.joinColumns[0].referencedColumn!.databaseName] = entityId;\r\n        } else {\r\n            table = relation.inverseEntityMetadata.tableName;\r\n            values[relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName] = relatedEntityId;\r\n            conditions[relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName] = entityId;\r\n        }\r\n\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        await queryRunner.update(table, values, conditions);\r\n        if (!this.queryRunnerProvider) // means created by this method\r\n            await queryRunnerProvider.release(queryRunner);\r\n    }\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setInverseRelation(relationName: string, relatedEntityId: any, entityId: any): Promise<void>;\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityId: any): Promise<void>;\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setInverseRelation(relationProperty: string|((t: Entity) => string|any), relatedEntityId: any, entityId: any): Promise<void> {\r\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\r\n        // todo: fix issues with joinColumns[0]\r\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\r\n        // if (relation.isManyToMany || relation.isOneToMany || relation.isOneToOneNotOwner)\r\n        //     throw new Error(`Only many-to-one and one-to-one with join column are supported for this operation. ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\r\n        if (relation.isManyToMany)\r\n            throw new Error(`Many-to-many relation is not supported for this operation. Use #addToRelation method for many-to-many relations.`);\r\n\r\n        let table: string, values: any = {}, conditions: any = {};\r\n        if (relation.isOwning) {\r\n            table = relation.inverseEntityMetadata.tableName;\r\n            values[relation.inverseRelation!.joinColumns[0].databaseName] = relatedEntityId;\r\n            conditions[relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName] = entityId;\r\n        } else {\r\n            table = relation.entityMetadata.tableName;\r\n            values[relation.joinColumns[0].databaseName] = relatedEntityId;\r\n            conditions[relation.joinColumns[0].referencedColumn!.databaseName] = entityId;\r\n        }\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        await queryRunner.update(table, values, conditions);\r\n        if (!this.queryRunnerProvider) // means created by this method\r\n            await queryRunnerProvider.release(queryRunner);\r\n    }\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToRelation(relationName: string, entityId: any, relatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToRelation(relationProperty: string|((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void> {\r\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\r\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\r\n        if (!relation.isManyToMany)\r\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyPath} relation type is ${relation.relationType}`);\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        const insertPromises = relatedEntityIds.map(relatedEntityId => {\r\n            const values: any = {};\r\n            if (relation.isOwning) {\r\n                values[relation.junctionEntityMetadata!.columns[0].databaseName] = entityId;\r\n                values[relation.junctionEntityMetadata!.columns[1].databaseName] = relatedEntityId;\r\n            } else {\r\n                values[relation.junctionEntityMetadata!.columns[1].databaseName] = entityId;\r\n                values[relation.junctionEntityMetadata!.columns[0].databaseName] = relatedEntityId;\r\n            }\r\n\r\n            return queryRunner.insert(relation.junctionEntityMetadata!.tableName, values);\r\n        });\r\n        await Promise.all(insertPromises);\r\n\r\n        if (!this.queryRunnerProvider) // means created by this method\r\n            await queryRunnerProvider.release(queryRunner);\r\n    }\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToInverseRelation(relationName: string, relatedEntityId: any, entityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToInverseRelation(relationProperty: string|((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void> {\r\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\r\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\r\n        if (!relation.isManyToMany)\r\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyPath} relation type is ${relation.relationType}`);\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        try {\r\n            const insertPromises = entityIds.map(entityId => {\r\n                const values: any = {};\r\n                if (relation.isOwning) {\r\n                    values[relation.junctionEntityMetadata!.columns[0].databaseName] = entityId;\r\n                    values[relation.junctionEntityMetadata!.columns[1].databaseName] = relatedEntityId;\r\n                } else {\r\n                    values[relation.junctionEntityMetadata!.columns[1].databaseName] = entityId;\r\n                    values[relation.junctionEntityMetadata!.columns[0].databaseName] = relatedEntityId;\r\n                }\r\n\r\n                return queryRunner.insert(relation.junctionEntityMetadata!.tableName, values);\r\n            });\r\n            await Promise.all(insertPromises);\r\n\r\n        } finally {\r\n            if (!this.queryRunnerProvider) // means created by this method\r\n                await queryRunnerProvider.release(queryRunner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromRelation(relationName: string, entityId: any, relatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromRelation(relationProperty: string|((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void> {\r\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\r\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\r\n        if (!relation.isManyToMany)\r\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyPath} relation type is ${relation.relationType}`);\r\n\r\n        // check if given relation entity ids is empty - then nothing to do here (otherwise next code will remove all ids)\r\n        if (!relatedEntityIds || !relatedEntityIds.length)\r\n            return Promise.resolve();\r\n\r\n        const qb = new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .delete()\r\n            .fromTable(relation.junctionEntityMetadata!.tableName, \"junctionEntity\");\r\n\r\n        const firstColumnName = this.connection.driver.escapeColumnName(relation.isOwning ? relation.junctionEntityMetadata!.columns[0].databaseName : relation.junctionEntityMetadata!.columns[1].databaseName);\r\n        const secondColumnName = this.connection.driver.escapeColumnName(relation.isOwning ? relation.junctionEntityMetadata!.columns[1].databaseName : relation.junctionEntityMetadata!.columns[0].databaseName);\r\n\r\n        relatedEntityIds.forEach((relatedEntityId, index) => {\r\n            qb.orWhere(`(${firstColumnName}=:entityId AND ${secondColumnName}=:relatedEntity_${index})`)\r\n                .setParameter(\"relatedEntity_\" + index, relatedEntityId);\r\n        });\r\n\r\n        await qb\r\n            .setParameter(\"entityId\", entityId)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromInverseRelation(relationName: string, relatedEntityId: any, entityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromInverseRelation(relationProperty: string|((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void> {\r\n        const propertyPath = this.metadata.computePropertyPath(relationProperty);\r\n        const relation = this.metadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\r\n        if (!relation.isManyToMany)\r\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyPath} relation type is ${relation.relationType}`);\r\n\r\n        // check if given entity ids is empty - then nothing to do here (otherwise next code will remove all ids)\r\n        if (!entityIds || !entityIds.length)\r\n            return Promise.resolve();\r\n\r\n        const qb = new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .delete()\r\n            .from(relation.junctionEntityMetadata!.tableName, \"junctionEntity\");\r\n\r\n        const firstColumnName = relation.isOwning ? relation.junctionEntityMetadata!.columns[1].databaseName : relation.junctionEntityMetadata!.columns[0].databaseName;\r\n        const secondColumnName = relation.isOwning ? relation.junctionEntityMetadata!.columns[0].databaseName : relation.junctionEntityMetadata!.columns[1].databaseName;\r\n\r\n        entityIds.forEach((entityId, index) => {\r\n            qb.orWhere(`(${firstColumnName}=:relatedEntityId AND ${secondColumnName}=:entity_${index})`)\r\n              .setParameter(\"entity_\" + index, entityId);\r\n        });\r\n\r\n        await qb.setParameter(\"relatedEntityId\", relatedEntityId).execute();\r\n    }\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromRelation(relation: string, entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromRelation(relation: ((t: Entity) => string|any), entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromRelation(relation: string|((t: Entity) => string|any), entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void> {\r\n        await Promise.all([\r\n            this.addToRelation(relation as any, entityId, addRelatedEntityIds),\r\n            this.removeFromRelation(relation as any, entityId, removeRelatedEntityIds)\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromInverseRelation(relation: string, relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromInverseRelation(relation: ((t: Entity) => string|any), relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromInverseRelation(relation: string|((t: Entity) => string|any), relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void> {\r\n        await Promise.all([\r\n            this.addToInverseRelation(relation as any, relatedEntityId, addEntityIds),\r\n            this.removeFromInverseRelation(relation as any, relatedEntityId, removeEntityIds)\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Removes entity with the given id.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeById(id: any): Promise<void> {\r\n        const alias = this.metadata.tableName;\r\n        const parameters: ObjectLiteral = {};\r\n        let condition = \"\";\r\n\r\n        if (this.metadata.hasMultiplePrimaryKeys) {\r\n            condition = this.metadata.primaryColumns.map(primaryColumn => {\r\n                parameters[primaryColumn.propertyName] = id[primaryColumn.propertyName];\r\n                return alias + \".\" + primaryColumn.propertyName + \"=:\" + primaryColumn.propertyName;\r\n            }).join(\" AND \");\r\n\r\n        } else {\r\n            condition = alias + \".\" + this.metadata.primaryColumns[0].propertyName + \"=:id\";\r\n            parameters[\"id\"] = id;\r\n        }\r\n\r\n        await new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .delete()\r\n            .from(this.metadata.target, alias)\r\n            .where(condition, parameters)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Removes all entities with the given ids.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeByIds(ids: any[]): Promise<void> {\r\n        const alias = this.metadata.tableName;\r\n        const parameters: ObjectLiteral = {};\r\n        let condition = \"\";\r\n\r\n        if (this.metadata.hasMultiplePrimaryKeys) {\r\n            condition = ids.map((id, idIndex) => {\r\n                this.metadata.primaryColumns.map(primaryColumn => {\r\n                    parameters[primaryColumn.propertyName + \"_\" + idIndex] = id[primaryColumn.propertyName];\r\n                    return alias + \".\" + primaryColumn.propertyName + \"=:\" + primaryColumn.propertyName + \"_\" + idIndex;\r\n                }).join(\" AND \");\r\n            }).join(\" OR \");\r\n        } else {\r\n            condition = alias + \".\" + this.metadata.primaryColumns[0].propertyName + \" IN (:ids)\";\r\n            parameters[\"ids\"] = ids;\r\n        }\r\n\r\n        await new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .delete()\r\n            .from(this.metadata.target, alias)\r\n            .where(condition, parameters)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Finds all relation ids in the given entities.\r\n     */\r\n    async findRelationIds(relationOrName: RelationMetadata|string|((...args: any[]) => any), entityOrEntities: Entity[]|Entity|any|any[], inIds?: any[], notInIds?: any[]): Promise<any[]> {\r\n\r\n        const relation = this.convertMixedRelationToMetadata(relationOrName);\r\n        if (!(entityOrEntities instanceof Array)) entityOrEntities = [entityOrEntities];\r\n        const entityReferencedColumns = relation.isOwning ? relation.joinColumns.map(joinColumn => joinColumn.referencedColumn!) : relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn.referencedColumn!);\r\n        const ownerEntityColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.inverseJoinColumns;\r\n        const inverseEntityColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\r\n        const inverseEntityColumnNames = relation.isOwning ? relation.inverseJoinColumns.map(joinColumn => joinColumn.databaseName) : relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn.databaseName);\r\n\r\n        let entityIds = this.convertEntityOrEntitiesToIdOrIds(entityReferencedColumns, entityOrEntities);\r\n        if (!(entityIds instanceof Array)) entityIds = [entityIds];\r\n\r\n        // filter out empty entity ids\r\n        entityIds = (entityIds as any[]).filter(entityId => entityId !== null && entityId !== undefined);\r\n\r\n        // if no entity ids at the end, then we don't need to load anything\r\n        if ((entityIds as any[]).length === 0)\r\n            return [];\r\n\r\n        // create shortcuts for better readability\r\n        const ea = (alias: string) => this.connection.driver.escapeAliasName(alias);\r\n        const ec = (column: string) => this.connection.driver.escapeColumnName(column);\r\n\r\n        let ids: any[] = [];\r\n        // console.log(\"entityOrEntities:\", entityOrEntities);\r\n        // console.log(\"entityIds:\", entityIds);\r\n        const promises = (entityIds as any[]).map((entityId: any) => {\r\n            const qb = new QueryBuilder(this.connection, this.queryRunnerProvider);\r\n            inverseEntityColumnNames.forEach(columnName => {\r\n                qb.select(ea(\"junction\") + \".\" + ec(columnName) + \" AS \" + ea(columnName));\r\n            });\r\n            qb.fromTable(relation.junctionEntityMetadata!.tableName, \"junction\");\r\n            Object.keys(entityId).forEach((columnName) => {\r\n                const junctionColumnName = ownerEntityColumns.find(joinColumn => joinColumn.referencedColumn!.databaseName === columnName);\r\n                qb.andWhere(ea(\"junction\") + \".\" + ec(junctionColumnName!.databaseName) + \"=:\" + junctionColumnName!.databaseName + \"_entityId\", {[junctionColumnName!.databaseName + \"_entityId\"]: entityId[columnName]});\r\n            });\r\n            // ownerEntityColumnNames.forEach(columnName => {\r\n            //     qb.andWhere(ea(\"junction\") + \".\" + ec(columnName) + \"=:\" + columnName + \"_entityId\", {[columnName + \"_entityId\"]: entityId});\r\n            // });\r\n\r\n            // todo: fix inIds\r\n            // if (inIds && inIds.length > 0)\r\n            //     qb.andWhere(ea(\"junction\") + \".\" + ec(inverseEntityColumnNames.fullName) + \" IN (:inIds)\", {inIds: inIds});\r\n            //\r\n            // if (notInIds && notInIds.length > 0)\r\n            //     qb.andWhere(ea(\"junction\") + \".\" + ec(inverseEntityColumnNames.fullName) + \" NOT IN (:notInIds)\", {notInIds: notInIds});\r\n\r\n            // console.log(qb.getSql());\r\n            return qb.getRawMany()\r\n                .then((results: any[]) => {\r\n                    // console.log(results);\r\n                    results.forEach(result => {\r\n                        ids.push(Object.keys(result).reduce((id, key) => {\r\n                            const junctionColumnName = inverseEntityColumns.find(joinColumn => joinColumn.databaseName === key)!;\r\n                            OrmUtils.mergeDeep(id, junctionColumnName.referencedColumn!.createValueMap(result[key]));\r\n                            return id;\r\n                        }, {} as ObjectLiteral));\r\n                    }); // todo: prepare result?\r\n                });\r\n        });\r\n\r\n        await Promise.all(promises);\r\n        return ids;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Converts entity or entities to id or ids map.\r\n     */\r\n    protected convertEntityOrEntitiesToIdOrIds(columns: ColumnMetadata[], entityOrEntities: Entity[]|Entity|any|any[]): any|any[] {\r\n        if (entityOrEntities instanceof Array) {\r\n            return entityOrEntities.map(entity => this.convertEntityOrEntitiesToIdOrIds(columns, entity));\r\n\r\n        } else {\r\n            if (entityOrEntities instanceof Object) {\r\n                return columns.reduce((ids, column) => {\r\n                    ids[column.databaseName] = column.getEntityValue(entityOrEntities);\r\n                    return ids;\r\n                }, {} as ObjectLiteral);\r\n            } else {\r\n                return entityOrEntities;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts relation name, relation name in function into RelationMetadata.\r\n     */\r\n    protected convertMixedRelationToMetadata(relationOrName: RelationMetadata|string|((...args: any[]) => any)): RelationMetadata {\r\n        if (relationOrName instanceof RelationMetadata)\r\n            return relationOrName;\r\n\r\n        const relationPropertyPath = relationOrName instanceof Function ? relationOrName(this.metadata.propertiesMap) : relationOrName;\r\n        const relation = this.metadata.findRelationWithPropertyPath(relationPropertyPath);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${relationPropertyPath} in entity was not found.`);\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Extracts unique objects from given entity and all its downside relations.\r\n     */\r\n    protected extractObjectsById(entity: any, metadata: EntityMetadata, entityWithIds: Subject[] = []): Promise<Subject[]> {\r\n        const promises = metadata.relations.map(relation => {\r\n            const relMetadata = relation.inverseEntityMetadata;\r\n\r\n            const value = relation.getEntityValue(entity);\r\n            if (!value)\r\n                return undefined;\r\n\r\n            if (value instanceof Array) {\r\n                const subPromises = value.map((subEntity: any) => {\r\n                    return this.extractObjectsById(subEntity, relMetadata, entityWithIds);\r\n                });\r\n                return Promise.all(subPromises);\r\n\r\n            } else {\r\n                return this.extractObjectsById(value, relMetadata, entityWithIds);\r\n            }\r\n        });\r\n\r\n        return Promise.all<any>(promises.filter(result => !!result)).then(() => {\r\n            if (!entityWithIds.find(entityWithId => entityWithId.entity === entity)) {\r\n                const entityWithId = new Subject(metadata, entity);\r\n                entityWithIds.push(entityWithId);\r\n            }\r\n\r\n            return entityWithIds;\r\n        });\r\n    }\r\n\r\n}","import {Repository} from \"./Repository\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\n\r\n/**\r\n * Repository with additional functions to work with trees.\r\n *\r\n * @see Repository\r\n */\r\nexport class TreeRepository<Entity> extends Repository<Entity> {\r\n\r\n    // todo: implement moving\r\n    // todo: implement removing\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets complete trees for all roots in the table.\r\n     */\r\n    async findTrees(): Promise<Entity[]> {\r\n        const roots = await this.findRoots();\r\n        await Promise.all(roots.map(async root => {\r\n            await this.findDescendantsTree(root);\r\n        }));\r\n\r\n        return roots;\r\n    }\r\n\r\n    /**\r\n     * Roots are entities that have no ancestors. Finds them all.\r\n     */\r\n    findRoots(): Promise<Entity[]> {\r\n\r\n        const parentPropertyName = this.metadata.treeParentRelation!.propertyName;\r\n        return this.createQueryBuilder(\"treeEntity\")\r\n            .where(`treeEntity.${parentPropertyName} IS NULL`)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Creates a query builder used to get descendants of the entities in a tree.\r\n     */\r\n    createDescendantsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): QueryBuilder<Entity> {\r\n\r\n        // create shortcuts for better readability\r\n        const escapeAlias = (alias: string) => this.manager.connection.driver.escapeAliasName(alias);\r\n        const escapeColumn = (column: string) => this.manager.connection.driver.escapeColumnName(column);\r\n\r\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.primaryColumns[0].databaseName)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}`;\r\n        return this.createQueryBuilder(alias)\r\n            .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\r\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.primaryColumns[0].propertyName]}`);\r\n    }\r\n\r\n    /**\r\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\r\n     */\r\n    findDescendants(entity: Entity): Promise<Entity[]> {\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\r\n     */\r\n    findDescendantsTree(entity: Entity): Promise<Entity> {\r\n        // todo: throw exception if there is no column of this relation?\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getEntitiesAndRawResults()\r\n            .then(entitiesAndScalars => {\r\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.rawResults);\r\n                this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);\r\n                return entity;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets number of descendants of the entity.\r\n     */\r\n    countDescendants(entity: Entity): Promise<number> {\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getCount();\r\n    }\r\n\r\n    /**\r\n     * Creates a query builder used to get ancestors of the entities in the tree.\r\n     */\r\n    createAncestorsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): QueryBuilder<Entity> {\r\n\r\n        // create shortcuts for better readability\r\n        const escapeAlias = (alias: string) => this.manager.connection.driver.escapeAliasName(alias);\r\n        const escapeColumn = (column: string) => this.manager.connection.driver.escapeColumnName(column);\r\n\r\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.primaryColumns[0].databaseName)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}`;\r\n        return this.createQueryBuilder(alias)\r\n            .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\r\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.primaryColumns[0].propertyName]}`);\r\n    }\r\n\r\n    /**\r\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\r\n     */\r\n    findAncestors(entity: Entity): Promise<Entity[]> {\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\r\n     */\r\n    findAncestorsTree(entity: Entity): Promise<Entity> {\r\n        // todo: throw exception if there is no column of this relation?\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getEntitiesAndRawResults()\r\n            .then(entitiesAndScalars => {\r\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.rawResults);\r\n                this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);\r\n                return entity;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets number of ancestors of the entity.\r\n     */\r\n    countAncestors(entity: Entity): Promise<number> {\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getCount();\r\n    }\r\n\r\n    /**\r\n     * Moves entity to the children of then given entity.\r\n     *\r\n    move(entity: Entity, to: Entity): Promise<void> {\r\n        return Promise.resolve();\r\n    } */\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected createRelationMaps(alias: string, rawResults: any[]): { id: any, parentId: any }[] {\r\n        return rawResults.map(rawResult => {\r\n            return {\r\n                id: rawResult[alias + \"_\" + this.metadata.primaryColumns[0].databaseName],\r\n                parentId: rawResult[alias + \"_\" + this.metadata.treeParentRelation!.joinColumns[0].referencedColumn!.databaseName]\r\n            };\r\n        });\r\n    }\r\n\r\n    protected buildChildrenEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\r\n        const childProperty = this.metadata.treeChildrenRelation!.propertyName;\r\n        const parentEntityId = this.metadata.primaryColumns[0].getEntityValue(entity);\r\n        const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\r\n        const childIds = childRelationMaps.map(relationMap => relationMap.id);\r\n        entity[childProperty] = entities.filter(entity => childIds.indexOf(this.metadata.primaryColumns[0].getEntityValue(entity)) !== -1);\r\n        entity[childProperty].forEach((childEntity: any) => {\r\n            this.buildChildrenEntityTree(childEntity, entities, relationMaps);\r\n        });\r\n    }\r\n\r\n    protected buildParentEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\r\n        const parentProperty = this.metadata.treeParentRelation!.propertyName;\r\n        const entityId = this.metadata.primaryColumns[0].getEntityValue(entity);\r\n        const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\r\n        const parentEntity = entities.find(entity => {\r\n            if (!parentRelationMap)\r\n                return false;\r\n\r\n            return entity[this.metadata.primaryColumns[0].propertyName] === parentRelationMap.parentId;\r\n        });\r\n        if (parentEntity) {\r\n            entity[parentProperty] = parentEntity;\r\n            this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);\r\n        }\r\n    }\r\n\r\n}","import { EventEmitter } from \"events\";\r\nimport { Readable, Writable } from \"stream\";\r\n\r\n/**\r\n * Creates a new MongoClient instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MongoClient.html\r\n */\r\nexport declare class MongoClient {\r\n\r\n    constructor();\r\n\r\n    /**\r\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\r\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\r\n     *\r\n     * @param url The connection URI string.\r\n     * @param callback The command result callback.\r\n     */\r\n    static connect(url: string, callback: MongoCallback<Db>): void;\r\n\r\n    /**\r\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\r\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\r\n     *\r\n     * @param url The connection URI string.\r\n     * @param options Optional settings.\r\n     */\r\n    static connect(url: string, options?: MongoClientOptions): Promise<Db>;\r\n\r\n    /**\r\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\r\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\r\n     *\r\n     * @param url The connection URI string.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     */\r\n    static connect(url: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;\r\n\r\n    /**\r\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\r\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\r\n     *\r\n     * @param url The connection URI string.\r\n     * @param callback The command result callback.\r\n     */\r\n    connect(url: string, callback: MongoCallback<Db>): void;\r\n\r\n    /**\r\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\r\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\r\n     *\r\n     * @param url The connection URI string.\r\n     * @param options Optional settings.\r\n     */\r\n    connect(url: string, options?: MongoClientOptions): Promise<Db>;\r\n\r\n    /**\r\n     * Connect to MongoDB using a url as documented at docs.mongodb.org/manual/reference/connection-string/\r\n     * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver.\r\n     *\r\n     * @param url The connection URI string.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     */\r\n    connect(url: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;\r\n}\r\n\r\n/**\r\n * The callback format for results.\r\n */\r\nexport interface MongoCallback<T> {\r\n\r\n    /**\r\n     * @param error An error instance representing the error during the execution.\r\n     * @param result The result of execution.\r\n     */\r\n    (error: MongoError, result: T): void;\r\n}\r\n\r\n// http://mongodb.github.io/node-mongodb-native/2.1/api/MongoError.html\r\nexport declare class MongoError extends Error {\r\n    constructor(message: string);\r\n    static create(options: Object): MongoError;\r\n}\r\n\r\n/**\r\n * Options for MongoClient#connect method.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#.connect\r\n */\r\nexport interface MongoClientOptions {\r\n\r\n    /**\r\n     * The maximum size of the individual server pool.\r\n     */\r\n    poolSize?: number;\r\n\r\n    /**\r\n     * Enable SSL connection.\r\n     */\r\n    ssl?: boolean;\r\n\r\n    /**\r\n     * SSL Certificate store binary buffer.\r\n     */\r\n    sslCA?: Buffer;\r\n\r\n    /**\r\n     * Uri decode the user name and password for authentication.\r\n     */\r\n    uri_decode_auth?: boolean;\r\n\r\n    /**\r\n     * A hash of options to set on the db object, see Db constructor.\r\n     */\r\n    db?: DbCreateOptions;\r\n\r\n    /**\r\n     * A hash of options to set on the server objects, see Server constructor**.\r\n     */\r\n    server?: ServerOptions;\r\n\r\n    /**\r\n     * A hash of options to set on the replSet object, see ReplSet constructor**.\r\n     */\r\n    replSet?: ReplSetOptions;\r\n\r\n    /**\r\n     * A hash of options to set on the mongos object, see Mongos constructor**.\r\n     */\r\n    mongos?: MongosOptions;\r\n\r\n    /**\r\n     * A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible.\r\n     */\r\n    promiseLibrary?: Object;\r\n}\r\n\r\nexport interface CommandOptions {\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n\r\n    /**\r\n     * Number of milliseconds to wait before aborting the query.\r\n     */\r\n    maxTimeMS?: number;\r\n}\r\n\r\n/**\r\n * Options for Db class.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\r\n */\r\nexport interface DbCreateOptions {\r\n\r\n    /**\r\n     * If the database authentication is dependent on another databaseName.\r\n     */\r\n    authSource?: string;\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * The current value of the parameter native_parser.\r\n     */\r\n    native_parser?: boolean;\r\n\r\n    /**\r\n     * Force server to assign _id values instead of driver.\r\n     */\r\n    forceServerObjectId?: boolean;\r\n\r\n    /**\r\n     * Serialize functions on any object.\r\n     */\r\n    serializeFunctions?: boolean;\r\n\r\n    /**\r\n     * Specify if the BSON serializer should ignore undefined fields.\r\n     */\r\n    ignoreUndefined?: boolean;\r\n\r\n    /**\r\n     * Return document results as raw BSON buffers.\r\n     */\r\n    raw?: boolean;\r\n\r\n    /**\r\n     * Promotes Long values to number if they fit inside the 53 bits resolution.\r\n     */\r\n    promoteLongs?: boolean;\r\n\r\n    /**\r\n     * Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\r\n     */\r\n    bufferMaxEntries?: number;\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n\r\n    /**\r\n     * A primary key factory object for generation of custom _id keys.\r\n     */\r\n    pkFactory?: Object;\r\n\r\n    /**\r\n     * A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible.\r\n     */\r\n    promiseLibrary?: Object;\r\n\r\n    /**\r\n     * Specify a read concern for the collection. (only MongoDB 3.2 or higher supported).\r\n     */\r\n    readConcern?: { level?: Object };\r\n}\r\n\r\n/**\r\n * Creates a new ReadPreference instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReadPreference.html\r\n */\r\nexport declare class ReadPreference {\r\n    constructor(mode: string, tags: Object);\r\n\r\n    /**\r\n     * The ReadPreference mode as listed above.\r\n     */\r\n    mode: string;\r\n\r\n    /**\r\n     * An object representing read preference tags.\r\n     */\r\n    tags: any;\r\n\r\n    /**\r\n     * Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).\r\n     */\r\n    static PRIMARY: string;\r\n\r\n    /**\r\n     * Read from primary if available, otherwise a secondary.\r\n     */\r\n    static PRIMARY_PREFERRED: string;\r\n\r\n    /**\r\n     * Read from secondary if available, otherwise error.\r\n     */\r\n    static SECONDARY: string;\r\n\r\n    /**\r\n     * Read from a secondary if available, otherwise read from the primary.\r\n     */\r\n    static SECONDARY_PREFERRED: string;\r\n\r\n    /**\r\n     * All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.\r\n     */\r\n    static NEAREST: string;\r\n\r\n    /**\r\n     * Validate if a mode is legal.\r\n     */\r\n    isValid(mode: string): boolean;\r\n\r\n    /**\r\n     * Validate if a mode is legal.\r\n     */\r\n    static isValid(mode: string): boolean;\r\n}\r\n\r\n/**\r\n * Creates a new Server instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\r\n */\r\nexport interface SocketOptions {\r\n\r\n    /**\r\n     * Reconnect on error.\r\n     */\r\n    autoReconnect?: boolean;\r\n\r\n    /**\r\n     * TCP Socket NoDelay option.\r\n     */\r\n    noDelay?: boolean;\r\n\r\n    /**\r\n     * TCP KeepAlive on the socket with a X ms delay before start.\r\n     */\r\n    keepAlive?: number;\r\n\r\n    /**\r\n     * TCP Connection timeout setting.\r\n     */\r\n    connectTimeoutMS?: number;\r\n\r\n    /**\r\n     * TCP Socket timeout setting.\r\n     */\r\n    socketTimeoutMS?: number;\r\n}\r\n\r\n/**\r\n * Creates a new Server instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\r\n */\r\nexport interface ServerOptions {\r\n\r\n    /**\r\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\r\n     */\r\n    poolSize?: number;\r\n\r\n    /**\r\n     * Use ssl connection (needs to have a mongod server with ssl support).\r\n     */\r\n    ssl?: boolean;\r\n\r\n    /**\r\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslValidate?: Object;\r\n\r\n    /**\r\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\r\n     */\r\n    checkServerIdentity?: boolean | Function;\r\n\r\n    /**\r\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslCA?: Array<Buffer | string>;\r\n\r\n    /**\r\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslCert?: Buffer | string;\r\n\r\n    /**\r\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslKey?: Buffer | string;\r\n\r\n    /**\r\n     * String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslPass?: Buffer | string;\r\n\r\n    /**\r\n     * Socket options.\r\n     */\r\n    socketOptions?: SocketOptions;\r\n\r\n    /**\r\n     * Server attempt to reconnect #times.\r\n     */\r\n    reconnectTries?: number;\r\n\r\n    /**\r\n     * Server will wait # milliseconds between retries.\r\n     */\r\n    reconnectInterval?: number;\r\n}\r\n\r\n/**\r\n * Creates a new ReplSet instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\r\n */\r\nexport interface ReplSetOptions {\r\n\r\n    /**\r\n     * Turn on high availability monitoring.\r\n     */\r\n    ha?: boolean;\r\n\r\n    /**\r\n     * Time between each replicaset status check.\r\n     */\r\n    haInterval?: number;\r\n\r\n    /**\r\n     * The name of the replicaset to connect to.\r\n     */\r\n    replicaSet?: string;\r\n\r\n    /**\r\n     * Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms).\r\n     */\r\n    secondaryAcceptableLatencyMS?: number;\r\n\r\n    /**\r\n     * Sets if the driver should connect even if no primary is available.\r\n     */\r\n    connectWithNoPrimary?: boolean;\r\n\r\n    /**\r\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\r\n     */\r\n    poolSize?: number;\r\n\r\n    /**\r\n     * Use ssl connection (needs to have a mongod server with ssl support).\r\n     */\r\n    ssl?: boolean;\r\n\r\n    /**\r\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslValidate?: Object;\r\n\r\n    /**\r\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\r\n     */\r\n    checkServerIdentity?: boolean | Function;\r\n\r\n    /**\r\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslCA?: Array<Buffer | string>;\r\n\r\n    /**\r\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslCert?: Buffer | string;\r\n\r\n    /**\r\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslKey?: Buffer | string;\r\n\r\n    /**\r\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslPass?: Buffer | string;\r\n\r\n    /**\r\n     * Socket options.\r\n     */\r\n    socketOptions?: SocketOptions;\r\n}\r\n\r\n/**\r\n * Creates a new Mongos instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html\r\n */\r\nexport interface MongosOptions {\r\n\r\n    /**\r\n     * Turn on high availability monitoring.\r\n     */\r\n    ha?: boolean;\r\n\r\n    /**\r\n     * Time between each replicaset status check.\r\n     */\r\n    haInterval?: number;\r\n\r\n    /**\r\n     * Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\r\n     */\r\n    poolSize?: number;\r\n\r\n    /**\r\n     * Use ssl connection (needs to have a mongod server with ssl support).\r\n     */\r\n    ssl?: boolean;\r\n\r\n    /**\r\n     * Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslValidate?: Object;\r\n\r\n    /**\r\n     * Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\r\n     */\r\n    checkServerIdentity?: boolean | Function;\r\n\r\n    /**\r\n     * Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslCA?: Array<Buffer | string>;\r\n\r\n    /**\r\n     * String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslCert?: Buffer | string;\r\n\r\n    /**\r\n     * String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslKey?: Buffer | string;\r\n\r\n    /**\r\n     * String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher).\r\n     */\r\n    sslPass?: Buffer | string;\r\n\r\n    /**\r\n     * Socket options.\r\n     */\r\n    socketOptions?: SocketOptions;\r\n}\r\n\r\nexport interface DbOptions {\r\n\r\n    /**\r\n     * Do not make the db an event listener to the original connection.\r\n     */\r\n    noListener?: boolean;\r\n\r\n    /**\r\n     * Control if you want to return a cached instance or have a new one created.\r\n     */\r\n    returnNonCachedInstance?: boolean;\r\n}\r\n\r\nexport interface IndexInformationOptions {\r\n\r\n    /**\r\n     * Returns the full raw index information.\r\n     */\r\n    full?: boolean;\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY,\r\n     * ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY,\r\n     * ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n}\r\n\r\nexport interface ExecuteDbAdminCommandOptions {\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n\r\n    // maxTimeMS?: number;\r\n}\r\n\r\nexport interface ListCollectionsOptions {\r\n\r\n    /**\r\n     * The batchSize for the returned command cursor or if pre 2.8 the systems batch collection.\r\n     */\r\n    batchSize?: number;\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n}\r\n\r\n/**\r\n * Db.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\r\n */\r\nexport declare class Db extends EventEmitter {\r\n\r\n    /**\r\n     *\r\n     * @param databaseName The name of the database this instance represents.\r\n     * @param serverConfig The server topology for the database.\r\n     * @param options Optional.\r\n     */\r\n    constructor(databaseName: string, serverConfig: Server | ReplSet | Mongos, options?: DbCreateOptions);\r\n\r\n    /**\r\n     * Get the current db topology.\r\n     */\r\n    serverConfig: Server | ReplSet | Mongos;\r\n\r\n    /**\r\n     * Current bufferMaxEntries value for the database.\r\n     */\r\n    bufferMaxEntries: number;\r\n\r\n    /**\r\n     * The name of the database this instance represents.\r\n     */\r\n    databaseName: string;\r\n\r\n    /**\r\n     * The options associated with the db instance.\r\n     */\r\n    options: any;\r\n\r\n    /**\r\n     * The current value of the parameter native_parser.\r\n     */\r\n    native_parser: boolean;\r\n\r\n    /**\r\n     * The current slaveOk value for the db instance.\r\n     */\r\n    slaveOk: boolean;\r\n\r\n    /**\r\n     * The current write concern values.\r\n     */\r\n    writeConcern: any;\r\n\r\n    /**\r\n     * Add a user to the database.\r\n     *\r\n     * @param username The username.\r\n     * @param password The password.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\r\n     */\r\n    addUser(username: string, password: string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Add a user to the database.\r\n     *\r\n     * @param username The username.\r\n     * @param password The password.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\r\n     */\r\n    addUser(username: string, password: string, options?: DbAddUserOptions): Promise<any>;\r\n\r\n    /**\r\n     * Add a user to the database.\r\n     *\r\n     * @param username The username.\r\n     * @param password The password.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\r\n     */\r\n    addUser(username: string, password: string, options: DbAddUserOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Return the Admin db instance.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#admin\r\n     */\r\n    admin(): Admin;\r\n\r\n    /**\r\n     * Authenticate a user against the server.\r\n     *\r\n     * @param userName The username.\r\n     * @param password The password.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\r\n     */\r\n    authenticate(userName: string, password: string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Authenticate a user against the server.\r\n     *\r\n     * @param userName The username.\r\n     * @param password The password.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\r\n     */\r\n    authenticate(userName: string, password: string, options?: { authMechanism: string }): Promise<any>;\r\n\r\n    /**\r\n     * Authenticate a user against the server.\r\n     *\r\n     * @param userName The username.\r\n     * @param password The password.\r\n     * @param password\r\n     * @param options\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate\r\n     */\r\n    authenticate(userName: string, password: string, options: { authMechanism: string }, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Close the db and its underlying connections.\r\n     *\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\r\n     */\r\n    close(callback: MongoCallback<void>): void;\r\n\r\n    /**\r\n     * Close the db and its underlying connections.\r\n     *\r\n     * @param forceClose Force close, emitting no events.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\r\n     */\r\n    close(forceClose?: boolean): Promise<void>;\r\n\r\n    /**\r\n     * Close the db and its underlying connections.\r\n     *\r\n     * @param forceClose Force close, emitting no events.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close\r\n     */\r\n    close(forceClose: boolean, callback: MongoCallback<void>): void;\r\n\r\n    /**\r\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\r\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\r\n     *\r\n     * @param name The collection name we wish to access.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\r\n     */\r\n    collection(name: string): Collection;\r\n\r\n    /**\r\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\r\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\r\n     *\r\n     * @param name The collection name we wish to access.\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\r\n     */\r\n    collection(name: string, callback: MongoCallback<Collection>): Collection;\r\n\r\n    /**\r\n     * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you can\r\n     * can use it without a callback in the following way: var collection = db.collection('mycollection');\r\n     *\r\n     * @param name The collection name we wish to access.\r\n     * @param options Optional settings.\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\r\n     */\r\n    collection(name: string, options: DbCollectionOptions, callback: MongoCallback<Collection>): Collection;\r\n\r\n    /**\r\n     * Fetch all collections for the current db.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections\r\n     */\r\n    collections(): Promise<Collection[]>;\r\n\r\n    /**\r\n     * Fetch all collections for the current db.\r\n     *\r\n     * @param callback The results callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections\r\n     */\r\n    collections(callback: MongoCallback<Collection[]>): void;\r\n\r\n    /**\r\n     * Execute a command.\r\n     *\r\n     * @param command The command hash.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\r\n     */\r\n    command(command: Object, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Execute a command.\r\n     *\r\n     * @param command The command hash.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\r\n     */\r\n    command(command: Object, options?: { readPreference: ReadPreference | string }): Promise<any>;\r\n\r\n    /**\r\n     * Execute a command.\r\n     *\r\n     * @param command The command hash.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command\r\n     */\r\n    command(command: Object, options: { readPreference: ReadPreference | string }, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\r\n     *\r\n     * @param name The collection name we wish to access.\r\n     * @param callback The results callback\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\r\n     */\r\n    createCollection(name: string, callback: MongoCallback<Collection>): void;\r\n\r\n    /**\r\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\r\n     *\r\n     * @param name The collection name we wish to access.\r\n     * @param options Oprional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\r\n     */\r\n    createCollection(name: string, options?: CollectionCreateOptions): Promise<Collection>;\r\n\r\n    /**\r\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\r\n     *\r\n     * @param name The collection name we wish to access.\r\n     * @param options Optional settings.\r\n     * @param callback The results callback\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\r\n     */\r\n    createCollection(name: string, options: CollectionCreateOptions, callback: MongoCallback<Collection>): void;\r\n\r\n    /**\r\n     * Creates an index on the db and collection collection.\r\n     *\r\n     * @param name Name of the collection to create the index on.\r\n     * @param fieldOrSpec Defines the index.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\r\n     */\r\n    createIndex(name: string, fieldOrSpec: string | Object, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Creates an index on the db and collection collection.\r\n     *\r\n     * @param name Name of the collection to create the index on.\r\n     * @param fieldOrSpec Defines the index.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\r\n     */\r\n    createIndex(name: string, fieldOrSpec: string | Object, options?: MongodbIndexOptions): Promise<any>;\r\n\r\n    /**\r\n     * Creates an index on the db and collection collection.\r\n     *\r\n     * @param name Name of the collection to create the index on.\r\n     * @param fieldOrSpec Defines the index.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\r\n     */\r\n    createIndex(name: string, fieldOrSpec: string | Object, options: MongodbIndexOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\r\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\r\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\r\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\r\n     *\r\n     * @param dbName The name of the database we want to use.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db\r\n     */\r\n    db(dbName: string): Db;\r\n\r\n    /**\r\n     * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\r\n     * related in a parent-child relationship to the original instance so that events are correctly emitted on child\r\n     * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\r\n     * You can control these behaviors with the options noListener and returnNonCachedInstance.\r\n     *\r\n     * @param dbName The name of the database we want to use.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db\r\n     */\r\n    db(dbName: string, options: DbOptions): Db;\r\n\r\n    /**\r\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\r\n     *\r\n     * @param name Name of collection to drop.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection\r\n     */\r\n    dropCollection(name: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\r\n     *\r\n     * @param name Name of collection to drop.\r\n     * @param callback The results callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection\r\n     */\r\n    dropCollection(name: string, callback: MongoCallback<boolean>): void;\r\n\r\n    /**\r\n     * Drop a database, removing it permanently from the server.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase\r\n     */\r\n    dropDatabase(): Promise<any>;\r\n\r\n    /**\r\n     * Drop a database, removing it permanently from the server.\r\n     *\r\n     * @param callback The results callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase\r\n     */\r\n    dropDatabase(callback: MongoCallback<any>): void;\r\n\r\n    // deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#ensureIndex\r\n    // ensureIndex(collectionName: any, fieldOrSpec: any, options: IndexOptions, callback: Function): void;\r\n    // deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#eval\r\n    // eval(code: any, parameters: any[], options?: any, callback?: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Runs a command on the database as admin.\r\n     *\r\n     * @param command The command hash.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\r\n     */\r\n    executeDbAdminCommand(command: Object, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Runs a command on the database as admin.\r\n     *\r\n     * @param command The command hash.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\r\n     */\r\n    executeDbAdminCommand(command: Object, options?: ExecuteDbAdminCommandOptions): Promise<any>;\r\n\r\n    /**\r\n     * Runs a command on the database as admin.\r\n     *\r\n     * @param command The command hash.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand\r\n     */\r\n    executeDbAdminCommand(command: Object, options: ExecuteDbAdminCommandOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     *\r\n     * @param name The name of the collection.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\r\n     */\r\n    indexInformation(name: string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     *\r\n     * @param name The name of the collection.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\r\n     */\r\n    indexInformation(name: string, options?: IndexInformationOptions): Promise<any>;\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     *\r\n     * @param name The name of the collection.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation\r\n     */\r\n    indexInformation(name: string, options: IndexInformationOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Get the list of all collection information for the specified db.\r\n     *\r\n     * @param filter Query to filter collections by.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#listCollections\r\n     */\r\n    listCollections(filter: Object, options?: ListCollectionsOptions): CommandCursor;\r\n\r\n    /**\r\n     * Logout user from server, fire off on all connections and remove all auth info.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\r\n     */\r\n    logout(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Logout user from server, fire off on all connections and remove all auth info.\r\n     *\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\r\n     */\r\n    logout(options?: { dbName?: string }): Promise<any>;\r\n\r\n    /**\r\n     * Logout user from server, fire off on all connections and remove all auth info.\r\n     *\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout\r\n     */\r\n    logout(options: { dbName?: string }, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Open the database.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open\r\n     */\r\n    open(): Promise<Db>;\r\n\r\n    /**\r\n     * Open the database\r\n     *\r\n     * @param callback Callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open\r\n     */\r\n    open(callback: MongoCallback<Db>): void;\r\n\r\n\r\n    /**\r\n     *\r\n     * @param username\r\n     * @param callback\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#removeUser\r\n     */\r\n    removeUser(username: string, callback: MongoCallback<any>): void;\r\n    removeUser(username: string, options?: { w?: number | string, wtimeout?: number, j?: boolean }): Promise<any>;\r\n    removeUser(username: string, options: { w?: number | string, wtimeout?: number, j?: boolean }, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Rename a collection.\r\n     *\r\n     * @param fromCollection Name of current collection to rename.\r\n     * @param toCollection New name of of the collection.\r\n     * @param callback The results callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\r\n     */\r\n    renameCollection(fromCollection: string, toCollection: string, callback: MongoCallback<Collection>): void;\r\n\r\n    /**\r\n     * Rename a collection.\r\n     *\r\n     * @param fromCollection Name of current collection to rename.\r\n     * @param toCollection New name of of the collection.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\r\n     */\r\n    renameCollection(fromCollection: string, toCollection: string, options?: { dropTarget?: boolean }): Promise<Collection>;\r\n\r\n    /**\r\n     * Rename a collection.\r\n     *\r\n     * @param fromCollection Name of current collection to rename.\r\n     * @param toCollection New name of of the collection.\r\n     * @param options Optional settings.\r\n     * @param callback The results callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection\r\n     */\r\n    renameCollection(fromCollection: string, toCollection: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection>): void;\r\n\r\n    /**\r\n     * Get all the db statistics.\r\n     *\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\r\n     */\r\n    stats(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Get all the db statistics.\r\n     *\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\r\n     */\r\n    stats(options?: { scale?: number }): Promise<any>;\r\n\r\n    /**\r\n     * Get all the db statistics.\r\n     *\r\n     * @param options Optional settings.\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats\r\n     */\r\n    stats(options: { scale?: number }, callback: MongoCallback<any>): void;\r\n}\r\n\r\n/**\r\n * Server.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\r\n */\r\nexport declare class Server extends EventEmitter {\r\n\r\n    /**\r\n     *\r\n     * @param host The host for the server, can be either an IP4, IP6 or domain socket style host.\r\n     * @param port The server port if IP4.\r\n     * @param options Optional.\r\n     */\r\n    constructor(host: string, port: number, options?: ServerOptions);\r\n\r\n    /**\r\n     * All raw connections.\r\n     */\r\n    connections(): Array<any>;\r\n}\r\n\r\n/**\r\n * ReplSet.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\r\n */\r\nexport declare class ReplSet extends EventEmitter {\r\n\r\n    /**\r\n     *\r\n     * @param servers A seedlist of servers participating in the replicaset.\r\n     * @param options Optional.\r\n     */\r\n    constructor(servers: Array<Server>, options?: ReplSetOptions);\r\n\r\n    /**\r\n     * All raw connections\r\n     */\r\n    connections(): Array<any>;\r\n}\r\n\r\n/**\r\n * Mongos.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html\r\n */\r\nexport declare class Mongos extends EventEmitter {\r\n\r\n    /**\r\n     *\r\n     * @param servers A seedlist of servers participating in the replicaset.\r\n     * @param options Optional.\r\n     */\r\n    constructor(servers: Array<Server>, options?: MongosOptions);\r\n\r\n    /**\r\n     * All raw connections\r\n     */\r\n    connections(): Array<any>;\r\n}\r\n\r\n/**\r\n * Creates a new Db instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser\r\n */\r\nexport interface DbAddUserOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: string | number;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Custom data associated with the user (only Mongodb 2.6 or higher).\r\n     */\r\n    customData?: Object;\r\n\r\n    /**\r\n     * Roles associated with the created user (only Mongodb 2.6 or higher).\r\n     */\r\n    roles?: Object[];\r\n}\r\n\r\n/**\r\n * Creates a new Db instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection\r\n */\r\nexport interface CollectionCreateOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Return document results as raw BSON buffers.\r\n     */\r\n    raw?: boolean;\r\n\r\n    /**\r\n     * A primary key factory object for generation of custom _id keys.\r\n     */\r\n    pkFactory?: Object;\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n\r\n    /**\r\n     * Serialize functions on any object.\r\n     */\r\n    serializeFunctions?: boolean;\r\n\r\n    /**\r\n     * Returns an error if the collection does not exist.\r\n     */\r\n    strict?: boolean;\r\n\r\n    /**\r\n     * Create a capped collection.\r\n     */\r\n    capped?: boolean;\r\n\r\n    /**\r\n     * The size of the capped collection in bytes.\r\n     */\r\n    size?: number;\r\n\r\n    /**\r\n     * The maximum number of documents in the capped collection.\r\n     */\r\n    max?: number;\r\n\r\n    /**\r\n     * Create an index on the _id field of the document, True by default on MongoDB 2.2 or higher off for version < 2.2.\r\n     */\r\n    autoIndexId?: boolean;\r\n}\r\n\r\n/**\r\n * Creates a new Db instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection\r\n */\r\nexport interface DbCollectionOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Return document results as raw BSON buffers.\r\n     */\r\n    raw?: boolean;\r\n\r\n    /**\r\n     * A primary key factory object for generation of custom _id keys.\r\n     */\r\n    pkFactory?: Object;\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n\r\n    /**\r\n     * Serialize functions on any object.\r\n     */\r\n    serializeFunctions?: boolean;\r\n\r\n    /**\r\n     * Returns an error if the collection does not exist.\r\n     */\r\n    strict?: boolean;\r\n\r\n    /**\r\n     * Specify a read concern for the collection. (only MongoDB 3.2 or higher supported).\r\n     */\r\n    readConcern?: { level: Object };\r\n}\r\n\r\n/**\r\n * Creates an index on the db and collection collection.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex\r\n */\r\nexport interface MongodbIndexOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Creates an unique index.\r\n     */\r\n    unique?: boolean;\r\n\r\n    /**\r\n     * Creates a sparse index.\r\n     */\r\n    sparse?: boolean;\r\n\r\n    /**\r\n     * Creates the index in the background, yielding whenever possible.\r\n     */\r\n    background?: boolean;\r\n\r\n    /**\r\n     * A unique index cannot be created on a key that has pre-existing duplicate values.\r\n     * If you would like to create the index anyway, keeping the first document\r\n     * the database indexes and deleting all subsequent documents that have duplicate value.\r\n     */\r\n    dropDups?: boolean;\r\n\r\n    /**\r\n     * For geospatial indexes set the lower bound for the co-ordinates.\r\n     */\r\n    min?: number;\r\n\r\n    /**\r\n     * For geospatial indexes set the high bound for the co-ordinates.\r\n     */\r\n    max?: number;\r\n\r\n    /**\r\n     * Specify the format version of the indexes.\r\n     */\r\n    v?: number;\r\n\r\n    /**\r\n     * Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher).\r\n     */\r\n    expireAfterSeconds?: number;\r\n\r\n    /**\r\n     * Override the autogenerated index name (useful if the resulting name is larger than 128 bytes).\r\n     */\r\n    name?: string;\r\n\r\n}\r\n\r\n/**\r\n * Admin.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html\r\n */\r\nexport interface Admin {\r\n\r\n    /**\r\n     * Add a user to the database.\r\n     *\r\n     * @param username The username.\r\n     * @param password The password.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\r\n     */\r\n    addUser(username: string, password: string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Add a user to the database.\r\n     *\r\n     * @param username The username.\r\n     * @param password The password.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\r\n     */\r\n    addUser(username: string, password: string, options?: AddUserOptions): Promise<any>;\r\n\r\n    /**\r\n     * Add a user to the database.\r\n     *\r\n     * @param username The username.\r\n     * @param password The password.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\r\n     */\r\n    addUser(username: string, password: string, options: AddUserOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Authenticate a user against the server.\r\n     *\r\n     * @param username The username.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\r\n     */\r\n    authenticate(username: string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Authenticate a user against the server.\r\n     *\r\n     * @param username The username.\r\n     * @param password The password.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\r\n     */\r\n    authenticate(username: string, password?: string): Promise<any>;\r\n\r\n    /**\r\n     * Authenticate a user against the server.\r\n     *\r\n     * @param username The username.\r\n     * @param password The password.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate\r\n     */\r\n    authenticate(username: string, password: string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Retrieve the server information for the current instance of the db client\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo\r\n     */\r\n    buildInfo(): Promise<any>;\r\n\r\n    /**\r\n     * Retrieve the server information for the current instance of the db client\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo\r\n     */\r\n    buildInfo(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Execute a command.\r\n     *\r\n     * @param command The command hash.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\r\n     */\r\n    command(command: Object, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Execute a command.\r\n     *\r\n     * @param command The command hash.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\r\n     */\r\n    command(command: Object, options?: CommandOptions): Promise<any>;\r\n\r\n    /**\r\n     * Execute a command.\r\n     *\r\n     * @param command The command hash.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command\r\n     */\r\n    command(command: Object, options: CommandOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * List the available databases.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases\r\n     */\r\n    listDatabases(): Promise<any>;\r\n\r\n    /**\r\n     * List the available databases.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases\r\n     */\r\n    listDatabases(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Logout user from server, fire off on all connections and remove all auth info.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout.\r\n     */\r\n    logout(): Promise<any>;\r\n\r\n    /**\r\n     * Logout user from server, fire off on all connections and remove all auth info.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout.\r\n     */\r\n    logout(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Ping the MongoDB server and retrieve results.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping\r\n     */\r\n    ping(): Promise<any>;\r\n\r\n    /**\r\n     * Ping the MongoDB server and retrieve results.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping\r\n     */\r\n    ping(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Retrive the current profiling information for MongoDB.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo\r\n     */\r\n    profilingInfo(): Promise<any>;\r\n\r\n    /**\r\n     * Retrive the current profiling information for MongoDB.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo\r\n     */\r\n    profilingInfo(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Retrieve the current profiling Level for MongoDB.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel\r\n     */\r\n    profilingLevel(): Promise<any>;\r\n\r\n    /**\r\n     * Retrieve the current profiling Level for MongoDB.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel\r\n     */\r\n    profilingLevel(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Remove a user from a database.\r\n     *\r\n     * @param username The username.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\r\n     */\r\n    removeUser(username: string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Remove a user from a database.\r\n     *\r\n     * @param username The username.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\r\n     */\r\n    removeUser(username: string, options?: FSyncOptions): Promise<any>;\r\n\r\n    /**\r\n     * Remove a user from a database.\r\n     *\r\n     * @param username The username.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\r\n     */\r\n    removeUser(username: string, options: FSyncOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Get ReplicaSet status.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus\r\n     */\r\n    replSetGetStatus(): Promise<any>;\r\n\r\n    /**\r\n     * Get ReplicaSet status.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus\r\n     */\r\n    replSetGetStatus(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Retrieve the server information for the current\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo\r\n     */\r\n    serverInfo(): Promise<any>;\r\n\r\n    /**\r\n     * instance of the db client\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo\r\n     * @param callback The command result callback.\r\n     */\r\n    serverInfo(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Retrieve this db's server status.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus\r\n     */\r\n    serverStatus(): Promise<any>;\r\n\r\n    /**\r\n     * Retrieve this db's server status.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus\r\n     */\r\n    serverStatus(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Set the current profiling level of MongoDB.\r\n     *\r\n     * @param level The new profiling level (off, slow_only, all).\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel\r\n     */\r\n    setProfilingLevel(level: string): Promise<any>;\r\n\r\n    /**\r\n     * Set the current profiling level of MongoDB.\r\n     *\r\n     * @param level The new profiling level (off, slow_only, all).\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel\r\n     */\r\n    setProfilingLevel(level: string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Validate an existing collection\r\n     *\r\n     * @param collectionNme The name of the collection to validate.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\r\n     */\r\n    validateCollection(collectionNme: string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Validate an existing collection\r\n     *\r\n     * @param collectionNme The name of the collection to validate.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\r\n     */\r\n    validateCollection(collectionNme: string, options?: Object): Promise<any>;\r\n\r\n    /**\r\n     * Validate an existing collection\r\n     *\r\n     * @param collectionNme The name of the collection to validate.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection\r\n     */\r\n    validateCollection(collectionNme: string, options: Object, callback: MongoCallback<any>): void;\r\n}\r\n\r\n/**\r\n * Add a user to the database.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser\r\n */\r\nexport interface AddUserOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Specify a file sync write concern.\r\n     */\r\n    fsync: boolean;\r\n\r\n    /**\r\n     * Custom data associated with the user (only Mongodb 2.6 or higher).\r\n     */\r\n    customData?: Object;\r\n\r\n    /**\r\n     * Roles associated with the created user (only Mongodb 2.6 or higher).\r\n     */\r\n    roles?: Object[];\r\n}\r\nexport interface ListIndexesOptions {\r\n\r\n    /**\r\n     * The batchSize for the returned command cursor or if pre 2.8 the systems batch collection.\r\n     */\r\n    batchSize?: number;\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n}\r\n\r\nexport interface GroupOptions {\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n}\r\n\r\n/**\r\n * Remove a user from a database.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser\r\n */\r\nexport interface FSyncOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Specify a file sync write concern.\r\n     */\r\n    fsync?: boolean;\r\n}\r\n\r\nexport interface FindOneAndDeleteOptions {\r\n\r\n    /**\r\n     * Limits the fields to return for all matching documents.\r\n     */\r\n    projection?: Object;\r\n\r\n    /**\r\n     * Determines which document the operation modifies if the query selects multiple documents.\r\n     */\r\n    sort?: Object;\r\n\r\n    /**\r\n     * The maximum amount of time to allow the query to run.\r\n     */\r\n    maxTimeMS?: number;\r\n}\r\n\r\n/**\r\n * Create a new ObjectID instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/ObjectID.html\r\n */\r\nexport declare class ObjectID {\r\n    constructor(s?: string | number);\r\n\r\n    /**\r\n     * The generation time of this ObjectId instance.\r\n     */\r\n    generationTime: number;\r\n\r\n    /**\r\n     * Creates an ObjectID from a hex string representation of an ObjectID.\r\n     */\r\n    static createFromHexString(hexString: string): ObjectID;\r\n\r\n    /**\r\n     * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\r\n     */\r\n    static createFromTime(time: number): ObjectID;\r\n\r\n    /**\r\n     * Checks if a value is a valid bson ObjectId.\r\n     */\r\n    static isValid(id: any): boolean;\r\n\r\n    /**\r\n     * Compares the equality of this ObjectID with otherID.\r\n     */\r\n    equals(otherID: ObjectID): boolean;\r\n\r\n    /**\r\n     * Generate a 12 byte id buffer used in ObjectID's.\r\n     */\r\n    generate(time?: number): string;\r\n\r\n    /**\r\n     * Returns the generation date (accurate up to the second) that this ID was generated.\r\n     *\r\n     */\r\n    getTimestamp(): Date;\r\n\r\n    /**\r\n     * Return the ObjectID id as a 24 byte hex string representation.\r\n     */\r\n    toHexString(): string;\r\n\r\n    /**\r\n     * Get the timestamp and validate correctness.\r\n     */\r\n    toString(): string;\r\n}\r\n\r\n/**\r\n * A class representation of the BSON Binary type.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Binary.html\r\n */\r\nexport declare class Binary {\r\n\r\n    /**\r\n     * @param buffer A buffer object containing the binary data.\r\n     * @param subType The option binary type.\r\n     */\r\n    constructor(buffer: Buffer, subType?: number);\r\n\r\n    /**\r\n     * Byte Array BSON type.\r\n     */\r\n    static SUBTYPE_BYTE_ARRAY: number;\r\n\r\n    /**\r\n     * Default BSON type.\r\n     */\r\n    static SUBTYPE_DEFAULT: number;\r\n\r\n    /**\r\n     * Function BSON type.\r\n     */\r\n    static SUBTYPE_FUNCTION: number;\r\n\r\n    /**\r\n     * MD5 BSON type.\r\n     */\r\n    static SUBTYPE_MD5: number;\r\n\r\n    /**\r\n     * User BSON type.\r\n     */\r\n    static SUBTYPE_USER_DEFINED: number;\r\n\r\n    /**\r\n     * UUID BSON type.\r\n     */\r\n    static SUBTYPE_UUID: number;\r\n\r\n    /**\r\n     * OLD UUID BSON type\r\n     */\r\n    static SUBTYPE_UUID_OLD: number;\r\n\r\n    /**\r\n     * The length of the binary.\r\n     */\r\n    length(): number;\r\n\r\n    /**\r\n     * Updates this binary with byte_value.\r\n     *\r\n     * @param byte_value A single byte we wish to write.\r\n     */\r\n    put(byte_value: number | string): void;\r\n\r\n    /**\r\n     * Reads length bytes starting at position.\r\n     *\r\n     * @param position Read from the given position in the Binary.\r\n     * @param length The number of bytes to read.\r\n     */\r\n    read(position: number, length: number): Buffer;\r\n\r\n    /**\r\n     * Returns the value of this binary as a string.\r\n     */\r\n    value(): string;\r\n\r\n    /**\r\n     * Writes a buffer or string to the binary\r\n     *\r\n     * @param buffer A string or buffer to be written to the Binary BSON object.\r\n     * @param offset Specify the binary of where to write the content.\r\n     */\r\n    write(buffer: Buffer | string, offset: number): void;\r\n}\r\n/**\r\n * A class representation of the BSON Double type.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Double.html\r\n */\r\nexport declare class Double {\r\n\r\n    /**\r\n     * @param value The number we want to represent as a double.\r\n     */\r\n    constructor(value: number);\r\n\r\n    /**\r\n     * Access the number value.\r\n     */\r\n    valueOf(): number;\r\n}\r\n\r\n/**\r\n * Long\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Long.html\r\n */\r\nexport declare class Long {\r\n\r\n    /**\r\n     * @param low The low (signed) 32 bits of the Long.\r\n     * @param high The high (signed) 32 bits of the Long.\r\n     */\r\n    constructor(low: number, high: number);\r\n\r\n    static MAX_VALUE: Long;\r\n    static MIN_VALUE: Long;\r\n    static NEG_ONE: Long;\r\n    static ONE: Long;\r\n    static ZERO: Long;\r\n\r\n    /**\r\n     * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits.\r\n     * Each is assumed to use 32 bits.\r\n     *\r\n     * @param lowBits The low 32-bits.\r\n     * @param highBits The high 32-bits.\r\n     */\r\n    static fromBits(lowBits: number, highBits: number): Long;\r\n\r\n    /**\r\n     * Returns a Long representing the given (32-bit) integer value.\r\n     *\r\n     * @param value The 32-bit integer in question.\r\n     */\r\n    static fromInt(value: number): Long;\r\n\r\n    /**\r\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     *\r\n     * @param value The number in question.\r\n     */\r\n    static fromNumber(value: number): Long;\r\n\r\n    /**\r\n     * Returns a Long representation of the given string, written using the given radix.\r\n     *\r\n     * @param str The textual representation of the Long.\r\n     * @param radix The radix in which the text is written.\r\n     */\r\n    static fromString(str: string, radix?: number): Long;\r\n\r\n    /**\r\n     * Returns the sum of this and the given Long.\r\n     *\r\n     * @param other Long to add to this one.\r\n     */\r\n    add(other: Long): Long;\r\n\r\n    /**\r\n     * Returns the bitwise-AND of this Long and the given one.\r\n     *\r\n     * @param other The Long with which to AND.\r\n     */\r\n    and(other: Long): Long;\r\n\r\n    /**\r\n     * Compares this Long with the given one.\r\n     *\r\n     * @param other Long to compare against.\r\n     */\r\n    compare(other: Long): number;\r\n\r\n    /**\r\n     * Returns this Long divided by the given one.\r\n     *\r\n     * @param other Long by which to divide.\r\n     */\r\n    div(other: Long): Long;\r\n\r\n    /**\r\n     * Return whether this Long equals the other.\r\n     *\r\n     * @param other Long to compare against.\r\n     */\r\n    equals(other: Long): boolean;\r\n\r\n    /**\r\n     * Return the high 32-bits value.\r\n     */\r\n    getHighBits(): number;\r\n\r\n    /**\r\n     * Return the low 32-bits value.\r\n     */\r\n    getLowBits(): number;\r\n\r\n    /**\r\n     * Return the low unsigned 32-bits value.\r\n     */\r\n    getLowBitsUnsigned(): number;\r\n\r\n    /**\r\n     * Returns the number of bits needed to represent the absolute value of this Long.\r\n     */\r\n    getNumBitsAbs(): number;\r\n\r\n    /**\r\n     * Return whether this Long is greater than the other.\r\n     *\r\n     * @param other Long to compare against.\r\n     */\r\n    greaterThan(other: Long): number;\r\n\r\n    /**\r\n     * Return whether this Long is greater than or equal to the other.\r\n     *\r\n     * @param other Long to compare against.\r\n     */\r\n    greaterThanOrEqual(other: Long): number;\r\n\r\n    /**\r\n     * Return whether this value is negative.\r\n     */\r\n    isNegative(): boolean;\r\n\r\n    /**\r\n     * Return whether this value is odd.\r\n     */\r\n    isOdd(): boolean;\r\n\r\n    /**\r\n     * Return whether this value is zero.\r\n     */\r\n    isZero(): boolean;\r\n\r\n    /**\r\n     * Return whether this Long is less than the other.\r\n     *\r\n     * @param other Long to compare against.\r\n     */\r\n    lessThan(other: Long): boolean;\r\n\r\n    /**\r\n     * Return whether this Long is less than or equal to the other.\r\n     *\r\n     * @param other Long to compare against.\r\n     */\r\n    lessThanOrEqual(other: Long): boolean;\r\n\r\n    /**\r\n     * Returns this Long modulo the given one.\r\n     *\r\n     * @param other Long by which to mod.\r\n     */\r\n    modulo(other: Long): Long;\r\n\r\n    /**\r\n     * Returns the product of this and the given Long.\r\n     *\r\n     * @param other Long to multiply with this.\r\n     */\r\n    multiply(other: Long): Long;\r\n\r\n    /**\r\n     * The negation of this value.\r\n     */\r\n    negate(): Long;\r\n\r\n    /**\r\n     * The bitwise-NOT of this value.\r\n     */\r\n    not(): Long;\r\n\r\n    /**\r\n     * Return whether this Long does not equal the other.\r\n     *\r\n     * @param other Long to compare against.\r\n     */\r\n    notEquals(other: Long): boolean;\r\n\r\n    /**\r\n     * Returns the bitwise-OR of this Long and the given one.\r\n     *\r\n     * @param other The Long with which to OR.\r\n     */\r\n    or(other: Long): Long;\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount.\r\n     *\r\n     * @param other The number of bits by which to shift.\r\n     */\r\n    shiftLeft(other: number): Long;\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the right by the given amount.\r\n     *\r\n     * @param other The number of bits by which to shift.\r\n     */\r\n    shiftRight(other: number): Long;\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\r\n     *\r\n     * @param other The number of bits by which to shift.\r\n     */\r\n    shiftRightUnsigned(other: number): Long;\r\n\r\n    /**\r\n     * Returns the difference of this and the given Long.\r\n     *\r\n     * @param other Long to subtract from this.\r\n     */\r\n    subtract(other: Long): Long;\r\n\r\n    /**\r\n     * Return the int value.\r\n     */\r\n    toInt(): number;\r\n\r\n    /**\r\n     * Return the JSON value.\r\n     */\r\n    toJSON(): string;\r\n\r\n    /**\r\n     * Return the Number value.\r\n     */\r\n    toNumber(): number;\r\n\r\n    /**\r\n     * Return the String value.\r\n     *\r\n     * @param opt_radix The radix in which the text should be written.\r\n     */\r\n    toString(opt_radix?: number): string;\r\n\r\n    /**\r\n     * Returns the bitwise-XOR of this Long and the given one.\r\n     *\r\n     * @param other The Long with which to XOR.\r\n     */\r\n    xor(other: Long): Long;\r\n}\r\n\r\n/**\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MaxKey.html\r\n */\r\nexport declare class MaxKey { }\r\n\r\n/**\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/MinKey.html\r\n */\r\nexport declare class MinKey { }\r\n\r\n/**\r\n * Timestamp.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Timestamp.html\r\n */\r\nexport declare class Timestamp {\r\n\r\n    /**\r\n     * @param low The low (signed) 32 bits of the Timestamp.\r\n     * @param high The high (signed) 32 bits of the Timestamp.\r\n     */\r\n    constructor(low: number, high: number);\r\n\r\n    static MAX_VALUE: Timestamp;\r\n    static MIN_VALUE: Timestamp;\r\n    static NEG_ONE: Timestamp;\r\n    static ONE: Timestamp;\r\n    static ZERO: Timestamp;\r\n\r\n    /**\r\n     * Returns a Timestamp representing the 64-bit integer that comes by concatenating the\r\n     * given high and low bits. Each is assumed to use 32 bits..\r\n     *\r\n     * @param lowBits The low 32-bits.\r\n     * @param highBits The high 32-bits.\r\n     */\r\n    static fromBits(lowBits: number, highBits: number): Timestamp;\r\n\r\n    /**\r\n     * Returns a Timestamp representing the given (32-bit) integer value.\r\n     *\r\n     * @param value The 32-bit integer in question.\r\n     */\r\n    static fromInt(value: number): Timestamp;\r\n\r\n    /**\r\n     * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     *\r\n     * @param value The number in question.\r\n     */\r\n    static fromNumber(value: number): Timestamp;\r\n\r\n    /**\r\n     * Returns a Timestamp representation of the given string, written using the given radix.\r\n     *\r\n     * @param str The textual representation of the Timestamp.\r\n     * @param radix The radix in which the text is written.\r\n     */\r\n    static fromString(str: string, radix?: number): Timestamp;\r\n\r\n    /**\r\n     * Returns the sum of this and the given Timestamp.\r\n     *\r\n     * @param other Timestamp to add to this one.\r\n     */\r\n    add(other: Timestamp): Timestamp;\r\n\r\n    /**\r\n     * Returns the bitwise-AND of this Timestamp and the given one.\r\n     *\r\n     * @param other Timestamp to add to this one.\r\n     */\r\n    and(other: Timestamp): Timestamp;\r\n\r\n    /**\r\n     * Compares this Timestamp with the given one.\r\n     *\r\n     * @param other Timestamp to compare against.\r\n     */\r\n    compare(other: Timestamp): number;\r\n\r\n    /**\r\n     * Returns this Timestamp divided by the given one.\r\n     *\r\n     * @param other Timestamp by which to divide.\r\n     */\r\n    div(other: Timestamp): Timestamp;\r\n\r\n    /**\r\n     * Return whether this Timestamp equals the other\r\n     *\r\n     * @param other\r\n     */\r\n    equals(other: Timestamp): boolean;\r\n\r\n    /**\r\n     * Return the high 32-bits value.\r\n     */\r\n    getHighBits(): number;\r\n\r\n    /**\r\n     * Return the low 32-bits value.\r\n     */\r\n    getLowBits(): number;\r\n\r\n    /**\r\n     * Return the low unsigned 32-bits value.\r\n     */\r\n    getLowBitsUnsigned(): number;\r\n\r\n    /**\r\n     * Returns the number of bits needed to represent the absolute value of this Timestamp.\r\n     */\r\n    getNumBitsAbs(): number;\r\n\r\n    /**\r\n     * Return whether this Timestamp is greater than the other.\r\n     *\r\n     * @param other Timestamp to compare against.\r\n     */\r\n    greaterThan(other: Timestamp): number;\r\n\r\n    /**\r\n     * Return whether this Timestamp is greater than or equal to the other.\r\n     *\r\n     * @param other Timestamp to compare against.\r\n     */\r\n    greaterThanOrEqual(other: Timestamp): number;\r\n\r\n    /**\r\n     * Return whether this value is negative.\r\n     */\r\n    isNegative(): boolean;\r\n\r\n    /**\r\n     * IsOdd.\r\n     * Return whether this value is odd.\r\n     */\r\n    isOdd(): boolean;\r\n\r\n    /**\r\n     * Return whether this value is zero.\r\n     */\r\n    isZero(): boolean;\r\n\r\n    /**\r\n     * Return whether this Timestamp is less than the other.\r\n     *\r\n     * @param other Timestamp to compare against.\r\n     */\r\n    lessThan(other: Timestamp): boolean;\r\n\r\n    /**\r\n     * Return whether this Timestamp is less than or equal to the other.\r\n     *\r\n     * @param other Timestamp to compare against.\r\n     */\r\n    lessThanOrEqual(other: Timestamp): boolean;\r\n\r\n    /**\r\n     * Returns this Timestamp modulo the given one.\r\n     *\r\n     * @param other Timestamp by which to mod.\r\n     */\r\n    modulo(other: Timestamp): Timestamp;\r\n\r\n    /**\r\n     * Returns the product of this and the given Timestamp.\r\n     *\r\n     * @param other Timestamp to multiply with this.\r\n     */\r\n    multiply(other: Timestamp): Timestamp;\r\n\r\n    /**\r\n     * The negation of this value.\r\n     */\r\n    negate(): Timestamp;\r\n\r\n    /**\r\n     * The bitwise-NOT of this value.\r\n     */\r\n    not(): Timestamp;\r\n\r\n    /**\r\n     * Return whether this Timestamp does not equal the other.\r\n     *\r\n     * @param other Timestamp to compare against.\r\n     */\r\n    notEquals(other: Timestamp): boolean;\r\n\r\n    /**\r\n     * Returns the bitwise-OR of this Timestamp and the given one.\r\n     *\r\n     * @param other The Timestamp with which to OR.\r\n     */\r\n    or(other: Timestamp): Timestamp;\r\n\r\n    /**\r\n     * Returns this Timestamp with bits shifted to the left by the given amount.\r\n     *\r\n     * @param other The number of bits by which to shift.\r\n     */\r\n    shiftLeft(other: number): Timestamp;\r\n\r\n    /**\r\n     * Returns this Timestamp with bits shifted to the right by the given amount.\r\n     *\r\n     * @param other The number of bits by which to shift.\r\n     */\r\n    shiftRight(other: number): Timestamp;\r\n\r\n    /**\r\n     * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\r\n     *\r\n     * @param other\r\n     */\r\n    shiftRightUnsigned(other: number): Timestamp;\r\n\r\n    /**\r\n     * Returns the difference of this and the given Timestamp.\r\n     *\r\n     * @param other Timestamp to subtract from this.\r\n     */\r\n    subtract(other: Timestamp): Timestamp;\r\n\r\n    /**\r\n     * Return the int value.\r\n     */\r\n    toInt(): number;\r\n\r\n    /**\r\n     * Return the JSON value.\r\n     */\r\n    toJSON(): string;\r\n\r\n    /**\r\n     * Return the Number value.\r\n     */\r\n    toNumber(): number;\r\n\r\n    /**\r\n     * Return the String value.\r\n     *\r\n     * @param radix The radix in which the text should be written.\r\n     */\r\n    toString(radix?: number): string;\r\n\r\n    /**\r\n     * Returns the bitwise-XOR of this Timestamp and the given one.\r\n     *\r\n     * @param other The Timestamp with which to XOR.\r\n     */\r\n    xor(other: Timestamp): Timestamp;\r\n}\r\n\r\nexport interface CollectionDeleteOneOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimmeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\r\n     */\r\n    bypassDocumentValidation?: boolean;\r\n}\r\n\r\nexport interface CollectionDistinctOptions {\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n}\r\n\r\n/**\r\n * Create a new ObjectID instance.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html\r\n */\r\nexport interface Collection {\r\n\r\n    /**\r\n     * Get the collection name.\r\n     */\r\n    collectionName: string;\r\n\r\n    /**\r\n     * Get the full collection namespace.\r\n     */\r\n    namespace: string;\r\n\r\n    /**\r\n     * The current write concern values.\r\n     */\r\n    writeConcern: any;\r\n\r\n    /**\r\n     * The current read concern values.\r\n     */\r\n    readConcern: any;\r\n\r\n    /**\r\n     * Get current index hint for collection.\r\n     */\r\n    hint: any;\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\r\n     *\r\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\r\n     */\r\n    aggregate(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor<any>;\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\r\n     *\r\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\r\n     * @param options Optional.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\r\n     */\r\n    aggregate(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<any>;\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\r\n     *\r\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\r\n     */\r\n    aggregate<T>(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\r\n     *\r\n     * @param pipeline Array containing all the aggregation framework commands for the execution.\r\n     * @param options Optional.\r\n     * @param callback Optional\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\r\n     */\r\n    aggregate<T>(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<T>;\r\n\r\n    /**\r\n     * BulkWrite.\r\n     *\r\n     * @param operations Bulk operations to perform.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\r\n     */\r\n    bulkWrite(operations: Object[], callback: MongoCallback<BulkWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * BulkWrite.\r\n     *\r\n     * @param operations Bulk operations to perform.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\r\n     */\r\n    bulkWrite(operations: Object[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject>;\r\n\r\n    /**\r\n     * BulkWrite.\r\n     *\r\n     * @param operations Bulk operations to perform.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\r\n     */\r\n    bulkWrite(operations: Object[], options: CollectionBluckWriteOptions, callback: MongoCallback<BulkWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     *\r\n     * @param query The query for the count.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\r\n     */\r\n    count(query: Object, callback: MongoCallback<number>): void;\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     *\r\n     * @param query The query for the count.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\r\n     */\r\n    count(query: Object, options?: MongoCountPreferences): Promise<number>;\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     *\r\n     * @param query The query for the count=\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\r\n     */\r\n    count(query: Object, options: MongoCountPreferences, callback: MongoCallback<number>): void;\r\n\r\n    /**\r\n     * Creates an index on the db and collection collection.\r\n     *\r\n     * @param fieldOrSpec Defines the index.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\r\n     */\r\n    createIndex(fieldOrSpec: string | any, callback: MongoCallback<string>): void;\r\n\r\n    /**\r\n     * Creates an index on the db and collection collection.\r\n     *\r\n     * @param fieldOrSpec Defines the index.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\r\n     */\r\n    createIndex(fieldOrSpec: string | any, options?: MongodbIndexOptions): Promise<string>;\r\n\r\n    /**\r\n     * Creates an index on the db and collection collection.\r\n     *\r\n     * @param fieldOrSpec Defines the index.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex\r\n     */\r\n    createIndex(fieldOrSpec: string | any, options: MongodbIndexOptions, callback: MongoCallback<string>): void;\r\n\r\n    /**\r\n     * CreateIndexes.\r\n     *\r\n     * @param indexSpecs An array of index specifications to be created.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/\r\n     */\r\n    createIndexes(indexSpecs: Object[]): Promise<any>;\r\n\r\n    /**\r\n     * CreateIndexes.\r\n     *\r\n     * @param indexSpecs An array of index specifications to be created.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/\r\n     */\r\n    createIndexes(indexSpecs: Object[], callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the documents to remove.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\r\n     */\r\n    deleteMany(filter: Object, callback: MongoCallback<DeleteWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the documents to remove.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\r\n     */\r\n    deleteMany(filter: Object, options?: CollectionOptions): Promise<DeleteWriteOpResultObject>;\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the documents to remove.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\r\n     */\r\n    deleteMany(filter: Object, options: CollectionOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to remove.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\r\n     */\r\n    deleteOne(filter: Object, callback: MongoCallback<DeleteWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to remove.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\r\n     */\r\n    deleteOne(filter: Object, options?: CollectionDeleteOneOptions): Promise<DeleteWriteOpResultObject>;\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to remove.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne\r\n     */\r\n    deleteOne(filter: Object, options: CollectionDeleteOneOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     *\r\n     * @param key Field of the document to find distinct values for.\r\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\r\n     */\r\n    distinct(key: string, query: Object, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     *\r\n     * @param key Field of the document to find distinct values for.\r\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\r\n     */\r\n    distinct(key: string, query: Object, options?: CollectionDistinctOptions): Promise<any>;\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     *\r\n     * @param key Field of the document to find distinct values for.\r\n     * @param query The query for filtering the set of documents to which we apply the distinct filter.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct\r\n     */\r\n    distinct(key: string, query: Object, options: CollectionDistinctOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop\r\n     */\r\n    drop(): Promise<any>;\r\n\r\n    /**\r\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop\r\n     */\r\n    drop(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     *\r\n     * @param indexName Name of the index to drop.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\r\n     */\r\n    dropIndex(indexName: string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     *\r\n     * @param indexName Name of the index to drop.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\r\n     */\r\n    dropIndex(indexName: string, options?: CollectionOptions): Promise<any>;\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     *\r\n     * @param indexName Name of the index to drop.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex\r\n     */\r\n    dropIndex(indexName: string, options: CollectionOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Drops all indexes from this collection.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes\r\n     */\r\n    dropIndexes(): Promise<any>;\r\n\r\n    /**\r\n     * Drops all indexes from this collection.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes\r\n     */\r\n    dropIndexes(callback?: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     *\r\n     * @param query The cursor query object.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find\r\n     */\r\n    find(query?: Object): Cursor<any>;\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     *\r\n     * @param query The cursor query object.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find\r\n     */\r\n    find<T>(query?: Object): Cursor<T>;\r\n\r\n    /** @deprecated */\r\n    find(query: Object, fields?: Object, skip?: number, limit?: number, timeout?: number): Cursor<any>;\r\n\r\n    /**\r\n     * Fetches the first document that matches the query.\r\n     *\r\n     * @param query Query for find Operation.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\r\n     * @deprecated use find().limit(1).next(function(err, doc){}).\r\n     */\r\n    findOne(query: Object, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Fetches the first document that matches the query.\r\n     *\r\n     * @param query Query for find Operation.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\r\n     * @deprecated use find().limit(1).next(function(err, doc){}).\r\n     */\r\n    findOne(query: Object, options?: FindOneOptions): Promise<any>;\r\n\r\n    /**\r\n     * Fetches the first document that matches the query.\r\n     *\r\n     * @param query Query for find Operation.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\r\n     * @deprecated use find().limit(1).next(function(err, doc){}).\r\n     */\r\n    findOne(query: Object, options: FindOneOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     *\r\n     * @param filter Document selection filter.\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\r\n     */\r\n    findOneAndDelete(filter: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     *\r\n     * @param filter Document selection filter.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\r\n     */\r\n    findOneAndDelete(filter: Object, options?: FindOneAndDeleteOptions): Promise<FindAndModifyWriteOpResultObject>;\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     *\r\n     * @param filter Document selection filter.\r\n     * @param options Optional settings.\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete\r\n     */\r\n    findOneAndDelete(filter: Object, options: FindOneAndDeleteOptions, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     *\r\n     * @param filter Document selection filter.\r\n     * @param replacement Document replacing the matching document.\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\r\n     */\r\n    findOneAndReplace(filter: Object, replacement: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     *\r\n     * @param filter Document selection filter.\r\n     * @param replacement Document replacing the matching document.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\r\n     */\r\n    findOneAndReplace(filter: Object, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     *\r\n     * @param filter Document selection filter.\r\n     * @param replacement Document replacing the matching document.\r\n     * @param options Optional settings.\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\r\n     */\r\n    findOneAndReplace(filter: Object, replacement: Object, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     *\r\n     * @param filter Document selection filter.\r\n     * @param update Update operations to be performed on the document.\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\r\n     */\r\n    findOneAndUpdate(filter: Object, update: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     *\r\n     * @param filter Document selection filter.\r\n     * @param update Update operations to be performed on the document.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\r\n     */\r\n    findOneAndUpdate(filter: Object, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     *\r\n     * @param filter Document selection filter.\r\n     * @param update Update operations to be performed on the document.\r\n     * @param options Optional settings.\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate\r\n     */\r\n    findOneAndUpdate(filter: Object, update: Object, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     *\r\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\r\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\r\n     */\r\n    geoHaystackSearch(x: number, y: number, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     *\r\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\r\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\r\n     */\r\n    geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any>;\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     *\r\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\r\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\r\n     * @param options Optional settings\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\r\n     */\r\n    geoHaystackSearch(x: number, y: number, options: GeoHaystackSearchOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     *\r\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\r\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\r\n     */\r\n    geoNear(x: number, y: number, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     *\r\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\r\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\r\n     * @param options Optionals.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\r\n     */\r\n    geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any>;\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     *\r\n     * @param x Point to search on the x axis, ensure the indexes are ordered in the same order.\r\n     * @param y Point to search on the y axis, ensure the indexes are ordered in the same order.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\r\n     */\r\n    geoNear(x: number, y: number, options: GeoNearOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     *\r\n     * @param keys An object, array or function expressing the keys to group by.\r\n     * @param condition An optional condition that must be true for a row to be considered.\r\n     * @param initial Initial value of the aggregation counter object.\r\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\r\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\r\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\r\n     */\r\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     *\r\n     * @param keys An object, array or function expressing the keys to group by.\r\n     * @param condition An optional condition that must be true for a row to be considered.\r\n     * @param initial Initial value of the aggregation counter object.\r\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\r\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\r\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\r\n     */\r\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options?: GroupOptions): Promise<any>;\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     *\r\n     * @param keys An object, array or function expressing the keys to group by.\r\n     * @param condition An optional condition that must be true for a row to be considered.\r\n     * @param initial Initial value of the aggregation counter object.\r\n     * @param reduce The reduce function aggregates (reduces) the objects iterated.\r\n     * @param finalize An optional function to be run on each item in the result set just before the item is returned.\r\n     * @param command Specify if you wish to run using the internal group command or using eval, default is true.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\r\n     */\r\n    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options: GroupOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes\r\n     */\r\n    indexes(): Promise<any>;\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes\r\n     */\r\n    indexes(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index.\r\n     *\r\n     * @param indexes One or more index names to check.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists\r\n     */\r\n    indexExists(indexes: string | string[]): Promise<boolean>;\r\n\r\n    /**\r\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index.\r\n     *\r\n     * @param indexes One or more index names to check.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists\r\n     */\r\n    indexExists(indexes: string | string[], callback: MongoCallback<boolean>): void;\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     *\r\n     * @param callback The command result callback\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\r\n     */\r\n    indexInformation(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     *\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\r\n     */\r\n    indexInformation(options?: { full: boolean }): Promise<any>;\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     *\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation\r\n     */\r\n    indexInformation(options: { full: boolean }, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added,\r\n     * creating a new operation for each switch in types.\r\n     *\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeOrderedBulkOp\r\n     */\r\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation;\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     *\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeUnorderedBulkOp\r\n     */\r\n    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation;\r\n\r\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\r\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\r\n    insert(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;\r\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\r\n    insert(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;\r\n    /** @deprecated Use insertOne, insertMany or bulkWrite */\r\n    insert(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;\r\n\r\n    /**\r\n     * InsertMany.\r\n     *\r\n     * @param docs Documents to insert.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\r\n     */\r\n    insertMany(docs: Object[], callback: MongoCallback<InsertWriteOpResult>): void;\r\n\r\n    /**\r\n     * InsertMany.\r\n     *\r\n     * @param docs Documents to insert.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\r\n     */\r\n    insertMany(docs: Object[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult>;\r\n\r\n    /**\r\n     * InsertMany.\r\n     *\r\n     * @param docs Documents to insert.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\r\n     */\r\n    insertMany(docs: Object[], options: CollectionInsertManyOptions, callback: MongoCallback<InsertWriteOpResult>): void;\r\n\r\n    /**\r\n     * InsertOne.\r\n     *\r\n     * @param docs Document to insert.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\r\n     */\r\n    insertOne(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;\r\n\r\n    /**\r\n     * InsertOne.\r\n     *\r\n     * @param docs Document to insert.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\r\n     */\r\n    insertOne(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;\r\n\r\n    /**\r\n     * InsertOne.\r\n     *\r\n     * @param docs Document to insert.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\r\n     */\r\n    insertOne(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped\r\n     */\r\n    isCapped(): Promise<any>;\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     *\r\n     * @param callback The results callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped\r\n     */\r\n    isCapped(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     *\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#listIndexes\r\n     */\r\n    listIndexes(options?: ListIndexesOptions): CommandCursor;\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     *\r\n     * @param map The mapping function.\r\n     * @param reduce The reduce function.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\r\n     */\r\n    mapReduce(map: Function | string, reduce: Function | string, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     *\r\n     * @param map The mapping function.\r\n     * @param reduce The reduce function.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\r\n     */\r\n    mapReduce(map: Function | string, reduce: Function | string, options?: MapReduceOptions): Promise<any>;\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     *\r\n     * @param map The mapping function.\r\n     * @param reduce The reduce function.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\r\n     */\r\n    mapReduce(map: Function | string, reduce: Function | string, options: MapReduceOptions, callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Returns the options of the collection.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options\r\n     */\r\n    options(): Promise<any>;\r\n\r\n    /**\r\n     * Returns the options of the collection.\r\n     *\r\n     * @param callback The results callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options\r\n     */\r\n    options(callback: MongoCallback<any>): void;\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\r\n     * no ordering guarantees for returned results.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\r\n     */\r\n    parallelCollectionScan(callback: MongoCallback<Cursor<any>[]>): void;\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\r\n     * no ordering guarantees for returned results.\r\n     *\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\r\n     */\r\n    parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<any>[]>;\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\r\n     * no ordering guarantees for returned results.\r\n     *\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\r\n     */\r\n    parallelCollectionScan(options: ParallelCollectionScanOptions, callback: MongoCallback<Cursor<any>[]>): void;\r\n\r\n    /**\r\n     * Reindex all indexes on the collection.\r\n     *\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex\r\n     */\r\n    reIndex(): Promise<any>;\r\n\r\n    /**\r\n     * Reindex all indexes on the collection.\r\n     *\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex\r\n     */\r\n    reIndex(callback: MongoCallback<any>): void;\r\n\r\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#remove\r\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\r\n    remove(selector: Object, callback: MongoCallback<WriteOpResult>): void;\r\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\r\n    remove(selector: Object, options?: CollectionOptions & { single?: boolean }): Promise<WriteOpResult>;\r\n    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */\r\n    remove(selector: Object, options?: CollectionOptions & { single?: boolean }, callback?: MongoCallback<WriteOpResult>): void;\r\n\r\n    /**\r\n     * Rename the collection.\r\n     *\r\n     * @param newName New name of of the collection.\r\n     * @param callback The results callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\r\n     */\r\n    rename(newName: string, callback: MongoCallback<Collection>): void;\r\n\r\n    /**\r\n     * Rename the collection.\r\n     *\r\n     * @param newName New name of of the collection.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\r\n     */\r\n    rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection>;\r\n\r\n    /**\r\n     * Rename the collection.\r\n     *\r\n     * @param newName New name of of the collection.\r\n     * @param options Optional settings.\r\n     * @param callback The results callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename\r\n     */\r\n    rename(newName: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection>): void;\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to update.\r\n     * @param doc The Document that replaces the matching document.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\r\n     */\r\n    replaceOne(filter: Object, doc: Object, callback: MongoCallback<UpdateWriteOpResult>): void;\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to update.\r\n     * @param doc The Document that replaces the matching document.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\r\n     */\r\n    replaceOne(filter: Object, doc: Object, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to update.\r\n     * @param doc The Document that replaces the matching document.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\r\n     */\r\n    replaceOne(filter: Object, doc: Object, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\r\n\r\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#save\r\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\r\n    save(doc: Object, callback: MongoCallback<WriteOpResult>): void;\r\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\r\n    save(doc: Object, options?: CollectionOptions): Promise<WriteOpResult>;\r\n    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */\r\n    save(doc: Object, options: CollectionOptions, callback: MongoCallback<WriteOpResult>): void;\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     *\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\r\n     */\r\n    stats(callback: MongoCallback<CollStats>): void;\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     *\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\r\n     */\r\n    stats(options?: { scale: number }): Promise<CollStats>;\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     *\r\n     * @param options Optional settings.\r\n     * @param callback The collection result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats\r\n     */\r\n    stats(options: { scale: number }, callback: MongoCallback<CollStats>): void;\r\n\r\n    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#update\r\n    /** @deprecated use updateOne, updateMany or bulkWrite */\r\n    update(filter: Object, update: Object, callback: MongoCallback<WriteOpResult>): void;\r\n    /** @deprecated use updateOne, updateMany or bulkWrite */\r\n    update(filter: Object, update: Object, options?: ReplaceOneOptions & { multi?: boolean }): Promise<WriteOpResult>;\r\n    /** @deprecated use updateOne, updateMany or bulkWrite */\r\n    update(filter: Object, update: Object, options: ReplaceOneOptions & { multi?: boolean }, callback: MongoCallback<WriteOpResult>): void;\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to update.\r\n     * @param update The update operations to be applied to the document.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\r\n     */\r\n    updateMany(filter: Object, update: Object, callback: MongoCallback<UpdateWriteOpResult>): void;\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to update.\r\n     * @param update The update operations to be applied to the document.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\r\n     */\r\n    updateMany(filter: Object, update: Object, options?: UpdateManyOptions): Promise<UpdateWriteOpResult>;\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to update.\r\n     * @param update The update operations to be applied to the document.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany\r\n     */\r\n    updateMany(filter: Object, update: Object, options: UpdateManyOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to update.\r\n     * @param update The update operations to be applied to the document.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\r\n     */\r\n    updateOne(filter: Object, update: Object, callback: MongoCallback<UpdateWriteOpResult>): void;\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to update.\r\n     * @param update The update operations to be applied to the document.\r\n     * @param options Optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\r\n     */\r\n    updateOne(filter: Object, update: Object, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     *\r\n     * @param filter The Filter used to select the document to update.\r\n     * @param update The update operations to be applied to the document.\r\n     * @param options Optional settings.\r\n     * @param callback The command result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne\r\n     */\r\n    updateOne(filter: Object, update: Object, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;\r\n}\r\n\r\n/**\r\n * The name of the target collection.\r\n *\r\n * @see http://docs.mongodb.org/manual/reference/command/collStats/\r\n */\r\nexport interface CollStats {\r\n\r\n    /**\r\n     * Namespace.\r\n     */\r\n    ns: string;\r\n\r\n    /**\r\n     * The number of objects or documents in this collection.\r\n     */\r\n    count: number;\r\n\r\n    /**\r\n     * Collection size in bytes.\r\n     */\r\n    size: number;\r\n\r\n    /**\r\n     * Average object size in bytes.\r\n     */\r\n    avgObjSize: number;\r\n\r\n    /**\r\n     * (Pre)allocated space for the collection in bytes.\r\n     */\r\n    storageSize: number;\r\n\r\n    /**\r\n     * Number of extents (contiguously allocated chunks of datafile space).\r\n     */\r\n    numExtents: number;\r\n\r\n    /**\r\n     * Number of indexes.\r\n     */\r\n    nindexes: number;\r\n\r\n    /**\r\n     * Size of the most recently created extent in bytes.\r\n     */\r\n    lastExtentSize: number;\r\n\r\n    /**\r\n     * Padding can speed up updates if documents grow.\r\n     */\r\n    paddingFactor: number;\r\n\r\n    /**\r\n     * A number that indicates the user-set flags on the collection. userFlags\r\n     * only appears when using the mmapv1 storage engine.\r\n     */\r\n    userFlags: number;\r\n\r\n    /**\r\n     * Total index size in bytes.\r\n     */\r\n    totalIndexSize: number;\r\n\r\n    /**\r\n     * Size of specific indexes in bytes.\r\n     */\r\n    indexSizes: {\r\n        _id_: number;\r\n        username: number;\r\n    };\r\n\r\n    /**\r\n     * This field will be “true” if the collection is capped.\r\n     */\r\n    capped: boolean;\r\n\r\n    /**\r\n     * Shows the maximum size of a capped collection.\r\n     */\r\n    maxSize: boolean;\r\n\r\n    /**\r\n     * This document contains data reported directly by the WiredTiger engine and other data for internal diagnostic use.\r\n     */\r\n    wiredTiger: any;\r\n\r\n    /**\r\n     * A document that reports data from the WiredTiger storage engine for each index in the collection.\r\n     * Other storage engines will return an empty document.\r\n     */\r\n    indexDetails: any;\r\n\r\n    /**\r\n     *\r\n     */\r\n    ok: number;\r\n}\r\n\r\n/**\r\n * CollectionAggregationOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate\r\n */\r\nexport interface CollectionAggregationOptions {\r\n\r\n    readPreference?: ReadPreference | string;\r\n\r\n    /**\r\n     * Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\r\n     */\r\n    cursor?: { batchSize: number };\r\n\r\n    /**\r\n     * Explain returns the aggregation execution plan (requires mongodb 2.6 >).\r\n     */\r\n    explain?: boolean;\r\n\r\n    /**\r\n     * allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\r\n     */\r\n    allowDiskUse?: boolean;\r\n\r\n    /**\r\n     * maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\r\n     */\r\n    maxTimeMS?: boolean;\r\n\r\n    /**\r\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\r\n     */\r\n    bypassDocumentValidation?: boolean;\r\n}\r\n\r\n/**\r\n * CollectionInsertManyOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany\r\n */\r\nexport interface CollectionInsertManyOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Serialize functions on any object.\r\n     */\r\n    serializeFunctions?: boolean;\r\n\r\n    /**\r\n     * Force server to assign _id values instead of driver.\r\n     */\r\n    forceServerObjectId?: boolean;\r\n}\r\n\r\nexport interface UpdateManyOptions {\r\n\r\n    /**\r\n     * Update operation is an upsert.\r\n     */\r\n    upsert?: boolean;\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: any;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n}\r\n\r\n/**\r\n * CollectionBluckWriteOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\r\n */\r\nexport interface CollectionBluckWriteOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Serialize functions on any object.\r\n     */\r\n    serializeFunctions?: boolean;\r\n\r\n    /**\r\n     * Execute write operation in ordered or unordered fashion.\r\n     */\r\n    ordered?: boolean;\r\n\r\n    /**\r\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\r\n     */\r\n    bypassDocumentValidation?: boolean;\r\n}\r\n\r\n/**\r\n * BulkWriteOpResultObject.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~BulkWriteOpResult\r\n */\r\nexport interface BulkWriteOpResultObject {\r\n\r\n    /**\r\n     * Number of documents inserted.\r\n     */\r\n    insertedCount?: number;\r\n\r\n    /**\r\n     * Number of documents matched for update.\r\n     */\r\n    matchedCount?: number;\r\n\r\n    /**\r\n     * Number of documents modified.\r\n     */\r\n    modifiedCount?: number;\r\n\r\n    /**\r\n     * Number of documents deleted.\r\n     */\r\n    deletedCount?: number;\r\n\r\n    /**\r\n     * Number of documents upserted.\r\n     */\r\n    upsertedCount?: number;\r\n\r\n    /**\r\n     * Inserted document generated Id's, hash key is the index of the originating operation.\r\n     */\r\n    insertedIds?: any;\r\n\r\n    /**\r\n     * Upserted document generated Id's, hash key is the index of the originating operation.\r\n     */\r\n    upsertedIds?: any;\r\n\r\n    /**\r\n     * The command result object.\r\n     */\r\n    result?: any;\r\n}\r\n\r\n/**\r\n * MongoCountPreferences.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count\r\n */\r\nexport interface MongoCountPreferences {\r\n\r\n    /**\r\n     * The limit of documents to count.\r\n     */\r\n    limit?: number;\r\n\r\n    /**\r\n     * The number of documents to skip for the count.\r\n     */\r\n    skip?: boolean;\r\n\r\n    /**\r\n     * An index name hint for the query.\r\n     */\r\n    hint?: string;\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n}\r\n\r\n/**\r\n * DeleteWriteOpResultObject.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~deleteWriteOpResult\r\n */\r\nexport interface DeleteWriteOpResultObject {\r\n\r\n    /**\r\n     * The raw result returned from MongoDB, field will vary depending on server version.\r\n     * @param ok Is 1 if the command executed correctly.\r\n     * @param n The total count of documents deleted.\r\n     */\r\n    result: {\r\n        ok?: number;\r\n        n?: number;\r\n    };\r\n\r\n    /**\r\n     * The connection object used for the operation.\r\n     */\r\n    connection?: any;\r\n\r\n    /**\r\n     * The number of documents deleted.\r\n     */\r\n    deletedCount?: number;\r\n}\r\n\r\n/**\r\n * FindAndModifyWriteOpResultObject.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~findAndModifyWriteOpResult\r\n */\r\nexport interface FindAndModifyWriteOpResultObject {\r\n\r\n    /**\r\n     * Document returned from findAndModify command.\r\n     */\r\n    value?: any;\r\n\r\n    /**\r\n     * The raw lastErrorObject returned from the command.\r\n     */\r\n    lastErrorObject?: any;\r\n\r\n    /**\r\n     * Is 1 if the command executed correctly.\r\n     */\r\n    ok?: number;\r\n}\r\n\r\n/**\r\n * FindOneAndReplaceOption.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace\r\n */\r\nexport interface FindOneAndReplaceOption {\r\n\r\n    /**\r\n     * Limits the fields to return for all matching documents.\r\n     */\r\n    projection?: Object;\r\n\r\n    /**\r\n     * Determines which document the operation modifies if the query selects multiple documents.\r\n     */\r\n    sort?: Object;\r\n\r\n    /**\r\n     * The maximum amount of time to allow the query to run.\r\n     */\r\n    maxTimeMS?: number;\r\n\r\n    /**\r\n     * Upsert the document if it does not exist.\r\n     */\r\n    upsert?: boolean;\r\n\r\n    /**\r\n     * When false, returns the updated document rather than the original. The default is true.\r\n     */\r\n    returnOriginal?: boolean;\r\n}\r\n\r\n/**\r\n * GeoHaystackSearchOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch\r\n */\r\nexport interface GeoHaystackSearchOptions {\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n\r\n    /**\r\n     * Include results up to maxDistance from the point.\r\n     */\r\n    maxDistance?: number;\r\n\r\n    /**\r\n     * Filter the results by a query.\r\n     */\r\n    search?: Object;\r\n\r\n    /**\r\n     * Max number of results to return.\r\n     */\r\n    limit?: number;\r\n}\r\n\r\n/**\r\n * GeoNearOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear\r\n */\r\nexport interface GeoNearOptions {\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n\r\n    /**\r\n     * Max number of results to return.\r\n     */\r\n    num?: number;\r\n\r\n    /**\r\n     * Include results starting at minDistance from a point (2.6 or higher).\r\n     */\r\n    minDistance?: number;\r\n\r\n    /**\r\n     * Include results up to maxDistance from the point.\r\n     */\r\n    maxDistance?: number;\r\n\r\n    /**\r\n     * Include a value to multiply the distances with allowing for range conversions.\r\n     */\r\n    distanceMultiplier?: number;\r\n\r\n    /**\r\n     * Filter the results by a query.\r\n     */\r\n    query?: Object;\r\n\r\n    /**\r\n     * Perform query using a spherical model.\r\n     */\r\n    spherical?: boolean;\r\n\r\n    /**\r\n     * The closest location in a document to the center of the search region will always be returned MongoDB > 2.X.\r\n     */\r\n    uniqueDocs?: boolean;\r\n\r\n    /**\r\n     * Include the location data fields in the top level of the results MongoDB > 2.X.\r\n     */\r\n    includeLocs?: boolean;\r\n}\r\n\r\n/**\r\n * A class representation of the BSON Code type.\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Code.html\r\n */\r\nexport declare class Code {\r\n    /**\r\n     *\r\n     * @param code a string or function.\r\n     * @param scope optional\r\n     */\r\n    constructor(code: string | Function, scope?: Object)\r\n\r\n    /**\r\n     * A string or function.\r\n     */\r\n    code: string | Function;\r\n\r\n    /**\r\n     * An optional scope for the function.\r\n     */\r\n    scope: any;\r\n}\r\n\r\n/**\r\n * CollectionOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany\r\n */\r\nexport interface CollectionOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n}\r\n\r\n/**\r\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly).\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html\r\n */\r\nexport interface OrderedBulkOperation {\r\n    /**\r\n     * Get the number of operations in the bulk.\r\n     */\r\n    length: number;\r\n\r\n    /**\r\n     * Execute the ordered bulk operation.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\r\n     */\r\n    execute(callback: MongoCallback<BulkWriteResult>): void;\r\n\r\n    /**\r\n     * Execute the ordered bulk operation.\r\n     * @param options optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\r\n     */\r\n    execute(options?: FSyncOptions): Promise<BulkWriteResult>;\r\n\r\n    /**\r\n     * Execute the ordered bulk operation.\r\n     * @param options Optional settings.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute\r\n     */\r\n    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;\r\n\r\n    /**\r\n     * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne.\r\n     * @param selector The selector for the bulk operation.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#find\r\n     */\r\n    find(selector: Object): FindOperatorsOrdered;\r\n\r\n    /**\r\n     * Add a single insert document to the bulk operation.\r\n     * @param doc The document to insert\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#insert\r\n     */\r\n    insert(doc: Object): OrderedBulkOperation;\r\n}\r\n\r\n/**\r\n * BulkWriteResult.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/BulkWriteResult.html\r\n */\r\nexport interface BulkWriteResult {\r\n\r\n    /**\r\n     * Did bulk operation correctly execute.\r\n     */\r\n    ok: number;\r\n\r\n    /**\r\n     * number of inserted documents.\r\n     */\r\n    nInserted: number;\r\n\r\n    /**\r\n     * number of documents updated logically.\r\n     */\r\n    nUpdated: number;\r\n\r\n    /**\r\n     * Number of upserted documents.\r\n     */\r\n    nUpserted: number;\r\n\r\n    /**\r\n     *\r\n     Number of documents updated physically on disk.\r\n     */\r\n    nModified: number;\r\n\r\n    /**\r\n     * Number of removed documents.\r\n     */\r\n    nRemoved: number;\r\n\r\n    /**\r\n     * Return an array of inserted ids.\r\n     */\r\n    getInsertedIds(): Array<Object>;\r\n\r\n    /**\r\n     * Retrieve lastOp if available.\r\n     */\r\n    getLastOp(): Object;\r\n\r\n    /**\r\n     * Return raw internal result.\r\n     */\r\n    getRawResponse(): Object;\r\n\r\n    /**\r\n     * Return the upserted id at position x.\r\n     */\r\n    getUpsertedIdAt(index: number): Object;\r\n\r\n    /**\r\n     * Return an array of upserted ids.\r\n     */\r\n    getUpsertedIds(): Array<Object>;\r\n\r\n    /**\r\n     * Retrieve the write concern error if any.\r\n     */\r\n    getWriteConcernError(): WriteConcernError;\r\n\r\n    /**\r\n     * Returns a specific write error object.\r\n     */\r\n    getWriteErrorAt(index: number): WriteError;\r\n\r\n    /**\r\n     * Returns the number of write errors off the bulk operation.\r\n     */\r\n    getWriteErrorCount(): number;\r\n\r\n    /**\r\n     * Retrieve all write errors.\r\n     */\r\n    getWriteErrors(): Array<Object>;\r\n\r\n    /**\r\n     * Returns true if the bulk operation contains a write error.\r\n     */\r\n    hasWriteErrors(): boolean;\r\n}\r\n\r\n/**\r\n * Create a new WriteError instance (INTERNAL TYPE, do not instantiate directly).\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/WriteError.html\r\n */\r\nexport interface WriteError {\r\n\r\n    /**\r\n     * Write concern error code.\r\n     */\r\n    code: number;\r\n\r\n    /**\r\n     * Write concern error original bulk operation index.\r\n     */\r\n    index: number;\r\n\r\n    /**\r\n     * Write concern error message.\r\n     */\r\n    errmsg: string;\r\n}\r\n\r\n/**\r\n * Create a new WriteConcernError instance (INTERNAL TYPE, do not instantiate directly).\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/WriteConcernError.html\r\n */\r\nexport interface WriteConcernError {\r\n\r\n    /**\r\n     * Write concern error code.\r\n     */\r\n    code: number;\r\n\r\n    /**\r\n     * Write concern error message.\r\n     */\r\n    errmsg: string;\r\n}\r\n\r\n/**\r\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly).\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsOrdered.html\r\n */\r\nexport interface FindOperatorsOrdered {\r\n\r\n    /**\r\n     * Add a remove operation to the bulk operation.\r\n     */\r\n    delete(): OrderedBulkOperation;\r\n\r\n    /**\r\n     * Add a remove one operation to the bulk operation.\r\n     */\r\n    deleteOne(): OrderedBulkOperation;\r\n\r\n    /**\r\n     * Add a replace one operation to the bulk operation.\r\n     */\r\n    replaceOne(doc: Object): OrderedBulkOperation;\r\n\r\n    /**\r\n     * Add a single update document to the bulk operation.\r\n     */\r\n    update(doc: Object): OrderedBulkOperation;\r\n\r\n    /**\r\n     * Add a single update one document to the bulk operation.\r\n     */\r\n    updateOne(doc: Object): OrderedBulkOperation;\r\n\r\n    /**\r\n     * Upsert modifier for update bulk operation.\r\n     */\r\n    upsert(): FindOperatorsOrdered;\r\n}\r\n\r\n/**\r\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly).\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html\r\n */\r\nexport interface UnorderedBulkOperation {\r\n\r\n    /**\r\n     * Get the number of operations in the bulk.\r\n     */\r\n    length: number;\r\n\r\n    /**\r\n     * Execute the ordered bulk operation.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\r\n     */\r\n    execute(callback: MongoCallback<BulkWriteResult>): void;\r\n\r\n    /**\r\n     * Execute the ordered bulk operation.\r\n     * @param options optional.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\r\n     */\r\n    execute(options?: FSyncOptions): Promise<BulkWriteResult>;\r\n\r\n    /**\r\n     * Execute the ordered bulk operation.\r\n     * @param options Optional settings.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute\r\n     */\r\n    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;\r\n\r\n    /**\r\n     * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne.\r\n     * @param selector The selector for the bulk operation.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#find\r\n     */\r\n    find(selector: Object): FindOperatorsUnordered;\r\n\r\n    /**\r\n     * Add a single insert document to the bulk operation.\r\n     * @param doc The document to insert.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#insert\r\n     */\r\n    insert(doc: Object): UnorderedBulkOperation;\r\n}\r\n\r\n/**\r\n * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly).\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsUnordered.html\r\n */\r\nexport interface FindOperatorsUnordered {\r\n\r\n    /**\r\n     * Get the number of operations in the bulk.\r\n     */\r\n    length: number;\r\n\r\n    /**\r\n     * Add a remove operation to the bulk operation.\r\n     */\r\n    remove(): UnorderedBulkOperation;\r\n\r\n    /**\r\n     * Add a remove one operation to the bulk operation.\r\n     */\r\n    removeOne(): UnorderedBulkOperation;\r\n\r\n    /**\r\n     * Add a replace one operation to the bulk operation.\r\n     * @param doc The new document to replace the existing one with.\r\n     */\r\n    replaceOne(doc: Object): UnorderedBulkOperation;\r\n\r\n    /**\r\n     * Add a single update document to the bulk operation.\r\n     * @param doc Update operations\r\n     */\r\n    update(doc: Object): UnorderedBulkOperation;\r\n\r\n    /**\r\n     * Add a single update one document to the bulk operation.\r\n     * @param doc Update operations\r\n     */\r\n    updateOne(doc: Object): UnorderedBulkOperation;\r\n\r\n    /**\r\n     * Upsert modifier for update bulk operation.\r\n     */\r\n    upsert(): FindOperatorsUnordered;\r\n}\r\n\r\n/**\r\n * FindOneOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne\r\n */\r\nexport interface FindOneOptions {\r\n\r\n    /**\r\n     * Sets the limit of documents returned in the query.\r\n     */\r\n    limit?: number;\r\n\r\n    /**\r\n     * Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\r\n     */\r\n    sort?: Array<any> | Object;\r\n\r\n    /**\r\n     * The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}.\r\n     */\r\n    fields?: Object;\r\n\r\n    /**\r\n     * Set to skip N documents ahead in your query (useful for pagination).\r\n     */\r\n    skip?: number;\r\n\r\n    /**\r\n     * Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}.\r\n     */\r\n    hint?: Object;\r\n\r\n    /**\r\n     * Explain the query instead of returning the data.\r\n     */\r\n    explain?: boolean;\r\n\r\n    /**\r\n     * Snapshot query.\r\n     */\r\n    snapshot?: boolean;\r\n\r\n    /**\r\n     * Specify if the cursor can timeout.\r\n     */\r\n    timeout?: boolean;\r\n\r\n    /**\r\n     * Specify if the cursor is tailable.\r\n     */\r\n    tailable?: boolean;\r\n\r\n    /**\r\n     * Set the batchSize for the getMoreCommand when iterating over the query results.\r\n     */\r\n    batchSize?: number;\r\n\r\n    /**\r\n     * Only return the index key.\r\n     */\r\n    returnKey?: boolean;\r\n\r\n    /**\r\n     * Limit the number of items to scan.\r\n     */\r\n    maxScan?: number;\r\n\r\n    /**\r\n     * Set index bounds.\r\n     */\r\n    min?: number;\r\n\r\n    /**\r\n     * Set index bounds.\r\n     */\r\n    max?: number;\r\n\r\n    /**\r\n     * Show disk location of results.\r\n     */\r\n    showDiskLoc?: boolean;\r\n\r\n    /**\r\n     * You can put a $comment field on a query to make looking in the profiler logs simpler.\r\n     */\r\n    comment?: string;\r\n\r\n    /**\r\n     * Return document results as raw BSON buffers.\r\n     */\r\n    raw?: boolean;\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n\r\n    /**\r\n     * Specify if the cursor should return partial results when querying against a sharded system.\r\n     */\r\n    partial?: boolean;\r\n\r\n    /**\r\n     * Number of miliseconds to wait before aborting the query.\r\n     */\r\n    maxTimeMs?: number;\r\n}\r\n\r\n/**\r\n * InsertWriteOpResult.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertWriteOpResult\r\n */\r\nexport interface InsertWriteOpResult {\r\n\r\n    /**\r\n     * The total amount of documents inserted.\r\n     */\r\n    insertedCount: number;\r\n\r\n    /**\r\n     * All the documents inserted using insertOne/insertMany/replaceOne.\r\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\r\n     */\r\n    ops: Array<any>;\r\n\r\n    /**\r\n     * All the generated _id's for the inserted documents.\r\n     */\r\n    insertedIds: Array<ObjectID>;\r\n\r\n    /**\r\n     * The connection object used for the operation.\r\n     */\r\n    connection: any;\r\n\r\n    /**\r\n     * The raw command result object returned from MongoDB (content might vary by server version).\r\n     * @param ok Is 1 if the command executed correctly.\r\n     * @param n The total count of documents inserted.\r\n     */\r\n    result: { ok: number, n: number };\r\n}\r\n\r\n/**\r\n * CollectionInsertOneOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne\r\n */\r\nexport interface CollectionInsertOneOptions {\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Serialize functions on any object.\r\n     */\r\n    serializeFunctions?: boolean;\r\n\r\n    /**\r\n     * Force server to assign _id values instead of driver.\r\n     */\r\n    forceServerObjectId?: boolean;\r\n\r\n    /**\r\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\r\n     */\r\n    bypassDocumentValidation?: boolean;\r\n}\r\n\r\n/**\r\n * InsertOneWriteOpResult.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertOneWriteOpResult\r\n */\r\nexport interface InsertOneWriteOpResult {\r\n\r\n    /**\r\n     * The total amount of documents inserted.\r\n     */\r\n    insertedCount: number;\r\n\r\n    /**\r\n     * All the documents inserted using insertOne/insertMany/replaceOne.\r\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\r\n     */\r\n    ops: Array<any>;\r\n\r\n    /**\r\n     * The driver generated ObjectId for the insert operation.\r\n     */\r\n    insertedId: ObjectID;\r\n\r\n    /**\r\n     * The connection object used for the operation.\r\n     */\r\n    connection: any;\r\n\r\n    /**\r\n     * The raw command result object returned from MongoDB (content might vary by server version).\r\n     * @param ok Is 1 if the command executed correctly.\r\n     * @param n The total count of documents inserted.\r\n     */\r\n    result: { ok: number, n: number };\r\n}\r\n\r\n/**\r\n * ParallelCollectionScanOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan\r\n */\r\nexport interface ParallelCollectionScanOptions {\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n\r\n    /**\r\n     * Set the batchSize for the getMoreCommand when iterating over the query results.\r\n     */\r\n    batchSize?: number;\r\n\r\n    /**\r\n     * The maximum number of parallel command cursors to return (the number of returned cursors will be in the range 1:numCursors).\r\n     */\r\n    numCursors?: number;\r\n\r\n    /**\r\n     * Return all BSON documents as Raw Buffer documents.\r\n     */\r\n    raw?: boolean;\r\n}\r\n\r\n/**\r\n * ParallelCollectionScanOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne\r\n */\r\nexport interface ReplaceOneOptions {\r\n\r\n    /**\r\n     * Update operation is an upsert.\r\n     */\r\n    upsert?: boolean;\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number | string;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * Specify a journal write concern.\r\n     */\r\n    j?: boolean;\r\n\r\n    /**\r\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\r\n     */\r\n    bypassDocumentValidation?: boolean;\r\n}\r\n\r\n/**\r\n * ParallelCollectionScanOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~updateWriteOpResult\r\n */\r\nexport interface UpdateWriteOpResult {\r\n\r\n    /**\r\n     * The raw result returned from MongoDB, field will vary depending on server version.\r\n     * @param ok Is 1 if the command executed correctly.\r\n     * @param n The total count of documents scanned.\r\n     * @param nModified The total count of documents modified.\r\n     */\r\n    result: { ok: number, n: number, nModified: number };\r\n\r\n    /**\r\n     * The connection object used for the operation.\r\n     */\r\n    connection: any;\r\n\r\n    /**\r\n     * The number of documents that matched the filter.\r\n     */\r\n    matchedCount: number;\r\n\r\n    /**\r\n     * The number of documents that were modified.\r\n     */\r\n    modifiedCount: number;\r\n\r\n    /**\r\n     * The number of documents upserted.\r\n     */\r\n    upsertedCount: number;\r\n\r\n    /**\r\n     * The upserted id.\r\n     * @param _id The upserted _id returned from the server.\r\n     */\r\n    upsertedId: { _id: ObjectID };\r\n}\r\n\r\n/**\r\n * ParallelCollectionScanOptions.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce\r\n */\r\nexport interface MapReduceOptions {\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n\r\n    /**\r\n     * Sets the output target for the map reduce job.\r\n     * {inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}.\r\n     */\r\n    out?: Object;\r\n\r\n    /**\r\n     * Query filter object.\r\n     */\r\n    query?: Object;\r\n\r\n    /**\r\n     * Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.\r\n     */\r\n    sort?: Object;\r\n\r\n    /**\r\n     * Number of objects to return from collection.\r\n     */\r\n    limit?: number;\r\n\r\n    /**\r\n     * Keep temporary data.\r\n     */\r\n    keeptemp?: boolean;\r\n\r\n    /**\r\n     * Finalize function.\r\n     */\r\n    finalize?: Function | string;\r\n\r\n    /**\r\n     * Can pass in variables that can be access from map/reduce/finalize.\r\n     */\r\n    scope?: Object;\r\n\r\n    /**\r\n     * It is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.\r\n     */\r\n    jsMode?: boolean;\r\n\r\n    /**\r\n     * Provide statistics on job execution time.\r\n     */\r\n    verbose?: boolean;\r\n\r\n    /**\r\n     * Allow driver to bypass schema validation in MongoDB 3.2 or higher.\r\n     */\r\n    bypassDocumentValidation?: boolean;\r\n}\r\n\r\n/**\r\n * WriteOpResult.\r\n *\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~WriteOpResult\r\n */\r\nexport interface WriteOpResult {\r\n\r\n    /**\r\n     * All the documents inserted using insertOne/insertMany/replaceOne.\r\n     * Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany.\r\n     */\r\n    ops: Array<any>;\r\n\r\n    /**\r\n     * The connection object used for the operation.\r\n     */\r\n    connection: any;\r\n\r\n    /**\r\n     * The command result object.\r\n     */\r\n    result: any;\r\n}\r\n\r\n/**\r\n * WriteOpResult.\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~resultCallback\r\n */\r\nexport type CursorResult = any | void | boolean;\r\n\r\n/**\r\n * Creates a new Cursor instance (INTERNAL TYPE, do not instantiate directly).\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html\r\n */\r\nexport declare class Cursor<T> extends Readable {\r\n\r\n    /**\r\n     * Cursor query sort setting.\r\n     */\r\n    sortValue: string;\r\n\r\n    /**\r\n     * Is Cursor able to time out.\r\n     */\r\n    timeout: boolean;\r\n\r\n    /**\r\n     * Get cursor ReadPreference.\r\n     */\r\n    readPreference: ReadPreference;\r\n\r\n    /**\r\n     * @param flag The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial'].\r\n     * @param value The flag boolean value.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addCursorFlag\r\n     */\r\n    addCursorFlag(flag: string, value: boolean): Cursor<T>;\r\n\r\n    /**\r\n     * @param name The query modifier (must start with $, such as $orderby etc).\r\n     * @param value The flag boolean value.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addQueryModifier\r\n     */\r\n    addQueryModifier(name: string, value: boolean): Cursor<T>;\r\n\r\n    /**\r\n     * @param value The batchSize for the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#batchSize\r\n     */\r\n    batchSize(value: number): Cursor<T>;\r\n\r\n    /**\r\n     * Clone the cursor.\r\n     * still returns the same type.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#clone\r\n     */\r\n    clone(): Cursor<T>;\r\n\r\n    /**\r\n     * Close the cursor, sending a KillCursor command and emitting close.\r\n     * The result callback.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\r\n     */\r\n    close(): Promise<CursorResult>;\r\n    close(callback: MongoCallback<CursorResult>): void;\r\n\r\n    /**\r\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\r\n     * @param value The comment attached to this query.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#comment\r\n     */\r\n    comment(value: string): Cursor<T>;\r\n\r\n    /**\r\n     * Get the count of documents for this cursor.\r\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\r\n     */\r\n    count(applySkipLimit: boolean, callback: MongoCallback<number>): void;\r\n\r\n    /**\r\n     * Get the count of documents for this cursor.\r\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\r\n     * @param options Optional settings.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\r\n     */\r\n    count(applySkipLimit: boolean, options?: CursorCommentOptions): Promise<number>;\r\n\r\n    /**\r\n     * Get the count of documents for this cursor.\r\n     * @param applySkipLimit Should the count command apply limit and skip settings on the cursor or in the passed in options.\r\n     * @param options Optional settings.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\r\n     */\r\n    count(applySkipLimit: boolean, options: CursorCommentOptions, callback: MongoCallback<number>): void;\r\n\r\n    /**\r\n     * Execute the explain for the cursor.\r\n     * returns Promise if no callback passed.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain\r\n     */\r\n    explain(): Promise<CursorResult>;\r\n\r\n    /**\r\n     * Execute the explain for the cursor.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain\r\n     */\r\n    explain(callback: MongoCallback<CursorResult>): void;\r\n\r\n    /**\r\n     * Set the cursor query.\r\n     * @param filter The filter object used for the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#filter\r\n     */\r\n    filter(filter: Object): Cursor<T>;\r\n\r\n    /**\r\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\r\n     * @param iterator The iteration callback.\r\n     * @param callback The end callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#forEach\r\n     */\r\n    forEach(iterator: IteratorCallback<T>, callback: EndCallback): void;\r\n\r\n    /**\r\n     * Check if there is any document still available in the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext\r\n     */\r\n    hasNext(): Promise<boolean>;\r\n\r\n    /**\r\n     * Check if there is any document still available in the cursor.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext\r\n     */\r\n    hasNext(callback: MongoCallback<boolean>): void;\r\n\r\n    /**\r\n     * Set the cursor hint.\r\n     * @param hint If specified, then the query system will only consider plans using the hinted index.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hint\r\n     */\r\n    hint(hint: Object): Cursor<T>;\r\n\r\n    /**\r\n     * Is the cursor closed.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#isClosed\r\n     */\r\n    isClosed(): boolean;\r\n\r\n    /**\r\n     * Set the limit for the cursor.\r\n     * @param value The limit for the cursor query.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#limit\r\n     */\r\n    limit(value: number): Cursor<T>;\r\n\r\n    /**\r\n     * SMap all documents using the provided function.\r\n     * @param transform The mapping transformation method.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#map\r\n     */\r\n    map(transform: Function): Cursor<T>;\r\n\r\n    /**\r\n     * Set the cursor max.\r\n     * @param max Specify a $max value to specify the exclusive upper bound for a specific index in\r\n     * order to constrain the results of find(). The $max specifies the upper bound for\r\n     * all keys of a specific index in order.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#max\r\n     */\r\n    max(max: number): Cursor<T>;\r\n\r\n    /**\r\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the\r\n     * timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise).\r\n     * @param value Number of milliseconds to wait before aborting the tailed query.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxAwaitTimeMS\r\n     */\r\n    maxAwaitTimeMS(value: number): Cursor<T>;\r\n\r\n    /**\r\n     * Set the cursor maxScan.\r\n     * @param maxScan Constrains the query to only scan the specified number of documents when fulfilling the query.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxScan\r\n     */\r\n    maxScan(maxScan: Object): Cursor<T>;\r\n\r\n    /**\r\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher).\r\n     * @param value Number of milliseconds to wait before aborting the query.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxTimeMS\r\n     */\r\n    maxTimeMS(value: number): Cursor<T>;\r\n\r\n    /**\r\n     * Set the cursor min.\r\n     * @param min Specify a $min value to specify the inclusive lower bound for a specific index in order to\r\n     * constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#min\r\n     */\r\n    min(min: number): Cursor<T>;\r\n\r\n    /**\r\n     * Get the next available document from the cursor, returns null if no more documents are available.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\r\n     */\r\n    next(): Promise<CursorResult>;\r\n\r\n    /**\r\n     * Get the next available document from the cursor, returns null if no more documents are available.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\r\n     */\r\n    next(callback: MongoCallback<CursorResult>): void;\r\n\r\n    /**\r\n     * Sets a field projection for the query.\r\n     * @param value The field projection object.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#project\r\n     */\r\n    project(value: Object): Cursor<T>;\r\n\r\n    /**\r\n     * The read() method pulls some data out of the internal buffer and returns it.\r\n     * If there is no data available, then it will return null.\r\n     * @param size Optional argument to specify how much data to read.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#read\r\n     */\r\n    read(size: number): string | Buffer | void;\r\n\r\n    /**\r\n     * Set the cursor returnKey.\r\n     * @param returnKey Only return the index field or fields for the results of the query. If $returnKey is set\r\n     * to true and the query does not use an index to perform the read operation,\r\n     * the returned documents will not contain any fields. Use one of the following forms:\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next\r\n     */\r\n    returnKey(returnKey: Object): Cursor<T>;\r\n\r\n    /**\r\n     * Resets the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#rewind\r\n     */\r\n    rewind(): void;\r\n\r\n    /**\r\n     * Set a node.js specific cursor option.\r\n     * @param field The cursor option to set ['numberOfRetries', 'tailableRetryInterval'].\r\n     * @param value The field value.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setCursorOption\r\n     */\r\n    setCursorOption(field: string, value: Object): Cursor<T>;\r\n\r\n    /**\r\n     * Set the ReadPreference for the cursor.\r\n     * @param readPreference The new read preference for the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setReadPreference\r\n     */\r\n    setReadPreference(readPreference: string | ReadPreference): Cursor<T>;\r\n\r\n    /**\r\n     * Set the cursor showRecordId.\r\n     * @param showRecordId The $showDiskLoc option has now been deprecated and replaced with the\r\n     * showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#showRecordId\r\n     */\r\n    showRecordId(showRecordId: Object): Cursor<T>;\r\n\r\n    /**\r\n     * Set the skip for the cursor.\r\n     * @param value The skip for the cursor query.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#skip\r\n     */\r\n    skip(value: number): Cursor<T>;\r\n\r\n    /**\r\n     * Set the cursor snapshot.\r\n     * @param snapshot The $snapshot operator prevents the cursor from returning a document more than\r\n     * once because an intervening write operation results in a move of the document.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#snapshot\r\n     */\r\n    snapshot(snapshot: Object): Cursor<T>;\r\n\r\n    /**\r\n     * Sets the sort order of the cursor query.\r\n     * @param keyOrList The key or keys set for the sort.\r\n     * @param direction The direction of the sorting (1 or -1).\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#sort\r\n     */\r\n    sort(keyOrList: string | Object[] | Object, direction?: number): Cursor<T>;\r\n\r\n    /**\r\n     * Return a modified Readable stream including a possible transform method.\r\n     * @param options Optional settings.\r\n     * @param transform A transformation method applied to each document emitted by the stream.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#stream\r\n     */\r\n    stream(options?: { transform?: Function }): Cursor<T>;\r\n\r\n    /**\r\n     * Returns an array of documents. The caller is responsible for making sure that there is enough\r\n     * memory to store the results. Note that the array only contain partial results when this cursor had\r\n     * been previouly accessed. In that case, cursor.rewind() can be used to reset the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray\r\n     */\r\n    toArray(): Promise<T[]>;\r\n\r\n    /**\r\n     * Returns an array of documents. The caller is responsible for making sure that there is enough\r\n     * memory to store the results. Note that the array only contain partial results when this cursor had\r\n     * been previouly accessed. In that case, cursor.rewind() can be used to reset the cursor.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray\r\n     */\r\n    toArray(callback: MongoCallback<T[]>): void;\r\n\r\n    /**\r\n     * This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some\r\n     * data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.\r\n     * @param stream Chunk of data to unshift onto the read queue.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#unshift\r\n     */\r\n    unshift(stream: Buffer | string): void;\r\n}\r\n\r\n/**\r\n * Get the count of documents for this cursor.\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count\r\n */\r\nexport interface CursorCommentOptions {\r\n\r\n    /**\r\n     * The number of documents to skip.\r\n     */\r\n    skip?: number;\r\n\r\n    /**\r\n     * The maximum amounts to count before aborting.\r\n     */\r\n    limit?: number;\r\n\r\n    /**\r\n     * Number of miliseconds to wait before aborting the query.\r\n     */\r\n    maxTimeMS?: number;\r\n\r\n    /**\r\n     * An index name hint for the query.\r\n     */\r\n    hint?: string;\r\n\r\n    /**\r\n     * The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED,\r\n     * ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n     */\r\n    readPreference?: ReadPreference | string;\r\n}\r\n\r\n/**\r\n * The callback format for the forEach iterator method.\r\n * @param doc An emitted document for the iterator.\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~iteratorCallback\r\n */\r\nexport interface IteratorCallback<T> {\r\n    (doc: T): void;\r\n}\r\n\r\n/**\r\n * The callback error format for the forEach iterator method.\r\n * @param error An error instance representing the error during the execution.\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~endCallback\r\n */\r\nexport interface EndCallback {\r\n    (error: MongoError): void;\r\n}\r\n\r\n/**\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#~resultCallback\r\n */\r\nexport type AggregationCursorResult = any | void;\r\n\r\n/**\r\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly),\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html\r\n */\r\nexport interface AggregationCursor<T> extends Readable {\r\n\r\n    /**\r\n     * Set the batch size for the cursor.\r\n     * @param value The batchSize for the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#batchSize\r\n     */\r\n    batchSize(value: number): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Clone the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#clone\r\n     */\r\n    clone(): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Close the cursor, sending a AggregationCursor command and emitting close.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close\r\n     */\r\n    close(): Promise<AggregationCursorResult>;\r\n\r\n    /**\r\n     * Close the cursor, sending a AggregationCursor command and emitting close.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close\r\n     */\r\n    close(callback: MongoCallback<AggregationCursorResult>): void;\r\n\r\n    /**\r\n     * Iterates over all the documents for this cursor. As with {cursor.toArray}, not all of the elements will\r\n     * be iterated if this cursor had been previouly accessed. In that case, {cursor.rewind} can be used to reset\r\n     * the cursor. However, unlike {cursor.toArray}, the cursor will only hold a maximum of batch size elements\r\n     * at any given time if batch size is specified. Otherwise, the caller is responsible for making sure\r\n     * that the entire result can fit the memory.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#each\r\n     */\r\n    each(callback: MongoCallback<AggregationCursorResult>): void;\r\n\r\n    /**\r\n     * Execute the explain for the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain\r\n     */\r\n    explain(): Promise<AggregationCursorResult>;\r\n\r\n    /**\r\n     * Execute the explain for the cursor.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain\r\n     */\r\n    explain(callback: MongoCallback<AggregationCursorResult>): void;\r\n\r\n    /**\r\n     * Add a geoNear stage to the aggregation pipeline.\r\n     * @param document The geoNear stage document.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#geoNear\r\n     */\r\n    geoNear(document: Object): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Add a group stage to the aggregation pipeline.\r\n     * @param document The group stage document.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#group\r\n     */\r\n    group(document: Object): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Is the cursor closed.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#isClosed\r\n     */\r\n    isClosed(): boolean;\r\n\r\n    /**\r\n     * Add a limit stage to the aggregation pipeline.\r\n     * @param value The state limit value.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#limit\r\n     */\r\n    limit(value: number): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Add a match stage to the aggregation pipeline.\r\n     * @param document The match stage document.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#match\r\n     */\r\n    match(document: Object): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Add a maxTimeMS stage to the aggregation pipeline.\r\n     * @param value The state maxTimeMS value.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#maxTimeMS\r\n     */\r\n    maxTimeMS(value: number): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Get the next available document from the cursor, returns null if no more documents are available.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next\r\n     */\r\n    next(): Promise<AggregationCursorResult>;\r\n\r\n    /**\r\n     * Get the next available document from the cursor, returns null if no more documents are available.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next\r\n     */\r\n    next(callback: MongoCallback<AggregationCursorResult>): void;\r\n\r\n    /**\r\n     * Add a out stage to the aggregation pipeline.\r\n     * @param destination The destination name.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#out\r\n     */\r\n    out(destination: string): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Add a project stage to the aggregation pipeline.\r\n     * @param document The project stage document.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#project\r\n     */\r\n    project(document: Object): AggregationCursor<T>;\r\n\r\n    /**\r\n     * The read() method pulls some data out of the internal buffer and returns it.\r\n     * If there is no data available, then it will return null.\r\n     * @param size Optional argument to specify how much data to read.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#read\r\n     */\r\n    read(size: number): string | Buffer | void;\r\n\r\n    /**\r\n     * Add a redact stage to the aggregation pipeline.\r\n     * @param document The redact stage document.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#redact\r\n     */\r\n    redact(document: Object): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Resets the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#rewind\r\n     */\r\n    rewind(): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Add a skip stage to the aggregation pipeline.\r\n     * @param value The state skip value.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#setEncoding\r\n     */\r\n    skip(value: number): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Add a sort stage to the aggregation pipeline.\r\n     * @param document The sort stage document.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#sort\r\n     */\r\n    sort(document: Object): AggregationCursor<T>;\r\n\r\n    /**\r\n     * Returns an array of documents. The caller is responsible for making sure that there\r\n     * is enough memory to store the results. Note that the array only contain partial\r\n     * results when this cursor had been previouly accessed. In that case,\r\n     * cursor.rewind() can be used to reset the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray\r\n     */\r\n    toArray(): Promise<T[]>;\r\n\r\n    /**\r\n     * Returns an array of documents. The caller is responsible for making sure that there\r\n     * is enough memory to store the results. Note that the array only contain partial\r\n     * results when this cursor had been previouly accessed. In that case,\r\n     * cursor.rewind() can be used to reset the cursor.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray\r\n     */\r\n    toArray(callback: MongoCallback<T[]>): void;\r\n\r\n    /**\r\n     * This is useful in certain cases where a stream is being consumed by a parser,\r\n     * which needs to \"un-consume\" some data that it has optimistically pulled out of the source,\r\n     * so that the stream can be passed on to some other party.\r\n     * @param stream Chunk of data to unshift onto the read queue.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unshift\r\n     */\r\n    unshift(stream: Buffer | string): void;\r\n\r\n    /**\r\n     * Add a unwind stage to the aggregation pipeline.\r\n     * @param field The unwind field name.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unwind\r\n     */\r\n    unwind(field: string): AggregationCursor<T>;\r\n}\r\n\r\n/**\r\n * CommandCursor.\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html\r\n */\r\nexport interface CommandCursor extends Readable {\r\n\r\n    /**\r\n     * Set the batch size for the cursor.\r\n     * @param value The batchSize for the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#batchSize\r\n     */\r\n    batchSize(value: number): CommandCursor;\r\n\r\n    /**\r\n     * Clone the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#clone\r\n     */\r\n    clone(): CommandCursor;\r\n\r\n    /**\r\n     * Close the cursor, sending a KillCursor command and emitting close.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close\r\n     */\r\n    close(): Promise<AggregationCursorResult>;\r\n\r\n    /**\r\n     * Close the cursor, sending a KillCursor command and emitting close.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close\r\n     */\r\n    close(callback: MongoCallback<AggregationCursorResult>): void;\r\n\r\n    /**\r\n     * Each\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#each\r\n     */\r\n    each(callback: MongoCallback<AggregationCursorResult>): void;\r\n\r\n    /**\r\n     * Is the cursor closed.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#isClosed\r\n     */\r\n    isClosed(): boolean;\r\n\r\n    /**\r\n     * Add a maxTimeMS stage to the aggregation pipeline.\r\n     * @param value The state maxTimeMS value.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#maxTimeMS\r\n     */\r\n    maxTimeMS(value: number): CommandCursor;\r\n\r\n    /**\r\n     * Get the next available document from the cursor, returns null if no more documents are available.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next\r\n     */\r\n    next(): Promise<AggregationCursorResult>;\r\n\r\n    /**\r\n     * Get the next available document from the cursor, returns null if no more documents are available.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next\r\n     */\r\n    next(callback: MongoCallback<AggregationCursorResult>): void;\r\n\r\n    /**\r\n     * The read() method pulls some data out of the internal buffer and returns it.\r\n     * If there is no data available, then it will return null.\r\n     * @param size Optional argument to specify how much data to read.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#read\r\n     */\r\n    read(size: number): string | Buffer | void;\r\n\r\n    /**\r\n     * Resets the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#rewind\r\n     */\r\n    rewind(): CommandCursor;\r\n\r\n    /**\r\n     * Set the ReadPreference for the cursor.\r\n     * @param readPreference The new read preference for the cursor.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#setReadPreference\r\n     */\r\n    setReadPreference(readPreference: string | ReadPreference): CommandCursor;\r\n\r\n    /**\r\n     * Returns an array of documents. The caller is responsible for making sure that there is enough memory\r\n     * to store the results. Note that the array only contain partial results when this cursor had been previouly accessed.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray\r\n     */\r\n    toArray(): Promise<any[]>;\r\n\r\n    /**\r\n     * Returns an array of documents. The caller is responsible for making sure that there is enough memory\r\n     * to store the results. Note that the array only contain partial results when this cursor had been previouly accessed.\r\n     * @param callback The result callback.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray\r\n     */\r\n    toArray(callback: MongoCallback<any[]>): void;\r\n\r\n    /**\r\n     * This is useful in certain cases where a stream is being consumed by a parser,\r\n     * which needs to \"un-consume\" some data that it has optimistically pulled out of the source,\r\n     * so that the stream can be passed on to some other party.\r\n     * @param stream Chunk of data to unshift onto the read queue.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#unshift\r\n     */\r\n    unshift(stream: Buffer | string): void;\r\n}\r\n\r\n/**\r\n * GridFSBucket.\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html\r\n */\r\nexport declare class GridFSBucket {\r\n\r\n    /**\r\n     *\r\n     * @param db A db handle.\r\n     * @param options Optional settings.\r\n     */\r\n    constructor(db: Db, options?: GridFSBucketOptions);\r\n\r\n    /**\r\n     * Deletes a file with the given id.\r\n     * @param id The id of the file doc\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#delete\r\n     */\r\n    delete(id: ObjectID, callback?: GridFSBucketErrorCallback): void;\r\n\r\n    /**\r\n     * Removes this bucket's files collection, followed by its chunks collection.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#drop\r\n     */\r\n    drop(callback?: GridFSBucketErrorCallback): void;\r\n\r\n    /**\r\n     * Convenience wrapper around find on the files collection\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#find\r\n     */\r\n    find(filter?: Object, options?: GridFSBucketFindOptions): Cursor<any>;\r\n\r\n    /**\r\n     * Returns a readable stream (GridFSBucketReadStream) for streaming file.\r\n     * @param id The id of the file doc.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openDownloadStream\r\n     */\r\n    openDownloadStream(id: ObjectID, options?: { start: number, end: number }): GridFSBucketReadStream;\r\n\r\n    /**\r\n     * Returns a readable stream (GridFSBucketReadStream) for streaming file\r\n     * @param filename The id of the file doc\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openDownloadStreamByName\r\n     */\r\n\r\n    openDownloadStreamByName(filename: string, options?: { revision: number, start: number, end: number }): GridFSBucketReadStream;\r\n\r\n    /**\r\n     * Returns a writable stream (GridFSBucketWriteStream) for writing buffers to GridFS.\r\n     * The stream's 'id' property contains the resulting file's id.\r\n     * @param filename The value of the 'filename' key in the files doc.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStream\r\n     */\r\n    openUploadStream(filename: string, options?: GridFSBucketOpenUploadStreamOptions): GridFSBucketWriteStream;\r\n\r\n    /**\r\n     * Returns a writable stream (GridFSBucketWriteStream) for writing buffers to GridFS for a custom file id.\r\n     * The stream's 'id' property contains the resulting file's id.\r\n     * @param id A custom id used to identify the file.\r\n     * @param filename The value of the 'filename' key in the files doc.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStreamWithId\r\n     */\r\n    openUploadStreamWithId(id: string | number | Object, filename: string, options?: GridFSBucketOpenUploadStreamOptions): GridFSBucketWriteStream;\r\n\r\n    /**\r\n     * Renames the file with the given _id to the given string.\r\n     * @param id the id of the file to rename.\r\n     * @param filename new name for the file.\r\n     * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#rename\r\n     */\r\n    rename(id: ObjectID, filename: string, callback?: GridFSBucketErrorCallback): void;\r\n}\r\n\r\n/**\r\n * Constructor for a streaming GridFS interface.\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html\r\n */\r\nexport interface GridFSBucketOptions {\r\n\r\n    /**\r\n     * The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\r\n     */\r\n    bucketName?: string;\r\n\r\n    /**\r\n     * Number of bytes stored in each chunk. Defaults to 255KB.\r\n     */\r\n    chunkSizeBytes?: number;\r\n\r\n    /**\r\n     * Optional write concern to be passed to write operations, for instance { w: 1 }.\r\n     */\r\n    writeConcern?: Object;\r\n\r\n    /**\r\n     * Optional read preference to be passed to read operations.\r\n     */\r\n    ReadPreference?: Object;\r\n}\r\n\r\n/**\r\n * GridFSBucketErrorCallback.\r\n * @param err An error instance representing any errors that occurred.\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#~errorCallback\r\n */\r\nexport interface GridFSBucketErrorCallback {\r\n    (err?: MongoError): void;\r\n}\r\n\r\n/**\r\n * GridFSBucketFindOptions.\r\n * @see http://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#find\r\n */\r\nexport interface GridFSBucketFindOptions {\r\n\r\n    /**\r\n     * Optional batch size for cursor.\r\n     */\r\n    batchSize?: number;\r\n\r\n    /**\r\n     * Optional limit for cursor.\r\n     */\r\n    limit?: number;\r\n\r\n    /**\r\n     * Optional maxTimeMS for cursor.\r\n     */\r\n    maxTimeMS?: number;\r\n\r\n    /**\r\n     * Optionally set cursor's noCursorTimeout flag.\r\n     */\r\n    noCursorTimeout?: boolean;\r\n\r\n    /**\r\n     * Optional skip for cursor.\r\n     */\r\n    skip?: number;\r\n\r\n    /**\r\n     * Optional sort for cursor.\r\n     */\r\n    sort?: Object;\r\n}\r\n\r\n/**\r\n * GridFSBucketOpenUploadStreamOptions.\r\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucket.html#openUploadStream\r\n */\r\nexport interface GridFSBucketOpenUploadStreamOptions {\r\n\r\n    /**\r\n     * Optional overwrite this bucket's chunkSizeBytes for this file.\r\n     */\r\n    chunkSizeBytes?: number;\r\n\r\n    /**\r\n     * Optional object to store in the file document's metadata field.\r\n     */\r\n    metadata?: Object;\r\n\r\n    /**\r\n     * Optional string to store in the file document's contentType field.\r\n     */\r\n    contentType?: string;\r\n\r\n    /**\r\n     * Optional array of strings to store in the file document's aliases field.\r\n     */\r\n    aliases?: Array<string>;\r\n}\r\n\r\n/**\r\n * GridFSBucketReadStream.\r\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketReadStream.html\r\n */\r\nexport declare class GridFSBucketReadStream extends Readable {\r\n\r\n    /**\r\n     *\r\n     * @param chunks Handle for chunks collection.\r\n     * @param files Handle for files collection.\r\n     * @param readPreference The read preference to use.\r\n     * @param filter The query to use to find the file document.\r\n     * @param options Optional settings.\r\n     */\r\n    constructor(chunks: Collection, files: Collection, readPreference: Object, filter: Object, options?: GridFSBucketReadStreamOptions);\r\n}\r\n\r\n/**\r\n * GridFSBucketReadStreamOptions.\r\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketReadStream.html\r\n */\r\nexport interface GridFSBucketReadStreamOptions {\r\n\r\n    /**\r\n     * Optional sort for the file find query.\r\n     */\r\n    sort?: number;\r\n\r\n    /**\r\n     * Optional skip for the file find query.\r\n     */\r\n    skip?: number;\r\n\r\n    /**\r\n     * Optional 0-based offset in bytes to start streaming from.\r\n     */\r\n    start?: number;\r\n\r\n    /**\r\n     * Optional 0-based offset in bytes to stop streaming before.\r\n     */\r\n    end?: number;\r\n}\r\n\r\n/**\r\n * GridFSBucketWriteStream\r\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html\r\n */\r\nexport declare class GridFSBucketWriteStream extends Writable {\r\n\r\n    /**\r\n     *\r\n     * @param bucket Handle for this stream's corresponding bucket.\r\n     * @param filename The value of the 'filename' key in the files doc.\r\n     * @param options Optional settings.\r\n     */\r\n    constructor(bucket: GridFSBucket, filename: string, options?: GridFSBucketWriteStreamOptions);\r\n}\r\n\r\n/**\r\n * GridFSBucketWriteStreamOptions.\r\n * @see https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html\r\n */\r\nexport interface GridFSBucketWriteStreamOptions {\r\n\r\n    /**\r\n     * Custom file id for the GridFS file.\r\n     */\r\n    id?: string | number | Object;\r\n\r\n    /**\r\n     * The chunk size to use, in bytes.\r\n     */\r\n    chunkSizeBytes?: number;\r\n\r\n    /**\r\n     * The write concern.\r\n     */\r\n    w?: number;\r\n\r\n    /**\r\n     * The write concern timeout.\r\n     */\r\n    wtimeout?: number;\r\n\r\n    /**\r\n     * The journal write concern.\r\n     */\r\n    j?: number;\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {MongoDriver} from \"./MongoDriver\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\nimport {\r\n    Cursor,\r\n    Db,\r\n    Collection,\r\n    MongoCountPreferences,\r\n    CollectionAggregationOptions,\r\n    AggregationCursor,\r\n    CollectionBluckWriteOptions,\r\n    BulkWriteOpResultObject,\r\n    MongodbIndexOptions,\r\n    CollectionOptions,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    ReadPreference,\r\n    Code,\r\n    OrderedBulkOperation,\r\n    UnorderedBulkOperation,\r\n    InsertWriteOpResult,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    InsertOneWriteOpResult,\r\n    CommandCursor,\r\n    MapReduceOptions,\r\n    ParallelCollectionScanOptions,\r\n    ReplaceOneOptions,\r\n    UpdateWriteOpResult,\r\n    CollStats\r\n} from \"./typings\";\r\n\r\n/**\r\n * Runs queries on a single MongoDB connection.\r\n */\r\nexport class MongoQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: MongoDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    cursor(collectionName: string, query?: ObjectLiteral): Cursor<any> {\r\n        return this.getCollection(collectionName).find(query || {});\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate(collectionName: string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<any> {\r\n        return this.getCollection(collectionName).aggregate(pipeline, options);\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    async bulkWrite(collectionName: string, operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).bulkWrite(operations, options);\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    async count(collectionName: string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        return await this.getCollection(collectionName).count(query || {}, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    async createCollectionIndex(collectionName: string, fieldOrSpec: string|any, options?: MongodbIndexOptions): Promise<string> {\r\n        return await this.getCollection(collectionName).createIndex(fieldOrSpec, options);\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    async createCollectionIndexes(collectionName: string, indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        return await this.getCollection(collectionName).createIndexes(indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    async deleteMany(collectionName: string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).deleteMany(query, options);\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    async deleteOne(collectionName: string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).deleteOne(query, options);\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    async distinct(collectionName: string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\r\n        return await this.getCollection(collectionName).distinct(key, query, options);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    async dropCollectionIndex(collectionName: string, indexName: string, options?: CollectionOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).dropIndex(indexName, options);\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    async dropCollectionIndexes(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).dropIndexes();\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndDelete(collectionName: string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndDelete(query, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndReplace(collectionName: string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndReplace(query, replacement, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndUpdate(collectionName: string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndUpdate(query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    async geoHaystackSearch(collectionName: string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).geoHaystackSearch(x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    async geoNear(collectionName: string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).geoNear(x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    async group(collectionName: string, keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\r\n        return await this.getCollection(collectionName).group(keys, condition, initial, reduce, finalize, command, options);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexes(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).indexes();\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexExists(collectionName: string, indexes: string|string[]): Promise<boolean> {\r\n        return await this.getCollection(collectionName).indexExists(indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    async collectionIndexInformation(collectionName: string, options?: { full: boolean }): Promise<any> {\r\n        return await this.getCollection(collectionName).indexInformation(options);\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp(collectionName: string, options?: CollectionOptions): OrderedBulkOperation {\r\n        return this.getCollection(collectionName).initializeOrderedBulkOp(options);\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp(collectionName: string, options?: CollectionOptions): UnorderedBulkOperation {\r\n        return this.getCollection(collectionName).initializeUnorderedBulkOp(options);\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    async insertMany(collectionName: string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        return await this.getCollection(collectionName).insertMany(docs, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    async insertOne(collectionName: string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        return await this.getCollection(collectionName).insertOne(doc, options);\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    async isCapped(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).isCapped();\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes(collectionName: string, options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\r\n        return this.getCollection(collectionName).listIndexes(options);\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    async mapReduce(collectionName: string, map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).mapReduce(map, reduce, options);\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    async parallelCollectionScan(collectionName: string, options?: ParallelCollectionScanOptions): Promise<Cursor<any>[]> {\r\n        return await this.getCollection(collectionName).parallelCollectionScan(options);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async reIndex(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).reIndex();\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async rename(collectionName: string, newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\r\n        return await this.getCollection(collectionName).rename(newName, options);\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    async replaceOne(collectionName: string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).replaceOne(query, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    async stats(collectionName: string, options?: { scale: number }): Promise<CollStats> {\r\n        return await this.getCollection(collectionName).stats(options);\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    async updateMany(collectionName: string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).updateMany(query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    async updateOne(collectionName: string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).updateOne(query, update, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods (from QueryRunner)\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * For MongoDB database we don't release connection, because its single connection.\r\n     */\r\n    async release(): Promise<void> {\r\n        // releasing connection are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Removes all collections from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        await this.databaseConnection.connection.dropDatabase();\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Executing SQL query is not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(collectionName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        const results = await this.databaseConnection\r\n            .connection\r\n            .collection(collectionName)\r\n            .insertOne(keyValues);\r\n\r\n        return results.insertedId;\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(collectionName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        await this.databaseConnection\r\n            .connection\r\n            .collection(collectionName)\r\n            .updateOne(conditions, valuesMap);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(collectionName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(collectionName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(collectionName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (typeof conditions === \"string\")\r\n            throw new Error(`String condition is not supported by MongoDB driver.`);\r\n\r\n        await this.databaseConnection\r\n            .connection\r\n            .collection(collectionName)\r\n            .deleteOne(conditions);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(collectionName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(collectionName: string): Promise<TableSchema|undefined> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(collectionNames: string[]): Promise<TableSchema[]> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n        // так я от тебя не слышу что ты получаешь удовольствие. все что я слышу это как ты делаешь холодные расчеты для вы\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(collectionName: string): Promise<boolean> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table schema and column schemas inside it.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(collectionName: string, columnName: string): Promise<boolean> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(collectionName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(collectionName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(collectionName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(collectionName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(collectionName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableSchema: TableSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(collectionName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(collectionName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(collectionName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(collectionName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(collectionName: string, index: IndexSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(collectionName: string, indexName: string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops collection.\r\n     */\r\n    async truncate(collectionName: string): Promise<void> {\r\n        await this.databaseConnection\r\n            .connection\r\n            .dropCollection(collectionName);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Gets collection from the database with a given name.\r\n     */\r\n    protected getCollection(collectionName: string): Collection {\r\n        return (this.databaseConnection.connection as Db).collection(collectionName);\r\n    }\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {MongoQueryRunner} from \"./MongoQueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {LazyRelationsWrapper} from \"../../lazy-loading/LazyRelationsWrapper\";\r\n\r\n/**\r\n * Organizes communication with MongoDB.\r\n */\r\nexport class MongoDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Used to wrap lazy relations to be able to perform lazy loadings.\r\n     */\r\n    lazyRelationsWrapper: LazyRelationsWrapper;\r\n\r\n    /**\r\n     * Mongodb does not require to dynamically create query runner each time,\r\n     * because it does not have a regular pool.\r\n     */\r\n    queryRunner: MongoQueryRunner;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Underlying mongodb driver.\r\n     */\r\n    protected mongodb: any;\r\n\r\n    /**\r\n     * Connection to mongodb database provided by native driver.\r\n     */\r\n    protected pool: any;\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, mongodb?: any) {\r\n\r\n        // validate options to make sure everything is correct and driver will be able to establish connection\r\n        this.validateOptions(options);\r\n\r\n        // if mongodb package instance was not set explicitly then try to load it\r\n        if (!mongodb)\r\n            mongodb = this.loadDependencies();\r\n\r\n        this.options = options;\r\n        this.logger = logger;\r\n        this.mongodb = mongodb;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    connect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.mongodb.MongoClient.connect(this.buildConnectionUrl(), this.options.extra, (err: any, database: any) => {\r\n                if (err) return fail(err);\r\n\r\n                this.pool = database;\r\n                const databaseConnection: DatabaseConnection = {\r\n                    id: 1,\r\n                    connection: this.pool,\r\n                    isTransactionActive: false\r\n                };\r\n                this.queryRunner = new MongoQueryRunner(databaseConnection, this, this.logger);\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        if (!this.pool)\r\n            throw new ConnectionIsNotSetError(\"mongodb\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n            this.pool.close(handler);\r\n            this.pool = undefined;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mongodb\"));\r\n\r\n        return this.queryRunner;\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.mongodb,\r\n            connection: this.pool\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        throw new Error(`This operation is not supported by Mongodb driver.`);\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return columnName;\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return aliasName;\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return tableName;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            // case ColumnTypes.BOOLEAN:\r\n            //     return value === true ? 1 : 0;\r\n            //\r\n            // case ColumnTypes.DATE:\r\n            //     return DataTransformationUtils.mixedDateToDateString(value);\r\n            //\r\n            // case ColumnTypes.TIME:\r\n            //     return DataTransformationUtils.mixedDateToTimeString(value);\r\n            //\r\n            // case ColumnTypes.DATETIME:\r\n            //     if (columnMetadata.localTimezone) {\r\n            //         return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n            //     } else {\r\n            //         return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n            //     }\r\n            //\r\n            // case ColumnTypes.JSON:\r\n            //     return JSON.stringify(value);\r\n            //\r\n            // case ColumnTypes.SIMPLE_ARRAY:\r\n            //     return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            // case ColumnTypes.BOOLEAN:\r\n            //     return value ? true : false;\r\n            //\r\n            // case ColumnTypes.JSON:\r\n            //     return JSON.parse(value);\r\n            //\r\n            // case ColumnTypes.SIMPLE_ARRAY:\r\n            //     return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        // if (columnMetadata.isObjectId)\r\n        //     return new ObjectID(value);\r\n\r\n        return value;\r\n    }\r\n\r\n    // todo: make better abstraction\r\n    async syncSchema(entityMetadatas: EntityMetadata[]): Promise<void> {\r\n        const queryRunner = await this.createQueryRunner() as MongoQueryRunner;\r\n        const promises: Promise<any>[] = [];\r\n        await Promise.all(entityMetadatas.map(metadata => {\r\n            metadata.indices.forEach(index => {\r\n                const options = { name: index.name };\r\n                promises.push(queryRunner.createCollectionIndex(metadata.tableName, index.columnNamesWithOrderingMap, options));\r\n            });\r\n        }));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validate driver options to make sure everything is correct and driver will be able to establish connection.\r\n     */\r\n    protected validateOptions(options: DriverOptions) {\r\n        if (!options.url) {\r\n            if (!options.database)\r\n                throw new DriverOptionNotSetError(\"database\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): any {\r\n        try {\r\n            return PlatformTools.load(\"mongodb\");  // try to load native driver dynamically\r\n\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\"MongoDB\", \"mongodb\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds connection url that is passed to underlying driver to perform connection to the mongodb database.\r\n     */\r\n    protected buildConnectionUrl(): string {\r\n        if (this.options.url)\r\n            return this.options.url;\r\n\r\n        return `mongodb://${this.options.host || \"127.0.0.1\"}:${this.options.port || \"27017\"}/${this.options.database}`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {EmbeddedMetadata} from \"../../metadata/EmbeddedMetadata\";\r\n\r\n/**\r\n * Transforms raw document into entity object.\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class DocumentToEntityTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(// private selectionMap: AliasMap,\r\n                // private joinMappings: JoinMapping[],\r\n                // private relationCountMetas: RelationCountAttribute[],\r\n                private enableRelationIdValues: boolean = false\r\n    ) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transformAll(documents: ObjectLiteral[], metadata: EntityMetadata) {\r\n        return documents.map(document => this.transform(document, metadata));\r\n    }\r\n\r\n    transform(document: any, metadata: EntityMetadata) {\r\n        const entity: any = metadata.create();\r\n        let hasData = false;\r\n\r\n        // handle _id property the special way\r\n        if (metadata.objectIdColumn && document[metadata.objectIdColumn.databaseNameWithoutPrefixes]) {\r\n            // todo: we can't use driver in this class\r\n            // do we really need prepare hydrated value here? If no then no problem. If yes then think maybe prepareHydratedValue process should be extracted out of driver class?\r\n            // entity[metadata.objectIdColumn.propertyName] = this.driver.prepareHydratedValue(document[metadata.objectIdColumn.name\"], metadata.objectIdColumn);\r\n            entity[metadata.objectIdColumn.propertyName] = document[metadata.objectIdColumn.databaseNameWithoutPrefixes];\r\n            hasData = true;\r\n        }\r\n\r\n        // add special columns that contains relation ids\r\n        if (this.enableRelationIdValues) {\r\n            metadata.columns.filter(column => !!column.relationMetadata).forEach(column => {\r\n                const valueInObject = document[column.databaseNameWithoutPrefixes];\r\n                if (valueInObject !== undefined && valueInObject !== null && column.propertyName) {\r\n                    // todo: we can't use driver in this class\r\n                    // const value = this.driver.prepareHydratedValue(valueInObject, column);\r\n                    entity[column.propertyName] = valueInObject;\r\n                    hasData = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        /*this.joinMappings\r\n            .filter(joinMapping => joinMapping.parentName === alias.name && !joinMapping.alias.relationOwnerSelection && joinMapping.alias.target)\r\n            .map(joinMapping => {\r\n                const relatedEntities = this.transformRawResultsGroup(rawSqlResults, joinMapping.alias);\r\n                const isResultArray = joinMapping.isMany;\r\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\r\n\r\n                if (result && (!isResultArray || result.length > 0)) {\r\n                    entity[joinMapping.propertyName] = result;\r\n                    hasData = true;\r\n                }\r\n            });*/\r\n\r\n        // get value from columns selections and put them into object\r\n        metadata.ownColumns.forEach(column => {\r\n            const valueInObject = document[column.databaseNameWithoutPrefixes];\r\n            if (valueInObject !== undefined &&\r\n                valueInObject !== null &&\r\n                column.propertyName &&\r\n                !column.isVirtual &&\r\n                !column.isParentId &&\r\n                !column.isDiscriminator) {\r\n                // const value = this.driver.prepareHydratedValue(valueInObject, column);\r\n\r\n                entity[column.propertyName] = valueInObject;\r\n                hasData = true;\r\n            }\r\n        });\r\n\r\n        const addEmbeddedValuesRecursively = (entity: any, document: any, embeddeds: EmbeddedMetadata[]) => {\r\n            embeddeds.forEach(embedded => {\r\n                if (!document[embedded.prefix])\r\n                    return;\r\n\r\n                if (embedded.isArray) {\r\n                    entity[embedded.propertyName] = (document[embedded.prefix] as any[]).map(subValue => {\r\n                        const newItem = embedded.create();\r\n                        embedded.columns.forEach(column => {\r\n                            newItem[column.propertyName] = subValue[column.databaseNameWithoutPrefixes];\r\n                        });\r\n                        return newItem;\r\n                    });\r\n\r\n                } else {\r\n                    embedded.columns.forEach(column => {\r\n                        const value = document[embedded.prefix][column.databaseNameWithoutPrefixes];\r\n                        if (!value) return;\r\n\r\n                        if (!entity[embedded.propertyName])\r\n                            entity[embedded.propertyName] = embedded.create();\r\n\r\n                        entity[embedded.propertyName][column.propertyName] = value;\r\n                    });\r\n                }\r\n                addEmbeddedValuesRecursively(entity[embedded.propertyName], document[embedded.prefix], embedded.embeddeds);\r\n            });\r\n        };\r\n\r\n        addEmbeddedValuesRecursively(entity, document, metadata.embeddeds);\r\n\r\n        // if relation is loaded then go into it recursively and transform its values too\r\n        /*metadata.relations.forEach(relation => {\r\n            const relationAlias = this.selectionMap.findSelectionByParent(alias.name, relation.propertyName);\r\n            if (relationAlias) {\r\n                const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"join\" && joinMapping.alias === relationAlias);\r\n                const relatedEntities = this.transformRawResultsGroup(rawSqlResults, relationAlias);\r\n                const isResultArray = relation.isManyToMany || relation.isOneToMany;\r\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\r\n\r\n                if (result) {\r\n                    let propertyName = relation.propertyName;\r\n                    if (joinMapping) {\r\n                        propertyName = joinMapping.propertyName;\r\n                    }\r\n\r\n                    if (relation.isLazy) {\r\n                        entity[\"__\" + propertyName + \"__\"] = result;\r\n                    } else {\r\n                        entity[propertyName] = result;\r\n                    }\r\n\r\n                    if (!isResultArray || result.length > 0)\r\n                        hasData = true;\r\n                }\r\n            }\r\n\r\n            // if relation has id field then relation id/ids to that field.\r\n            if (relation.isManyToMany) {\r\n                if (relationAlias) {\r\n                    const ids: any[] = [];\r\n                    const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"relationId\" && joinMapping.alias === relationAlias);\r\n\r\n                    if (relation.idField || joinMapping) {\r\n                        const propertyName = joinMapping ? joinMapping.propertyName : relation.idField as string;\r\n                        const junctionMetadata = relation.junctionEntityMetadata;\r\n                        const columnName = relation.isOwning ? junctionMetadata.columns[1].name : junctionMetadata.columns[0].name;\r\n\r\n                        rawSqlResults.forEach(results => {\r\n                            if (relationAlias) {\r\n                                const resultsKey = relationAlias.name + \"_\" + columnName;\r\n                                const value = this.driver.prepareHydratedValue(results[resultsKey], relation.referencedColumn);\r\n                                if (value !== undefined && value !== null)\r\n                                    ids.push(value);\r\n                            }\r\n                        });\r\n\r\n                        if (ids && ids.length)\r\n                            entity[propertyName] = ids;\r\n                    }\r\n                }\r\n            } else if (relation.idField) {\r\n                const relationName = relation.name;\r\n                entity[relation.idField] = this.driver.prepareHydratedValue(rawSqlResults[0][alias.name + \"_\" + relationName], relation.referencedColumn);\r\n            }\r\n\r\n            // if relation counter\r\n            this.relationCountMetas.forEach(joinMeta => {\r\n                if (joinMeta.alias === relationAlias) {\r\n                    // console.log(\"relation count was found for relation: \", relation);\r\n                    // joinMeta.entity = entity;\r\n                    joinMeta.entities.push({ entity: entity, metadata: metadata });\r\n                    // console.log(joinMeta);\r\n                    // console.log(\"---------------------\");\r\n                }\r\n            });\r\n        });*/\r\n\r\n        return hasData ? entity : null;\r\n    }\r\n\r\n}","import {FindManyOptions} from \"./FindManyOptions\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {FindOneOptions} from \"./FindOneOptions\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\n/**\r\n * Utilities to work with FindOptions.\r\n */\r\nexport class FindOptionsUtils {\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOneOptions interface.\r\n     */\r\n    static isFindOneOptions(object: any): object is FindOneOptions<any> {\r\n        const possibleOptions: FindOneOptions<any> = object;\r\n        return possibleOptions &&\r\n                (\r\n                    possibleOptions.where instanceof Object ||\r\n                    possibleOptions.join instanceof Object ||\r\n                    possibleOptions.order instanceof Object\r\n                );\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindManyOptions interface.\r\n     */\r\n    static isFindManyOptions(object: any): object is FindManyOptions<any> {\r\n        const possibleOptions: FindManyOptions<any> = object;\r\n        return possibleOptions &&\r\n                (\r\n                    possibleOptions.where instanceof Object ||\r\n                    possibleOptions.join instanceof Object ||\r\n                    possibleOptions.order instanceof Object ||\r\n                    typeof possibleOptions.skip === \"number\" ||\r\n                    typeof possibleOptions.take === \"number\"\r\n                );\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOptions interface.\r\n     */\r\n    static extractFindOneOptionsAlias(object: any): string|undefined {\r\n        if (this.isFindOneOptions(object) && object.join)\r\n            return object.join.alias;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOptions interface.\r\n     */\r\n    static extractFindManyOptionsAlias(object: any): string|undefined {\r\n        if (this.isFindManyOptions(object) && object.join)\r\n            return object.join.alias;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Applies give find one options to the given query builder.\r\n     */\r\n    static applyFindOneOptionsOrConditionsToQueryBuilder<T>(qb: QueryBuilder<T>, options: FindOneOptions<T>|Partial<T>|undefined): QueryBuilder<T> {\r\n        if (this.isFindOneOptions(options))\r\n            return this.applyOptionsToQueryBuilder(qb, options);\r\n\r\n        if (options)\r\n            return this.applyConditions(qb, options);\r\n\r\n        return qb;\r\n    }\r\n\r\n    /**\r\n     * Applies give find many options to the given query builder.\r\n     */\r\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: QueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): QueryBuilder<T> {\r\n        if (this.isFindManyOptions(options))\r\n            return this.applyOptionsToQueryBuilder(qb, options);\r\n\r\n        if (options)\r\n            return this.applyConditions(qb, options);\r\n\r\n        return qb;\r\n    }\r\n\r\n    /**\r\n     * Applies give find options to the given query builder.\r\n     */\r\n    static applyOptionsToQueryBuilder<T>(qb: QueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): QueryBuilder<T> {\r\n\r\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\r\n        if (!options || !this.isFindOneOptions(options))\r\n            return qb;\r\n\r\n        // apply all options from FindOptions\r\n        if (options.where)\r\n            this.applyConditions(qb, options.where);\r\n\r\n        if ((options as FindManyOptions<T>).skip)\r\n            qb.skip((options as FindManyOptions<T>).skip!);\r\n\r\n        if ((options as FindManyOptions<T>).take)\r\n            qb.take((options as FindManyOptions<T>).take!);\r\n\r\n        if (options.order)\r\n            Object.keys(options.order).forEach(key => {\r\n                qb.addOrderBy(qb.alias + \".\" + key, (options as FindOneOptions<T>).order![key as any]);\r\n            });\r\n\r\n        if (options.join) {\r\n            if (options.join.leftJoin)\r\n                Object.keys(options.join.leftJoin).forEach(key => {\r\n                    qb.leftJoin(options.join!.leftJoin![key], key);\r\n                });\r\n\r\n            if (options.join.innerJoin)\r\n                Object.keys(options.join.innerJoin).forEach(key => {\r\n                    qb.innerJoin(options.join!.innerJoin![key], key);\r\n                });\r\n\r\n            if (options.join.leftJoinAndSelect)\r\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\r\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\r\n                });\r\n\r\n            if (options.join.innerJoinAndSelect)\r\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\r\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\r\n                });\r\n        }\r\n\r\n        return qb;\r\n    }\r\n\r\n    /**\r\n     * Applies given simple conditions set to a given query builder.\r\n     */\r\n    static applyConditions<T>(qb: QueryBuilder<T>, conditions: ObjectLiteral): QueryBuilder<T> {\r\n        Object.keys(conditions).forEach((key, index) => {\r\n            if (conditions![key] === null) {\r\n                qb.andWhere(`${qb.alias}.${key} IS NULL`);\r\n\r\n            } else {\r\n                const parameterName = \"where_\" + index;\r\n                qb.andWhere(`${qb.alias}.${key}=:${parameterName}`)\r\n                    .setParameter(parameterName, conditions![key]);\r\n            }\r\n        });\r\n\r\n        return qb;\r\n    }\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {EntityManager} from \"./EntityManager\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {\r\n    AggregationCursor,\r\n    BulkWriteOpResultObject,\r\n    Code,\r\n    Collection,\r\n    CollectionAggregationOptions,\r\n    CollectionBluckWriteOptions,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    CollectionOptions,\r\n    CollStats,\r\n    CommandCursor,\r\n    Cursor,\r\n    CursorResult,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    InsertOneWriteOpResult,\r\n    InsertWriteOpResult,\r\n    MapReduceOptions,\r\n    MongoCallback,\r\n    MongoCountPreferences,\r\n    MongodbIndexOptions,\r\n    MongoError,\r\n    OrderedBulkOperation,\r\n    ParallelCollectionScanOptions,\r\n    ReadPreference,\r\n    ReplaceOneOptions,\r\n    UnorderedBulkOperation,\r\n    UpdateWriteOpResult\r\n} from \"../driver/mongodb/typings\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {DocumentToEntityTransformer} from \"../query-builder/transformer/DocumentToEntityTransformer\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\n\r\n/**\r\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\r\n * whatever entity type are you passing.\r\n *\r\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\r\n */\r\nexport class MongoEntityManager extends EntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\r\n        super(connection, queryRunnerProvider);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes raw SQL query and returns raw database results.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Queries aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided entity manager.\r\n     */\r\n    transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\r\n        throw new Error(`Transactions aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Using Query Builder with MongoDB is not supported yet.\r\n     * Calling this method will return an error.\r\n     */\r\n    createQueryBuilder<Entity>(entityClassOrName: ObjectType<Entity>|string, alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        throw new Error(`Query Builder is not supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    async find<Entity>(entityClassOrName: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        return cursor.toArray();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    async findAndCount<Entity>(entityClassOrName: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[ Entity[], number ]> {\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        const [results, count] = await Promise.all<any>([\r\n            cursor.toArray(),\r\n            this.count(entityClassOrName, query),\r\n        ]);\r\n        return [results, parseInt(count)];\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    async findByIds<Entity>(entityClassOrName: ObjectType<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\r\n        const objectIdInstance = require(\"mongodb\").ObjectID;\r\n        query[\"_id\"] = { $in: ids.map(id => {\r\n            if (id instanceof objectIdInstance)\r\n                return id;\r\n\r\n            return id[metadata.objectIdColumn!.propertyName];\r\n        }) };\r\n\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        return await cursor.toArray();\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions and/or find options.\r\n     */\r\n    async findOne<Entity>(entityClassOrName: ObjectType<Entity>|string, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\r\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n\r\n        // const result = await cursor.limit(1).next();\r\n        const result = await cursor.limit(1).toArray();\r\n        return result.length > 0 ? result[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    async findOneById<Entity>(entityClassOrName: ObjectType<Entity>|string, id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\r\n        query[\"_id\"] = id;\r\n        const cursor = await this.createEntityCursor(entityClassOrName, query);\r\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n\r\n        // const result = await cursor.limit(1).next();\r\n        const result = await cursor.limit(1).toArray();\r\n        return result.length > 0 ? result[0] : undefined;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    createCursor<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.cursor(metadata.tableName, query);\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    createEntityCursor<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\r\n\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        const cursor = this.createCursor(entityClassOrName, query);\r\n        const ParentCursor = require(\"mongodb\").Cursor;\r\n        cursor.toArray = function (callback?: MongoCallback<Entity[]>) {\r\n            if (callback) {\r\n                ParentCursor.prototype.toArray.call(this, (error: MongoError, results: Entity[]): void => {\r\n                    if (error) {\r\n                        callback(error, results);\r\n                        return;\r\n                    }\r\n\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return callback(error, transformer.transformAll(results, metadata));\r\n                });\r\n            } else {\r\n                return ParentCursor.prototype.toArray.call(this).then((results: Entity[]) => {\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return transformer.transformAll(results, metadata);\r\n                });\r\n            }\r\n        };\r\n        cursor.next = function (callback?: MongoCallback<CursorResult>) {\r\n            if (callback) {\r\n                ParentCursor.prototype.next.call(this, (error: MongoError, result: CursorResult): void => {\r\n                    if (error || !result) {\r\n                        callback(error, result);\r\n                        return;\r\n                    }\r\n\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return callback(error, transformer.transform(result, metadata));\r\n                });\r\n            } else {\r\n                return ParentCursor.prototype.next.call(this).then((result: Entity) => {\r\n                    if (!result) return result;\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return transformer.transform(result, metadata);\r\n                });\r\n            }\r\n        };\r\n        return cursor;\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate<Entity>(entityClassOrName: ObjectType<Entity>|string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.aggregate(metadata.tableName, pipeline, options);\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    bulkWrite<Entity>(entityClassOrName: ObjectType<Entity>|string, operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.bulkWrite(metadata.tableName, operations, options);\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    count<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.count(metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    createCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|string, fieldOrSpec: string|any, options?: MongodbIndexOptions): Promise<string> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.createCollectionIndex(metadata.tableName, fieldOrSpec, options);\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error.\r\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    createCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string, indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.createCollectionIndexes(metadata.tableName, indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    deleteMany<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.deleteMany(metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    deleteOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.deleteOne(metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    distinct<Entity>(entityClassOrName: ObjectType<Entity>|string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.distinct(metadata.tableName, key, query, options);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    dropCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|string, indexName: string, options?: CollectionOptions): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.dropCollectionIndex(metadata.tableName, indexName, options);\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    dropCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.dropCollectionIndexes(metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndDelete<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.findOneAndDelete(metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndReplace<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.findOneAndReplace(metadata.tableName, query, replacement, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndUpdate<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.findOneAndUpdate(metadata.tableName, query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    geoHaystackSearch<Entity>(entityClassOrName: ObjectType<Entity>|string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.geoHaystackSearch(metadata.tableName, x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    geoNear<Entity>(entityClassOrName: ObjectType<Entity>|string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.geoNear(metadata.tableName, x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    group<Entity>(entityClassOrName: ObjectType<Entity>|string, keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.group(metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.collectionIndexes(metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexExists<Entity>(entityClassOrName: ObjectType<Entity>|string, indexes: string|string[]): Promise<boolean> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.collectionIndexExists(metadata.tableName, indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    collectionIndexInformation<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { full: boolean }): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.collectionIndexInformation(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: CollectionOptions): OrderedBulkOperation {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.initializeOrderedBulkOp(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: CollectionOptions): UnorderedBulkOperation {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.initializeUnorderedBulkOp(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    insertMany<Entity>(entityClassOrName: ObjectType<Entity>|string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.insertMany(metadata.tableName, docs, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    insertOne<Entity>(entityClassOrName: ObjectType<Entity>|string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.insertOne(metadata.tableName, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    isCapped<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.isCapped(metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.listCollectionIndexes(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    mapReduce<Entity>(entityClassOrName: ObjectType<Entity>|string, map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.mapReduce(metadata.tableName, map, reduce, options);\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    parallelCollectionScan<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.parallelCollectionScan(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    reIndex<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.reIndex(metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    rename<Entity>(entityClassOrName: ObjectType<Entity>|string, newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.rename(metadata.tableName, newName, options);\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    replaceOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.replaceOne(metadata.tableName, query, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    stats<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { scale: number }): Promise<CollStats> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.stats(metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    updateMany<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.updateMany(metadata.tableName, query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    updateOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        return this.queryRunner.updateOne(metadata.tableName, query, update, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected get queryRunner(): MongoQueryRunner {\r\n        return (this.connection.driver as MongoDriver).queryRunner;\r\n    }\r\n\r\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\r\n        if (!optionsOrConditions)\r\n            return undefined;\r\n\r\n        return FindOptionsUtils.isFindManyOptions(optionsOrConditions) ? optionsOrConditions.where : optionsOrConditions;\r\n    }\r\n\r\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\r\n        if (!optionsOrConditions)\r\n            return undefined;\r\n\r\n        return FindOptionsUtils.isFindOneOptions(optionsOrConditions) ? optionsOrConditions.where : optionsOrConditions;\r\n    }\r\n\r\n    protected convertFindOptionsOrderToOrderCriteria<Entity, P>(order: { [P in keyof Entity]?: \"ASC\"|\"DESC\" }) {\r\n        const orderCriteria: ObjectLiteral = {};\r\n        Object.keys(order).forEach(key => orderCriteria[key] = [key, order[key]!.toLowerCase()]);\r\n        return orderCriteria;\r\n    }\r\n\r\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {Repository} from \"./Repository\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {\r\n    AggregationCursor,\r\n    BulkWriteOpResultObject,\r\n    Code,\r\n    Collection,\r\n    CollectionAggregationOptions,\r\n    CollectionBluckWriteOptions,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    CollectionOptions,\r\n    CollStats,\r\n    CommandCursor,\r\n    Cursor,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    InsertOneWriteOpResult,\r\n    InsertWriteOpResult,\r\n    MapReduceOptions,\r\n    MongoCountPreferences,\r\n    MongodbIndexOptions,\r\n    OrderedBulkOperation,\r\n    ParallelCollectionScanOptions,\r\n    ReadPreference,\r\n    ReplaceOneOptions,\r\n    UnorderedBulkOperation,\r\n    UpdateWriteOpResult\r\n} from \"../driver/mongodb/typings\";\r\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\r\n\r\n/**\r\n * Repository used to manage mongodb documents of a single entity type.\r\n */\r\nexport class MongoRepository<Entity extends ObjectLiteral> extends Repository<Entity> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods Set Dynamically\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity Manager used by this repository.\r\n     */\r\n    protected manager: MongoEntityManager;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Raw SQL query execution is not supported by MongoDB.\r\n     * Calling this method will return an error.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Queries aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Using Query Builder with MongoDB is not supported yet.\r\n     * Calling this method will return an error.\r\n     */\r\n    createQueryBuilder(alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        throw new Error(`Query Builder is not supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    find(optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        return this.manager.find(this.metadata.target, optionsOrConditions);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[ Entity[], number ]> {\r\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions);\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions and/or find options.\r\n     */\r\n    findOne(optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        return this.manager.findOne(this.metadata.target, optionsOrConditions);\r\n    }\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    findOneById(id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        return this.manager.findOneById(this.metadata.target, id, optionsOrConditions);\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    createCursor(query?: ObjectLiteral): Cursor<Entity> {\r\n        return this.manager.createCursor(this.metadata.target, query);\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    createEntityCursor(query?: ObjectLiteral): Cursor<Entity> {\r\n        return this.manager.createEntityCursor(this.metadata.target, query);\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate(pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\r\n        return this.manager.aggregate(this.metadata.target, pipeline, options);\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    bulkWrite(operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        return this.manager.bulkWrite(this.metadata.target, operations, options);\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    count(query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        return this.manager.count(this.metadata.target, query || {}, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    createCollectionIndex(fieldOrSpec: string|any, options?: MongodbIndexOptions): Promise<string> {\r\n        return this.manager.createCollectionIndex(this.metadata.target, fieldOrSpec, options);\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error.\r\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    createCollectionIndexes(indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        return this.manager.createCollectionIndexes(this.metadata.target, indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    deleteMany(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return this.manager.deleteMany(this.metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    deleteOne(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return this.manager.deleteOne(this.metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    distinct(key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\r\n        return this.manager.distinct(this.metadata.tableName, key, query, options);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    dropCollectionIndex(indexName: string, options?: CollectionOptions): Promise<any> {\r\n        return this.manager.dropCollectionIndex(this.metadata.tableName, indexName, options);\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    dropCollectionIndexes(): Promise<any> {\r\n        return this.manager.dropCollectionIndexes(this.metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndDelete(query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.manager.findOneAndDelete(this.metadata.tableName, query, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndReplace(query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndUpdate(query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        return this.manager.geoHaystackSearch(this.metadata.tableName, x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        return this.manager.geoNear(this.metadata.tableName, x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    group(keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\r\n        return this.manager.group(this.metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexes(): Promise<any> {\r\n        return this.manager.collectionIndexes(this.metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexExists(indexes: string|string[]): Promise<boolean> {\r\n        return this.manager.collectionIndexExists(this.metadata.tableName, indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    collectionIndexInformation(options?: { full: boolean }): Promise<any> {\r\n        return this.manager.collectionIndexInformation(this.metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation {\r\n        return this.manager.initializeOrderedBulkOp(this.metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation {\r\n        return this.manager.initializeUnorderedBulkOp(this.metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    insertMany(docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        return this.manager.insertMany(this.metadata.tableName, docs, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    insertOne(doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        return this.manager.insertOne(this.metadata.tableName, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    isCapped(): Promise<any> {\r\n        return this.manager.isCapped(this.metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes(options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\r\n        return this.manager.listCollectionIndexes(this.metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    mapReduce(map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\r\n        return this.manager.mapReduce(this.metadata.tableName, map, reduce, options);\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\r\n        return this.manager.parallelCollectionScan(this.metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    reIndex(): Promise<any> {\r\n        return this.manager.reIndex(this.metadata.tableName);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\r\n        return this.manager.rename(this.metadata.tableName, newName, options);\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    replaceOne(query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return this.manager.replaceOne(this.metadata.tableName, query, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    stats(options?: { scale: number }): Promise<CollStats> {\r\n        return this.manager.stats(this.metadata.tableName, options);\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    updateMany(query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\r\n        return this.manager.updateMany(this.metadata.tableName, query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    updateOne(query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return this.manager.updateOne(this.metadata.tableName, query, update, options);\r\n    }\r\n\r\n}","import {TreeRepository} from \"./TreeRepository\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {Repository} from \"./Repository\";\r\nimport {SpecificRepository} from \"./SpecificRepository\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {MongoRepository} from \"./MongoRepository\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\n\r\n/**\r\n * Factory used to create different types of repositories.\r\n */\r\nexport class RepositoryFactory {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a regular repository.\r\n     */\r\n    createRepository(manager: EntityManager, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): Repository<any> {\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        let repository: Repository<any>;\r\n        if (manager.connection.driver instanceof MongoDriver) {\r\n            repository = new MongoRepository();\r\n        } else {\r\n            repository = new Repository<any>();\r\n        }\r\n        (repository as any)[\"manager\"] = manager;\r\n        (repository as any)[\"metadata\"] = metadata;\r\n        (repository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Creates a tree repository.\r\n     */\r\n    createTreeRepository(manager: EntityManager, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): TreeRepository<any> {\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        const repository = new TreeRepository<any>();\r\n        (repository as any)[\"manager\"] = manager;\r\n        (repository as any)[\"metadata\"] = metadata;\r\n        (repository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Creates a specific repository.\r\n     */\r\n    createSpecificRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): SpecificRepository<any> {\r\n        return new SpecificRepository(connection, metadata, queryRunnerProvider);\r\n    }\r\n\r\n}","/**\r\n * Container options.\r\n */\r\nexport interface UseContainerOptions {\r\n\r\n    /**\r\n     * If set to true, then default container will be used in the case if given container haven't returned anything.\r\n     */\r\n    fallback?: boolean;\r\n\r\n    /**\r\n     * If set to true, then default container will be used in the case if given container thrown an exception.\r\n     */\r\n    fallbackOnErrors?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\r\n * container simply creates a new instance of the given class.\r\n */\r\nexport const defaultContainer: { get<T>(someClass: { new (...args: any[]): T }|Function): T } = new (class {\r\n    private instances: { type: Function, object: any }[] = [];\r\n\r\n    get<T>(someClass: { new (...args: any[]): T }): T {\r\n        let instance = this.instances.find(instance => instance.type === someClass);\r\n        if (!instance) {\r\n            instance = { type: someClass, object: new someClass() };\r\n            this.instances.push(instance);\r\n        }\r\n\r\n        return instance.object;\r\n    }\r\n})();\r\n\r\nlet userContainer: { get<T>(someClass: { new (...args: any[]): T }|Function): T };\r\nlet userContainerOptions: UseContainerOptions|undefined;\r\n\r\n/**\r\n * Sets container to be used by this library.\r\n */\r\nexport function useContainer(iocContainer: { get(someClass: any): any }, options?: UseContainerOptions) {\r\n    userContainer = iocContainer;\r\n    userContainerOptions = options;\r\n}\r\n\r\n/**\r\n * Gets the IOC container used by this library.\r\n */\r\nexport function getFromContainer<T>(someClass: { new (...args: any[]): T }|Function): T {\r\n    if (userContainer) {\r\n        try {\r\n            const instance = userContainer.get(someClass);\r\n            if (instance)\r\n                return instance;\r\n\r\n            if (!userContainerOptions || !userContainerOptions.fallback)\r\n                return instance;\r\n\r\n        } catch (error) {\r\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\r\n                throw error;\r\n        }\r\n    }\r\n    return defaultContainer.get<T>(someClass);\r\n}","import {Repository} from \"./Repository\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {SpecificRepository} from \"./SpecificRepository\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {TreeRepository} from \"./TreeRepository\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {RepositoryFactory} from \"./RepositoryFactory\";\r\nimport {getFromContainer} from \"../container\";\r\n\r\n/**\r\n * Aggregates all repositories of the specific metadata.\r\n */\r\nexport class RepositoryAggregator {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata which owns repositories.\r\n     */\r\n    public readonly metadata: EntityMetadata;\r\n\r\n    /**\r\n     * Ordinary repository.\r\n     */\r\n    public readonly repository: Repository<any>;\r\n\r\n    /**\r\n     * Tree repository.\r\n     */\r\n    public readonly treeRepository?: TreeRepository<any>;\r\n\r\n    /**\r\n     * Repository with specific functions.\r\n     */\r\n    public readonly specificRepository: SpecificRepository<any>;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider) {\r\n        this.metadata = metadata;\r\n\r\n        const factory = getFromContainer(RepositoryFactory);\r\n\r\n        if (metadata.isClosure) {\r\n            this.repository = this.treeRepository = factory.createTreeRepository(connection.manager, metadata, queryRunnerProvider);\r\n        } else {\r\n            this.repository = factory.createRepository(connection.manager, metadata, queryRunnerProvider);\r\n        }\r\n\r\n        this.specificRepository = factory.createSpecificRepository(connection, metadata, queryRunnerProvider);\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to release entity manager that does not use single database connection.\r\n */\r\nexport class NoNeedToReleaseEntityManagerError extends Error {\r\n    name = \"NoNeedToReleaseEntityManagerError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Entity manager is not using single database connection and cannot be released. ` +\r\n            `Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection ` +\r\n            `methods have a single database connection and they should be released.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when repository for the given class is not found.\r\n */\r\nexport class RepositoryNotTreeError extends Error {\r\n    name = \"RepositoryNotTreeError\";\r\n\r\n    constructor(entityClass: Function|string) {\r\n        super();\r\n        const targetName = typeof entityClass === \"function\" && (<any> entityClass).name ? (<any> entityClass).name : entityClass;\r\n        this.message = `Repository of the \"${targetName}\" class is not a TreeRepository. Try to use @ClosureTable decorator instead of @Table.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {Subject} from \"./Subject\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\n\r\n/**\r\n * To be able to execute persistence operations we need to load all entities from the database we need.\r\n * Loading should be efficient - we need to load entities in as few queries as possible + load as less data as we can.\r\n * This is how we determine which entities needs to be loaded from db:\r\n *\r\n * 1. example with cascade updates and inserts:\r\n *\r\n * [Y] - means \"yes, we load\"\r\n * [N] - means \"no, we don't load\"\r\n * in {} braces we specify what cascade options are set between relations\r\n *\r\n * if Post is new, author is not set in the post\r\n *\r\n * [Y] Post -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\r\n *   [Y] Author -> {all} // no because author is not set\r\n *     [Y] Photo -> {all} // no because author and its photo are not set\r\n *       [Y] Tag -> {all} // no because author and its photo and its tag are not set\r\n *\r\n * if Post is new, author is new (or anything else is new)\r\n * if Post is updated\r\n * if Post and/or Author are updated\r\n *\r\n * [Y] Post -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\r\n *   [Y] Author -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\r\n *     [Y] Photo -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\r\n *       [Y] Tag -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\r\n *\r\n * Here we load post, author, photo, tag to check if they are new or not to persist insert or update operation.\r\n * We load post, author, photo, tag only if they exist in the relation.\r\n * From these examples we can see that we always load entity relations when it has \"update\" or \"insert\" cascades.\r\n *\r\n * 2. example with cascade removes\r\n *\r\n * if entity is new its remove operations by cascades should not be executed\r\n * if entity is updated then values that are null or missing in array (not undefined!, undefined means skip - don't do anything) are treated as removed\r\n * if entity is removed then all its downside relations which has cascade remove should be removed\r\n *\r\n * Once we find removed entity - we load it, and every downside entity which has \"remove\" cascade set.\r\n *\r\n * At the end we have all entities we need to operate with.\r\n * Next step is to store all loaded entities to manipulate them efficiently.\r\n *\r\n * Rules of updating by cascades.\r\n * Insert operation can lead to:\r\n *  - insert operations\r\n *  - update operations\r\n * Update operation can lead to:\r\n *  - insert operations\r\n *  - update operations\r\n *  - remove operations\r\n * Remove operation can lead to:\r\n *  - remove operation\r\n */\r\nexport class SubjectBuilder<Entity extends ObjectLiteral> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * If this gonna be reused then what to do with marked flags?\r\n     * One of solution can be clone this object and reset all marked states for this persistence.\r\n     * Or from reused just extract databaseEntities from their subjects? (looks better)\r\n     */\r\n    operateSubjects: Subject[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected queryRunnerProvider: QueryRunnerProvider) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds operations for entity that is being inserted/updated.\r\n     */\r\n    async persist(entity: Entity, metadata: EntityMetadata): Promise<void> {\r\n\r\n        // create subject for currently persisted entity and mark that it can be inserted and updated\r\n        const mainPersistedSubject = new Subject(metadata, entity);\r\n        mainPersistedSubject.canBeInserted = true;\r\n        mainPersistedSubject.canBeUpdated = true;\r\n        this.operateSubjects.push(mainPersistedSubject);\r\n\r\n        // next step we build list of subjects we will operate with\r\n        // these subjects are subjects that we need to insert or update alongside with main persisted entity\r\n        this.buildCascadeUpdateAndInsertOperateSubjects(mainPersistedSubject);\r\n\r\n        // next step is to load database entities of all operate subjects\r\n        await this.loadOperateSubjectsDatabaseEntities();\r\n\r\n        // next step - we filter subjects with database entities (only for non-new entities)\r\n        // and find operate subjects that needs to be removed\r\n        // here we also find operate subjects which relations should be updated\r\n        // these relations usually are \"update from inverse side\" operations\r\n        const operateSubjectsWithDatabaseEntities = this.operateSubjects.filter(subject => subject.hasDatabaseEntity);\r\n        await Promise.all(operateSubjectsWithDatabaseEntities.map(subject => {\r\n            return this.buildCascadeRemovedAndRelationUpdateOperateSubjects(subject);\r\n        }));\r\n\r\n        // finally find which operate subjects have insert and remove operations in their junction tables\r\n        await this.buildJunctionOperations({ insert: true, remove: true });\r\n    }\r\n\r\n    /**\r\n     * Builds only remove operations for entity that is being removed.\r\n     */\r\n    async remove(entity: Entity, metadata: EntityMetadata): Promise<void> {\r\n\r\n        // create subject for currently removed entity and mark that it must be removed\r\n        const mainRemovedSubject = new Subject(metadata, entity);\r\n        mainRemovedSubject.mustBeRemoved = true;\r\n        this.operateSubjects.push(mainRemovedSubject);\r\n\r\n        // next step we build list of subjects we will operate with\r\n        // these subjects are subjects that we need to remove alongside with main removed entity\r\n        this.buildCascadeRemoveOperateSubjects(mainRemovedSubject);\r\n\r\n        // next step is to load database entities for all operate subjects\r\n        await this.loadOperateSubjectsDatabaseEntities();\r\n\r\n        // next step - we filter subjects with database entities (only for non-new entities)\r\n        // and find operate subjects that needs to be removed\r\n        // todo(this should not be in remove?) // here we also find operate subjects which relations should be updated\r\n        // todo(this should not be in remove?) // these relations usually are \"update from inverse side\" operations\r\n        const operateSubjectsWithDatabaseEntities = this.operateSubjects.filter(subject => subject.hasDatabaseEntity);\r\n        await Promise.all(operateSubjectsWithDatabaseEntities.map(subject => {\r\n            return this.buildCascadeRemovedAndRelationUpdateOperateSubjects(subject);\r\n        }));\r\n\r\n        // finally find which operate subjects have remove operations in their junction tables\r\n        await this.buildJunctionOperations({ insert: false, remove: true });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds and pushes to array of operate entities all entities that we will work with.\r\n     * These are only relational entities which has insert and update cascades.\r\n     * All such entities will be loaded from the database, because they can be inserted or updated.\r\n     * That's why we load them - to understand if they should be inserted or updated, or which columns we need to update.\r\n     * We can't add removed entities here, because to know which entity was removed we need first to\r\n     * load original entity (particularly its id) from the database.\r\n     * That's why we first need to load all changed entities, then extract ids of the removed entities from them,\r\n     * and only then load removed entities by extracted ids.\r\n     */\r\n    protected buildCascadeUpdateAndInsertOperateSubjects(subject: Subject): void {\r\n        subject.metadata\r\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations)\r\n            .filter(([relation, value, valueMetadata]) => {\r\n\r\n                // we need only defined values and insert or update cascades of the relation should be set\r\n                return value !== undefined && value !== null && (relation.isCascadeInsert || relation.isCascadeUpdate);\r\n            })\r\n            .forEach(([relation, value, valueMetadata]) => {\r\n\r\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\r\n                const alreadyExistValueSubject = this.findByEntityLike(valueMetadata.target, value);\r\n                if (alreadyExistValueSubject) {\r\n                    if (alreadyExistValueSubject.canBeInserted === false)\r\n                        alreadyExistValueSubject.canBeInserted = relation.isCascadeInsert === true;\r\n                    if (alreadyExistValueSubject.canBeUpdated === false)\r\n                        alreadyExistValueSubject.canBeUpdated = relation.isCascadeUpdate === true;\r\n                    return;\r\n                }\r\n\r\n                // mark subject with what we can do with it\r\n                // and add to the array of subjects to load only if there is no same entity there already\r\n                const valueSubject = new Subject(valueMetadata, value);\r\n                valueSubject.canBeInserted = relation.isCascadeInsert === true;\r\n                valueSubject.canBeUpdated = relation.isCascadeUpdate === true;\r\n                this.operateSubjects.push(valueSubject);\r\n\r\n                // go recursively and find other entities we need to operate with\r\n                this.buildCascadeUpdateAndInsertOperateSubjects(valueSubject);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Builds and pushes to array of operate entities all entities that must be removed.\r\n     */\r\n    protected buildCascadeRemoveOperateSubjects(subject: Subject): void {\r\n        subject.metadata\r\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations)\r\n            .filter(([relation, value, valueMetadata]) => {\r\n\r\n                // we need only defined values and insert cascades of the relation should be set\r\n                return value !== undefined && value !== null && relation.isCascadeRemove;\r\n            })\r\n            .forEach(([relation, value, valueMetadata]) => {\r\n\r\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\r\n                const alreadyExistValueSubject = this.findByEntityLike(valueMetadata.target, value);\r\n                if (alreadyExistValueSubject) {\r\n                    alreadyExistValueSubject.mustBeRemoved = true;\r\n                    return;\r\n                }\r\n\r\n                // add to the array of subjects to load only if there is no same entity there already\r\n                const valueSubject = new Subject(valueMetadata, value);\r\n                valueSubject.mustBeRemoved = true;\r\n                this.operateSubjects.push(valueSubject);\r\n\r\n                // go recursively and find other entities to load by cascades in currently inserted entities\r\n                this.buildCascadeRemoveOperateSubjects(valueSubject);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Loads database entities for all operate subjects which do not have database entity set.\r\n     * All entities that we load database entities for are marked as updated or inserted.\r\n     * To understand which of them really needs to be inserted or updated we need to load\r\n     * their original representations from the database.\r\n     */\r\n    protected async loadOperateSubjectsDatabaseEntities(): Promise<void> {\r\n\r\n        // we are grouping subjects by target to perform more optimized queries using WHERE IN operator\r\n        // go throw the groups and perform loading of database entities of each subject in the group\r\n        const promises = this.groupByEntityTargets().map(async subjectGroup => {\r\n\r\n            // prepare entity ids of the subjects we need to load\r\n            const allIds = subjectGroup.subjects\r\n                .filter(subject => !subject.hasDatabaseEntity) // we don't load if subject already has a database entity loaded\r\n                .filter(subject => {\r\n                    return !subject.metadata.isEntityMapEmpty(subject.entity);\r\n                }) // we only need entity id\r\n                .map(subject => { // we don't need empty ids\r\n                    // console.log(subject.entity);\r\n                    return subject.metadata.getEntityIdMap(subject.entity);\r\n                    // if (mixedId instanceof Object)\r\n                    //     return Object.keys(mixedId).every(key => mixedId[key] !== undefined && mixedId[key] !== null && mixedId[key] !== \"\");\r\n                    //\r\n                    // return mixedId !== undefined && mixedId !== null && mixedId !== \"\";\r\n                });\r\n\r\n            // if there no ids found (which means all entities are new and have generated ids) - then nothing to load there\r\n            // console.log(\"allIds: \", allIds);\r\n            // console.log(\"subject.entity: \", subjectGroup.subjects);\r\n            // console.log(\"allIds: \", allIds);\r\n            if (!allIds.length)\r\n                return;\r\n            // console.log(\"Y\");\r\n\r\n            // load database entities for all given ids\r\n            // todo: such implementation is temporary, need to create a good abstraction there\r\n            // todo: its already possible to do that with repository.findByIds method however setting \"RELATION_ID_VALUES\" option is an issue\r\n            // todo: also custom queryRunnerProvider is an issue\r\n            let entities: any[];\r\n            if (this.connection.driver instanceof MongoDriver) {\r\n\r\n                entities = await this.connection\r\n                    .getMongoRepository<ObjectLiteral>(subjectGroup.target)\r\n                    .findByIds(allIds);\r\n\r\n            } else {\r\n                entities = await this.connection\r\n                    .getRepository<ObjectLiteral>(subjectGroup.target)\r\n                    .createQueryBuilder(\"operateSubject\", this.queryRunnerProvider)\r\n                    .andWhereInIds(allIds)\r\n                    .enableAutoRelationIdsLoad()\r\n                    .getMany();\r\n            }\r\n\r\n            // now when we have entities we need to find subject of each entity\r\n            // and insert that entity into database entity of the found subject\r\n            entities.forEach(entity => {\r\n                // console.log(1);\r\n                const subject = this.findByEntityLike(subjectGroup.target, entity);\r\n                if (subject)\r\n                    subject.databaseEntity = entity;\r\n            });\r\n\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * We need to load removed entity when:\r\n     *  - entity with relations is not new (this can be determined only after entity is loaded from db)\r\n     *      (note: simple \"id\" check will not work because id can be not generated)\r\n     *  - entity missing relation. When relation is simple\r\n     *      - in the case of one-to-one owner (with join column) relation we need to load owner entity\r\n     *      - in the case of one-to-one (without join column) relation we need to load inverse side entity\r\n     *      - in the case of many-to-one relations we need to load entity itself\r\n     *      - in the case of one-to-many relations we need to load entities by relation from inverse side\r\n     *\r\n     *  Before loading each entity we need to check in the loaded subjects - maybe it was already loaded.\r\n     *\r\n     *  BIG NOTE: objects are being removed by cascades not only when relation is removed, but also when\r\n     *  relation is replaced (e.g. changed with different object).\r\n     */\r\n    protected async buildCascadeRemovedAndRelationUpdateOperateSubjects(subject: Subject): Promise<void> {\r\n\r\n        // note: we can't use extractRelationValuesFromEntity here because it does not handle empty arrays\r\n        const promises = subject.metadata.relations.map(async relation => {\r\n            const valueMetadata = relation.inverseEntityMetadata;\r\n            const qbAlias = valueMetadata.tableName;\r\n\r\n            // added for type-safety, but subject without databaseEntity cant come here anyway because of checks on upper levels\r\n            if (!subject.hasDatabaseEntity) return;\r\n\r\n            // for one-to-one owner and many-to-one relations no need to load entity to check if something removed\r\n            // because join column is in this side of relation and we have a database entity with which we can compare\r\n            // and understand if relation was removed or not\r\n            if (relation.isOneToOneOwner || relation.isManyToOne) {\r\n\r\n                // we only work with cascade removes here\r\n                if (!relation.isCascadeRemove) return;\r\n\r\n                /**\r\n                 * By example (one-to-one owner). Let's say we have a one-to-one relation between Post and Details.\r\n                 * Post contains detailsId. It means he owns relation. Post has cascade remove with details.\r\n                 * Now here we have a post object with removed details.\r\n                 * We need to remove Details if post.details = null\r\n                 * or if post.details != databasePost.details\r\n                 */\r\n\r\n                /**\r\n                 * By example (many-to-one). Let's say we have a many-to-one relation between Post and Details.\r\n                 * Post contains detailsId. It means he owns relation.\r\n                 * It also means that post can have only one details, and details can have multiple posts.\r\n                 * Post has cascade remove with details.\r\n                 * Now here we have a post object with removed details.\r\n                 * We need to remove Details (one) if post.details = null\r\n                 * or if post.details != databasePost.details\r\n                 */\r\n\r\n                // (example) \"relation\" - is a relation in post with details.\r\n                // (example) \"valueMetadata\" - is an entity metadata of the Details object.\r\n                // (example) \"persistValue\" - is a detailsId from the persisted entity\r\n\r\n                // note that if databaseEntity has relation, it can only be a relation id,\r\n                // because of query builder option \"RELATION_ID_VALUES\" we used\r\n                const relationIdInDatabaseEntity = relation.getEntityValue(subject.databaseEntity); // (example) returns post.detailsId\r\n\r\n                // if database relation id does not exist in the database object then nothing to remove\r\n                if (relationIdInDatabaseEntity === null || relationIdInDatabaseEntity === undefined)\r\n                    return;\r\n\r\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\r\n                let persistValueRelationId: any = undefined, persistValue: any = undefined;\r\n                if (subject.hasEntity) {\r\n                    persistValue = relation.getEntityValue(subject.entity);\r\n                    if (persistValue === null) persistValueRelationId = null;\r\n                    if (persistValue) persistValueRelationId = relation.joinColumns.reduce((map, column) => column.referencedColumn!.getEntityValueMap(persistValue), {} as ObjectLiteral);\r\n                    if (persistValueRelationId === undefined) return; // skip undefined properties\r\n                }\r\n\r\n                // object is removed only if relation id in the persisted entity is empty or is changed\r\n                // if (persistValueRelationId !== null && persistValueRelationId === relationIdInDatabaseEntity)\r\n                //     return;\r\n                // console.log(\"relationIdInDatabaseEntity:\", relationIdInDatabaseEntity);\r\n                // console.log(\"persistValue:\", persistValue);\r\n                // console.log(\"compareEntities:\", relation.entityMetadata.compareEntities(relationIdInDatabaseEntity, persistValue));\r\n                // console.log(\"compareIds:\", relation.entityMetadata.compareIds(relationIdInDatabaseEntity, persistValue));\r\n                if (persistValueRelationId !== null && relation.entityMetadata.compareIds(relationIdInDatabaseEntity, persistValue))\r\n                    return;\r\n\r\n                // first check if we already loaded this object before load from the database\r\n                let alreadyLoadedRelatedDatabaseSubject = this.operateSubjects.find(relatedSubject => {\r\n\r\n                    // (example) filter only subject that has database entity loaded and its target is Details\r\n                    if (!relatedSubject.hasDatabaseEntity || relatedSubject.entityTarget !== valueMetadata.target)\r\n                        return false;\r\n\r\n                    // (example) here we seek a Details loaded from the database in the subjects\r\n                    // (example) here relatedSubject.databaseEntity is a Details\r\n                    // (example) and we need to compare details.id === post.detailsId\r\n                    return relation.entityMetadata.compareIds(relationIdInDatabaseEntity, relation.getEntityValue(relatedSubject.databaseEntity));\r\n                });\r\n\r\n                // if not loaded yet then load it from the database\r\n                if (!alreadyLoadedRelatedDatabaseSubject) {\r\n\r\n                    // (example) we need to load a details where details.id = post.details\r\n                    const qb = this.connection\r\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                        .enableAutoRelationIdsLoad();\r\n\r\n                    const condition = relation.joinColumns.map(joinColumn => {\r\n                        return `${qbAlias}.${joinColumn.referencedColumn!.propertyPath} = :${joinColumn.databaseName}`;\r\n                    }).join(\" AND \");\r\n\r\n                    const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\r\n                        parameters[joinColumn.databaseName] = joinColumn.referencedColumn!.getEntityValue(relationIdInDatabaseEntity);\r\n                        return parameters;\r\n                    }, {} as ObjectLiteral);\r\n\r\n                    qb.where(condition)\r\n                        .setParameters(parameters);\r\n\r\n                    const databaseEntity = await qb.getOne();\r\n\r\n                    if (databaseEntity) {\r\n                        alreadyLoadedRelatedDatabaseSubject = new Subject(valueMetadata, undefined, databaseEntity);\r\n                        this.operateSubjects.push(alreadyLoadedRelatedDatabaseSubject);\r\n                    }\r\n                }\r\n\r\n                if (alreadyLoadedRelatedDatabaseSubject) {\r\n\r\n                    // if object is already marked as removed then no need to proceed because it already was proceed\r\n                    // if we remove this it will cause a recursion\r\n                    if (alreadyLoadedRelatedDatabaseSubject.mustBeRemoved)\r\n                        return;\r\n\r\n                    alreadyLoadedRelatedDatabaseSubject.mustBeRemoved = true;\r\n                    await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(alreadyLoadedRelatedDatabaseSubject);\r\n                }\r\n            }\r\n\r\n            // for one-to-one not owner we need to load entity to understand that it was really removed or not,\r\n            // since column value that indicates relation is stored on inverse side\r\n            if (relation.isOneToOneNotOwner) {\r\n\r\n                // we only work with cascade removes here\r\n                if (!relation.isCascadeRemove) return; // todo: no\r\n\r\n                /**\r\n                 * By example. Let's say we have a one-to-one relation between Post and Details.\r\n                 * Post contains detailsId. It means he owns relation. Details has cascade remove with post.\r\n                 * Now here we have a details object with removed post.\r\n                 * We need to remove Post if details.post = null and databasePost.detailsId = details.id exist in the db,\r\n                 * or if databasePost.id === details.post.id (we need to load it) and databasePost.detailsId != details.id\r\n                 */\r\n\r\n                // (example) \"relation\" - is a relation in details with post.\r\n                // (example) \"valueMetadata\" - is an entity metadata of the Post object.\r\n                // (example) \"subject.databaseEntity\" - is a details object\r\n\r\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\r\n                let persistValueRelationId: any = undefined;\r\n                if (subject.hasEntity && !subject.mustBeRemoved) {\r\n                    const persistValue = relation.getEntityValue(subject.entity);\r\n                    if (persistValue) persistValueRelationId = relation.inverseRelation!.getEntityValue(persistValue);\r\n                    if (persistValueRelationId === undefined) return; // skip undefined properties\r\n                }\r\n\r\n                // (example) returns us referenced column (detail's id)\r\n                const relationIdInDatabaseEntity = relation.inverseRelation!.joinColumns[0].referencedColumn!.getEntityValue(subject.databaseEntity);\r\n\r\n                // if database relation id does not exist then nothing to remove (but can this be possible?)\r\n                if (relationIdInDatabaseEntity === null || relationIdInDatabaseEntity === undefined)\r\n                    return;\r\n\r\n                // first check if we already have this object loaded before load from the database\r\n                let alreadyLoadedRelatedDatabaseSubject = this.operateSubjects.find(relatedSubject => {\r\n\r\n                    // (example) filter only subject that has database entity loaded and its target is Post\r\n                    if (!relatedSubject.hasDatabaseEntity || relatedSubject.entityTarget !== valueMetadata.target)\r\n                        return false;\r\n\r\n                    // (example) here we seek a Post loaded from the database in the subjects\r\n                    // (example) here relatedSubject.databaseEntity is a Post\r\n                    // (example) and we need to compare post.detailsId === details.id\r\n                    return relation.inverseRelation!.getEntityValue(relatedSubject.databaseEntity) === relationIdInDatabaseEntity;\r\n                });\r\n\r\n                // if not loaded yet then load it from the database\r\n                if (!alreadyLoadedRelatedDatabaseSubject) {\r\n\r\n                    // (example) we need to load a post where post.detailsId = details.id\r\n                    const databaseEntity = await this.connection\r\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                        .where(qbAlias + \".\" + relation.inverseSidePropertyPath + \"=:id\") // TODO relation.inverseRelation.joinColumns\r\n                        .setParameter(\"id\", relationIdInDatabaseEntity) // (example) subject.entity is a details here, and the value is details.id\r\n                        .enableAutoRelationIdsLoad()\r\n                        .getOne();\r\n\r\n                    // add only if database entity exist - because in the case of inverse side of the one-to-one relation\r\n                    // we cannot check if it was removed or not until we query the database\r\n                    // and it can be a situation that relation wasn't exist at all. This is particular that case\r\n                    alreadyLoadedRelatedDatabaseSubject = new Subject(valueMetadata, undefined, databaseEntity);\r\n                    this.operateSubjects.push(alreadyLoadedRelatedDatabaseSubject);\r\n                }\r\n\r\n                // check if we really has a relation between entities. If relation not found then alreadyLoadedRelatedDatabaseSubject will be empty\r\n                if (alreadyLoadedRelatedDatabaseSubject && alreadyLoadedRelatedDatabaseSubject.hasDatabaseEntity) {\r\n\r\n                    // also check if relation value exist then then make sure its changed\r\n                    // (example) persistValue is a postFromPersistedDetails here\r\n                    // (example) alreadyLoadedRelatedDatabaseSubject.databaseEntity is a postFromDatabaseDetails here\r\n                    // (example) postFromPersistedDetails.id === postFromDatabaseDetails - means nothing changed\r\n                    const inverseEntityRelationId = relation.inverseRelation!.getEntityValue(alreadyLoadedRelatedDatabaseSubject.databaseEntity);\r\n                    if (persistValueRelationId && persistValueRelationId === inverseEntityRelationId)\r\n                        return;\r\n\r\n                    // if object is already marked as removed then no need to proceed because it already was proceed\r\n                    // if we remove this it will cause a recursion\r\n                    if (alreadyLoadedRelatedDatabaseSubject.mustBeRemoved)\r\n                        return;\r\n\r\n                    alreadyLoadedRelatedDatabaseSubject.mustBeRemoved = true;\r\n                    await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(alreadyLoadedRelatedDatabaseSubject);\r\n                }\r\n            }\r\n\r\n            // for one-to-many we need to load entities to understand which was really removed\r\n            // since column value that indicates relation is stored on inverse side\r\n            if (relation.isOneToMany || relation.isManyToMany) {\r\n\r\n                // we only work with cascade removes here\r\n                // if (!relation.isCascadeRemove && !relation.isCascadeUpdate) return;\r\n\r\n                /**\r\n                 * By example. Let's say we have a one-to-many relation between Post and Details.\r\n                 * Post contains detailsId. It means he owns relation.\r\n                 * It also means that one details contains multiple post, and one post contain only one details.\r\n                 * Details has cascade remove with post.\r\n                 * Now here we have a details object with removed post.\r\n                 * There can be one or multiple removed posts, because posts is an array in details.\r\n                 * If details.posts is undefined then we skip it as we do with any persisted undefined property.\r\n                 * If details.posts is an empty array it means all its items should be removed.\r\n                 * If details.posts is a null it means same - all its items has been removed.\r\n                 * We need to remove each Post in the databaseDetails where post is missing in details.posts\r\n                 * but databasePost.detailsId = details.id exist in the db.\r\n                 */\r\n\r\n                // (example) \"relation\" - is a relation in details with post.\r\n                // (example) \"valueMetadata\" - is an entity metadata of the Post object.\r\n                // (example) \"subject.databaseEntity\" - is a details object\r\n\r\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\r\n                let persistValue: any = undefined;\r\n                if (subject.hasEntity) {\r\n                    persistValue = relation.getEntityValue(subject.entity);\r\n                    if (persistValue === undefined) return; // skip undefined properties\r\n                }\r\n\r\n                // we can't get already loaded objects from loadMap because we don't know exactly how\r\n                // many objects are in database entity, and entities from loadMap may return us not all of them\r\n                // that's why we are forced to load all its entities from the database even if loaded some of them before\r\n                // (example) we need to load a posts where post.detailsId = details.id\r\n                let databaseEntities: ObjectLiteral[] = [];\r\n\r\n                // create shortcuts for better readability\r\n                const ea = (alias: string) => this.connection.driver.escapeAliasName(alias);\r\n                const ec = (column: string) => this.connection.driver.escapeColumnName(column);\r\n\r\n                if (relation.isManyToManyOwner) {\r\n\r\n                    // we only need to load inverse entities if cascade removes are set\r\n                    // because remove by cascades is the only reason we need relational entities here\r\n                    if (!relation.isCascadeRemove) return;\r\n\r\n                    const joinAlias = ea(\"persistenceJoinedRelation\");\r\n\r\n                    const joinColumnConditions = relation.joinColumns.map(joinColumn => {\r\n                        return `${joinAlias}.${joinColumn.propertyName} = :${joinColumn.propertyName}`;\r\n                    });\r\n                    const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {\r\n                        return `${joinAlias}.${inverseJoinColumn.propertyName} = ${ea(qbAlias)}.${ec(inverseJoinColumn.referencedColumn!.propertyName)}`;\r\n                    });\r\n\r\n                    const conditions = joinColumnConditions.concat(inverseJoinColumnConditions).join(\" AND \");\r\n\r\n                    // (example) returns us referenced column (detail's id)\r\n                    const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\r\n                        parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(subject.databaseEntity);\r\n                        return parameters;\r\n                    }, {} as ObjectLiteral);\r\n\r\n                    databaseEntities = await this.connection\r\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                        .innerJoin(relation.junctionEntityMetadata!.tableName, joinAlias, conditions)\r\n                        .setParameters(parameters)\r\n                        .enableAutoRelationIdsLoad()\r\n                        .getMany();\r\n\r\n                } else if (relation.isManyToManyNotOwner) {\r\n\r\n                    // we only need to load inverse entities if cascade removes are set\r\n                    // because remove by cascades is the only reason we need relational entities here\r\n                    if (!relation.isCascadeRemove) return;\r\n\r\n                    const joinAlias = ea(\"persistenceJoinedRelation\");\r\n\r\n                    const joinColumnConditions = relation.joinColumns.map(joinColumn => {\r\n                        return `${joinAlias}.${joinColumn.propertyName} = ${ea(qbAlias)}.${ec(joinColumn.referencedColumn!.propertyName)}`;\r\n                    });\r\n                    const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {\r\n                        return `${joinAlias}.${inverseJoinColumn.propertyName} = :${inverseJoinColumn.propertyName}`;\r\n                    });\r\n\r\n                    const conditions = joinColumnConditions.concat(inverseJoinColumnConditions).join(\" AND \");\r\n\r\n                    // (example) returns us referenced column (detail's id)\r\n                    const parameters = relation.inverseRelation!.inverseJoinColumns.reduce((parameters, joinColumn) => {\r\n                        parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(subject.databaseEntity);\r\n                        return parameters;\r\n                    }, {} as ObjectLiteral);\r\n\r\n                    databaseEntities = await this.connection\r\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                        .innerJoin(relation.junctionEntityMetadata!.tableName, joinAlias, conditions)\r\n                        .setParameters(parameters)\r\n                        .enableAutoRelationIdsLoad()\r\n                        .getMany();\r\n\r\n                } else { // this case can only be a oneToMany relation\r\n                    // todo: fix issues with joinColumn[0]\r\n                    // (example) returns us referenced column (detail's id)\r\n                    const relationIdInDatabaseEntity = relation.inverseRelation!.joinColumns[0].referencedColumn!.getEntityValue(subject.databaseEntity);\r\n\r\n                    // in this case we need inverse entities not only because of cascade removes\r\n                    // because we also need inverse entities to be able to perform update of entities\r\n                    // in the inverse side when entities is detached from one-to-many relation\r\n\r\n                    databaseEntities = await this.connection\r\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                        .where(qbAlias + \".\" + relation.inverseSidePropertyPath + \"=:id\")\r\n                        .setParameter(\"id\", relationIdInDatabaseEntity)\r\n                        .enableAutoRelationIdsLoad()\r\n                        .getMany();\r\n                }\r\n\r\n                // add to loadMap loaded entities if some of them are missing\r\n                databaseEntities.forEach(databaseEntity => {\r\n                    const subjectInLoadMap = this.findByEntityLike(valueMetadata.target, databaseEntity);\r\n                    if (subjectInLoadMap && !subjectInLoadMap.hasDatabaseEntity) {\r\n                        subjectInLoadMap.databaseEntity = databaseEntity;\r\n\r\n                    } else if (!subjectInLoadMap) {\r\n                        const subject = new Subject(valueMetadata, undefined, databaseEntity);\r\n                        this.operateSubjects.push(subject);\r\n                    }\r\n                });\r\n\r\n\r\n                // add new relations for newly bind entities from the one-to-many relations\r\n                if (relation.isOneToMany && persistValue) { // todo: implement same for one-to-one\r\n                    const promises = (persistValue as ObjectLiteral[]).map(async persistValue => {\r\n\r\n                        // try to find in the database entities persistedValue (entity bind to this relation)\r\n                        const persistedValueInDatabaseEntity = databaseEntities.find(databaseEntity => {\r\n                            return valueMetadata.compareEntities(persistValue, databaseEntity);\r\n                        });\r\n\r\n                        // if it does not exist in the database entity - it means we need to bind it\r\n                        // to bind it we need to update related entity itself\r\n                        // this operation is performed only in one-to-many relations\r\n                        if (!persistedValueInDatabaseEntity) {\r\n\r\n                            // now find subject with\r\n                            let loadedSubject = this.findByDatabaseEntityLike(valueMetadata.target, persistValue);\r\n                            if (!loadedSubject) {\r\n                                const id = valueMetadata.getEntityIdMap(persistValue);\r\n                                if (id) { // if there is no id (for newly inserted) then we cant load\r\n                                    const databaseEntity = await this.connection\r\n                                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                                        .andWhereInIds([id])\r\n                                        .enableAutoRelationIdsLoad()\r\n                                        .getOne();\r\n\r\n                                    if (databaseEntity) {\r\n                                        loadedSubject = new Subject(valueMetadata, undefined, databaseEntity); // todo: what if entity like object exist in the loaded subjects but without databaseEntity?\r\n                                        this.operateSubjects.push(loadedSubject);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (loadedSubject) {\r\n                                loadedSubject.relationUpdates.push({\r\n                                    relation: relation.inverseRelation!,\r\n                                    value: subject.entity\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    await Promise.all(promises);\r\n                }\r\n\r\n                // iterate throw loaded inverse entities to find out removed entities and inverse updated entities (only for one-to-many relation)\r\n                const promises = databaseEntities.map(async databaseEntity => {\r\n\r\n                    // find a subject object of the related database entity\r\n                    let relatedEntitySubject = this.findByDatabaseEntityLike(valueMetadata.target, databaseEntity);\r\n                    if (!relatedEntitySubject) return; // should not be possible, anyway add it for type-safety\r\n\r\n                    // if object is already marked as removed then no need to proceed because it already was proceed\r\n                    // if we remove this check it will cause a recursion\r\n                    if (relatedEntitySubject.mustBeRemoved) return;  // todo: add another check for entity in unsetRelations?\r\n\r\n                    // check if in persisted value there is a database value to understand if it was removed or not\r\n                    let relatedValue = ((persistValue || []) as ObjectLiteral[]).find(persistValueItem => {\r\n                        return valueMetadata.compareEntities(relatedEntitySubject!.databaseEntity, persistValueItem);\r\n                    });\r\n\r\n                    // if relation value is set to undefined then we don't do anything - simply skip any check and remove\r\n                    // but if relation value is set to null then it means user wants to remove each entity in this relation\r\n                    // OR\r\n                    // value was removed from persisted value - means we need to mark it as removed\r\n                    // and check if mark as removed all underlying entities that has cascade remove\r\n                    if (persistValue === null || !relatedValue) {\r\n\r\n                        // if cascade remove option is set then need to remove related entity\r\n                        if (relation.isCascadeRemove) {\r\n                            relatedEntitySubject.mustBeRemoved = true;\r\n\r\n                            // mark as removed all underlying entities that has cascade remove\r\n                            await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(relatedEntitySubject);\r\n\r\n                        // if cascade remove option is not set then it means we simply need to remove\r\n                        // reference to this entity from inverse side (from loaded database entity)\r\n                        // this applies only on one-to-many relationship\r\n                        } else if (relation.isOneToMany && relation.inverseRelation) {\r\n                            relatedEntitySubject.relationUpdates.push({\r\n                                relation: relation.inverseRelation,\r\n                                value: null\r\n                            }); // todo: implement same for one-to-one\r\n                        }\r\n\r\n                    }\r\n\r\n                });\r\n\r\n                await Promise.all(promises);\r\n            }\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Builds all junction insert and remove operations used to insert new bind data into junction tables,\r\n     * or remove old junction records.\r\n     * Options specifies which junction operations should be built - insert, remove or both.\r\n     */\r\n    private async buildJunctionOperations(options: { insert: boolean, remove: boolean }): Promise<void> {\r\n        const promises = this.operateSubjects.filter(subject => subject.hasEntity).map(subject => {\r\n            const metadata = subject.metadata.parentEntityMetadata ? subject.metadata.parentEntityMetadata : subject.metadata;\r\n            const promises = metadata.manyToManyRelations.map(async relation => {\r\n                // if subject marked to be removed then all its junctions must be removed\r\n                if (subject.mustBeRemoved && options.remove) {\r\n                    // load from db all relation ids of inverse entities that are \"bind\" to the currently persisted entity\r\n                    // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\r\n                    const existInverseEntityRelationIds = relation.getEntityValue(subject.databaseEntity);\r\n\r\n                    // finally create a new junction remove operation and push it to the array of such operations\r\n                    if (existInverseEntityRelationIds.length > 0) {\r\n                        subject.junctionRemoves.push({\r\n                            relation: relation,\r\n                            junctionRelationIds: existInverseEntityRelationIds\r\n                        });\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // if entity don't have entity then no need to find something that should be inserted or removed\r\n                if (!subject.hasEntity)\r\n                    return;\r\n\r\n                // else check changed junctions in the persisted entity\r\n                // extract entity value - we only need to proceed if value is defined and its an array\r\n                const relatedValue = relation.getEntityValue(subject.entity);\r\n                if (!(relatedValue instanceof Array))\r\n                    return;\r\n\r\n                // load from db all relation ids of inverse entities that are \"bind\" to the currently persisted entity\r\n                // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\r\n                // we could load this relation ids with entity using however this way it may be more efficient, because\r\n                // this way we load only relations that come, e.g. we don't load data for empty relations set with object.\r\n                // this is also useful when object is being saved partial.\r\n                let existInverseEntityRelationIds: any[] = [];\r\n\r\n                // if subject don't have database entity it means its new and we don't need to remove something that is not exist\r\n                if (subject.hasDatabaseEntity) {\r\n                    existInverseEntityRelationIds = relation.getEntityValue(subject.databaseEntity);\r\n                    // console.log(\"existInverseEntityRelationIds:\", existInverseEntityRelationIds[0]);\r\n                }\r\n\r\n                // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\r\n                const changedInverseEntityRelationIds = relatedValue\r\n                    .map(subRelationValue => {\r\n                        const joinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\r\n                        return joinColumns.reduce((ids, joinColumn) => {\r\n                            return OrmUtils.mergeDeep(ids, joinColumn.referencedColumn!.createValueMap(joinColumn.referencedColumn!.getEntityValue(subRelationValue))); // todo: duplicate. relation.createJoinColumnsIdMap(entity) ?\r\n                        }, {} as ObjectLiteral);\r\n                    })\r\n                    .filter(subRelationValue => subRelationValue !== undefined && subRelationValue !== null);\r\n                // console.log(\"changedInverseEntityRelationIds:\", changedInverseEntityRelationIds);\r\n\r\n                // now from all entities in the persisted entity find only those which aren't found in the db\r\n                const removedJunctionEntityIds = existInverseEntityRelationIds.filter(existRelationId => {\r\n                    return !changedInverseEntityRelationIds.find(changedRelationId => {\r\n                        return relation.inverseEntityMetadata.compareIds(changedRelationId, existRelationId);\r\n                    });\r\n                });\r\n                // console.log(\"removedJunctionEntityIds:\", removedJunctionEntityIds);\r\n\r\n                // now from all entities in the persisted entity find only those which aren't found in the db\r\n                const newJunctionEntities = relatedValue.filter(subRelatedValue => {\r\n                    // console.log(subRelatedValue);\r\n\r\n                    const joinColumns = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\r\n                    const ids = joinColumns.reduce((ids, joinColumn) => {\r\n                        return OrmUtils.mergeDeep(ids, joinColumn.referencedColumn!.createValueMap(joinColumn.referencedColumn!.getEntityValue(subRelatedValue))); // todo: duplicate. relation.createJoinColumnsIdMap(entity) ?\r\n                    }, {} as ObjectLiteral);\r\n                    // console.log(\"ids:\", ids);\r\n                    return !existInverseEntityRelationIds.find(relationId => {\r\n                        return relation.inverseEntityMetadata.compareIds(relationId, ids);\r\n                    });\r\n                });\r\n\r\n                // console.log(\"newJunctionEntities: \", newJunctionEntities);\r\n\r\n                // finally create a new junction insert operation and push it to the array of such operations\r\n                if (newJunctionEntities.length > 0 && options.insert) {\r\n                    subject.junctionInserts.push({\r\n                        relation: relation,\r\n                        junctionEntities: newJunctionEntities\r\n                    });\r\n                }\r\n\r\n                // finally create a new junction remove operation and push it to the array of such operations\r\n                if (removedJunctionEntityIds.length > 0 && options.remove) {\r\n                    subject.junctionRemoves.push({\r\n                        relation: relation,\r\n                        junctionRelationIds: removedJunctionEntityIds\r\n                    });\r\n                }\r\n            });\r\n\r\n            return Promise.all(promises);\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Finds subject where entity like given subject's entity.\r\n     * Comparision made by entity id.\r\n     */\r\n    protected findByEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\r\n        return this.operateSubjects.find(subject => {\r\n            if (!subject.hasEntity)\r\n                return false;\r\n\r\n            if (subject.entity === entity)\r\n                return true;\r\n\r\n            return subject.entityTarget === entityTarget && subject.metadata.compareEntities(subject.entity, entity);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Finds subject where entity like given subject's database entity.\r\n     * Comparision made by entity id.\r\n     */\r\n    protected findByDatabaseEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\r\n        return this.operateSubjects.find(subject => {\r\n            if (!subject.hasDatabaseEntity)\r\n                return false;\r\n\r\n            return subject.entityTarget === entityTarget && subject.metadata.compareEntities(subject.databaseEntity, entity);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Groups given Subject objects into groups separated by entity targets.\r\n     */\r\n    protected groupByEntityTargets(): { target: Function|string, subjects: Subject[] }[] {\r\n        return this.operateSubjects.reduce((groups, operatedEntity) => {\r\n            let group = groups.find(group => group.target === operatedEntity.entityTarget);\r\n            if (!group) {\r\n                group = { target: operatedEntity.entityTarget, subjects: [] };\r\n                groups.push(group);\r\n            }\r\n            group.subjects.push(operatedEntity);\r\n            return groups;\r\n        }, [] as { target: Function|string, subjects: Subject[] }[]);\r\n    }\r\n\r\n}","/**\r\n * Utils to help to work with Promise objects.\r\n */\r\nexport class PromiseUtils {\r\n\r\n    /**\r\n     * Runs given callback that returns promise for each item in the given collection in order.\r\n     * Operations executed after each other, right after previous promise being resolved.\r\n     */\r\n    static runInSequence<T, U>(collection: T[], callback: (item: T) => Promise<U>): Promise<U[]> {\r\n        const results: U[] = [];\r\n        return collection.reduce((promise, item) => {\r\n            return promise.then(() => {\r\n                return callback(item);\r\n            }).then(result => {\r\n                results.push(result);\r\n            });\r\n        }, Promise.resolve()).then(() => {\r\n            return results;\r\n        });\r\n    }\r\n\r\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {JunctionInsert, JunctionRemove, Subject} from \"./Subject\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\r\n\r\n/**\r\n * Executes all database operations (inserts, updated, deletes) that must be executed\r\n * with given persistence subjects.\r\n */\r\nexport class SubjectOperationExecutor {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * All subjects that needs to be operated.\r\n     */\r\n    protected allSubjects: Subject[];\r\n\r\n    /**\r\n     * Subjects that must be inserted.\r\n     */\r\n    protected insertSubjects: Subject[];\r\n\r\n    /**\r\n     * Subjects that must be updated.\r\n     */\r\n    protected updateSubjects: Subject[];\r\n\r\n    /**\r\n     * Subjects that must be removed.\r\n     */\r\n    protected removeSubjects: Subject[];\r\n\r\n    /**\r\n     * Subjects which relations should be updated.\r\n     */\r\n    protected relationUpdateSubjects: Subject[];\r\n\r\n    /**\r\n     * Query runner used to execute queries.\r\n     */\r\n    protected queryRunner: QueryRunner;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected transactionEntityManager: EntityManager,\r\n                protected queryRunnerProvider: QueryRunnerProvider) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes all operations over given array of subjects.\r\n     * Executes queries using given query runner.\r\n     */\r\n    async execute(subjects: Subject[]): Promise<void> {\r\n\r\n        /*subjects.forEach(subject => {\r\n            console.log(subject.entity);\r\n            console.log(\"mustBeInserted: \", subject.mustBeInserted);\r\n            console.log(\"mustBeUpdated: \", subject.mustBeUpdated);\r\n            console.log(\"mustBeRemoved: \", subject.mustBeRemoved);\r\n        });*/\r\n\r\n        // validate all subjects first\r\n        subjects.forEach(subject => subject.validate());\r\n\r\n        // set class properties for easy use\r\n        this.allSubjects = subjects;\r\n        this.insertSubjects = subjects.filter(subject => subject.mustBeInserted);\r\n        this.updateSubjects = subjects.filter(subject => subject.mustBeUpdated);\r\n        this.removeSubjects = subjects.filter(subject => subject.mustBeRemoved);\r\n        this.relationUpdateSubjects = subjects.filter(subject => subject.hasRelationUpdates);\r\n\r\n        // if there are no operations to execute then don't need to do something including opening a transaction\r\n        if (!this.insertSubjects.length &&\r\n            !this.updateSubjects.length &&\r\n            !this.removeSubjects.length &&\r\n            !this.relationUpdateSubjects.length &&\r\n            subjects.every(subject => !subject.junctionInserts.length) &&\r\n            subjects.every(subject => !subject.junctionRemoves.length))\r\n            return;\r\n\r\n        // start execute queries in a transaction\r\n        // if transaction is already opened in this query runner then we don't touch it\r\n        // if its not opened yet then we open it here, and once we finish - we close it\r\n        let isTransactionStartedByItself = false;\r\n        try {\r\n\r\n            this.queryRunner = await this.queryRunnerProvider.provide();\r\n\r\n            // open transaction if its not opened yet\r\n            if (!this.queryRunner.isTransactionActive()) {\r\n                isTransactionStartedByItself = true;\r\n                await this.queryRunner.beginTransaction();\r\n            }\r\n\r\n            // broadcast \"before\" events before we start updating\r\n            await this.connection.broadcaster.broadcastBeforeEventsForAll(this.transactionEntityManager, this.insertSubjects, this.updateSubjects, this.removeSubjects);\r\n\r\n            // since events can trigger some internal changes (for example update depend property) we need to perform some re-computations here\r\n            this.updateSubjects.forEach(subject => subject.recompute());\r\n\r\n            await this.executeInsertOperations();\r\n            await this.executeInsertClosureTableOperations();\r\n            await this.executeInsertJunctionsOperations();\r\n            await this.executeRemoveJunctionsOperations();\r\n            await this.executeUpdateOperations();\r\n            await this.executeUpdateRelations();\r\n            await this.executeRemoveOperations();\r\n\r\n            // commit transaction if it was started by us\r\n            if (isTransactionStartedByItself === true)\r\n                await this.queryRunner.commitTransaction();\r\n\r\n            // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\r\n            await this.updateSpecialColumnsInPersistedEntities();\r\n\r\n            // finally broadcast \"after\" events\r\n            // note that we are broadcasting events after commit because we want to have ids of the entities inside them to be available in subscribers\r\n            await this.connection.broadcaster.broadcastAfterEventsForAll(this.transactionEntityManager, this.insertSubjects, this.updateSubjects, this.removeSubjects);\r\n\r\n        } catch (error) {\r\n\r\n            // rollback transaction if it was started by us\r\n            if (isTransactionStartedByItself) {\r\n                try {\r\n                    await this.queryRunner.rollbackTransaction();\r\n\r\n                } catch (secondaryError) {\r\n                }\r\n            }\r\n\r\n            throw error;\r\n        }\r\n\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Insertion\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes insert operations.\r\n     *\r\n     * For insertion we separate two groups of entities:\r\n     * - first group of entities are entities which do not have any relations\r\n     *      or entities which do not have any non-nullable relation\r\n     * - second group of entities are entities which does have non-nullable relations\r\n     *\r\n     * Insert process of the entities from the first group which can only have nullable relations are actually a two-step process:\r\n     * - first we insert entities without their relations, explicitly left them NULL\r\n     * - later we update inserted entity once again with id of the object inserted with it\r\n     *\r\n     * Yes, two queries are being executed, but this is by design.\r\n     * There is no better way to solve this problem and others at the same time.\r\n     *\r\n     * Insert process of the entities from the second group which can have only non nullable relations is a single-step process:\r\n     * - we simply insert all entities and get into attention all its dependencies which were inserted in the first group\r\n     */\r\n    private async executeInsertOperations(): Promise<void> {\r\n\r\n        // separate insert entities into groups:\r\n\r\n        // TODO: current ordering mechanism is bad. need to create a correct order in which entities should be persisted, need to build a dependency graph\r\n\r\n        // first group of subjects are subjects without any non-nullable column\r\n        // we need to insert first such entities because second group entities may rely on those entities.\r\n        const firstInsertSubjects = this.insertSubjects.filter(subject => !subject.metadata.hasNonNullableRelations);\r\n\r\n        // second group - are all other subjects\r\n        // since in this group there are non nullable columns, some of them may depend on value of the\r\n        // previously inserted entity (which only can be entity with all nullable columns)\r\n        const secondInsertSubjects = this.insertSubjects.filter(subject => subject.metadata.hasNonNullableRelations);\r\n\r\n        // note: these operations should be executed in sequence, not in parallel\r\n        // because second group depend of obtained data from the first group\r\n        await Promise.all(firstInsertSubjects.map(subject => this.insert(subject, [])));\r\n        await Promise.all(secondInsertSubjects.map(subject => this.insert(subject, firstInsertSubjects)));\r\n\r\n        // we need to update relation ids of the newly inserted objects (where we inserted NULLs in relations)\r\n        // once we inserted all entities, we need to update relations which were bind to inserted entities.\r\n        // For example we have a relation many-to-one Post<->Category. Relation is nullable.\r\n        // New category was set to the new post and post where persisted.\r\n        // Here this method executes two inserts: one for post, one for category,\r\n        // but category in post is inserted with \"null\".\r\n        // now we need to update post table - set category with a newly persisted category id.\r\n        const updatePromises: Promise<any>[] = [];\r\n        firstInsertSubjects.forEach(subject => {\r\n\r\n            // first update relations with join columns (one-to-one owner and many-to-one relations)\r\n            const updateOptions: ObjectLiteral = {};\r\n            subject.metadata.relationsWithJoinColumns.forEach(relation => {\r\n                relation.joinColumns.forEach(joinColumn => {\r\n                    const referencedColumn = joinColumn.referencedColumn!;\r\n                    const relatedEntity = relation.getEntityValue(subject.entity);\r\n\r\n                    // if relation value is not set then nothing to do here\r\n                    if (!relatedEntity)\r\n                        return;\r\n\r\n                    // check if relation reference column is a relation\r\n                    let relationId: any;\r\n                    const columnRelation = relation.inverseEntityMetadata.findRelationWithPropertyPath(joinColumn.referencedColumn!.propertyPath);\r\n                    if (columnRelation) { // if referenced column is a relation\r\n                        const insertSubject = this.insertSubjects.find(insertedSubject => insertedSubject.entity === referencedColumn.getEntityValue(relatedEntity));\r\n\r\n                        // if this relation was just inserted\r\n                        if (insertSubject) {\r\n\r\n                            // check if we have this relation id already\r\n                            relationId = columnRelation.getEntityValue(referencedColumn.getEntityValue(relatedEntity));\r\n                            if (!relationId) {\r\n\r\n                                // if we don't have relation id then use special values\r\n                                if (referencedColumn.isGenerated) {\r\n                                    relationId = insertSubject.newlyGeneratedId;\r\n\r\n                                } else if (referencedColumn.isObjectId) {\r\n                                    relationId = insertSubject.generatedObjectId;\r\n\r\n                                }\r\n                                // todo: handle other special types too\r\n                            }\r\n                        }\r\n\r\n                    } else { // if referenced column is a simple non relational column\r\n                        const insertSubject = this.insertSubjects.find(insertedSubject => insertedSubject.entity === relatedEntity);\r\n\r\n                        // if this relation was just inserted\r\n                        if (insertSubject) {\r\n\r\n                            // check if we have this relation id already\r\n                            relationId = referencedColumn.getEntityValue(relatedEntity);\r\n                            if (!relationId) {\r\n\r\n                                // if we don't have relation id then use special values\r\n                                if (referencedColumn.isGenerated) {\r\n                                    relationId = insertSubject.newlyGeneratedId;\r\n\r\n                                } else if (referencedColumn.isObjectId) {\r\n                                    relationId = insertSubject.generatedObjectId;\r\n                                }\r\n                                // todo: handle other special types too\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    if (relationId) {\r\n                        updateOptions[joinColumn.databaseName] = relationId;\r\n                    }\r\n\r\n                });\r\n            });\r\n\r\n            // if we found relations which we can update - then update them\r\n            if (Object.keys(updateOptions).length > 0 /*&& subject.hasEntity*/) {\r\n                // const relatedEntityIdMap = subject.getPersistedEntityIdMap; // todo: this works incorrectly\r\n\r\n                const columns = subject.metadata.parentEntityMetadata ? subject.metadata.primaryColumns : subject.metadata.primaryColumns;\r\n                const conditions: ObjectLiteral = {};\r\n\r\n                columns.forEach(column => {\r\n                    const entityValue = column.getEntityValue(subject.entity);\r\n\r\n                    // if entity id is a relation, then extract referenced column from that relation\r\n                    const columnRelation = subject.metadata.relations.find(relation => relation.propertyName === column.propertyName);\r\n\r\n                    if (entityValue && columnRelation) { // not sure if we need handle join column from inverse side\r\n                        columnRelation.joinColumns.forEach(joinColumn => {\r\n                            let relationIdOfEntityValue = entityValue[joinColumn.referencedColumn!.propertyName];\r\n                            if (!relationIdOfEntityValue) {\r\n                                const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === entityValue);\r\n                                if (entityValueInsertSubject) {\r\n                                    if (joinColumn.referencedColumn!.isGenerated) {\r\n                                        relationIdOfEntityValue = entityValueInsertSubject.newlyGeneratedId;\r\n\r\n                                    } else if (joinColumn.referencedColumn!.isObjectId) {\r\n                                        relationIdOfEntityValue = entityValueInsertSubject.generatedObjectId;\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (relationIdOfEntityValue) {\r\n                                conditions[column.databaseName] = relationIdOfEntityValue;\r\n                            }\r\n                        });\r\n\r\n                    } else {\r\n                        if (entityValue) {\r\n                            conditions[column.databaseName] = entityValue;\r\n                        } else {\r\n                            if (subject.newlyGeneratedId) {\r\n                                conditions[column.databaseName] = subject.newlyGeneratedId;\r\n\r\n                            } else if (subject.generatedObjectId) {\r\n                                conditions[column.databaseName] = subject.generatedObjectId;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                if (!Object.keys(conditions).length)\r\n                    return;\r\n\r\n\r\n\r\n                const updatePromise = this.queryRunner.update(subject.metadata.tableName, updateOptions, conditions);\r\n                updatePromises.push(updatePromise);\r\n            }\r\n\r\n            // we need to update relation ids if newly inserted objects are used from inverse side in one-to-many inverse relation\r\n            // we also need to update relation ids if newly inserted objects are used from inverse side in one-to-one inverse relation\r\n            const oneToManyAndOneToOneNonOwnerRelations = subject.metadata.oneToManyRelations.concat(subject.metadata.oneToOneRelations.filter(relation => !relation.isOwning));\r\n            // console.log(oneToManyAndOneToOneNonOwnerRelations);\r\n            subject.metadata.extractRelationValuesFromEntity(subject.entity, oneToManyAndOneToOneNonOwnerRelations)\r\n                .forEach(([relation, subRelatedEntity, inverseEntityMetadata]) => {\r\n                    relation.inverseRelation!.joinColumns.forEach(joinColumn => {\r\n\r\n                        const referencedColumn = joinColumn.referencedColumn!;\r\n                        const columns = inverseEntityMetadata.parentEntityMetadata ? inverseEntityMetadata.primaryColumns : inverseEntityMetadata.primaryColumns;\r\n                        const conditions: ObjectLiteral = {};\r\n\r\n                        columns.forEach(column => {\r\n                            const entityValue = column.getEntityValue(subRelatedEntity);\r\n\r\n                            // if entity id is a relation, then extract referenced column from that relation\r\n                            const columnRelation = inverseEntityMetadata.relations.find(relation => relation.propertyName === column.propertyName);\r\n\r\n                            if (entityValue && columnRelation) { // not sure if we need handle join column from inverse side\r\n                                columnRelation.joinColumns.forEach(columnRelationJoinColumn => {\r\n                                    let relationIdOfEntityValue = entityValue[columnRelationJoinColumn.referencedColumn!.propertyName];\r\n                                    if (!relationIdOfEntityValue) {\r\n                                        const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === entityValue);\r\n                                        if (entityValueInsertSubject) {\r\n                                            if (columnRelationJoinColumn.referencedColumn!.isGenerated) {\r\n                                                relationIdOfEntityValue = entityValueInsertSubject.newlyGeneratedId;\r\n\r\n                                            } else if (columnRelationJoinColumn.referencedColumn!.isObjectId) {\r\n                                                relationIdOfEntityValue = entityValueInsertSubject.generatedObjectId;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (relationIdOfEntityValue) {\r\n                                        conditions[column.databaseName] = relationIdOfEntityValue;\r\n                                    }\r\n                                });\r\n\r\n                            } else {\r\n                                const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === subRelatedEntity);\r\n                                if (entityValue) {\r\n                                    conditions[column.databaseName] = entityValue;\r\n                                } else {\r\n                                    if (entityValueInsertSubject && entityValueInsertSubject.newlyGeneratedId) {\r\n                                        conditions[column.databaseName] = entityValueInsertSubject.newlyGeneratedId;\r\n\r\n                                    } else if (entityValueInsertSubject && entityValueInsertSubject.generatedObjectId) {\r\n                                        conditions[column.databaseName] = entityValueInsertSubject.generatedObjectId;\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        if (!Object.keys(conditions).length)\r\n                            return;\r\n\r\n                        const updateOptions: ObjectLiteral = {};\r\n                        const columnRelation = relation.inverseEntityMetadata.relations.find(rel => rel.propertyName === referencedColumn.propertyName);\r\n                        const columnValue = referencedColumn.getEntityValue(subject.entity);\r\n                        if (columnRelation) {\r\n                            let id = columnRelation.getEntityValue(columnValue);\r\n                            if (!id) {\r\n                                const insertSubject = this.insertSubjects.find(subject => subject.entity === columnValue);\r\n                                if (insertSubject) {\r\n                                    if (insertSubject.newlyGeneratedId) {\r\n                                        id = insertSubject.newlyGeneratedId;\r\n\r\n                                    } else if (insertSubject.generatedObjectId) {\r\n                                        id = insertSubject.generatedObjectId;\r\n                                    }\r\n                                }\r\n                            }\r\n                            updateOptions[joinColumn.databaseName] = id;\r\n                        } else {\r\n                            updateOptions[joinColumn.databaseName] = columnValue || subject.newlyGeneratedId || subRelatedEntity.generatedObjectId;\r\n                        }\r\n\r\n                        const updatePromise = this.queryRunner.update(relation.inverseEntityMetadata.tableName, updateOptions, conditions);\r\n                        updatePromises.push(updatePromise);\r\n\r\n                    });\r\n                });\r\n\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n\r\n        // todo: make sure to search in all insertSubjects during updating too if updated entity uses links to the newly persisted entity\r\n    }\r\n\r\n    /**\r\n     * Inserts an entity from the given insert operation into the database.\r\n     * If entity has an generated column, then after saving new generated value will be stored to the InsertOperation.\r\n     * If entity uses class-table-inheritance, then multiple inserts may by performed to save all entities.\r\n     */\r\n    private async insert(subject: Subject, alreadyInsertedSubjects: Subject[]): Promise<any> {\r\n\r\n        const parentEntityMetadata = subject.metadata.parentEntityMetadata;\r\n        const metadata = subject.metadata;\r\n        const entity = subject.entity;\r\n        let newlyGeneratedId: any, parentGeneratedId: any;\r\n\r\n        // if entity uses class table inheritance then we need to separate entity into sub values that will be inserted into multiple tables\r\n        if (metadata.isClassTableChild) { // todo: with current implementation inheritance of multiple class table children will not work\r\n\r\n            // first insert entity values into parent class table\r\n            const parentValuesMap = this.collectColumnsAndValues(parentEntityMetadata, entity, subject.date, undefined, metadata.discriminatorValue, alreadyInsertedSubjects);\r\n            newlyGeneratedId = parentGeneratedId = await this.queryRunner.insert(parentEntityMetadata.tableName, parentValuesMap, parentEntityMetadata.generatedColumn);\r\n\r\n            // second insert entity values into child class table\r\n            const childValuesMap = this.collectColumnsAndValues(metadata, entity, subject.date, newlyGeneratedId, undefined, alreadyInsertedSubjects);\r\n            const secondGeneratedId = await this.queryRunner.insert(metadata.tableName, childValuesMap, metadata.generatedColumn);\r\n            if (!newlyGeneratedId && secondGeneratedId) newlyGeneratedId = secondGeneratedId;\r\n\r\n        } else { // in the case when class table inheritance is not used\r\n\r\n            const valuesMap = this.collectColumnsAndValues(metadata, entity, subject.date, undefined, undefined, alreadyInsertedSubjects);\r\n            newlyGeneratedId = await this.queryRunner.insert(metadata.tableName, valuesMap, metadata.generatedColumn);\r\n        }\r\n\r\n        if (parentGeneratedId)\r\n            subject.parentGeneratedId = parentGeneratedId;\r\n\r\n        // todo: better if insert method will return object with all generated ids, object id, etc.\r\n        if (newlyGeneratedId) {\r\n            if (metadata.generatedColumn) {\r\n                subject.newlyGeneratedId = newlyGeneratedId;\r\n\r\n            } else if (metadata.objectIdColumn) {\r\n                subject.generatedObjectId = newlyGeneratedId;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private collectColumns(columns: ColumnMetadata[], entity: ObjectLiteral, object: ObjectLiteral) {\r\n        columns.forEach(column => {\r\n            if (column.isVirtual || column.isParentId || column.isDiscriminator)\r\n                return;\r\n\r\n            const value = entity[column.propertyName];\r\n            if (value === undefined)\r\n                return;\r\n\r\n            object[column.databaseNameWithoutPrefixes] = this.connection.driver.preparePersistentValue(value, column); // todo: maybe preparePersistentValue is not responsibility of this class\r\n        });\r\n    }\r\n\r\n    private collectEmbeds(embed: EmbeddedMetadata, entity: ObjectLiteral, object: ObjectLiteral) {\r\n\r\n        if (embed.isArray) {\r\n            if (entity[embed.propertyName] instanceof Array) {\r\n                if (!object[embed.prefix])\r\n                    object[embed.prefix] = [];\r\n\r\n                entity[embed.propertyName].forEach((subEntity: any, index: number) => {\r\n                    if (!object[embed.prefix][index])\r\n                        object[embed.prefix][index] = {};\r\n                    this.collectColumns(embed.columns, subEntity, object[embed.prefix][index]);\r\n                    embed.embeddeds.forEach(childEmbed => this.collectEmbeds(childEmbed, subEntity, object[embed.prefix][index]));\r\n                });\r\n            }\r\n        } else {\r\n            if (entity[embed.propertyName] !== undefined) {\r\n                if (!object[embed.prefix])\r\n                    object[embed.prefix] = {};\r\n                this.collectColumns(embed.columns, entity[embed.propertyName], object[embed.prefix]);\r\n                embed.embeddeds.forEach(childEmbed => this.collectEmbeds(childEmbed, entity[embed.propertyName], object[embed.prefix]));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collects columns and values for the insert operation.\r\n     */\r\n    private collectColumnsAndValues(metadata: EntityMetadata, entity: ObjectLiteral, date: Date, parentIdColumnValue: any, discriminatorValue: any, alreadyInsertedSubjects: Subject[]): ObjectLiteral {\r\n\r\n        const values: ObjectLiteral = {};\r\n\r\n        if (this.connection.driver instanceof MongoDriver) {\r\n            this.collectColumns(metadata.ownColumns, entity, values);\r\n            metadata.embeddeds.forEach(embed => this.collectEmbeds(embed, entity, values));\r\n\r\n        } else {\r\n            metadata.columns.forEach(column => {\r\n                if (column.isVirtual || column.isParentId || column.isDiscriminator)\r\n                    return;\r\n\r\n                const value = column.getEntityValue(entity);\r\n                if (value === null || value === undefined) // todo: probably check for null should not be there\r\n                    return;\r\n\r\n                values[column.databaseName] = this.connection.driver.preparePersistentValue(value, column); // todo: maybe preparePersistentValue is not responsibility of this class\r\n            });\r\n        }\r\n\r\n        metadata.relationsWithJoinColumns.forEach(relation => {\r\n            relation.joinColumns.forEach(joinColumn => {\r\n\r\n                let relationValue: any;\r\n                const value = relation.getEntityValue(entity);\r\n\r\n                if (value) {\r\n                    // if relation value is stored in the entity itself then use it from there\r\n                    const relationId = joinColumn.referencedColumn!.getEntityValue(value); // relation.getInverseEntityRelationId(value); // todo: check it\r\n                    if (relationId) {\r\n                        relationValue = relationId;\r\n                    }\r\n\r\n                    // otherwise try to find relational value from just inserted subjects\r\n                    const alreadyInsertedSubject = alreadyInsertedSubjects.find(insertedSubject => {\r\n                        return insertedSubject.entity === value;\r\n                    });\r\n                    if (alreadyInsertedSubject) {\r\n                        const referencedColumn = joinColumn.referencedColumn!;\r\n                        // if join column references to the primary generated column then seek in the newEntityId of the insertedSubject\r\n                        if (referencedColumn.referencedColumn && referencedColumn.referencedColumn!.isGenerated) {\r\n                            if (referencedColumn.isParentId) {\r\n                                relationValue = alreadyInsertedSubject.parentGeneratedId;\r\n                            }\r\n                            // todo: what if reference column is not generated?\r\n                            // todo: what if reference column is not related to table inheritance?\r\n                        }\r\n\r\n                        if (referencedColumn.isGenerated)\r\n                            relationValue = alreadyInsertedSubject.newlyGeneratedId;\r\n                        if (referencedColumn.isObjectId)\r\n                            relationValue = alreadyInsertedSubject.generatedObjectId;\r\n                        // if it references to create or update date columns\r\n                        if (referencedColumn.isCreateDate || referencedColumn.isUpdateDate)\r\n                            relationValue = this.connection.driver.preparePersistentValue(alreadyInsertedSubject.date, referencedColumn);\r\n                        // if it references to version column\r\n                        if (referencedColumn.isVersion)\r\n                            relationValue = this.connection.driver.preparePersistentValue(1, referencedColumn);\r\n                    }\r\n                } else if (relation.inverseRelation) {\r\n                    const inverseSubject = this.allSubjects.find(subject => {\r\n                        if (!subject.hasEntity || subject.entityTarget !== relation.inverseRelation!.target)\r\n                            return false;\r\n\r\n                        const inverseRelationValue = relation.inverseRelation!.getEntityValue(subject.entity);\r\n                        if (inverseRelationValue) {\r\n                            if (inverseRelationValue instanceof Array) {\r\n                                return inverseRelationValue.find(subValue => subValue === subValue);\r\n                            } else {\r\n                                return inverseRelationValue === entity;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (inverseSubject && joinColumn.referencedColumn!.getEntityValue(inverseSubject.entity)) {\r\n                        relationValue = joinColumn.referencedColumn!.getEntityValue(inverseSubject.entity);\r\n                    }\r\n                }\r\n\r\n                if (relationValue) {\r\n                    values[joinColumn.databaseName] = relationValue;\r\n                }\r\n\r\n            });\r\n        });\r\n\r\n        // add special column and value - date of creation\r\n        if (metadata.createDateColumn) {\r\n            const value = this.connection.driver.preparePersistentValue(date, metadata.createDateColumn);\r\n            values[metadata.createDateColumn.databaseName] = value;\r\n        }\r\n\r\n        // add special column and value - date of updating\r\n        if (metadata.updateDateColumn) {\r\n            const value = this.connection.driver.preparePersistentValue(date, metadata.updateDateColumn);\r\n            values[metadata.updateDateColumn.databaseName] = value;\r\n        }\r\n\r\n        // add special column and value - version column\r\n        if (metadata.versionColumn) {\r\n            const value = this.connection.driver.preparePersistentValue(1, metadata.versionColumn);\r\n            values[metadata.versionColumn.databaseName] = value;\r\n        }\r\n\r\n        // add special column and value - discriminator value (for tables using table inheritance)\r\n        if (metadata.discriminatorColumn) {\r\n            const value = this.connection.driver.preparePersistentValue(discriminatorValue || metadata.discriminatorValue, metadata.discriminatorColumn);\r\n            values[metadata.discriminatorColumn.databaseName] = value;\r\n        }\r\n\r\n        // add special column and value - tree level and tree parents (for tree-type tables)\r\n        if (metadata.treeLevelColumn && metadata.treeParentRelation) {\r\n            const parentEntity = metadata.treeParentRelation.getEntityValue(entity);\r\n            const parentLevel = parentEntity ? (metadata.treeLevelColumn.getEntityValue(parentEntity) || 0) : 0;\r\n\r\n            values[metadata.treeLevelColumn.databaseName] = parentLevel + 1;\r\n        }\r\n\r\n        // add special column and value - parent id column (for tables using table inheritance)\r\n        if (metadata.parentEntityMetadata && metadata.parentIdColumns.length) { // todo: should be array of primary keys\r\n            values[metadata.parentIdColumns[0].databaseName] = parentIdColumnValue || metadata.parentEntityMetadata.primaryColumns[0].getEntityValue(entity);\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Insertion into closure tables\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Inserts all given subjects into closure table.\r\n     */\r\n    private executeInsertClosureTableOperations(/*, updatesByRelations: Subject[]*/) { // todo: what to do with updatesByRelations\r\n        const promises = this.insertSubjects\r\n            .filter(subject => subject.metadata.isClosure)\r\n            .map(async subject => {\r\n                // const relationsUpdateMap = this.findUpdateOperationForEntity(updatesByRelations, insertSubjects, subject.entity);\r\n                // subject.treeLevel = await this.insertIntoClosureTable(subject, relationsUpdateMap);\r\n                await this.insertClosureTableValues(subject);\r\n            });\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Inserts given subject into closure table.\r\n     */\r\n    private async insertClosureTableValues(subject: Subject): Promise<void> {\r\n        // todo: since closure tables do not support compose primary keys - throw an exception?\r\n        // todo: what if parent entity or parentEntityId is empty?!\r\n        const tableName = subject.metadata.closureJunctionTable.tableName;\r\n        const referencedColumn = subject.metadata.treeParentRelation!.joinColumns[0].referencedColumn!; // todo: check if joinColumn works\r\n        // todo: fix joinColumns[0] usage\r\n\r\n        let newEntityId = referencedColumn.getEntityValue(subject.entity);\r\n        if (!newEntityId && referencedColumn.isGenerated) {\r\n            newEntityId = subject.newlyGeneratedId;\r\n            // we should not handle object id here because closure tables are not supported by mongodb driver.\r\n        } // todo: implement other special column types too\r\n\r\n        const parentEntity = subject.metadata.treeParentRelation!.getEntityValue(subject.entity);\r\n        let parentEntityId: any = 0; // zero is important\r\n        if (parentEntity) {\r\n            parentEntityId = referencedColumn.getEntityValue(parentEntity);\r\n            if (!parentEntityId && referencedColumn.isGenerated) {\r\n                const parentInsertedSubject = this.insertSubjects.find(subject => subject.entity === parentEntity);\r\n                // todo: throw exception if parentInsertedSubject is not set\r\n                parentEntityId = parentInsertedSubject!.newlyGeneratedId;\r\n            } // todo: implement other special column types too\r\n        }\r\n\r\n        // try to find parent entity id in some other entity that has this entity in its children\r\n        if (!parentEntityId) {\r\n            const parentSubject = this.allSubjects.find(allSubject => {\r\n                if (!allSubject.hasEntity || !allSubject.metadata.isClosure || !allSubject.metadata.treeChildrenRelation)\r\n                    return false;\r\n\r\n                const children = subject.metadata.treeChildrenRelation!.getEntityValue(allSubject.entity);\r\n                return children instanceof Array ? children.indexOf(subject.entity) !== -1 : false;\r\n            });\r\n\r\n            if (parentSubject) {\r\n                parentEntityId = referencedColumn.getEntityValue(parentSubject);\r\n                if (!parentEntityId && parentSubject.newlyGeneratedId) { // if still not found then it means parent just inserted with generated column\r\n                    parentEntityId = parentSubject.newlyGeneratedId;\r\n                }\r\n            }\r\n        }\r\n\r\n        // if parent entity exist then insert a new row into closure table\r\n        subject.treeLevel = await this.queryRunner.insertIntoClosureTable(tableName, newEntityId, parentEntityId, !!subject.metadata.treeLevelColumn);\r\n\r\n        if (subject.metadata.treeLevelColumn) {\r\n            const values = { [subject.metadata.treeLevelColumn.databaseName]: subject.treeLevel };\r\n            await this.queryRunner.update(subject.metadata.tableName, values, { [referencedColumn.databaseName]: newEntityId });\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Update\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Updates all given subjects in the database.\r\n     */\r\n    private async executeUpdateOperations(): Promise<void> {\r\n        await Promise.all(this.updateSubjects.map(subject => this.update(subject)));\r\n    }\r\n\r\n    /**\r\n     * Updates given subject in the database.\r\n     */\r\n    private async update(subject: Subject): Promise<void> {\r\n        const entity = subject.entity;\r\n\r\n        if (this.connection.driver instanceof MongoDriver) {\r\n            const idMap = subject.metadata.getDatabaseEntityIdMap(entity);\r\n            if (!idMap)\r\n                throw new Error(`Internal error. Cannot get id of the updating entity.`);\r\n\r\n            /*const value: ObjectLiteral = {};\r\n            subject.metadata.columns.forEach(column => {\r\n                const columnValue = column.getEntityValue(entity);\r\n                if (columnValue !== undefined)\r\n                    value[column.databaseName] = columnValue;\r\n            });*/\r\n            // addEmbeddedValuesRecursively(entity, value, subject.metadata.embeddeds);\r\n\r\n            const value: ObjectLiteral = {};\r\n            this.collectColumns(subject.metadata.ownColumns, entity, value);\r\n            subject.metadata.embeddeds.forEach(embed => this.collectEmbeds(embed, entity, value));\r\n\r\n            // if number of updated columns = 0 no need to update updated date and version columns\r\n            if (Object.keys(value).length === 0)\r\n                return;\r\n\r\n            if (subject.metadata.updateDateColumn)\r\n                value[subject.metadata.updateDateColumn.databaseName] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.updateDateColumn);\r\n\r\n            if (subject.metadata.versionColumn)\r\n                value[subject.metadata.versionColumn.databaseName] = this.connection.driver.preparePersistentValue(subject.metadata.versionColumn.getEntityValue(entity) + 1, subject.metadata.versionColumn);\r\n\r\n            return this.queryRunner.update(subject.metadata.tableName, value, idMap);\r\n        }\r\n\r\n        // we group by table name, because metadata can have different table names\r\n        const valueMaps: { tableName: string, metadata: EntityMetadata, values: ObjectLiteral }[] = [];\r\n\r\n        // console.log(subject.diffColumns);\r\n        subject.diffColumns.forEach(column => {\r\n            // if (!column.entityTarget) return; // todo: how this can be possible?\r\n            const metadata = this.connection.getMetadata(column.entityMetadata.target);\r\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === metadata.tableName);\r\n            if (!valueMap) {\r\n                valueMap = { tableName: metadata.tableName, metadata: metadata, values: {} };\r\n                valueMaps.push(valueMap);\r\n            }\r\n\r\n            valueMap.values[column.databaseName] = this.connection.driver.preparePersistentValue(column.getEntityValue(entity), column);\r\n        });\r\n\r\n        subject.diffRelations.forEach(relation => {\r\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === relation.entityMetadata.tableName);\r\n            if (!valueMap) {\r\n                valueMap = { tableName: relation.entityMetadata.tableName, metadata: relation.entityMetadata, values: {} };\r\n                valueMaps.push(valueMap);\r\n            }\r\n\r\n            const value = relation.getEntityValue(entity);\r\n            relation.joinColumns.forEach(joinColumn => {\r\n                valueMap!.values[joinColumn.databaseName] = value !== null && value !== undefined ? value[joinColumn.referencedColumn!.propertyName] : null; // todo: should not have a call to primaryColumn, instead join column metadata should be used\r\n            });\r\n        });\r\n\r\n        // if number of updated columns = 0 no need to update updated date and version columns\r\n        if (Object.keys(valueMaps).length === 0)\r\n            return;\r\n\r\n        if (subject.metadata.updateDateColumn) {\r\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.tableName);\r\n            if (!valueMap) {\r\n                valueMap = { tableName: subject.metadata.tableName, metadata: subject.metadata, values: {} };\r\n                valueMaps.push(valueMap);\r\n            }\r\n\r\n            valueMap.values[subject.metadata.updateDateColumn.databaseName] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.updateDateColumn);\r\n        }\r\n\r\n        if (subject.metadata.versionColumn) {\r\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.tableName);\r\n            if (!valueMap) {\r\n                valueMap = { tableName: subject.metadata.tableName, metadata: subject.metadata, values: {} };\r\n                valueMaps.push(valueMap);\r\n            }\r\n\r\n            valueMap.values[subject.metadata.versionColumn.databaseName] = this.connection.driver.preparePersistentValue(subject.metadata.versionColumn.getEntityValue(entity) + 1, subject.metadata.versionColumn);\r\n        }\r\n\r\n        if (subject.metadata.parentEntityMetadata) {\r\n            if (subject.metadata.parentEntityMetadata.updateDateColumn) {\r\n                let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.parentEntityMetadata.tableName);\r\n                if (!valueMap) {\r\n                    valueMap = {\r\n                        tableName: subject.metadata.parentEntityMetadata.tableName,\r\n                        metadata: subject.metadata.parentEntityMetadata,\r\n                        values: {}\r\n                    };\r\n                    valueMaps.push(valueMap);\r\n                }\r\n\r\n                valueMap.values[subject.metadata.parentEntityMetadata.updateDateColumn.databaseName] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.parentEntityMetadata.updateDateColumn);\r\n            }\r\n\r\n            if (subject.metadata.parentEntityMetadata.versionColumn) {\r\n                let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.parentEntityMetadata.tableName);\r\n                if (!valueMap) {\r\n                    valueMap = {\r\n                        tableName: subject.metadata.parentEntityMetadata.tableName,\r\n                        metadata: subject.metadata.parentEntityMetadata,\r\n                        values: {}\r\n                    };\r\n                    valueMaps.push(valueMap);\r\n                }\r\n\r\n                valueMap.values[subject.metadata.parentEntityMetadata.versionColumn.databaseName] = this.connection.driver.preparePersistentValue(subject.metadata.parentEntityMetadata.versionColumn.getEntityValue(entity) + 1, subject.metadata.parentEntityMetadata.versionColumn);\r\n            }\r\n        }\r\n\r\n        await Promise.all(valueMaps.map(valueMap => {\r\n            const idMap = valueMap.metadata.getDatabaseEntityIdMap(entity);\r\n            if (!idMap)\r\n                throw new Error(`Internal error. Cannot get id of the updating entity.`);\r\n\r\n            return this.queryRunner.update(valueMap.tableName, valueMap.values, idMap);\r\n        }));\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Update only relations\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Updates relations of all given subjects in the database.\r\n     */\r\n    private executeUpdateRelations() {\r\n        return Promise.all(this.relationUpdateSubjects.map(subject => this.updateRelations(subject)));\r\n    }\r\n\r\n    /**\r\n     * Updates relations of the given subject in the database.\r\n     */\r\n    private async updateRelations(subject: Subject) {\r\n        const values: ObjectLiteral = {};\r\n        subject.relationUpdates.forEach(setRelation => {\r\n            setRelation.relation.joinColumns.forEach(joinColumn => {\r\n                const value = setRelation.value ? setRelation.value[joinColumn.referencedColumn!.propertyName] : null;\r\n                values[joinColumn.databaseName] = value; // todo: || fromInsertedSubjects ??\r\n            });\r\n        });\r\n\r\n        const idMap = subject.metadata.getDatabaseEntityIdMap(subject.databaseEntity);\r\n        if (!idMap)\r\n            throw new Error(`Internal error. Cannot get id of the updating entity.`);\r\n\r\n        return this.queryRunner.update(subject.metadata.tableName, values, idMap);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Remove\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Removes all given subjects from the database.\r\n     */\r\n    private async executeRemoveOperations(): Promise<void> {\r\n        await PromiseUtils.runInSequence(this.removeSubjects, async subject => await this.remove(subject));\r\n    }\r\n\r\n    /**\r\n     * Updates given subject from the database.\r\n     */\r\n    private async remove(subject: Subject): Promise<void> {\r\n        if (subject.metadata.parentEntityMetadata) { // this code should not be there. it should be handled by  subject.metadata.getEntityIdColumnMap\r\n            const parentConditions: ObjectLiteral = {};\r\n            subject.metadata.primaryColumns.forEach(column => {\r\n                parentConditions[column.databaseName] = column.getEntityValue(subject.databaseEntity);\r\n            });\r\n            await this.queryRunner.delete(subject.metadata.parentEntityMetadata.tableName, parentConditions);\r\n\r\n            const childConditions: ObjectLiteral = {};\r\n            subject.metadata.primaryColumns.forEach(column => {\r\n                childConditions[column.databaseName] = column.getEntityValue(subject.databaseEntity);\r\n            });\r\n            await this.queryRunner.delete(subject.metadata.tableName, childConditions);\r\n        } else {\r\n            await this.queryRunner.delete(subject.metadata.tableName, subject.metadata.getDatabaseEntityIdMap(subject.databaseEntity)!);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Insertion into junction tables\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Inserts into database junction tables all given array of subjects junction data.\r\n     */\r\n    private async executeInsertJunctionsOperations(): Promise<void> {\r\n        const promises: Promise<any>[] = [];\r\n        this.allSubjects.forEach(subject => {\r\n            subject.junctionInserts.forEach(junctionInsert => {\r\n                promises.push(this.insertJunctions(subject, junctionInsert));\r\n            });\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Inserts into database junction table given subject's junction insert data.\r\n     */\r\n    private async insertJunctions(subject: Subject, junctionInsert: JunctionInsert): Promise<void> {\r\n        // I think here we can only support to work only with single primary key entities\r\n\r\n        const getRelationId = (entity: ObjectLiteral, joinColumns: ColumnMetadata[]): any[] => {\r\n            return joinColumns.map(joinColumn => {\r\n                const id = joinColumn.referencedColumn!.getEntityValue(entity);\r\n                if (!id && joinColumn.referencedColumn!.isGenerated) {\r\n                    const insertSubject = this.insertSubjects.find(subject => subject.entity === entity);\r\n                    if (insertSubject)\r\n                        return insertSubject.newlyGeneratedId;\r\n                }\r\n                if (!id && joinColumn.referencedColumn!.isObjectId) {\r\n                    const insertSubject = this.insertSubjects.find(subject => subject.entity === entity);\r\n                    if (insertSubject)\r\n                        return insertSubject.generatedObjectId;\r\n                }\r\n                // todo: implement other special referenced column types (update date, create date, version, discriminator column, etc.)\r\n\r\n                return id;\r\n            });\r\n        };\r\n\r\n        const relation = junctionInsert.relation;\r\n        const joinColumns = relation.isManyToManyOwner ? relation.joinColumns : relation.inverseRelation!.inverseJoinColumns;\r\n        const ownId = getRelationId(subject.entity, joinColumns);\r\n\r\n        if (!ownId.length)\r\n            throw new Error(`Cannot insert object of ${subject.entityTarget} type. Looks like its not persisted yet, or cascades are not set on the relation.`); // todo: better error message\r\n\r\n        const promises = junctionInsert.junctionEntities.map(newBindEntity => {\r\n\r\n            // get relation id from the newly bind entity\r\n            const joinColumns = relation.isManyToManyOwner ? relation.inverseJoinColumns : relation.inverseRelation!.joinColumns;\r\n            const relationId = getRelationId(newBindEntity, joinColumns);\r\n\r\n            // if relation id still does not exist - we arise an error\r\n            if (!relationId)\r\n                throw new Error(`Cannot insert object of ${(newBindEntity.constructor as any).name} type. Looks like its not persisted yet, or cascades are not set on the relation.`); // todo: better error message\r\n\r\n            const columns = relation.junctionEntityMetadata!.columns.map(column => column.databaseName);\r\n            const values = relation.isOwning ? [...ownId, ...relationId] : [...relationId, ...ownId];\r\n\r\n            return this.queryRunner.insert(relation.junctionEntityMetadata!.tableName, OrmUtils.zipObject(columns, values));\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Remove from junction tables\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Removes from database junction tables all given array of subjects removal junction data.\r\n     */\r\n    private async executeRemoveJunctionsOperations(): Promise<void> {\r\n        const promises: Promise<any>[] = [];\r\n        this.allSubjects.forEach(subject => {\r\n            subject.junctionRemoves.forEach(junctionRemove => {\r\n                promises.push(this.removeJunctions(subject, junctionRemove));\r\n            });\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Removes from database junction table all given subject's removal junction data.\r\n     */\r\n    private async removeJunctions(subject: Subject, junctionRemove: JunctionRemove) {\r\n        const junctionMetadata = junctionRemove.relation.junctionEntityMetadata!;\r\n        const entity = subject.hasEntity ? subject.entity : subject.databaseEntity;\r\n\r\n        const firstJoinColumns = junctionRemove.relation.isOwning ? junctionRemove.relation.joinColumns : junctionRemove.relation.inverseRelation!.inverseJoinColumns;\r\n        const secondJoinColumns = junctionRemove.relation.isOwning ? junctionRemove.relation.inverseJoinColumns : junctionRemove.relation.inverseRelation!.joinColumns;\r\n        let conditions: ObjectLiteral = {};\r\n        firstJoinColumns.forEach(joinColumn => {\r\n            conditions[joinColumn.databaseName] = joinColumn.referencedColumn!.getEntityValue(entity);\r\n        });\r\n\r\n        const removePromises = junctionRemove.junctionRelationIds.map(relationIds => {\r\n            let inverseConditions: ObjectLiteral = {};\r\n            secondJoinColumns.forEach(joinColumn => {\r\n                inverseConditions[joinColumn.databaseName] = joinColumn.referencedColumn!.getEntityValue(relationIds);\r\n            });\r\n            return this.queryRunner.delete(junctionMetadata.tableName, Object.assign({}, inverseConditions, conditions));\r\n        });\r\n\r\n        await Promise.all(removePromises);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Refresh entity values after persistence\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Updates all special columns of the saving entities (create date, update date, versioning).\r\n     */\r\n    private updateSpecialColumnsInPersistedEntities() {\r\n\r\n        // update entity columns that gets updated on each entity insert\r\n        this.insertSubjects.forEach(subject => {\r\n            if (subject.generatedObjectId && subject.metadata.objectIdColumn)\r\n                subject.metadata.objectIdColumn.setEntityValue(subject.entity, subject.generatedObjectId);\r\n\r\n            subject.metadata.primaryColumns.forEach(primaryColumn => {\r\n                if (subject.newlyGeneratedId)\r\n                    primaryColumn.setEntityValue(subject.entity, subject.newlyGeneratedId);\r\n            });\r\n            subject.metadata.primaryColumns.forEach(primaryColumn => {\r\n                if (subject.parentGeneratedId)\r\n                    primaryColumn.setEntityValue(subject.entity, subject.parentGeneratedId);\r\n            });\r\n\r\n            if (subject.metadata.updateDateColumn)\r\n                subject.metadata.updateDateColumn.setEntityValue(subject.entity, subject.date);\r\n            if (subject.metadata.createDateColumn)\r\n                subject.metadata.createDateColumn.setEntityValue(subject.entity, subject.date);\r\n            if (subject.metadata.versionColumn)\r\n                subject.metadata.versionColumn.setEntityValue(subject.entity, 1);\r\n            if (subject.metadata.treeLevelColumn) {\r\n                // const parentEntity = insertOperation.entity[metadata.treeParentMetadata.propertyName];\r\n                // const parentLevel = parentEntity ? (parentEntity[metadata.treeLevelColumn.propertyName] || 0) : 0;\r\n                subject.metadata.treeLevelColumn.setEntityValue(subject.entity, subject.treeLevel);\r\n            }\r\n            /*if (subject.metadata.hasTreeChildrenCountColumn) {\r\n                 subject.entity[subject.metadata.treeChildrenCountColumn.propertyName] = 0;\r\n            }*/\r\n        });\r\n\r\n        // update special columns that gets updated on each entity update\r\n        this.updateSubjects.forEach(subject => {\r\n            if (subject.metadata.updateDateColumn)\r\n                subject.metadata.updateDateColumn.setEntityValue(subject.entity, subject.date);\r\n            if (subject.metadata.versionColumn)\r\n                subject.metadata.versionColumn.setEntityValue(subject.entity, subject.metadata.versionColumn.getEntityValue(subject.entity) + 1);\r\n        });\r\n\r\n        // remove ids from the entities that were removed\r\n        this.removeSubjects\r\n            .filter(subject => subject.hasEntity)\r\n            .forEach(subject => {\r\n                subject.metadata.primaryColumns.forEach(primaryColumn => {\r\n                    primaryColumn.setEntityValue(subject.entity, undefined);\r\n                });\r\n            });\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\n\r\n/**\r\n * Transforms plain old javascript object\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class PlainObjectToNewEntityTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transform<T>(newEntity: T, object: ObjectLiteral, metadata: EntityMetadata): T {\r\n        this.groupAndTransform(newEntity, object, metadata);\r\n        return newEntity;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\r\n     * we need to group our result and we must have some unique id (primary key in our case)\r\n     */\r\n    private groupAndTransform(entity: any, object: ObjectLiteral, metadata: EntityMetadata): void {\r\n\r\n        // copy regular column properties from the given object\r\n        metadata.columns\r\n            .filter(column => object.hasOwnProperty(column.propertyName))\r\n            .forEach(column => entity[column.propertyName] = object[column.propertyName]); // todo: also need to be sure that type is correct\r\n\r\n        // if relation is loaded then go into it recursively and transform its values too\r\n        metadata.relations\r\n            .filter(relation => object.hasOwnProperty(relation.propertyName))\r\n            .forEach(relation => {\r\n                const relationMetadata = relation.inverseEntityMetadata;\r\n                if (!relationMetadata)\r\n                    throw new Error(\"Relation metadata for the relation \" + metadata.name + \"#\" + relation.propertyName + \" is missing\");\r\n\r\n                if (relation.isManyToMany || relation.isOneToMany) {\r\n                    if (object[relation.propertyName] instanceof Array) {\r\n                        entity[relation.propertyName] = object[relation.propertyName].map((subObject: any) => {\r\n                            let subEntity = relationMetadata.create();\r\n                            // todo: support custom initial fields here\r\n                            if (entity[relation.propertyName] instanceof Array) {\r\n                                const existRelation = entity[relation.propertyName].find((subEntity: any) => {\r\n                                    return subEntity[relation.propertyName] === subObject[relation.propertyName];\r\n                                });\r\n                                if (existRelation)\r\n                                    this.groupAndTransform(subEntity, existRelation, relationMetadata);\r\n                            }\r\n\r\n                            this.groupAndTransform(subEntity, subObject, relationMetadata);\r\n                            return subEntity;\r\n                        });\r\n                    } else {\r\n                        entity[relation.propertyName] = object[relation.propertyName];\r\n                    }\r\n                } else {\r\n                    if (object[relation.propertyName]) {\r\n                        const subEntity = relationMetadata.create();\r\n                        if (entity[relation.propertyName])\r\n                            this.groupAndTransform(subEntity, entity[relation.propertyName], relationMetadata);\r\n\r\n                        this.groupAndTransform(subEntity, object[relation.propertyName], relationMetadata);\r\n                        entity[relation.propertyName] = subEntity;\r\n                    } else {\r\n                        entity[relation.propertyName] = object[relation.propertyName];\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n}","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nclass LoadMapItem {\r\n\r\n    entity?: ObjectLiteral;\r\n    plainEntity: ObjectLiteral;\r\n    metadata: EntityMetadata;\r\n    parentLoadMapItem?: LoadMapItem;\r\n    relation?: RelationMetadata;\r\n\r\n    constructor(plainEntity: ObjectLiteral,\r\n                metadata: EntityMetadata,\r\n                parentLoadMapItem?: LoadMapItem,\r\n                relation?: RelationMetadata) {\r\n        this.plainEntity = plainEntity;\r\n        this.metadata = metadata;\r\n        this.parentLoadMapItem = parentLoadMapItem;\r\n        this.relation = relation;\r\n    }\r\n\r\n    get target(): Function|string {\r\n        return this.metadata.target;\r\n    }\r\n\r\n    get id(): any {\r\n        return this.metadata.getEntityIdMixedMap(this.plainEntity);\r\n    }\r\n\r\n    compareEntities(entity1: any, entity2: any) {\r\n        return this.metadata.compareEntities(entity1, entity2);\r\n    }\r\n\r\n}\r\n\r\nclass LoadMap {\r\n\r\n    loadMapItems: LoadMapItem[] = [];\r\n\r\n    get mainLoadMapItem(): LoadMapItem|undefined {\r\n        return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);\r\n    }\r\n\r\n    addLoadMap(newLoadMap: LoadMapItem) {\r\n        const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);\r\n        if (!item)\r\n            this.loadMapItems.push(newLoadMap);\r\n    }\r\n\r\n    fillEntities(target: Function|string, entities: any[]) {\r\n        entities.forEach(entity => {\r\n            const item = this.loadMapItems.find(loadMapItem => {\r\n                return loadMapItem.target === target && loadMapItem.compareEntities(entity, loadMapItem.plainEntity);\r\n            });\r\n            if (item)\r\n                item.entity = entity;\r\n        });\r\n    }\r\n\r\n    groupByTargetIds(): { target: Function|string, ids: any[] }[] {\r\n        const groups: { target: Function|string, ids: any[] }[] = [];\r\n        this.loadMapItems.forEach(loadMapItem => {\r\n            let group = groups.find(group => group.target === loadMapItem.target);\r\n            if (!group) {\r\n                group = { target: loadMapItem.target, ids: [] };\r\n                groups.push(group);\r\n            }\r\n\r\n            group.ids.push(loadMapItem.id);\r\n        });\r\n        return groups;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Transforms plain old javascript object\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class PlainObjectToDatabaseEntityTransformer {\r\n\r\n    constructor(private entityManager: EntityManager) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    async transform(plainObject: ObjectLiteral, metadata: EntityMetadata): Promise<ObjectLiteral|undefined> {\r\n\r\n        // if plain object does not have id then nothing to load really\r\n        if (!metadata.checkIfObjectContainsAllPrimaryKeys(plainObject))\r\n            return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\r\n\r\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\r\n        const loadMap = new LoadMap();\r\n        const fillLoadMap = (entity: ObjectLiteral, entityMetadata: EntityMetadata, parentLoadMapItem?: LoadMapItem, relation?: RelationMetadata) => {\r\n            const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\r\n            loadMap.addLoadMap(item);\r\n\r\n            entityMetadata\r\n                .extractRelationValuesFromEntity(entity, metadata.relations)\r\n                .filter(value => value !== null && value !== undefined)\r\n                .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\r\n        };\r\n        fillLoadMap(plainObject, metadata);\r\n        // load all entities and store them in the load map\r\n        await Promise.all(loadMap.groupByTargetIds().map(targetWithIds => { // todo: fix type hinting\r\n            return this.entityManager\r\n                .findByIds<ObjectLiteral>(targetWithIds.target as any, targetWithIds.ids)\r\n                .then(entities => loadMap.fillEntities(targetWithIds.target, entities));\r\n        }));\r\n\r\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\r\n        loadMap.loadMapItems.forEach(loadMapItem => {\r\n            if (!loadMapItem.relation ||\r\n                !loadMapItem.entity ||\r\n                !loadMapItem.parentLoadMapItem ||\r\n                !loadMapItem.parentLoadMapItem.entity)\r\n                return;\r\n\r\n            if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\r\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\r\n                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\r\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\r\n\r\n            } else {\r\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\r\n            }\r\n        });\r\n\r\n        return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;\r\n    }\r\n\r\n}","/**\r\n * Thrown if custom repository was not found.\r\n */\r\nexport class CustomRepositoryNotFoundError extends Error {\r\n    name = \"CustomRepositoryNotFoundError\";\r\n\r\n    constructor(repository: any) {\r\n        super();\r\n        this.message = `Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name } was not found. ` +\r\n            `Did you forgot to put @EntityRepository decorator on it?`;\r\n    }\r\n\r\n}","/**\r\n * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.\r\n */\r\nexport class CustomRepositoryDoesNotHaveEntityError extends Error {\r\n    name = \"CustomRepositoryDoesNotHaveEntityError\";\r\n\r\n    constructor(repository: any) {\r\n        super(`Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name} does not have managed entity. ` +\r\n        `Did you forget to specify entity for it @EntityRepository(MyEntity)? `);\r\n    }\r\n\r\n}","import {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\nimport {Repository} from \"./Repository\";\r\nimport {TreeRepository} from \"./TreeRepository\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {CustomRepositoryDoesNotHaveEntityError} from \"./error/CustomRepositoryDoesNotHaveEntityError\";\r\nimport {getMetadataArgsStorage} from \"../index\";\r\nimport {CustomRepositoryNotFoundError} from \"./error/CustomRepositoryNotFoundError\";\r\n\r\n/**\r\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\r\n * Contains all most-necessary methods to simplify code in the custom repository.\r\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\r\n *\r\n * @experimental\r\n */\r\nexport class AbstractRepository<Entity extends ObjectLiteral> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods Set Dynamically\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets entity manager that allows to perform repository operations with any entity.\r\n     */\r\n    protected manager: EntityManager;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets the original ORM repository for the entity that is managed by this repository.\r\n     * If current repository does not manage any entity, then exception will be thrown.\r\n     */\r\n    protected get repository(): Repository<Entity> {\r\n        const target = this.getCustomRepositoryTarget(this as any);\r\n        if (!target)\r\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\r\n\r\n        return this.manager.getRepository<Entity>(target);\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\r\n     * If current repository does not manage any entity, then exception will be thrown.\r\n     */\r\n    protected get treeRepository(): TreeRepository<Entity> {\r\n        const target = this.getCustomRepositoryTarget(this as any);\r\n        if (!target)\r\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\r\n\r\n        return this.manager.getTreeRepository<Entity>(target);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new query builder for the repository's entity that can be used to build a sql query.\r\n     * If current repository does not manage any entity, then exception will be thrown.\r\n     */\r\n    protected createQueryBuilder(alias: string): QueryBuilder<Entity> {\r\n        const target = this.getCustomRepositoryTarget(this.constructor);\r\n        if (!target)\r\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\r\n\r\n        return this.manager.getRepository(target).createQueryBuilder(alias);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder for the given entity that can be used to build a sql query.\r\n     */\r\n    protected createQueryBuilderFor<T>(entity: ObjectType<T>, alias: string): QueryBuilder<T> {\r\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM repository for the given entity class.\r\n     */\r\n    protected getRepositoryFor<T>(entity: ObjectType<T>): Repository<T> {\r\n        return this.manager.getRepository(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM tree repository for the given entity class.\r\n     */\r\n    protected getTreeRepositoryFor<T>(entity: ObjectType<T>): TreeRepository<T> {\r\n        return this.manager.getTreeRepository(entity);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets custom repository's managed entity.\r\n     * If given custom repository does not manage any entity then undefined will be returned.\r\n     */\r\n    private getCustomRepositoryTarget<T>(customRepository: any): Function|string|undefined {\r\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\r\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\r\n        });\r\n        if (!entityRepositoryMetadataArgs)\r\n            throw new CustomRepositoryNotFoundError(customRepository);\r\n\r\n        return entityRepositoryMetadataArgs.entity;\r\n    }\r\n\r\n}","/**\r\n * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.\r\n */\r\nexport class CustomRepositoryCannotInheritRepositoryError extends Error {\r\n    name = \"CustomRepositoryCannotInheritRepositoryError\";\r\n\r\n    constructor(repository: any) {\r\n        super(`Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +\r\n            ` cannot inherit Repository class without entity being set in the @EntityRepository decorator.`);\r\n    }\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\r\nimport {SaveOptions} from \"../repository/SaveOptions\";\r\nimport {RepositoryAggregator} from \"../repository/RepositoryAggregator\";\r\nimport {NoNeedToReleaseEntityManagerError} from \"./error/NoNeedToReleaseEntityManagerError\";\r\nimport {SpecificRepository} from \"../repository/SpecificRepository\";\r\nimport {MongoRepository} from \"../repository/MongoRepository\";\r\nimport {TreeRepository} from \"../repository/TreeRepository\";\r\nimport {Repository} from \"../repository/Repository\";\r\nimport {RepositoryNotTreeError} from \"../connection/error/RepositoryNotTreeError\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\r\nimport {SubjectBuilder} from \"../persistence/SubjectBuilder\";\r\nimport {SubjectOperationExecutor} from \"../persistence/SubjectOperationExecutor\";\r\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\r\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\r\nimport {CustomRepositoryNotFoundError} from \"../repository/error/CustomRepositoryNotFoundError\";\r\nimport {getMetadataArgsStorage} from \"../index\";\r\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\r\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../repository/error/CustomRepositoryCannotInheritRepositoryError\";\r\n\r\n/**\r\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\r\n * whatever entity type are you passing.\r\n */\r\nexport class EntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Stores temporarily user data.\r\n     * Useful for sharing data with subscribers.\r\n     */\r\n    private data: ObjectLiteral = {};\r\n\r\n    /**\r\n     * Stores all registered repositories.\r\n     */\r\n    private repositoryAggregators: RepositoryAggregator[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param connection Connection to be used in this entity manager\r\n     * @param queryRunnerProvider Custom query runner to be used for operations in this entity manager\r\n     */\r\n    constructor(public connection: Connection,\r\n                protected queryRunnerProvider?: QueryRunnerProvider) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets user data by a given key.\r\n     * Used get stored data stored in a transactional entity manager.\r\n     */\r\n    getData(key: string): any {\r\n        return this.data[key];\r\n    }\r\n\r\n    /**\r\n     * Sets value for the given key in user data.\r\n     * Used to store data in a transactional entity manager which can be accessed in subscribers then.\r\n     */\r\n    setData(key: string, value: any): this {\r\n        this.data[key] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     */\r\n    hasId(entity: any): boolean;\r\n\r\n    /**\r\n     * Checks if entity of given schema name has an id.\r\n     */\r\n    hasId(target: Function|string, entity: any): boolean;\r\n\r\n    /**\r\n     * Checks if entity has an id by its Function type or schema name.\r\n     */\r\n    hasId(targetOrEntity: any|Function|string, maybeEntity?: any): boolean {\r\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\r\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\r\n        const metadata = this.connection.getMetadata(target);\r\n        return metadata.hasId(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(entity: any): any;\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(target: Function|string, entity: any): any;\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(targetOrEntity: any|Function|string, maybeEntity?: any): any {\r\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\r\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\r\n        const metadata = this.connection.getMetadata(target);\r\n        return metadata.getEntityIdMixedMap(entity);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|Function|string, alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        return new QueryBuilder(this.connection, queryRunnerProvider || this.queryRunnerProvider)\r\n            .select(alias)\r\n            .from(metadata.target, alias);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObject: DeepPartial<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObjects: DeepPartial<Entity>[]): Entity[];\r\n\r\n    /**\r\n     * Creates a new entity instance or instances.\r\n     * Can copy properties from the given object into new entities.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObjectOrObjects?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n\r\n        if (!plainObjectOrObjects)\r\n            return metadata.create();\r\n\r\n        if (plainObjectOrObjects instanceof Array)\r\n            return plainObjectOrObjects.map(plainEntityLike => this.create(entityClass, plainEntityLike));\r\n\r\n        return this.merge(entityClass, metadata.create(), plainObjectOrObjects);\r\n    }\r\n\r\n    /**\r\n     * Merges two entities into one new entity.\r\n     */\r\n    merge<Entity>(entityClass: ObjectType<Entity>|string, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity { // todo: throw exception ie tntity manager is released\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\r\n        entityLikes.forEach(object => plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));\r\n        return mergeIntoEntity;\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     */\r\n    async preload<Entity>(entityClass: ObjectType<Entity>|string, entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\r\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\r\n        if (transformedEntity)\r\n            return this.merge(entityClass, transformedEntity as Entity, entityLike);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity>(targetOrEntity: Function|string, entity: Entity, options?: SaveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity>(targetOrEntity: Function|string, entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) a given entity in the database.\r\n     */\r\n    save<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: SaveOptions): Promise<Entity|Entity[]> {\r\n\r\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\r\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\r\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\r\n\r\n        return Promise.resolve().then(async () => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\r\n            // todo: throw exception if constructor in target is not set\r\n            if (entity instanceof Array) {\r\n                await Promise.all(entity.map(e => {\r\n                    const finalTarget = target ? target : e.constructor;\r\n                    return this.saveOne(finalTarget, e, options) as any;\r\n                }));\r\n            } else {\r\n                const finalTarget = target ? target : entity.constructor;\r\n                await this.saveOne(finalTarget, entity as Entity, options);\r\n            }\r\n\r\n            return entity;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     *\r\n     * @deprecated\r\n     */\r\n    persist<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     *\r\n     * @deprecated\r\n     */\r\n    persist<Entity>(targetOrEntity: Function, entity: Entity, options?: SaveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     *\r\n     * @deprecated\r\n     */\r\n    persist<Entity>(targetOrEntity: string, entity: Entity, options?: SaveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     *\r\n     * @deprecated\r\n     */\r\n    persist<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     *\r\n     * @deprecated\r\n     */\r\n    persist<Entity>(targetOrEntity: Function, entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     *\r\n     * @deprecated\r\n     */\r\n    persist<Entity>(targetOrEntity: string, entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) a given entity in the database.\r\n     *\r\n     * @deprecated\r\n     */\r\n    persist<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[], options?: SaveOptions): Promise<Entity|Entity[]> {\r\n        return this.save(targetOrEntity as any, maybeEntity as any, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update<Entity>(target: ObjectType<Entity>|string, conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given find options.\r\n     */\r\n    async update<Entity>(target: ObjectType<Entity>|string, findOptions: FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update<Entity>(target: ObjectType<Entity>|string, conditionsOrFindOptions: Partial<Entity>|FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\r\n        const entity = await this.findOne(target, conditionsOrFindOptions as any); // this is temporary, in the future can be refactored to perform better\r\n        if (!entity)\r\n            throw new Error(`Cannot find entity to update by a given criteria`);\r\n\r\n        Object.assign(entity, partialEntity);\r\n        await this.save(entity, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity will be found by a given id.\r\n     */\r\n    async updateById<Entity>(target: ObjectType<Entity>|string, id: any, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\r\n        const entity = await this.findOneById(target, id as any); // this is temporary, in the future can be refactored to perform better\r\n        if (!entity)\r\n            throw new Error(`Cannot find entity to update by a id`);\r\n\r\n        Object.assign(entity, partialEntity);\r\n        await this.save(entity, options);\r\n    }\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(entity: Entity): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|string, entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|string, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: RemoveOptions): Promise<Entity|Entity[]> {\r\n\r\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\r\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\r\n        const options = target ? maybeOptions : maybeEntityOrOptions as RemoveOptions;\r\n\r\n        return Promise.resolve().then(async () => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\r\n            // todo: throw exception if constructor in target is not set\r\n            if (entity instanceof Array) {\r\n                await Promise.all(entity.map(e => {\r\n                    const finalTarget = target ? target : e.constructor;\r\n                    return this.removeOne(finalTarget, e, options) as any;\r\n                }));\r\n            } else {\r\n                const finalTarget = target ? target : entity.constructor;\r\n                await this.removeOne(finalTarget, entity as Entity, options);\r\n            }\r\n\r\n            return entity;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes entity by a given entity id.\r\n     */\r\n    async removeById<Entity>(targetOrEntity: ObjectType<Entity>|string, id: any, options?: RemoveOptions): Promise<void> {\r\n        const entity = await this.findOneById<any>(targetOrEntity, id); // this is temporary, in the future can be refactored to perform better\r\n        if (!entity)\r\n            throw new Error(`Cannot find entity to remove by a given id`);\r\n\r\n        await this.remove(entity, options);\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given find options or conditions.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<number> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<[Entity[], number]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options and conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[Entity[], number]> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();\r\n    }\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], conditions?: Partial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n        FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\r\n\r\n        ids = ids.map(id => {\r\n            if (!metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\r\n                return metadata.createEntityIdMap([id]);\r\n            }\r\n            return id;\r\n        });\r\n        qb.andWhereInIds(ids);\r\n        return qb.getMany();\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given find options.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || metadata.name);\r\n        return FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getOne();\r\n    }\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, conditions?: Partial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || metadata.name);\r\n        if (metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\r\n            // const columnNames = this.metadata.getEntityIdMap({  });\r\n            throw new Error(`You have multiple primary keys in your entity, to use findOneById with multiple primary keys please provide ` +\r\n                `complete object with all entity ids, like this: { firstKey: value, secondKey: value }`);\r\n        }\r\n\r\n        FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\r\n        if (!metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\r\n            id = metadata.createEntityIdMap([id]);\r\n        }\r\n        qb.andWhereInIds([id]);\r\n        return qb.getOne();\r\n    }\r\n\r\n    /**\r\n     * Executes raw SQL query and returns raw database results.\r\n     */\r\n    async query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n\r\n        try {\r\n            return await queryRunner.query(query, parameters);  // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided entity manager.\r\n     */\r\n    async transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\r\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        const transactionEntityManager = new EntityManager(this.connection, queryRunnerProvider);\r\n\r\n        try {\r\n            await queryRunner.beginTransaction();\r\n            const result = await runInTransaction(transactionEntityManager);\r\n            await queryRunner.commitTransaction();\r\n            return result;\r\n\r\n        } catch (err) {\r\n            await queryRunner.rollbackTransaction();\r\n            throw err;\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n            if (!this.queryRunnerProvider) // if we used a new query runner provider then release it\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table (truncates/drops it).\r\n     */\r\n    async clear<Entity>(entityClass: ObjectType<Entity>|string): Promise<void> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        try {\r\n            return await queryRunner.truncate(metadata.tableName); // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider)\r\n            return this.obtainRepositoryAggregator(entityClassOrName as any).repository;\r\n\r\n        return this.connection.getRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider) {\r\n            const treeRepository = this.obtainRepositoryAggregator(entityClassOrName).treeRepository;\r\n            if (!treeRepository)\r\n                throw new RepositoryNotTreeError(entityClassOrName);\r\n\r\n            return treeRepository;\r\n        }\r\n\r\n        return this.connection.getTreeRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity class.\r\n     */\r\n    getMongoRepository<Entity>(entityClass: ObjectType<Entity>): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity name.\r\n     */\r\n    getMongoRepository<Entity>(entityName: string): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity class or name.\r\n     */\r\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider)\r\n            return this.obtainRepositoryAggregator(entityClassOrName as any).repository as MongoRepository<Entity>;\r\n\r\n        return this.connection.getMongoRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     *\r\n     * @deprecated Don't use specific repository - it will be refactored or removed\r\n     */\r\n    getSpecificRepository<Entity>(entityClass: ObjectType<Entity>): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     *\r\n     * @deprecated Don't use specific repository - it will be refactored or removed\r\n     */\r\n    getSpecificRepository<Entity>(entityName: string): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     *\r\n     * @deprecated Don't use specific repository - it will be refactored or removed\r\n     */\r\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider)\r\n            return this.obtainRepositoryAggregator(entityClassOrName).specificRepository;\r\n\r\n        return this.connection.getSpecificRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets custom entity repository marked with @EntityRepository decorator.\r\n     */\r\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\r\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\r\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\r\n        });\r\n        if (!entityRepositoryMetadataArgs)\r\n            throw new CustomRepositoryNotFoundError(customRepository);\r\n\r\n        const entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\r\n\r\n        const entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)(this, entityMetadata);\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        if (entityRepositoryInstance instanceof AbstractRepository) {\r\n            if (!(entityRepositoryInstance as any)[\"manager\"])\r\n                (entityRepositoryInstance as any)[\"manager\"] = this;\r\n        }\r\n        if (entityRepositoryInstance instanceof Repository) {\r\n            if (!entityMetadata)\r\n                throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\r\n\r\n            (entityRepositoryInstance as any)[\"manager\"] = this;\r\n            (entityRepositoryInstance as any)[\"metadata\"] = entityMetadata;\r\n        }\r\n\r\n        return entityRepositoryInstance;\r\n    }\r\n\r\n    /**\r\n     * Releases all resources used by entity manager.\r\n     * This is used when entity manager is created with a single query runner,\r\n     * and this single query runner needs to be released after job with entity manager is done.\r\n     */\r\n    async release(): Promise<void> {\r\n        if (!this.queryRunnerProvider)\r\n            throw new NoNeedToReleaseEntityManagerError();\r\n\r\n        return this.queryRunnerProvider.releaseReused();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs a save operation for a single entity.\r\n     */\r\n    protected async saveOne(target: Function|string, entity: any, options?: SaveOptions): Promise<void> {\r\n        const metadata = this.connection.getMetadata(target);\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        try {\r\n            const transactionEntityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider);\r\n            // transactionEntityManager.data =\r\n\r\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunnerProvider);\r\n            await databaseEntityLoader.persist(entity, metadata);\r\n\r\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunnerProvider);\r\n            await executor.execute(databaseEntityLoader.operateSubjects);\r\n\r\n        } finally {\r\n            if (!this.queryRunnerProvider) // release it only if its created by this method\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs a remove operation for a single entity.\r\n     */\r\n    protected async removeOne(target: Function|string, entity: any, options?: RemoveOptions): Promise<void> {\r\n        const metadata = this.connection.getMetadata(target);\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        try {\r\n            const transactionEntityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider);\r\n\r\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunnerProvider);\r\n            await databaseEntityLoader.remove(entity, metadata);\r\n\r\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunnerProvider);\r\n            await executor.execute(databaseEntityLoader.operateSubjects);\r\n\r\n        } finally {\r\n            if (!this.queryRunnerProvider) // release it only if its created by this method\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets, or if does not exist yet, creates and returns a repository aggregator for a particular entity target.\r\n     */\r\n    protected obtainRepositoryAggregator<Entity>(entityClassOrName: ObjectType<Entity>|string): RepositoryAggregator {\r\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        let repositoryAggregator = this.repositoryAggregators.find(repositoryAggregate => repositoryAggregate.metadata === metadata);\r\n        if (!repositoryAggregator) {\r\n            repositoryAggregator = new RepositoryAggregator(\r\n                this.connection,\r\n                this.connection.getMetadata(entityClassOrName as any),\r\n                this.queryRunnerProvider\r\n            );\r\n            this.repositoryAggregators.push(repositoryAggregator); // todo: check isnt memory leak here?\r\n        }\r\n\r\n        return repositoryAggregator;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\nimport {SaveOptions} from \"./SaveOptions\";\r\nimport {RemoveOptions} from \"./RemoveOptions\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\n\r\n/**\r\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\r\n */\r\nexport class Repository<Entity extends ObjectLiteral> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods Set Dynamically\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity Manager used by this repository.\r\n     */\r\n    protected manager: EntityManager;\r\n\r\n    /**\r\n     * Entity metadata of the entity current repository manages.\r\n     */\r\n    protected metadata: EntityMetadata;\r\n\r\n    /**\r\n     * Query runner provider used for this repository.\r\n     */\r\n    protected queryRunnerProvider?: QueryRunnerProvider;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Returns object that is managed by this repository.\r\n     * If this repository manages entity from schema,\r\n     * then it returns a name of that schema instead.\r\n     */\r\n    get target(): Function|string {\r\n        return this.metadata.target;\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     * If entity composite compose ids, it will check them all.\r\n     */\r\n    hasId(entity: Entity): boolean {\r\n        return this.manager.hasId(this.metadata.target, entity);\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(entity: Entity): any {\r\n        return this.manager.getId(this.metadata.target, entity);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder(alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        return this.manager.createQueryBuilder(this.metadata.target, alias, queryRunnerProvider);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    create(): Entity;\r\n\r\n    /**\r\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create(entityLike: DeepPartial<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entity instance or instances.\r\n     * Can copy properties from the given object into new entities.\r\n     */\r\n    create(plainEntityLikeOrPlainEntityLikes?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\r\n        return this.manager.create<any>(this.metadata.target, plainEntityLikeOrPlainEntityLikes as any);\r\n    }\r\n\r\n    /**\r\n     * Merges multiple entities (or entity-like objects) into a given entity.\r\n     */\r\n    merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity {\r\n        return this.manager.merge(this.metadata.target, mergeIntoEntity, ...entityLikes);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     *\r\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\r\n     * Returns undefined if entity with given id was not found.\r\n     */\r\n    async preload(entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        return this.manager.preload(this.metadata.target, entityLike);\r\n    }\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    async save(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Saves a given entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    async save(entity: Entity, options?: SaveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Saves one or many given entities.\r\n     */\r\n    async save(entityOrEntities: Entity|Entity[], options?: SaveOptions): Promise<Entity|Entity[]> {\r\n        return this.manager.save(this.metadata.target, entityOrEntities as any, options);\r\n    }\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    async persist(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Saves a given entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    async persist(entity: Entity, options?: SaveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Saves one or many given entities.\r\n     */\r\n    async persist(entityOrEntities: Entity|Entity[], options?: SaveOptions): Promise<Entity|Entity[]> {\r\n        return this.save(entityOrEntities as any, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update(conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given find options.\r\n     */\r\n    async update(findOptions: FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update(conditionsOrFindOptions: Partial<Entity>|FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\r\n        const entity = await this.findOne(conditionsOrFindOptions as any); // this is temporary, in the future can be refactored to perform better\r\n        if (!entity)\r\n            throw new Error(`Cannot find entity to update by a given criteria`);\r\n\r\n        Object.assign(entity, partialEntity);\r\n        await this.save(entity, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity will be found by a given id.\r\n     */\r\n    async updateById(id: any, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\r\n        return this.manager.updateById(this.metadata.target, id, partialEntity, options);\r\n    }\r\n\r\n    /**\r\n     * Removes a given entities from the database.\r\n     */\r\n    async remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    async remove(entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes one or many given entities.\r\n     */\r\n    async remove(entityOrEntities: Entity|Entity[], options?: RemoveOptions): Promise<Entity|Entity[]> {\r\n        return this.manager.remove(this.metadata.target, entityOrEntities as any, options);\r\n    }\r\n\r\n    /**\r\n     * Removes entity by a given entity id.\r\n     */\r\n    async removeById(id: any, options?: RemoveOptions): Promise<void> {\r\n        return this.manager.removeById(this.metadata.target, id, options);\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     */\r\n    count(options?: FindManyOptions<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     */\r\n    count(conditions?: DeepPartial<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given find options or conditions.\r\n     */\r\n    count(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<number> {\r\n        return this.manager.count(this.metadata.target, optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    find(options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    find(conditions?: DeepPartial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    find(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<Entity[]> {\r\n        return this.manager.find(this.metadata.target, optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(options?: FindManyOptions<Entity>): Promise<[ Entity[], number ]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(conditions?: DeepPartial<Entity>): Promise<[ Entity[], number ]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<[ Entity[], number ]> {\r\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds(ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findByIds(ids: any[], conditions?: DeepPartial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<Entity[]> {\r\n        return this.manager.findByIds(this.metadata.target, optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given options.\r\n     */\r\n    findOne(options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne(conditions?: DeepPartial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne(optionsOrConditions?: FindOneOptions<Entity>|DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        return this.manager.findOne(this.metadata.target, optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findOneById(id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findOneById(id: any, conditions?: DeepPartial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    findOneById(id: any, optionsOrConditions?: FindOneOptions<Entity>|DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        return this.manager.findOneById(this.metadata.target, id, optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Executes a raw SQL query and returns a raw database results.\r\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\r\n     */\r\n    async query(query: string, parameters?: any[]): Promise<any> {\r\n        return this.manager.query(query, parameters);\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table/collection (truncates/drops it).\r\n     */\r\n    async clear(): Promise<void> {\r\n        return this.manager.clear(this.metadata.target);\r\n    }\r\n\r\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\r\n\r\n/**\r\n * UpdateEvent is an object that broadcaster sends to the entity subscriber when entity is being updated in the database.\r\n */\r\nexport interface UpdateEvent<Entity> {\r\n\r\n    /**\r\n     * Entity managed with connection used for original event.\r\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\r\n     */\r\n    manager: EntityManager;\r\n\r\n    /**\r\n     * Updating entity.\r\n     */\r\n    entity: Entity;\r\n\r\n    /**\r\n     * Updating entity in the database.\r\n     */\r\n    databaseEntity: Entity;\r\n\r\n    /**\r\n     * List of updated columns.\r\n     */\r\n    updatedColumns: ColumnMetadata[];\r\n\r\n    /**\r\n     * List of updated relations.\r\n     */\r\n    updatedRelations: RelationMetadata[];\r\n\r\n    // todo: send old and new update values\r\n    // todo: send updated relations?\r\n\r\n}","import {EntityManager} from \"../../entity-manager/EntityManager\";\r\n\r\n/**\r\n * RemoveEvent is an object that broadcaster sends to the entity subscriber when entity is being removed to the database.\r\n */\r\nexport interface RemoveEvent<Entity> {\r\n\r\n    /**\r\n     * Entity managed with connection used for original event.\r\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\r\n     */\r\n    manager: EntityManager;\r\n\r\n    /**\r\n     * Entity that is being removed.\r\n     * This may absent if entity is removed without being loaded (for examples by cascades).\r\n     */\r\n    entity?: Entity;\r\n\r\n    /**\r\n     * Database representation of entity that is being removed.\r\n     */\r\n    databaseEntity: Entity;\r\n\r\n    /**\r\n     * Id or ids of the entity that is being removed.\r\n     */\r\n    entityId?: any;\r\n\r\n}","import {EntityManager} from \"../../entity-manager/EntityManager\";\r\n\r\n/**\r\n * InsertEvent is an object that broadcaster sends to the entity subscriber when entity is inserted to the database.\r\n */\r\nexport interface InsertEvent<Entity> {\r\n\r\n    /**\r\n     * Entity managed with connection used for original event.\r\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\r\n     */\r\n    manager: EntityManager;\r\n\r\n    /**\r\n     * Inserting event.\r\n     */\r\n    entity: Entity;\r\n\r\n}","import {UpdateEvent} from \"./event/UpdateEvent\";\r\nimport {RemoveEvent} from \"./event/RemoveEvent\";\r\nimport {InsertEvent} from \"./event/InsertEvent\";\r\n\r\n/**\r\n * Classes that implement this interface are subscribers that subscribe for the specific events in the ORM.\r\n */\r\nexport interface EntitySubscriberInterface<Entity> {\r\n\r\n    /**\r\n     * Returns the class of the entity to which events will listen.\r\n     * If this method is omitted, then subscriber will listen to events of all entities.\r\n     */\r\n    listenTo?(): Function;\r\n\r\n    /**\r\n     * Called after entity is loaded from the database.\r\n     */\r\n    afterLoad?(entity: Entity): Promise<any>|void;\r\n\r\n    /**\r\n     * Called before entity is inserted to the database.\r\n     */\r\n    beforeInsert?(event: InsertEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called after entity is inserted to the database.\r\n     */\r\n    afterInsert?(event: InsertEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called before entity is updated in the database.\r\n     */\r\n    beforeUpdate?(event: UpdateEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called after entity is updated in the database.\r\n     */\r\n    afterUpdate?(event: UpdateEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called before entity is removed from the database.\r\n     */\r\n    beforeRemove?(event: RemoveEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called after entity is removed from the database.\r\n     */\r\n    afterRemove?(event: RemoveEvent<Entity>): Promise<any>|void;\r\n\r\n}","/**\r\n * Thrown when repository for the given class is not found.\r\n */\r\nexport class RepositoryNotFoundError extends Error {\r\n    name = \"RepositoryNotFoundError\";\r\n\r\n    constructor(connectionName: string, entityClass: Function|string) {\r\n        super();\r\n        const targetName = typeof entityClass === \"function\" && (<any> entityClass).name ? (<any> entityClass).name : entityClass;\r\n        this.message = `No repository for \"${targetName}\" was found. Looks like this entity is not registered in ` +\r\n            `current \"${connectionName}\" connection?`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {PlatformTools} from \"../platform/PlatformTools\";\r\n\r\n/**\r\n * Loads all exported classes from the given directory.\r\n */\r\nexport function importClassesFromDirectories(directories: string[], formats = [\".js\", \".ts\"]): Function[] {\r\n\r\n    function loadFileClasses(exported: any, allLoaded: Function[]) {\r\n        if (exported instanceof Function) {\r\n            allLoaded.push(exported);\r\n\r\n        } else if (exported instanceof Object) {\r\n            Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));\r\n\r\n        } else if (exported instanceof Array) {\r\n            exported.forEach((i: any) => loadFileClasses(i, allLoaded));\r\n        }\r\n\r\n        return allLoaded;\r\n    }\r\n\r\n    const allFiles = directories.reduce((allDirs, dir) => {\r\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormilize(dir)));\r\n    }, [] as string[]);\r\n\r\n    const dirs = allFiles\r\n        .filter(file => {\r\n            const dtsExtension = file.substring(file.length - 5, file.length);\r\n            return formats.indexOf(PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== \".d.ts\";\r\n        })\r\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\r\n\r\n    return loadFileClasses(dirs, []);\r\n}\r\n\r\n/**\r\n * Loads all json files from the given directory.\r\n */\r\nexport function importJsonsFromDirectories(directories: string[], format = \".json\"): any[] {\r\n\r\n    const allFiles = directories.reduce((allDirs, dir) => {\r\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormilize(dir)));\r\n    }, [] as string[]);\r\n\r\n    return allFiles\r\n        .filter(file => PlatformTools.pathExtname(file) === format)\r\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\r\n}","/**\r\n * Arguments for NamingStrategyMetadata class.\r\n */\r\nexport interface NamingStrategyMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this column is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Strategy name.\r\n     */\r\n    readonly name: string;\r\n\r\n}\r\n","/**\r\n * Arguments for JoinColumnMetadata class.\r\n */\r\nexport interface JoinColumnMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this column is applied.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Class's property name to which this column is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * Name of the column.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Name of the column in the entity to which this column is referenced.\r\n     * This is column property name, not a column database name.\r\n     */\r\n    referencedColumnName?: string;\r\n\r\n}\r\n","import {JoinColumnMetadataArgs} from \"./JoinColumnMetadataArgs\";\r\n\r\n/**\r\n * Arguments for JoinTableMetadata class.\r\n */\r\nexport interface JoinTableMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this column is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Class's property name to which this column is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Name of the table that will be created to store values of the both tables (join table).\r\n     * By default is auto generated.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * First column of the join table.\r\n     */\r\n    readonly joinColumns?: JoinColumnMetadataArgs[];\r\n\r\n    /**\r\n     * Second (inverse) column of the join table.\r\n     */\r\n    readonly inverseJoinColumns?: JoinColumnMetadataArgs[];\r\n\r\n}\r\n","/**\r\n * Arguments for EntitySubscriberMetadata class.\r\n */\r\nexport interface EntitySubscriberMetadataArgs {\r\n\r\n    /**\r\n     * Class to which subscriber is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n}\r\n","/**\r\n * Arguments for InheritanceMetadata class.\r\n */\r\nexport interface InheritanceMetadataArgs {\r\n\r\n    /**\r\n     * Class to which inheritance is applied.\r\n     */\r\n    readonly target?: Function|string;\r\n\r\n    /**\r\n     * Inheritance type.\r\n     */\r\n    readonly type: \"single-table\"|\"class-table\";\r\n\r\n}\r\n","/**\r\n * DiscriminatorValue properties.\r\n */\r\nexport interface DiscriminatorValueMetadataArgs {\r\n\r\n    /**\r\n     * Class to which discriminator name is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Discriminator value.\r\n     */\r\n    readonly value: any;\r\n\r\n}\r\n","/**\r\n * Arguments for EntityRepositoryMetadata class, helps to construct an EntityRepositoryMetadata object.\r\n */\r\nexport interface EntityRepositoryMetadataArgs {\r\n\r\n    /**\r\n     * Constructor of the custom entity repository.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Entity managed by this custom repository.\r\n     */\r\n    readonly entity?: Function|string;\r\n\r\n}\r\n","/**\r\n * Used to inject transaction's entity managed into the method wrapped with @Transaction decorator.\r\n */\r\nexport interface TransactionEntityMetadataArgs {\r\n\r\n    /**\r\n     * Target class on which decorator is used.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Method on which decorator is used.\r\n     */\r\n    readonly methodName: string;\r\n\r\n    /**\r\n     * Index of the parameter on which decorator is used.\r\n     */\r\n    readonly index: number;\r\n\r\n}\r\n","/**\r\n * Metadata args utility functions.\r\n */\r\nexport class MetadataUtils {\r\n\r\n    /**\r\n     * Gets given's entity all inherited classes.\r\n     * Gives in order from parents to children.\r\n     * For example Post extends ContentModel which extends Unit it will give\r\n     * [Unit, ContentModel, Post]\r\n     */\r\n    static getInheritanceTree(entity: Function): Function[] {\r\n        const tree: Function[] = [entity];\r\n        const getPrototypeOf = (object: Function): void => {\r\n            const proto = Object.getPrototypeOf(object);\r\n            if (proto && proto.name) {\r\n                tree.push(proto);\r\n                getPrototypeOf(proto);\r\n            }\r\n        };\r\n        getPrototypeOf(entity);\r\n        return tree;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is inherited from another table.\r\n     */\r\n    static isInherited(target1: Function, target2: Function) {\r\n        return target1.prototype instanceof target2;\r\n    }\r\n\r\n    /**\r\n     * Filters given array of targets by a given classes.\r\n     * If classes are not given, then it returns array itself.\r\n     */\r\n    static filterByTarget<T extends { target?: any }>(array: T[], classes?: any[]): T[] {\r\n        if (!classes) return array;\r\n        return array.filter(item => item.target && classes.indexOf(item.target) !== -1);\r\n    }\r\n\r\n}","import {RelationMetadataArgs} from \"./RelationMetadataArgs\";\r\nimport {ColumnMetadataArgs} from \"./ColumnMetadataArgs\";\r\nimport {RelationCountMetadataArgs} from \"./RelationCountMetadataArgs\";\r\nimport {IndexMetadataArgs} from \"./IndexMetadataArgs\";\r\nimport {EntityListenerMetadataArgs} from \"./EntityListenerMetadataArgs\";\r\nimport {TableMetadataArgs} from \"./TableMetadataArgs\";\r\nimport {NamingStrategyMetadataArgs} from \"./NamingStrategyMetadataArgs\";\r\nimport {JoinTableMetadataArgs} from \"./JoinTableMetadataArgs\";\r\nimport {JoinColumnMetadataArgs} from \"./JoinColumnMetadataArgs\";\r\nimport {EmbeddedMetadataArgs} from \"./EmbeddedMetadataArgs\";\r\nimport {EntitySubscriberMetadataArgs} from \"./EntitySubscriberMetadataArgs\";\r\nimport {RelationIdMetadataArgs} from \"./RelationIdMetadataArgs\";\r\nimport {InheritanceMetadataArgs} from \"./InheritanceMetadataArgs\";\r\nimport {DiscriminatorValueMetadataArgs} from \"./DiscriminatorValueMetadataArgs\";\r\nimport {EntityRepositoryMetadataArgs} from \"./EntityRepositoryMetadataArgs\";\r\nimport {TransactionEntityMetadataArgs} from \"./TransactionEntityMetadataArgs\";\r\nimport {MetadataUtils} from \"../metadata-builder/MetadataUtils\";\r\n\r\n/**\r\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\r\n * Each metadata args represents some specifications of what it represents.\r\n * MetadataArgs used to create a real Metadata objects.\r\n */\r\nexport class MetadataArgsStorage {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    readonly tables: TableMetadataArgs[] = [];\r\n    readonly entityRepositories: EntityRepositoryMetadataArgs[] = [];\r\n    readonly transactionEntityManagers: TransactionEntityMetadataArgs[] = [];\r\n    readonly namingStrategies: NamingStrategyMetadataArgs[] = [];\r\n    readonly entitySubscribers: EntitySubscriberMetadataArgs[] = [];\r\n    readonly indices: IndexMetadataArgs[] = [];\r\n    readonly columns: ColumnMetadataArgs[] = [];\r\n    readonly relations: RelationMetadataArgs[] = [];\r\n    readonly joinColumns: JoinColumnMetadataArgs[] = [];\r\n    readonly joinTables: JoinTableMetadataArgs[] = [];\r\n    readonly entityListeners: EntityListenerMetadataArgs[] = [];\r\n    readonly relationCounts: RelationCountMetadataArgs[] = [];\r\n    readonly relationIds: RelationIdMetadataArgs[] = [];\r\n    readonly embeddeds: EmbeddedMetadataArgs[] = [];\r\n    readonly inheritances: InheritanceMetadataArgs[] = [];\r\n    readonly discriminatorValues: DiscriminatorValueMetadataArgs[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    filterTables(target?: Function|string): TableMetadataArgs[];\r\n    filterTables(target?: (Function|string)[]): TableMetadataArgs[];\r\n    filterTables(target?: (Function|string)|(Function|string)[]): TableMetadataArgs[] {\r\n        return this.tables.filter(table => {\r\n            return target instanceof Array ? target.indexOf(table.target) !== -1 : table.target === target;\r\n        });\r\n    }\r\n\r\n    filterColumns(target: Function|string): ColumnMetadataArgs[];\r\n    filterColumns(target: (Function|string)[]): ColumnMetadataArgs[];\r\n    filterColumns(target: (Function|string)|(Function|string)[]): ColumnMetadataArgs[] {\r\n        return this.columns.filter(column => {\r\n            return target instanceof Array ? target.indexOf(column.target) !== -1 : column.target === target;\r\n        });\r\n    }\r\n\r\n    filterRelations(target: Function|string): RelationMetadataArgs[];\r\n    filterRelations(target: (Function|string)[]): RelationMetadataArgs[];\r\n    filterRelations(target: (Function|string)|(Function|string)[]): RelationMetadataArgs[] {\r\n        return this.relations.filter(relation => {\r\n            return target instanceof Array ? target.indexOf(relation.target) !== -1 : relation.target === target;\r\n        });\r\n    }\r\n\r\n    filterRelationIds(target: Function|string): RelationIdMetadataArgs[];\r\n    filterRelationIds(target: (Function|string)[]): RelationIdMetadataArgs[];\r\n    filterRelationIds(target: (Function|string)|(Function|string)[]): RelationIdMetadataArgs[] {\r\n        return this.relationIds.filter(relationId => {\r\n            return target instanceof Array ? target.indexOf(relationId.target) !== -1 : relationId.target === target;\r\n        });\r\n    }\r\n\r\n    filterRelationCounts(target: Function|string): RelationCountMetadataArgs[];\r\n    filterRelationCounts(target: (Function|string)[]): RelationCountMetadataArgs[];\r\n    filterRelationCounts(target: (Function|string)|(Function|string)[]): RelationCountMetadataArgs[] {\r\n        return this.relationCounts.filter(relationCount => {\r\n            return target instanceof Array ? target.indexOf(relationCount.target) !== -1 : relationCount.target === target;\r\n        });\r\n    }\r\n\r\n    filterIndices(target: Function|string): IndexMetadataArgs[];\r\n    filterIndices(target: (Function|string)[]): IndexMetadataArgs[];\r\n    filterIndices(target: (Function|string)|(Function|string)[]): IndexMetadataArgs[] {\r\n        return this.indices.filter(index => {\r\n            return target instanceof Array ? target.indexOf(index.target) !== -1 : index.target === target;\r\n        });\r\n    }\r\n\r\n    filterListeners(target: Function|string): EntityListenerMetadataArgs[];\r\n    filterListeners(target: (Function|string)[]): EntityListenerMetadataArgs[];\r\n    filterListeners(target: (Function|string)|(Function|string)[]): EntityListenerMetadataArgs[] {\r\n        return this.entityListeners.filter(index => {\r\n            return target instanceof Array ? target.indexOf(index.target) !== -1 : index.target === target;\r\n        });\r\n    }\r\n\r\n    filterEmbeddeds(target: Function|string): EmbeddedMetadataArgs[];\r\n    filterEmbeddeds(target: (Function|string)[]): EmbeddedMetadataArgs[];\r\n    filterEmbeddeds(target: (Function|string)|(Function|string)[]): EmbeddedMetadataArgs[] {\r\n        return this.embeddeds.filter(embedded => {\r\n            return target instanceof Array ? target.indexOf(embedded.target) !== -1 : embedded.target === target;\r\n        });\r\n    }\r\n\r\n    findJoinTable(target: Function|string, propertyName: string): JoinTableMetadataArgs|undefined {\r\n        return this.joinTables.find(joinTable => {\r\n            return joinTable.target === target && joinTable.propertyName === propertyName;\r\n        });\r\n    }\r\n\r\n    filterJoinColumns(target: Function|string, propertyName: string): JoinColumnMetadataArgs[] {\r\n        return this.joinColumns.filter(joinColumn => {\r\n            return joinColumn.target === target && joinColumn.propertyName === propertyName;\r\n        });\r\n    }\r\n\r\n    filterSubscribers(target: Function|string): EntitySubscriberMetadataArgs[];\r\n    filterSubscribers(target: (Function|string)[]): EntitySubscriberMetadataArgs[];\r\n    filterSubscribers(target: (Function|string)|(Function|string)[]): EntitySubscriberMetadataArgs[] {\r\n        return this.entitySubscribers.filter(subscriber => {\r\n            return target instanceof Array ? target.indexOf(subscriber.target) !== -1 : subscriber.target === target;\r\n        });\r\n    }\r\n\r\n    filterNamingStrategies(target: Function|string): NamingStrategyMetadataArgs[];\r\n    filterNamingStrategies(target: (Function|string)[]): NamingStrategyMetadataArgs[];\r\n    filterNamingStrategies(target: (Function|string)|(Function|string)[]): NamingStrategyMetadataArgs[] {\r\n        return this.namingStrategies.filter(subscriber => {\r\n            return target instanceof Array ? target.indexOf(subscriber.target) !== -1 : subscriber.target === target;\r\n        });\r\n    }\r\n\r\n    filterTransactionEntityManagers(target: Function|string): TransactionEntityMetadataArgs[];\r\n    filterTransactionEntityManagers(target: (Function|string)[]): TransactionEntityMetadataArgs[];\r\n    filterTransactionEntityManagers(target: (Function|string)|(Function|string)[]): TransactionEntityMetadataArgs[] {\r\n        return this.transactionEntityManagers.filter(subscriber => {\r\n            return target instanceof Array ? target.indexOf(subscriber.target) !== -1 : subscriber.target === target;\r\n        });\r\n    }\r\n\r\n    filterSingleTableChildren(target: Function|string): TableMetadataArgs[] {\r\n        return this.tables.filter(table => {\r\n            return table.target instanceof Function\r\n                && target instanceof Function\r\n                && MetadataUtils.isInherited(table.target, target)\r\n                && table.type === \"single-table-child\";\r\n        });\r\n    }\r\n\r\n    findInheritanceType(target: Function|string): InheritanceMetadataArgs|undefined {\r\n        return this.inheritances.find(inheritance => inheritance.target === target)\r\n    }\r\n\r\n    findDiscriminatorValue(target: Function|string): DiscriminatorValueMetadataArgs|undefined {\r\n        return this.discriminatorValues.find(discriminatorValue => discriminatorValue.target === target)\r\n    }\r\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * Creates EntityMetadata for junction tables.\r\n * Junction tables are tables generated by many-to-many relations.\r\n */\r\nexport class JunctionEntityMetadataBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds EntityMetadata for the junction of the given many-to-many relation.\r\n     */\r\n    build(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): EntityMetadata {\r\n        const referencedColumns = this.collectReferencedColumns(relation, joinTable);\r\n        const inverseReferencedColumns = this.collectInverseReferencedColumns(relation, joinTable);\r\n\r\n        const joinTableName = joinTable.name || this.connection.driver.namingStrategy.joinTableName(\r\n            relation.entityMetadata.tableNameWithoutPrefix,\r\n            relation.inverseEntityMetadata.tableNameWithoutPrefix,\r\n            relation.propertyPath,\r\n            relation.inverseRelation ? relation.inverseRelation.propertyName : \"\"\r\n        );\r\n\r\n        const entityMetadata = new EntityMetadata({\r\n            connection: this.connection,\r\n            args: {\r\n                target: \"\",\r\n                name: joinTableName,\r\n                type: \"junction\"\r\n            }\r\n        });\r\n\r\n        // create original side junction columns\r\n        const junctionColumns = referencedColumns.map(referencedColumn => {\r\n            const joinColumn = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumnArgs => {\r\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === referencedColumn.propertyName) &&\r\n                    !!joinColumnArgs.name;\r\n            }) : undefined;\r\n            const columnName = joinColumn && joinColumn.name ? joinColumn.name : this.connection.driver.namingStrategy.joinTableColumnName(relation.entityMetadata.tableNameWithoutPrefix, referencedColumn.propertyName, referencedColumn.databaseName);\r\n\r\n            return new ColumnMetadata({\r\n                entityMetadata: entityMetadata,\r\n                referencedColumn: referencedColumn,\r\n                args: {\r\n                    target: \"\",\r\n                    mode: \"virtual\",\r\n                    propertyName: columnName,\r\n                    options: {\r\n                        name: columnName,\r\n                        length: referencedColumn.length,\r\n                        type: referencedColumn.type,\r\n                        nullable: false,\r\n                        primary: true,\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        // create inverse side junction columns\r\n        const inverseJunctionColumns = inverseReferencedColumns.map(inverseReferencedColumn => {\r\n            const joinColumn = joinTable.inverseJoinColumns ? joinTable.inverseJoinColumns.find(joinColumnArgs => {\r\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === inverseReferencedColumn.propertyName) &&\r\n                    !!joinColumnArgs.name;\r\n            }) : undefined;\r\n            const columnName = joinColumn && joinColumn.name ? joinColumn.name : this.connection.driver.namingStrategy.joinTableColumnName(relation.inverseEntityMetadata.tableNameWithoutPrefix, inverseReferencedColumn.propertyName, inverseReferencedColumn.databaseName);\r\n\r\n            return new ColumnMetadata({\r\n                entityMetadata: entityMetadata,\r\n                referencedColumn: inverseReferencedColumn,\r\n                args: {\r\n                    target: \"\",\r\n                    mode: \"virtual\",\r\n                    propertyName: columnName,\r\n                    options: {\r\n                        length: inverseReferencedColumn.length,\r\n                        type: inverseReferencedColumn.type,\r\n                        name: columnName,\r\n                        nullable: false,\r\n                        primary: true,\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        // set junction table columns\r\n        entityMetadata.ownColumns = [...junctionColumns, ...inverseJunctionColumns];\r\n        entityMetadata.ownColumns.forEach(column => column.relationMetadata = relation);\r\n\r\n        // create junction table foreign keys\r\n        entityMetadata.foreignKeys = [\r\n            new ForeignKeyMetadata({\r\n                entityMetadata: entityMetadata,\r\n                referencedEntityMetadata: relation.entityMetadata,\r\n                columns: junctionColumns,\r\n                referencedColumns: referencedColumns\r\n            }),\r\n            new ForeignKeyMetadata({\r\n                entityMetadata: entityMetadata,\r\n                referencedEntityMetadata: relation.inverseEntityMetadata,\r\n                columns: inverseJunctionColumns,\r\n                referencedColumns: inverseReferencedColumns\r\n            }),\r\n        ];\r\n\r\n        // create junction table indices\r\n        entityMetadata.indices = [\r\n            new IndexMetadata({\r\n                entityMetadata: entityMetadata,\r\n                columns: junctionColumns,\r\n                args: {\r\n                    target: \"\",\r\n                    unique: false\r\n                }\r\n            }),\r\n\r\n            new IndexMetadata({\r\n                entityMetadata: entityMetadata,\r\n                columns: inverseJunctionColumns,\r\n                args: {\r\n                    target: \"\",\r\n                    unique: false\r\n                }\r\n            })\r\n        ];\r\n\r\n        // finally return entity metadata\r\n        return entityMetadata;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Collects referenced columns from the given join column args.\r\n     */\r\n    protected collectReferencedColumns(relation: RelationMetadata, joinTable: JoinTableMetadataArgs) {\r\n        const hasAnyReferencedColumnName = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumn => !!joinColumn.referencedColumnName) : false;\r\n        if (!joinTable.joinColumns || (joinTable.joinColumns && !hasAnyReferencedColumnName)) {\r\n            return relation.entityMetadata.columns.filter(column => column.isPrimary);\r\n        } else {\r\n            return joinTable.joinColumns.map(joinColumn => {\r\n                const referencedColumn = relation.entityMetadata.columns.find(column => column.propertyName === joinColumn.referencedColumnName);\r\n                if (!referencedColumn)\r\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.entityMetadata.name}`);\r\n\r\n                return referencedColumn;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collects inverse referenced columns from the given join column args.\r\n     */\r\n    protected collectInverseReferencedColumns(relation: RelationMetadata, joinTable: JoinTableMetadataArgs) {\r\n        const hasInverseJoinColumns = !!joinTable.inverseJoinColumns;\r\n        const hasAnyInverseReferencedColumnName = hasInverseJoinColumns ? joinTable.inverseJoinColumns!.find(joinColumn => !!joinColumn.referencedColumnName) : false;\r\n        if (!hasInverseJoinColumns || (hasInverseJoinColumns && !hasAnyInverseReferencedColumnName)) {\r\n            return relation.inverseEntityMetadata.primaryColumns;\r\n        } else {\r\n            return joinTable.inverseJoinColumns!.map(joinColumn => {\r\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName);\r\n                if (!referencedColumn)\r\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\r\n\r\n                return referencedColumn;\r\n            });\r\n        }\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {ColumnTypes} from \"../metadata/types/ColumnTypes\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * Creates EntityMetadata for junction tables of the closure entities.\r\n * Closure junction tables are tables generated by closure entities.\r\n */\r\nexport class ClosureJunctionEntityMetadataBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds EntityMetadata for the closure junction of the given closure entity.\r\n     */\r\n    build(parentClosureEntityMetadata: EntityMetadata) {\r\n\r\n        // create entity metadata itself\r\n        const entityMetadata = new EntityMetadata({\r\n            parentClosureEntityMetadata: parentClosureEntityMetadata,\r\n            connection: this.connection,\r\n            args: {\r\n                target: \"\",\r\n                name: parentClosureEntityMetadata.tableNameWithoutPrefix,\r\n                type: \"closure-junction\"\r\n            }\r\n        });\r\n\r\n        // create ancestor and descendant columns for new closure junction table\r\n        parentClosureEntityMetadata.primaryColumns.forEach(primaryColumn => {\r\n            entityMetadata.ownColumns.push(new ColumnMetadata({\r\n                entityMetadata: entityMetadata,\r\n                args: {\r\n                    target: \"\",\r\n                    mode: \"virtual\",\r\n                    propertyName: \"ancestor_\" + primaryColumn.databaseName, // todo: naming strategy\r\n                    options: {\r\n                        length: primaryColumn.length,\r\n                        type: primaryColumn.type,\r\n                    }\r\n                }\r\n            }));\r\n            entityMetadata.ownColumns.push(new ColumnMetadata({\r\n                entityMetadata: entityMetadata,\r\n                args: {\r\n                    target: \"\",\r\n                    mode: \"virtual\",\r\n                    propertyName: \"descendant_\" + primaryColumn.databaseName,\r\n                    options: {\r\n                        length: primaryColumn.length,\r\n                        type: primaryColumn.type,\r\n                    }\r\n                }\r\n            }));\r\n        });\r\n\r\n        // if tree level column was defined by a closure entity then add it to the junction columns as well\r\n        if (parentClosureEntityMetadata.treeLevelColumn) {\r\n            entityMetadata.ownColumns.push(new ColumnMetadata({\r\n                entityMetadata: entityMetadata,\r\n                args: {\r\n                    target: \"\",\r\n                    mode: \"virtual\",\r\n                    propertyName: \"level\",\r\n                    options: {\r\n                        type: ColumnTypes.INTEGER,\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        // create junction table foreign keys\r\n        entityMetadata.foreignKeys = [\r\n            new ForeignKeyMetadata({\r\n                entityMetadata: entityMetadata,\r\n                referencedEntityMetadata: parentClosureEntityMetadata,\r\n                columns: [entityMetadata.ownColumns[0]],\r\n                referencedColumns: parentClosureEntityMetadata.primaryColumns\r\n            }),\r\n            new ForeignKeyMetadata({\r\n                entityMetadata: entityMetadata,\r\n                referencedEntityMetadata: parentClosureEntityMetadata,\r\n                columns: [entityMetadata.ownColumns[1]],\r\n                referencedColumns: parentClosureEntityMetadata.primaryColumns\r\n            }),\r\n        ];\r\n\r\n        return entityMetadata;\r\n    }\r\n\r\n}","import {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * Builds join column for the many-to-one and one-to-one owner relations.\r\n *\r\n * Cases it should cover:\r\n * 1. when join column is set with custom name and without referenced column name\r\n * we need automatically set referenced column name - primary ids by default\r\n * @JoinColumn({ name: \"custom_name\" })\r\n *\r\n * 2. when join column is set with only referenced column name\r\n * we need automatically set join column name - relation name + referenced column name\r\n * @JoinColumn({ referencedColumnName: \"title\" })\r\n *\r\n * 3. when join column is set without both referenced column name and join column name\r\n * we need to automatically set both of them\r\n * @JoinColumn()\r\n *\r\n * 4. when join column is not set at all (as in case of @ManyToOne relation)\r\n * we need to create join column for it with proper referenced column name and join column name\r\n *\r\n * 5. when multiple join columns set none of referencedColumnName and name can be optional\r\n * both options are required\r\n * @JoinColumn([\r\n *      { name: \"category_title\", referencedColumnName: \"type\" },\r\n *      { name: \"category_title\", referencedColumnName: \"name\" },\r\n * ])\r\n *\r\n * Since for many-to-one relations having JoinColumn decorator is not required,\r\n * we need to go thought each many-to-one relation without join column decorator set\r\n * and create join column metadata args for them.\r\n */\r\nexport class RelationJoinColumnBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds a foreign key of the many-to-one or one-to-one owner relations.\r\n     */\r\n    build(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata): ForeignKeyMetadata|undefined {\r\n        const referencedColumns = this.collectReferencedColumns(joinColumns, relation);\r\n        if (!referencedColumns.length)\r\n            return undefined; // this case is possible only for one-to-one non owning side\r\n\r\n        const columns = this.collectColumns(joinColumns, relation, referencedColumns);\r\n        return new ForeignKeyMetadata({\r\n            entityMetadata: relation.entityMetadata,\r\n            referencedEntityMetadata: relation.inverseEntityMetadata,\r\n            namingStrategy: this.connection.driver.namingStrategy,\r\n            columns: columns,\r\n            referencedColumns: referencedColumns,\r\n            onDelete: relation.onDelete,\r\n        });\r\n    }\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Collects referenced columns from the given join column args.\r\n     */\r\n    protected collectReferencedColumns(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata): ColumnMetadata[] {\r\n        const hasAnyReferencedColumnName = joinColumns.find(joinColumnArgs => !!joinColumnArgs.referencedColumnName);\r\n        const manyToOneWithoutJoinColumn = joinColumns.length === 0 && relation.isManyToOne;\r\n        const hasJoinColumnWithoutAnyReferencedColumnName = joinColumns.length > 0 && !hasAnyReferencedColumnName;\r\n\r\n        if (manyToOneWithoutJoinColumn || hasJoinColumnWithoutAnyReferencedColumnName) { // covers case3 and case1\r\n            return relation.inverseEntityMetadata.primaryColumns;\r\n\r\n        } else { // cases with referenced columns defined\r\n            return joinColumns.map(joinColumn => {\r\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName); // todo: can we also search in relations?\r\n                if (!referencedColumn)\r\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\r\n\r\n                return referencedColumn;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collects columns from the given join column args.\r\n     */\r\n    private collectColumns(joinColumns: JoinColumnMetadataArgs[], relation: RelationMetadata, referencedColumns: ColumnMetadata[]): ColumnMetadata[] {\r\n        return referencedColumns.map(referencedColumn => {\r\n\r\n            // in the case if relation has join column with only name set we need this check\r\n            const joinColumnMetadataArg = joinColumns.find(joinColumn => {\r\n                return (!joinColumn.referencedColumnName || joinColumn.referencedColumnName === referencedColumn.propertyName) &&\r\n                    !!joinColumn.name;\r\n            });\r\n            const joinColumnName = joinColumnMetadataArg ? joinColumnMetadataArg.name : this.connection.driver.namingStrategy.joinColumnName(relation.propertyName, referencedColumn.propertyName);\r\n\r\n            let relationalColumn = relation.entityMetadata.ownColumns.find(column => column.databaseName === joinColumnName);\r\n            if (!relationalColumn) {\r\n                relationalColumn = new ColumnMetadata({\r\n                    entityMetadata: relation.entityMetadata,\r\n                    args: {\r\n                        target: \"\",\r\n                        mode: \"virtual\",\r\n                        propertyName: relation.propertyName,\r\n                        options: {\r\n                            name: joinColumnName,\r\n                            type: referencedColumn.type,\r\n                            primary: relation.isPrimary,\r\n                            nullable: relation.isNullable,\r\n                        }\r\n                    }\r\n                });\r\n                relation.entityMetadata.registerColumn(relationalColumn);\r\n            }\r\n            relationalColumn.referencedColumn = referencedColumn; // its important to set it here because we need to set referenced column for user defined join column\r\n            relationalColumn.type = referencedColumn.type; // also since types of relational column and join column must be equal we override user defined column type\r\n            relationalColumn.relationMetadata = relation;\r\n            relationalColumn.build(this.connection.driver.namingStrategy);\r\n            return relationalColumn;\r\n        });\r\n    }\r\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\r\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\r\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\r\nimport {RelationIdMetadata} from \"../metadata/RelationIdMetadata\";\r\nimport {RelationCountMetadata} from \"../metadata/RelationCountMetadata\";\r\nimport {MetadataUtils} from \"./MetadataUtils\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {JunctionEntityMetadataBuilder} from \"./JunctionEntityMetadataBuilder\";\r\nimport {ClosureJunctionEntityMetadataBuilder} from \"./ClosureJunctionEntityMetadataBuilder\";\r\nimport {RelationJoinColumnBuilder} from \"./RelationJoinColumnBuilder\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\r\n\r\n/**\r\n * Builds EntityMetadata objects and all its sub-metadatas.\r\n */\r\nexport class EntityMetadataBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Used to build entity metadatas of the junction entities.\r\n     */\r\n    protected junctionEntityMetadataBuilder: JunctionEntityMetadataBuilder;\r\n\r\n    /**\r\n     * Used to build entity metadatas of the closure junction entities.\r\n     */\r\n    protected closureJunctionEntityMetadataBuilder: ClosureJunctionEntityMetadataBuilder;\r\n\r\n    /**\r\n     * Used to build join columns of the relations.\r\n     */\r\n    protected relationJoinColumnBuilder: RelationJoinColumnBuilder;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection, private metadataArgsStorage: MetadataArgsStorage) {\r\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder(connection);\r\n        this.closureJunctionEntityMetadataBuilder = new ClosureJunctionEntityMetadataBuilder(connection);\r\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder(connection);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds a complete entity metadatas for the given entity classes.\r\n     */\r\n    build(entityClasses?: Function[]): EntityMetadata[] {\r\n\r\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\r\n        const allTables = entityClasses ? this.metadataArgsStorage.filterTables(entityClasses) : this.metadataArgsStorage.tables;\r\n\r\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\r\n        const realTables = allTables.filter(table => table.type === \"regular\" || table.type === \"closure\" || table.type === \"class-table-child\" || table.type === \"single-table-child\");\r\n\r\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\r\n        const entityMetadatas = realTables.map(tableArgs => this.createEntityMetadata(tableArgs));\r\n\r\n        // calculate entity metadata computed properties and all its sub-metadatas\r\n        entityMetadatas.forEach(entityMetadata => this.computeEntityMetadata(entityMetadata));\r\n\r\n        // calculate entity metadata's inverse properties\r\n        entityMetadatas.forEach(entityMetadata => this.computeInverseProperties(entityMetadata, entityMetadatas));\r\n\r\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\r\n        entityMetadatas\r\n            .filter(entityMetadata => entityMetadata.tableType !== \"single-table-child\")\r\n            .forEach(entityMetadata => {\r\n\r\n                // create entity's relations join columns (for many-to-one and one-to-one owner)\r\n                entityMetadata.relations.filter(relation => relation.isOneToOne || relation.isManyToOne).forEach(relation => {\r\n                    const joinColumns = this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);\r\n                    const foreignKey = this.relationJoinColumnBuilder.build(joinColumns, relation); // create a foreign key based on its metadata args\r\n                    if (foreignKey) {\r\n                        relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column\r\n                        entityMetadata.foreignKeys.push(foreignKey);\r\n                    }\r\n                });\r\n\r\n                // create junction entity metadatas for entity many-to-many relations\r\n                entityMetadata.relations.filter(relation => relation.isManyToMany).forEach(relation => {\r\n                    const joinTable = this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName);\r\n                    if (!joinTable) return; // no join table set - no need to do anything (it means this is many-to-many inverse side)\r\n\r\n                    // here we create a junction entity metadata for a new junction table of many-to-many relation\r\n                    const junctionEntityMetadata = this.junctionEntityMetadataBuilder.build(relation, joinTable);\r\n                    relation.registerForeignKeys(...junctionEntityMetadata.foreignKeys);\r\n                    relation.registerJunctionEntityMetadata(junctionEntityMetadata);\r\n\r\n                    // compute new entity metadata properties and push it to entity metadatas pool\r\n                    this.computeEntityMetadata(junctionEntityMetadata);\r\n                    this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);\r\n                    entityMetadatas.push(junctionEntityMetadata);\r\n                });\r\n\r\n                // update entity metadata depend properties\r\n                entityMetadata.relationsWithJoinColumns = entityMetadata.relations.filter(relation => relation.isWithJoinColumn);\r\n                entityMetadata.hasNonNullableRelations = entityMetadata.relationsWithJoinColumns.some(relation => !relation.isNullable || relation.isPrimary);\r\n        });\r\n\r\n        // generate closure junction tables for all closure tables\r\n        entityMetadatas\r\n            .filter(metadata => metadata.isClosure)\r\n            .forEach(entityMetadata => {\r\n                const closureJunctionEntityMetadata = this.closureJunctionEntityMetadataBuilder.build(entityMetadata);\r\n                entityMetadata.closureJunctionTable = closureJunctionEntityMetadata;\r\n                this.computeEntityMetadata(closureJunctionEntityMetadata);\r\n                this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);\r\n                entityMetadatas.push(closureJunctionEntityMetadata);\r\n            });\r\n\r\n        // after all metadatas created we set parent entity metadata for class-table inheritance\r\n        entityMetadatas\r\n            .filter(metadata => metadata.tableType === \"single-table-child\")\r\n            .forEach(entityMetadata => {\r\n                const inheritanceTree: any[] = entityMetadata.target instanceof Function\r\n                    ? MetadataUtils.getInheritanceTree(entityMetadata.target)\r\n                    : [entityMetadata.target];\r\n\r\n                const parentMetadata = entityMetadatas.find(metadata => {\r\n                    return inheritanceTree.find(inheritance => inheritance === metadata.target) && metadata.inheritanceType === \"single-table\";\r\n                });\r\n\r\n                if (parentMetadata) {\r\n                    entityMetadata.parentEntityMetadata = parentMetadata;\r\n                    entityMetadata.tableName = parentMetadata.tableName;\r\n                }\r\n            });\r\n\r\n        // after all metadatas created we set child entity metadatas for class-table inheritance\r\n        entityMetadatas.forEach(metadata => {\r\n            metadata.childEntityMetadatas = entityMetadatas.filter(childMetadata => {\r\n                return metadata.target instanceof Function\r\n                    && childMetadata.target instanceof Function\r\n                    && MetadataUtils.isInherited(childMetadata.target, metadata.target);\r\n            });\r\n        });\r\n\r\n        // generate keys for tables with single-table inheritance\r\n        entityMetadatas\r\n            .filter(metadata => metadata.inheritanceType === \"single-table\" && metadata.discriminatorColumn)\r\n            .forEach(entityMetadata => this.createKeysForTableInheritance(entityMetadata));\r\n\r\n        // build all indices (need to do it after relations and their join columns are built)\r\n        entityMetadatas.forEach(entityMetadata => {\r\n            entityMetadata.indices.forEach(index => index.build(this.connection.driver.namingStrategy));\r\n        });\r\n\r\n        // add lazy initializer for entity relations\r\n        entityMetadatas\r\n            .filter(metadata => metadata.target instanceof Function)\r\n            .forEach(entityMetadata => {\r\n                entityMetadata.relations\r\n                    .filter(relation => relation.isLazy)\r\n                    .forEach(relation => {\r\n                        this.connection.driver.lazyRelationsWrapper.wrap((entityMetadata.target as Function).prototype, relation);\r\n                    });\r\n            });\r\n\r\n        return entityMetadatas;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates entity metadata from the given table args.\r\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\r\n     */\r\n    protected createEntityMetadata(tableArgs: TableMetadataArgs): EntityMetadata {\r\n\r\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\r\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\r\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\r\n        const inheritanceTree: any[] = tableArgs.target instanceof Function\r\n            ? MetadataUtils.getInheritanceTree(tableArgs.target)\r\n            : [tableArgs.target]; // todo: implement later here inheritance for string-targets\r\n\r\n        // if single table inheritance used, we need to copy all children columns in to parent table\r\n        const singleTableChildrenTargets: any[] = this.metadataArgsStorage\r\n            .filterSingleTableChildren(tableArgs.target)\r\n            .map(args => args.target)\r\n            .filter(target => target instanceof Function);\r\n\r\n        inheritanceTree.push(...singleTableChildrenTargets);\r\n\r\n        const entityMetadata = new EntityMetadata({ connection: this.connection, args: tableArgs });\r\n\r\n        const inheritanceType = this.metadataArgsStorage.findInheritanceType(tableArgs.target);\r\n        entityMetadata.inheritanceType = inheritanceType ? inheritanceType.type : undefined;\r\n\r\n        const discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(tableArgs.target);\r\n        entityMetadata.discriminatorValue = discriminatorValue ? discriminatorValue.value : (tableArgs.target as any).name; // todo: pass this to naming strategy to generate a name\r\n\r\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(inheritanceTree));\r\n        entityMetadata.ownColumns = this.metadataArgsStorage.filterColumns(inheritanceTree).map(args => {\r\n            const column = new ColumnMetadata({ entityMetadata, args });\r\n            // if single table inheritance used, we need to mark all inherit table columns as nullable\r\n            if (singleTableChildrenTargets.indexOf(args.target) !== -1)\r\n                column.isNullable = true;\r\n            return column;\r\n        });\r\n\r\n        entityMetadata.ownRelations = this.metadataArgsStorage.filterRelations(inheritanceTree).map(args => {\r\n            return new RelationMetadata({ entityMetadata, args });\r\n        });\r\n        entityMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(inheritanceTree).map(args => {\r\n            return new RelationIdMetadata({ entityMetadata, args });\r\n        });\r\n        entityMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(inheritanceTree).map(args => {\r\n            return new RelationCountMetadata({ entityMetadata, args });\r\n        });\r\n        entityMetadata.indices = this.metadataArgsStorage.filterIndices(inheritanceTree).map(args => {\r\n            return new IndexMetadata({ entityMetadata, args });\r\n        });\r\n        entityMetadata.listeners = this.metadataArgsStorage.filterListeners(inheritanceTree).map(args => {\r\n            return new EntityListenerMetadata(args);\r\n        });\r\n        return entityMetadata;\r\n    }\r\n\r\n    /**\r\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\r\n     * and does the same for all its sub-embeddeds (goes recursively).\r\n     */\r\n    protected createEmbeddedsRecursively(entityMetadata: EntityMetadata, embeddedArgs: EmbeddedMetadataArgs[]): EmbeddedMetadata[] {\r\n        return embeddedArgs.map(embeddedArgs => {\r\n            const embeddedMetadata = new EmbeddedMetadata({ entityMetadata: entityMetadata, args: embeddedArgs });\r\n            embeddedMetadata.columns = this.metadataArgsStorage.filterColumns(embeddedMetadata.type).map(args => {\r\n                return new ColumnMetadata({ entityMetadata, embeddedMetadata, args});\r\n            });\r\n            embeddedMetadata.relations = this.metadataArgsStorage.filterRelations(embeddedMetadata.type).map(args => {\r\n                return new RelationMetadata({ entityMetadata, embeddedMetadata, args });\r\n            });\r\n            embeddedMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(embeddedMetadata.type));\r\n            embeddedMetadata.embeddeds.forEach(subEmbedded => subEmbedded.parentEmbeddedMetadata = embeddedMetadata);\r\n            return embeddedMetadata;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\r\n     */\r\n    protected computeEntityMetadata(entityMetadata: EntityMetadata) {\r\n        entityMetadata.embeddeds.forEach(embedded => embedded.build(this.connection.driver.namingStrategy));\r\n        entityMetadata.embeddeds.forEach(embedded => {\r\n            embedded.columnsFromTree.forEach(column => column.build(this.connection.driver.namingStrategy));\r\n            embedded.relationsFromTree.forEach(relation => relation.build());\r\n        });\r\n        entityMetadata.ownColumns.forEach(column => column.build(this.connection.driver.namingStrategy));\r\n        entityMetadata.ownRelations.forEach(relation => relation.build());\r\n        entityMetadata.relations = entityMetadata.embeddeds.reduce((relations, embedded) => relations.concat(embedded.relationsFromTree), entityMetadata.ownRelations);\r\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOne);\r\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter(relation => relation.isOneToMany);\r\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter(relation => relation.isManyToOne);\r\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToMany);\r\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOneOwner);\r\n        entityMetadata.ownerManyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToManyOwner);\r\n        entityMetadata.treeParentRelation = entityMetadata.relations.find(relation => relation.isTreeParent);\r\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find(relation => relation.isTreeChildren);\r\n        entityMetadata.columns = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), entityMetadata.ownColumns);\r\n        entityMetadata.primaryColumns = entityMetadata.columns.filter(column => column.isPrimary);\r\n        entityMetadata.hasMultiplePrimaryKeys = entityMetadata.primaryColumns.length > 1;\r\n        entityMetadata.generatedColumn = entityMetadata.columns.find(column => column.isGenerated);\r\n        entityMetadata.createDateColumn = entityMetadata.columns.find(column => column.isCreateDate);\r\n        entityMetadata.updateDateColumn = entityMetadata.columns.find(column => column.isUpdateDate);\r\n        entityMetadata.versionColumn = entityMetadata.columns.find(column => column.isVersion);\r\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find(column => column.isDiscriminator);\r\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find(column => column.isTreeLevel);\r\n        entityMetadata.parentIdColumns = entityMetadata.columns.filter(column => column.isParentId);\r\n        entityMetadata.objectIdColumn = entityMetadata.columns.find(column => column.isObjectId);\r\n        entityMetadata.foreignKeys.forEach(foreignKey => foreignKey.build(this.connection.driver.namingStrategy));\r\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();\r\n\r\n        entityMetadata.relationIds.forEach(relationId => relationId.build());\r\n        entityMetadata.relationCounts.forEach(relationCount => relationCount.build());\r\n        entityMetadata.embeddeds.forEach(embedded => {\r\n            embedded.relationIdsFromTree.forEach(relationId => relationId.build());\r\n            embedded.relationCountsFromTree.forEach(relationCount => relationCount.build());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Computes entity metadata's relations inverse side properties.\r\n     */\r\n    protected computeInverseProperties(entityMetadata: EntityMetadata, entityMetadatas: EntityMetadata[]) {\r\n        entityMetadata.relations.forEach(relation => {\r\n\r\n            // compute inverse side (related) entity metadatas for all relation metadatas\r\n            const inverseEntityMetadata = entityMetadatas.find(m => m.target === relation.type || (typeof relation.type === \"string\" && m.targetName === relation.type));\r\n            if (!inverseEntityMetadata)\r\n                throw new Error(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyPath + \" was not found. Check if you specified a correct entity object, check its really entity and its connected in the connection options.\");\r\n\r\n            relation.inverseEntityMetadata = inverseEntityMetadata;\r\n            relation.inverseSidePropertyPath = relation.buildInverseSidePropertyPath();\r\n\r\n            // and compute inverse relation and mark if it has such\r\n            relation.inverseRelation = inverseEntityMetadata.relations.find(foundRelation => foundRelation.propertyPath === relation.inverseSidePropertyPath);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates indices for the table of single table inheritance.\r\n     */\r\n    protected createKeysForTableInheritance(entityMetadata: EntityMetadata) {\r\n        entityMetadata.indices.push(\r\n            new IndexMetadata({\r\n                entityMetadata: entityMetadata,\r\n                columns: [entityMetadata.discriminatorColumn!],\r\n                args: {\r\n                    target: entityMetadata.target,\r\n                    unique: false\r\n                }\r\n            }),\r\n            new IndexMetadata({\r\n                entityMetadata: entityMetadata,\r\n                columns: [...entityMetadata.primaryColumns, entityMetadata.discriminatorColumn!],\r\n                args: {\r\n                    target: entityMetadata.target,\r\n                    unique: false\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n}\r\n\r\n// generate virtual column with foreign key for class-table inheritance\r\n/*entityMetadatas.forEach(entityMetadata => {\r\n if (!entityMetadata.parentEntityMetadata)\r\n return;\r\n\r\n const parentPrimaryColumns = entityMetadata.parentEntityMetadata.primaryColumns;\r\n const parentIdColumns = parentPrimaryColumns.map(primaryColumn => {\r\n const columnName = this.namingStrategy.classTableInheritanceParentColumnName(entityMetadata.parentEntityMetadata.tableName, primaryColumn.propertyName);\r\n const column = new ColumnMetadataBuilder(entityMetadata);\r\n column.type = primaryColumn.type;\r\n column.propertyName = primaryColumn.propertyName; // todo: check why needed\r\n column.givenName = columnName;\r\n column.mode = \"parentId\";\r\n column.isUnique = true;\r\n column.isNullable = false;\r\n // column.entityTarget = entityMetadata.target;\r\n return column;\r\n });\r\n\r\n // add foreign key\r\n const foreignKey = new ForeignKeyMetadataBuilder(\r\n entityMetadata,\r\n parentIdColumns,\r\n entityMetadata.parentEntityMetadata,\r\n parentPrimaryColumns,\r\n \"CASCADE\"\r\n );\r\n entityMetadata.ownColumns.push(...parentIdColumns);\r\n entityMetadata.foreignKeys.push(foreignKey);\r\n });*/\r\n\r\n\r\n/*protected createEntityMetadata(metadata: EntityMetadata, options: {\r\n userSpecifiedTableName?: string,\r\n closureOwnerTableName?: string,\r\n }) {\r\n\r\n const tableNameUserSpecified = options.userSpecifiedTableName;\r\n const isClosureJunction = metadata.tableType === \"closure-junction\";\r\n const targetName = metadata.target instanceof Function ? (metadata.target as any).name : metadata.target;\r\n const tableNameWithoutPrefix = isClosureJunction\r\n ? this.namingStrategy.closureJunctionTableName(options.closureOwnerTableName!)\r\n : this.namingStrategy.tableName(targetName, options.userSpecifiedTableName);\r\n\r\n const tableName = this.namingStrategy.prefixTableName(this.driver.options.tablesPrefix, tableNameWithoutPrefix);\r\n\r\n // for virtual tables (like junction table) target is equal to undefined at this moment\r\n // we change this by setting virtual's table name to a target name\r\n // todo: add validation so targets with same schema names won't conflicts with virtual table names\r\n metadata.target = metadata.target ? metadata.target : tableName;\r\n metadata.targetName = targetName;\r\n metadata.givenTableName = tableNameUserSpecified;\r\n metadata.tableNameWithoutPrefix = tableNameWithoutPrefix;\r\n metadata.tableName = tableName;\r\n metadata.name = targetName ? targetName : tableName;\r\n // metadata.namingStrategy = this.namingStrategy;\r\n }*/\r\n\r\n/*protected createEntityMetadata(tableArgs: any, argsForTable: any, ): EntityMetadata {\r\n const metadata = new EntityMetadata({\r\n junction: false,\r\n target: tableArgs.target,\r\n tablesPrefix: this.driver.options.tablesPrefix,\r\n namingStrategy: this.namingStrategy,\r\n tableName: argsForTable.name,\r\n tableType: argsForTable.type,\r\n orderBy: argsForTable.orderBy,\r\n engine: argsForTable.engine,\r\n skipSchemaSync: argsForTable.skipSchemaSync,\r\n columnMetadatas: columns,\r\n relationMetadatas: relations,\r\n relationIdMetadatas: relationIds,\r\n relationCountMetadatas: relationCounts,\r\n indexMetadatas: indices,\r\n embeddedMetadatas: embeddeds,\r\n inheritanceType: mergedArgs.inheritance ? mergedArgs.inheritance.type : undefined,\r\n discriminatorValue: discriminatorValueArgs ? discriminatorValueArgs.value : (tableArgs.target as any).name // todo: pass this to naming strategy to generate a name\r\n }, this.lazyRelationsWrapper);\r\n return metadata;\r\n }*/\r\n\r\n\r\n// const tables = [mergedArgs.table].concat(mergedArgs.children);\r\n// tables.forEach(tableArgs => {\r\n\r\n// find embeddable tables for embeddeds registered in this table and create EmbeddedMetadatas from them\r\n// const findEmbeddedsRecursively = (embeddedArgs: EmbeddedMetadataArgs[]) => {\r\n//     const embeddeds: EmbeddedMetadata[] = [];\r\n//     embeddedArgs.forEach(embedded => {\r\n//         const embeddableTable = embeddableMergedArgs.find(embeddedMergedArgs => embeddedMergedArgs.table.target === embedded.type());\r\n//         if (embeddableTable) {\r\n//             const columns = embeddableTable.columns.toArray().map(args => new ColumnMetadata(args));\r\n//             const relations = embeddableTable.relations.toArray().map(args => new RelationMetadata(args));\r\n//             const subEmbeddeds = findEmbeddedsRecursively(embeddableTable.embeddeds.toArray());\r\n//             embeddeds.push(new EmbeddedMetadata(columns, relations, subEmbeddeds, embedded));\r\n//         }\r\n//     });\r\n//     return embeddeds;\r\n// };\r\n// const embeddeds = findEmbeddedsRecursively(mergedArgs.embeddeds.toArray());\r\n\r\n// create metadatas from args\r\n// const argsForTable = mergedArgs.inheritance && mergedArgs.inheritance.type === \"single-table\" ? mergedArgs.table : tableArgs;\r\n\r\n// const table = new TableMetadata(argsForTable);\r\n// const columns = mergedArgs.columns.toArray().map(args => {\r\n//\r\n//     // if column's target is a child table then this column should have all nullable columns\r\n//     if (mergedArgs.inheritance &&\r\n//         mergedArgs.inheritance.type === \"single-table\" &&\r\n//         args.target !== mergedArgs.table.target && !!mergedArgs.children.find(childTable => childTable.target === args.target)) {\r\n//         args.options.nullable = true;\r\n//     }\r\n//     return new ColumnMetadata(args);\r\n// });\r\n// const discriminatorValueArgs = mergedArgs.discriminatorValues.find(discriminatorValueArgs => {\r\n//     return discriminatorValueArgs.target === tableArgs.target;\r\n// });\r\n\r\n\r\n\r\n// after all metadatas created we set parent entity metadata for class-table inheritance\r\n// entityMetadatas.forEach(entityMetadata => {\r\n//     const mergedArgs = realTables.find(args => args.target === entityMetadata.target);\r\n//     if (mergedArgs && mergedArgs.parent) {\r\n//         const parentEntityMetadata = entityMetadatas.find(entityMetadata => entityMetadata.target === (mergedArgs!.parent! as any).target); // todo: weird compiler error here, thats why type casing is used\r\n//         if (parentEntityMetadata)\r\n//             entityMetadata.parentEntityMetadata = parentEntityMetadata;\r\n//     }\r\n// });","export class RandomGenerator {\r\n\r\n    /**\r\n     *  discuss at: http://locutus.io/php/sha1/\r\n     * original by: Webtoolkit.info (http://www.webtoolkit.info/)\r\n     * improved by: Michael White (http://getsprink.com)\r\n     * improved by: Kevin van Zonneveld (http://kvz.io)\r\n     *    input by: Brett Zamir (http://brett-zamir.me)\r\n     *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then\r\n     *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly\r\n     *      note 1: in a steaming fashion for faster and more efficient hashing\r\n     *   example 1: sha1('Kevin van Zonneveld')\r\n     *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'\r\n     */\r\n    static sha1(str: string) {\r\n\r\n        let _rotLeft = function(n: any, s: any) {\r\n            let t4 = (n << s) | (n >>> (32 - s));\r\n            return t4;\r\n        };\r\n\r\n        let _cvtHex = function(val: any) {\r\n            let str = \"\";\r\n            let i;\r\n            let v;\r\n\r\n            for (i = 7; i >= 0; i--) {\r\n                v = (val >>> (i * 4)) & 0x0f;\r\n                str += v.toString(16);\r\n            }\r\n            return str;\r\n        };\r\n\r\n        let blockstart;\r\n        let i, j;\r\n        let W = new Array(80);\r\n        let H0 = 0x67452301;\r\n        let H1 = 0xEFCDAB89;\r\n        let H2 = 0x98BADCFE;\r\n        let H3 = 0x10325476;\r\n        let H4 = 0xC3D2E1F0;\r\n        let A, B, C, D, E;\r\n        let temp;\r\n\r\n        // utf8_encode\r\n        str = /*unescape*/(encodeURIComponent(str));\r\n        let strLen = str.length;\r\n\r\n        let wordArray = [];\r\n        for (i = 0; i < strLen - 3; i += 4) {\r\n            j = str.charCodeAt(i) << 24 |\r\n                str.charCodeAt(i + 1) << 16 |\r\n                str.charCodeAt(i + 2) << 8 |\r\n                str.charCodeAt(i + 3);\r\n            wordArray.push(j);\r\n        }\r\n\r\n        switch (strLen % 4) {\r\n            case 0:\r\n                i = 0x080000000;\r\n                break;\r\n            case 1:\r\n                i = str.charCodeAt(strLen - 1) << 24 | 0x0800000;\r\n                break;\r\n            case 2:\r\n                i = str.charCodeAt(strLen - 2) << 24 | str.charCodeAt(strLen - 1) << 16 | 0x08000;\r\n                break;\r\n            case 3:\r\n                i = str.charCodeAt(strLen - 3) << 24 |\r\n                    str.charCodeAt(strLen - 2) << 16 |\r\n                    str.charCodeAt(strLen - 1) <<\r\n                    8 | 0x80;\r\n                break;\r\n        }\r\n\r\n        wordArray.push(i);\r\n\r\n        while ((wordArray.length % 16) !== 14) {\r\n            wordArray.push(0);\r\n        }\r\n\r\n        wordArray.push(strLen >>> 29);\r\n        wordArray.push((strLen << 3) & 0x0ffffffff);\r\n\r\n        for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {\r\n            for (i = 0; i < 16; i++) {\r\n                W[i] = wordArray[blockstart + i];\r\n            }\r\n            for (i = 16; i <= 79; i++) {\r\n                W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\r\n            }\r\n\r\n            A = H0;\r\n            B = H1;\r\n            C = H2;\r\n            D = H3;\r\n            E = H4;\r\n\r\n            for (i = 0; i <= 19; i++) {\r\n                temp = (_rotLeft(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;\r\n                E = D;\r\n                D = C;\r\n                C = _rotLeft(B, 30);\r\n                B = A;\r\n                A = temp;\r\n            }\r\n\r\n            for (i = 20; i <= 39; i++) {\r\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;\r\n                E = D;\r\n                D = C;\r\n                C = _rotLeft(B, 30);\r\n                B = A;\r\n                A = temp;\r\n            }\r\n\r\n            for (i = 40; i <= 59; i++) {\r\n                temp = (_rotLeft(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;\r\n                E = D;\r\n                D = C;\r\n                C = _rotLeft(B, 30);\r\n                B = A;\r\n                A = temp;\r\n            }\r\n\r\n            for (i = 60; i <= 79; i++) {\r\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;\r\n                E = D;\r\n                D = C;\r\n                C = _rotLeft(B, 30);\r\n                B = A;\r\n                A = temp;\r\n            }\r\n\r\n            H0 = (H0 + A) & 0x0ffffffff;\r\n            H1 = (H1 + B) & 0x0ffffffff;\r\n            H2 = (H2 + C) & 0x0ffffffff;\r\n            H3 = (H3 + D) & 0x0ffffffff;\r\n            H4 = (H4 + E) & 0x0ffffffff;\r\n        }\r\n\r\n        temp = _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4);\r\n        return temp.toLowerCase();\r\n    }\r\n\r\n}","/**\r\n * Converts string into camelCase.\r\n *\r\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\r\n */\r\nexport function camelCase(str: string) {\r\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function(match, p1, p2, offset) {\r\n        if (p2) return p2.toUpperCase();\r\n        return p1.toLowerCase();\r\n    });\r\n}\r\n\r\n/**\r\n * Converts string into snake-case.\r\n *\r\n * @see http://stackoverflow.com/questions/30521224/javascript-convert-pascalcase-to-underscore-case\r\n */\r\nexport function snakeCase(str: string) {\r\n    return str.replace(/(?:^|\\.?)([A-Z])/g, (x, y) => \"_\" + y.toLowerCase()).replace(/^_/, \"\");\r\n}\r\n\r\n/**\r\n * Converts string into title-case.\r\n *\r\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\r\n */\r\nexport function titleCase(str: string) {\r\n    return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\r\n}","import {NamingStrategyInterface} from \"./NamingStrategyInterface\";\r\nimport {RandomGenerator} from \"../util/RandomGenerator\";\r\nimport {camelCase, snakeCase, titleCase} from \"../util/StringUtils\";\r\n\r\n/**\r\n * Naming strategy that is used by default.\r\n */\r\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\r\n\r\n    /**\r\n     * Normalizes table name.\r\n     *\r\n     * @param targetName Name of the target entity that can be used to generate a table name.\r\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\r\n     */\r\n    tableName(targetName: string, userSpecifiedName: string): string {\r\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\r\n    }\r\n\r\n    /**\r\n     * Creates a table name for a junction table of a closure table.\r\n     *\r\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\r\n     */\r\n    closureJunctionTableName(originalClosureTableName: string): string {\r\n        return originalClosureTableName + \"_closure\";\r\n    }\r\n\r\n    columnName(propertyName: string, customName: string, embeddedPrefixes: string[]): string { // todo: simplify\r\n        if (embeddedPrefixes.length)\r\n            return camelCase(embeddedPrefixes.join(\"_\")) + (customName ? titleCase(customName) : titleCase(propertyName));\r\n\r\n        return customName ? customName : propertyName;\r\n    }\r\n\r\n    relationName(propertyName: string): string {\r\n        return propertyName;\r\n    }\r\n\r\n    indexName(customName: string|undefined, tableName: string, columns: string[]): string {\r\n        if (customName)\r\n            return customName;\r\n\r\n        const key = \"ind_\" + tableName + \"_\" + columns.join(\"_\");\r\n        return \"ind_\" + RandomGenerator.sha1(key).substr(0, 27);\r\n    }\r\n\r\n    joinColumnName(relationName: string, referencedColumnName: string): string {\r\n        return camelCase(relationName + \"_\" + referencedColumnName);\r\n    }\r\n\r\n    joinTableName(firstTableName: string,\r\n                  secondTableName: string,\r\n                  firstPropertyName: string,\r\n                  secondPropertyName: string): string {\r\n        return snakeCase(firstTableName + \"_\" + firstPropertyName.replace(/\\./gi, \"_\") + \"_\" + secondTableName);\r\n    }\r\n\r\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string {\r\n        return columnName + \"_\" + index;\r\n    }\r\n\r\n    joinTableColumnName(tableName: string, propertyName: string, columnName?: string): string {\r\n        return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\r\n    }\r\n\r\n    foreignKeyName(tableName: string, columnNames: string[], referencedTableName: string, referencedColumnNames: string[]): string {\r\n        const key = `${tableName}_${columnNames.join(\"_\")}_${referencedTableName}_${referencedColumnNames.join(\"_\")}`;\r\n        return \"fk_\" + RandomGenerator.sha1(key).substr(0, 27); // todo: use crypto instead?\r\n    }\r\n\r\n    classTableInheritanceParentColumnName(parentTableName: any, parentTableIdPropertyName: any): string {\r\n        return camelCase(parentTableName + \"_\" + parentTableIdPropertyName);\r\n    }\r\n\r\n    /**\r\n     * Adds globally set prefix to the table name.\r\n     * This method is executed no matter if prefix was set or not.\r\n     * Table name is either user's given table name, either name generated from entity target.\r\n     * Note that table name comes here already normalized by #tableName method.\r\n     */\r\n    prefixTableName(prefix: string, tableName: string): string {\r\n        return prefix + tableName;\r\n    }\r\n\r\n}\r\n","/**\r\n * Thrown when consumer tries to import entities / entity schemas / subscribers / naming strategies after connection\r\n * is established.\r\n */\r\nexport class CannotImportAlreadyConnectedError extends Error {\r\n    name = \"CannotImportAlreadyConnected\";\r\n\r\n    constructor(importStuff: string, connectionName: string) {\r\n        super();\r\n        this.message = `Cannot import ${importStuff} for \"${connectionName}\" connection because connection to the database already established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries close not opened connection.\r\n */\r\nexport class CannotCloseNotConnectedError extends Error {\r\n    name = \"CannotCloseNotConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot close \"${connectionName}\" connection because connection is not yet established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to connect when he already connected.\r\n */\r\nexport class CannotConnectAlreadyConnectedError extends Error {\r\n    name = \"CannotConnectAlreadyConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot create a \"${connectionName}\" connection because connection to the database already established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to use naming strategy that does not exist.\r\n */\r\nexport class NamingStrategyNotFoundError extends Error {\r\n    name = \"NamingStrategyNotFoundError\";\r\n\r\n    constructor(strategyName: string|Function, connectionName: string) {\r\n        super();\r\n        const name = strategyName instanceof Function ? (strategyName as any).name : strategyName;\r\n        this.message = `Naming strategy \"${name}\" was not found. Looks like this naming strategy does not ` +\r\n            `exist or it was not registered in current \"${connectionName}\" connection?`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Describes column options.\r\n */\r\nexport interface JoinColumnOptions {\r\n\r\n    /**\r\n     * Name of the column.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Name of the column in the entity to which this column is referenced.\r\n     */\r\n    referencedColumnName?: string; // TODO rename to referencedColumn\r\n\r\n}","import {JoinColumnOptions} from \"./JoinColumnOptions\";\r\n\r\n/**\r\n * Describes all relation's options.\r\n */\r\nexport interface JoinTableMultipleColumnsOptions {\r\n\r\n    /**\r\n     * Name of the table that will be created to store values of the both tables (join table).\r\n     * By default is auto generated.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * First column of the join table.\r\n     */\r\n    joinColumns?: JoinColumnOptions[];\r\n\r\n    /**\r\n     * Second (inverse) column of the join table.\r\n     */\r\n    inverseJoinColumns?: JoinColumnOptions[];\r\n\r\n}","import {TableType} from \"../metadata/types/TableTypes\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {JoinColumnOptions} from \"../decorator/options/JoinColumnOptions\";\r\nimport {ColumnType} from \"../metadata/types/ColumnTypes\";\r\nimport {RelationType} from \"../metadata/types/RelationTypes\";\r\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMuplipleColumnsOptions\";\r\nimport {OnDeleteType} from \"../metadata/types/OnDeleteType\";\r\n\r\nexport interface EntitySchema {\r\n\r\n    /**\r\n     * Name of the schema it extends.\r\n     */\r\n    extends?: string;\r\n\r\n    /**\r\n     * Target bind to this entity schema. Optional.\r\n     */\r\n    target?: Function;\r\n\r\n    /**\r\n     * Entity name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Entity table's options.\r\n     */\r\n    table?: {\r\n\r\n        /**\r\n         * Table name.\r\n         */\r\n        name?: string;\r\n\r\n        /**\r\n         * Table type.\r\n         */\r\n        type?: TableType;\r\n\r\n        /**\r\n         * Specifies a property name by which queries will perform ordering by default when fetching rows.\r\n         */\r\n        orderBy?: OrderByCondition;\r\n\r\n    };\r\n\r\n    /**\r\n     * Entity column's options.\r\n     */\r\n    columns: {\r\n        [columnName: string]: {\r\n\r\n            /**\r\n             * Indicates if this column is a primary column.\r\n             */\r\n            primary: boolean;\r\n\r\n            /**\r\n             * Indicates if this column is a created date column.\r\n             */\r\n            createDate: boolean;\r\n\r\n            /**\r\n             * Indicates if this column is an update date column.\r\n             */\r\n            updateDate: boolean;\r\n\r\n            /**\r\n             * Indicates if this column is a version column.\r\n             */\r\n            version: boolean;\r\n\r\n            /**\r\n             * Indicates if this column is a treeChildrenCount column.\r\n             */\r\n            treeChildrenCount: boolean;\r\n\r\n            /**\r\n             * Indicates if this column is a treeLevel column.\r\n             */\r\n            treeLevel: boolean;\r\n\r\n            /**\r\n             * Column type. Must be one of the value from the ColumnTypes class.\r\n             */\r\n            type: ColumnType;\r\n\r\n            /**\r\n             * Column name in the database.\r\n             */\r\n            name?: string;\r\n\r\n            /**\r\n             * Column type's length. For example type = \"string\" and length = 100 means that ORM will create a column with\r\n             * type varchar(100).\r\n             */\r\n            length?: string;\r\n\r\n            /**\r\n             * Specifies if this column will use AUTO_INCREMENT or not (e.g. generated number).\r\n             */\r\n            generated?: boolean;\r\n\r\n            /**\r\n             * Specifies if column's value must be unique or not.\r\n             */\r\n            unique?: boolean;\r\n\r\n            /**\r\n             * Indicates if column's value can be set to NULL.\r\n             */\r\n            nullable?: boolean;\r\n\r\n            /**\r\n             * Extra column definition. Should be used only in emergency situations. Note that if you'll use this property\r\n             * auto schema generation will not work properly anymore. Avoid using it.\r\n             */\r\n            columnDefinition?: string;\r\n\r\n            /**\r\n             * Column comment.\r\n             */\r\n            comment?: string;\r\n\r\n            /**\r\n             * Default database value.\r\n             */\r\n            default?: string;\r\n\r\n            /**\r\n             * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\r\n             * number of digits that are stored for the values.\r\n             */\r\n            precision?: number;\r\n\r\n            /**\r\n             * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\r\n             * of digits to the right of the decimal point and must not be greater than precision.\r\n             */\r\n            scale?: number;\r\n\r\n            /**\r\n             * Column collation. Note that not all databases support it.\r\n             */\r\n            collation?: string; // todo: looks like this is not used\r\n\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Entity relation's options.\r\n     */\r\n    relations: {\r\n        [relationName: string]: {\r\n\r\n            /**\r\n             * Indicates with which entity this relation is made.\r\n             */\r\n            target: Function|string;\r\n\r\n            /**\r\n             * Type of relation. Can be one of the value of the RelationTypes class.\r\n             */\r\n            type: RelationType;\r\n\r\n            /**\r\n             * Inverse side of the relation.\r\n             */\r\n            inverseSide?: string;\r\n\r\n            /**\r\n             * Indicates if this relation will be lazily loaded.\r\n             */\r\n            isLazy?: boolean;\r\n\r\n            /**\r\n             * Join table options of this column. If set to true then it simply means that it has a join table.\r\n             */\r\n            joinTable?: boolean|JoinColumnOptions|JoinTableMultipleColumnsOptions;\r\n\r\n            /**\r\n             * Join column options of this column. If set to true then it simply means that it has a join column.\r\n             */\r\n            joinColumn?: boolean|{\r\n\r\n                /**\r\n                 * Name of the column.\r\n                 */\r\n                name?: string;\r\n\r\n                /**\r\n                 * Name of the column in the entity to which this column is referenced.\r\n                 */\r\n                referencedColumnName?: string;\r\n            };\r\n\r\n            /**\r\n             * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\r\n             */\r\n            isTreeParent?: boolean;\r\n\r\n            /**\r\n             * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\r\n             */\r\n            isTreeChildren?: boolean;\r\n\r\n            /**\r\n             * If set to true then it means that related object can be allowed to be inserted / updated / removed to the db.\r\n             * This is option a shortcut if you would like to set cascadeInsert, cascadeUpdate and cascadeRemove to true.\r\n             */\r\n            cascadeAll?: boolean;\r\n\r\n            /**\r\n             * If set to true then it means that related object can be allowed to be inserted to the db.\r\n             */\r\n            cascadeInsert?: boolean;\r\n\r\n            /**\r\n             * If set to true then it means that related object can be allowed to be updated in the db.\r\n             */\r\n            cascadeUpdate?: boolean;\r\n\r\n            /**\r\n             * If set to true then it means that related object can be allowed to be remove from the db.\r\n             */\r\n            cascadeRemove?: boolean;\r\n\r\n            /**\r\n             * Default database value.\r\n             */\r\n            default?: any;\r\n\r\n            /**\r\n             * Indicates if relation column value can be nullable or not.\r\n             */\r\n            nullable?: boolean;\r\n\r\n            /**\r\n             * Database cascade action on delete.\r\n             */\r\n            onDelete?: OnDeleteType;\r\n\r\n        };\r\n    };\r\n\r\n}","/**\r\n * Thrown when consumer tries to sync a database schema after connection is established\r\n */\r\nexport class CannotSyncNotConnectedError extends Error {\r\n    name = \"CannotSyncNotConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot sync schema of the \"${connectionName}\" connection because connection is not yet established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to change used naming strategy after connection is established.\r\n */\r\nexport class CannotUseNamingStrategyNotConnectedError extends Error {\r\n    name = \"CannotUseNamingStrategyNotConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot use a given naming strategy for \"${connectionName}\" connection because connection to the database already established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {EntitySubscriberInterface} from \"./EntitySubscriberInterface\";\r\nimport {EventListenerTypes} from \"../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {Subject} from \"../persistence/Subject\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\n\r\n/**\r\n * Broadcaster provides a helper methods to broadcast events to the subscribers.\r\n */\r\nexport class Broadcaster {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection,\r\n                private subscriberMetadatas: EntitySubscriberInterface<any>[]) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\" events for all given subjects.\r\n     */\r\n    async broadcastBeforeEventsForAll(entityManager: EntityManager, insertSubjects: Subject[], updateSubjects: Subject[], removeSubjects: Subject[]): Promise<void> {\r\n        const insertPromises = insertSubjects.map(subject => this.broadcastBeforeInsertEvent(entityManager, subject));\r\n        const updatePromises = updateSubjects.map(subject => this.broadcastBeforeUpdateEvent(entityManager, subject));\r\n        const removePromises = removeSubjects.map(subject => this.broadcastBeforeRemoveEvent(entityManager, subject));\r\n        const allPromises = insertPromises.concat(updatePromises).concat(removePromises);\r\n        await Promise.all(allPromises);\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\" events for all given subjects.\r\n     */\r\n    async broadcastAfterEventsForAll(entityManager: EntityManager, insertSubjects: Subject[], updateSubjects: Subject[], removeSubjects: Subject[]): Promise<void> {\r\n        const insertPromises = insertSubjects.map(subject => this.broadcastAfterInsertEvent(entityManager, subject));\r\n        const updatePromises = updateSubjects.map(subject => this.broadcastAfterUpdateEvent(entityManager, subject));\r\n        const removePromises = removeSubjects.map(subject => this.broadcastAfterRemoveEvent(entityManager, subject));\r\n        const allPromises = insertPromises.concat(updatePromises).concat(removePromises);\r\n        await Promise.all(allPromises);\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"BEFORE_INSERT\" event.\r\n     * Before insert event is executed before entity is being inserted to the database for the first time.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastBeforeInsertEvent(manager: EntityManager, subject: Subject): Promise<void> {\r\n\r\n        const listeners = subject.metadata.listeners\r\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_INSERT && listener.isAllowed(subject.entity))\r\n            .map(entityListener => subject.entity[entityListener.propertyName]()); // getValue() ?\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.beforeInsert)\r\n            .map(subscriber => subscriber.beforeInsert!({\r\n                manager: manager,\r\n                entity: subject.entity\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"BEFORE_UPDATE\" event.\r\n     * Before update event is executed before entity is being updated in the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastBeforeUpdateEvent(manager: EntityManager, subject: Subject): Promise<void> { // todo: send relations too?\r\n\r\n        const listeners = subject.metadata.listeners\r\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_UPDATE && listener.isAllowed(subject.entity))\r\n            .map(entityListener => subject.entity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.beforeUpdate)\r\n            .map(subscriber => subscriber.beforeUpdate!({\r\n                manager: manager,\r\n                entity: subject.entity,\r\n                databaseEntity: subject.databaseEntity,\r\n                updatedColumns: subject.diffColumns,\r\n                updatedRelations: subject.diffRelations,\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"BEFORE_REMOVE\" event.\r\n     * Before remove event is executed before entity is being removed from the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastBeforeRemoveEvent(manager: EntityManager, subject: Subject): Promise<void> {\r\n\r\n        const listeners = subject.metadata.listeners\r\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_REMOVE && listener.isAllowed(subject.entity))\r\n            .map(entityListener => subject.databaseEntity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.beforeRemove)\r\n            .map(subscriber => subscriber.beforeRemove!({\r\n                manager: manager,\r\n                entity: subject.hasEntity ? subject.entity : undefined,\r\n                databaseEntity: subject.databaseEntity,\r\n                entityId: subject.metadata.getEntityIdMixedMap(subject.databaseEntity)\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_INSERT\" event.\r\n     * After insert event is executed after entity is being persisted to the database for the first time.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastAfterInsertEvent(manager: EntityManager, subject: Subject): Promise<void> {\r\n\r\n        const listeners = subject.metadata.listeners\r\n            .filter(listener => listener.type === EventListenerTypes.AFTER_INSERT && listener.isAllowed(subject.entity))\r\n            .map(entityListener => subject.entity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.afterInsert)\r\n            .map(subscriber => subscriber.afterInsert!({\r\n                manager: manager,\r\n                entity: subject.entity\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_UPDATE\" event.\r\n     * After update event is executed after entity is being updated in the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastAfterUpdateEvent(manager: EntityManager, subject: Subject): Promise<void> {\r\n\r\n        const listeners = subject.metadata.listeners\r\n            .filter(listener => listener.type === EventListenerTypes.AFTER_UPDATE && listener.isAllowed(subject.entity))\r\n            .map(entityListener => subject.entity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.afterUpdate)\r\n            .map(subscriber => subscriber.afterUpdate!({\r\n                manager: manager,\r\n                entity: subject.entity,\r\n                databaseEntity: subject.databaseEntity,\r\n                updatedColumns: subject.diffColumns,\r\n                updatedRelations: subject.diffRelations,\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_REMOVE\" event.\r\n     * After remove event is executed after entity is being removed from the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastAfterRemoveEvent(manager: EntityManager, subject: Subject): Promise<void> {\r\n\r\n        const listeners = subject.metadata.listeners\r\n            .filter(listener => listener.type === EventListenerTypes.AFTER_REMOVE && listener.isAllowed(subject.entity))\r\n            .map(entityListener => subject.entity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget!) && subscriber.afterRemove)\r\n            .map(subscriber => subscriber.afterRemove!({\r\n                manager: manager,\r\n                entity: subject.hasEntity ? subject.entity : undefined,\r\n                databaseEntity: subject.databaseEntity,\r\n                entityId: subject.metadata.getEntityIdMixedMap(subject.databaseEntity)\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_LOAD\" event for all given entities, and their sub-entities.\r\n     * After load event is executed after entity has been loaded from the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastLoadEventsForAll(target: Function|string, entities: ObjectLiteral[]): Promise<void> {\r\n        await Promise.all(entities.map(entity => this.broadcastLoadEvents(target, entity)));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_LOAD\" event for the given entity and all its sub-entities.\r\n     * After load event is executed after entity has been loaded from the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastLoadEvents(target: Function|string, entity: ObjectLiteral): Promise<void> {\r\n        if (entity instanceof Promise) // todo: check why need this?\r\n            return;\r\n\r\n        // collect load events for all children entities that were loaded with the main entity\r\n        const children = this.connection.getMetadata(target).relations.reduce((promises, relation) => {\r\n            if (!entity.hasOwnProperty(relation.propertyName))\r\n                return promises;\r\n\r\n            const value = relation.getEntityValue(entity);\r\n            if (value instanceof Array) {\r\n                promises = promises.concat(this.broadcastLoadEventsForAll(relation.inverseEntityMetadata.target!, value));\r\n            } else if (value) {\r\n                promises.push(this.broadcastLoadEvents(relation.inverseEntityMetadata.target!, value));\r\n            }\r\n\r\n            return promises;\r\n        }, [] as Promise<void>[]);\r\n\r\n        const listeners = this.connection.getMetadata(target).listeners\r\n            .filter(listener => listener.type === EventListenerTypes.AFTER_LOAD && listener.isAllowed(entity))\r\n            .map(listener => entity[listener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, target) && subscriber.afterLoad)\r\n            .map(subscriber => subscriber.afterLoad!(entity));\r\n\r\n        await Promise.all(children.concat(listeners.concat(subscribers)));\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,\r\n     * or listens our entity.\r\n     */\r\n    protected isAllowedSubscriber(subscriber: EntitySubscriberInterface<any>, target: Function|string): boolean {\r\n        return  !subscriber.listenTo ||\r\n                !subscriber.listenTo() ||\r\n                subscriber.listenTo() === Object ||\r\n                subscriber.listenTo() === target;\r\n    }\r\n\r\n}","import {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {TableSchema} from \"./schema/TableSchema\";\r\nimport {ColumnSchema} from \"./schema/ColumnSchema\";\r\nimport {ForeignKeySchema} from \"./schema/ForeignKeySchema\";\r\nimport {IndexSchema} from \"./schema/IndexSchema\";\r\nimport {Driver} from \"../driver/Driver\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {Logger} from \"../logger/Logger\";\r\nimport {PrimaryKeySchema} from \"./schema/PrimaryKeySchema\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\n\r\n/**\r\n * Creates complete tables schemas in the database based on the entity metadatas.\r\n *\r\n * Steps how schema is being built:\r\n * 1. load list of all tables with complete column and keys information from the db\r\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\r\n * 3. create new tables that does not exist in the db, but exist in the metadata\r\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\r\n * 5. add columns from metadata which does not exist in the table\r\n * 6. update all exist columns which metadata has changed\r\n * 7. update primary keys - update old and create new primary key from changed columns\r\n * 8. create foreign keys which does not exist in the table yet\r\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\r\n */\r\nexport class SchemaBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Used to execute schema creation queries in a single connection.\r\n     */\r\n    protected queryRunner: QueryRunner;\r\n\r\n    /**\r\n     * All synchronized tables in the database.\r\n     */\r\n    protected tableSchemas: TableSchema[];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param driver Driver needs to create a query runner\r\n     * @param logger Used to log schema creation events\r\n     * @param entityMetadatas All entities to create schema for\r\n     */\r\n    constructor(protected driver: Driver,\r\n                protected logger: Logger,\r\n                protected entityMetadatas: EntityMetadata[]) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates complete schemas for the given entity metadatas.\r\n     */\r\n    async build(): Promise<void> {\r\n        this.queryRunner = await this.driver.createQueryRunner();\r\n        this.tableSchemas = await this.loadTableSchemas();\r\n\r\n        await this.queryRunner.beginTransaction();\r\n        try {\r\n            await this.dropOldForeignKeys();\r\n            // await this.dropOldPrimaryKeys(); // todo: need to drop primary column because column updates are not possible\r\n            await this.createNewTables();\r\n            await this.dropRemovedColumns();\r\n            await this.addNewColumns();\r\n            await this.updateExistColumns();\r\n            await this.updatePrimaryKeys();\r\n            await this.createIndices(); // we need to create indices before foreign keys because foreign keys rely on unique indices\r\n            await this.createForeignKeys();\r\n            await this.queryRunner.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.queryRunner.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.queryRunner.release();\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\r\n        return this.entityMetadatas.filter(metadata => !metadata.skipSchemaSync && metadata.tableType !== \"single-table-child\");\r\n    }\r\n\r\n    /**\r\n     * Loads all table schemas from the database.\r\n     */\r\n    protected loadTableSchemas(): Promise<TableSchema[]> {\r\n        const tableNames = this.entityToSyncMetadatas.map(metadata => metadata.tableName);\r\n        return this.queryRunner.loadTableSchemas(tableNames);\r\n    }\r\n\r\n    /**\r\n     * Drops all (old) foreign keys that exist in the table schemas, but do not exist in the entity metadata.\r\n     */\r\n    protected async dropOldForeignKeys(): Promise<void> {\r\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\r\n            const foreignKeySchemasToDrop = tableSchema.foreignKeys.filter(foreignKeySchema => {\r\n                return !metadata.foreignKeys.find(metadataForeignKey => metadataForeignKey.name === foreignKeySchema.name);\r\n            });\r\n            if (foreignKeySchemasToDrop.length === 0)\r\n                return;\r\n\r\n            this.logger.logSchemaBuild(`dropping old foreign keys of ${tableSchema.name}: ${foreignKeySchemasToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\r\n\r\n            // remove foreign keys from the table schema\r\n            tableSchema.removeForeignKeys(foreignKeySchemasToDrop);\r\n\r\n            // drop foreign keys from the database\r\n            await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemasToDrop);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates tables that do not exist in the database yet.\r\n     * New tables are created without foreign and primary keys.\r\n     * Primary key only can be created in conclusion with auto generated column.\r\n     */\r\n    protected async createNewTables(): Promise<void> {\r\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            // check if table does not exist yet\r\n            const existTableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\r\n            if (existTableSchema)\r\n                return;\r\n\r\n            this.logger.logSchemaBuild(`creating a new table: ${metadata.tableName}`);\r\n\r\n            // create a new table schema and sync it in the database\r\n            const tableSchema = new TableSchema(metadata.tableName, this.metadataColumnsToColumnSchemas(metadata.columns), true);\r\n            this.tableSchemas.push(tableSchema);\r\n            await this.queryRunner.createTable(tableSchema);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\r\n     * We drop their keys too, since it should be safe.\r\n     */\r\n    protected dropRemovedColumns() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\r\n            if (!tableSchema) return;\r\n\r\n            // find columns that exist in the database but does not exist in the metadata\r\n            const droppedColumnSchemas = tableSchema.columns.filter(columnSchema => {\r\n                return !metadata.columns.find(columnMetadata => columnMetadata.databaseName === columnSchema.name);\r\n            });\r\n            if (droppedColumnSchemas.length === 0)\r\n                return;\r\n\r\n            // drop all foreign keys that has column to be removed in its columns\r\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\r\n                return this.dropColumnReferencedForeignKeys(metadata.tableName, droppedColumnSchema.name);\r\n            }));\r\n\r\n            // drop all indices that point to this column\r\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\r\n                return this.dropColumnReferencedIndices(metadata.tableName, droppedColumnSchema.name);\r\n            }));\r\n\r\n            this.logger.logSchemaBuild(`columns dropped in ${tableSchema.name}: ` + droppedColumnSchemas.map(column => column.name).join(\", \"));\r\n\r\n            // remove columns from the table schema and primary keys of it if its used in the primary keys\r\n            tableSchema.removeColumns(droppedColumnSchemas);\r\n            tableSchema.removePrimaryKeysOfColumns(droppedColumnSchemas);\r\n\r\n            // drop columns from the database\r\n            await this.queryRunner.dropColumns(tableSchema, droppedColumnSchemas);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds columns from metadata which does not exist in the table.\r\n     * Columns are created without keys.\r\n     */\r\n    protected addNewColumns() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            // find which columns are new\r\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\r\n                return !tableSchema.columns.find(columnSchema => columnSchema.name === columnMetadata.databaseName);\r\n            });\r\n            if (newColumnMetadatas.length === 0)\r\n                return;\r\n\r\n            this.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.databaseName).join(\", \"));\r\n\r\n            // create columns in the database\r\n            const newColumnSchemas = this.metadataColumnsToColumnSchemas(newColumnMetadatas);\r\n            await this.queryRunner.addColumns(tableSchema, newColumnSchemas);\r\n            tableSchema.addColumns(newColumnSchemas);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update all exist columns which metadata has changed.\r\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\r\n     */\r\n    protected updateExistColumns() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            const updatedColumnSchemas = tableSchema.findChangedColumns(this.queryRunner, metadata.columns);\r\n            if (updatedColumnSchemas.length === 0)\r\n                return;\r\n\r\n            this.logger.logSchemaBuild(`columns changed in ${tableSchema.name}. updating: ` + updatedColumnSchemas.map(column => column.name).join(\", \"));\r\n\r\n            // drop all foreign keys that point to this column\r\n            const dropRelatedForeignKeysPromises = updatedColumnSchemas\r\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.databaseName === changedColumnSchema.name))\r\n                .map(changedColumnSchema => this.dropColumnReferencedForeignKeys(metadata.tableName, changedColumnSchema.name));\r\n\r\n            // wait until all related foreign keys are dropped\r\n            await Promise.all(dropRelatedForeignKeysPromises);\r\n\r\n            // drop all indices that point to this column\r\n            const dropRelatedIndicesPromises = updatedColumnSchemas\r\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.databaseName === changedColumnSchema.name))\r\n                .map(changedColumnSchema => this.dropColumnReferencedIndices(metadata.tableName, changedColumnSchema.name));\r\n\r\n            // wait until all related indices are dropped\r\n            await Promise.all(dropRelatedIndicesPromises);\r\n\r\n            // generate a map of new/old columns\r\n            const newAndOldColumnSchemas = updatedColumnSchemas.map(changedColumnSchema => {\r\n                const columnMetadata = metadata.columns.find(column => column.databaseName === changedColumnSchema.name);\r\n                const newColumnSchema = ColumnSchema.create(columnMetadata!, this.queryRunner.normalizeType(columnMetadata!));\r\n                tableSchema.replaceColumn(changedColumnSchema, newColumnSchema);\r\n\r\n                return {\r\n                    newColumn: newColumnSchema,\r\n                    oldColumn: changedColumnSchema\r\n                };\r\n            });\r\n\r\n            return this.queryRunner.changeColumns(tableSchema, newAndOldColumnSchemas);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates primary keys which does not exist in the table yet.\r\n     */\r\n    protected updatePrimaryKeys() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName && !table.justCreated);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            const metadataPrimaryColumns = metadata.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n            const addedKeys = metadataPrimaryColumns\r\n                .filter(primaryKey => {\r\n                    return !tableSchema.primaryKeysWithoutGenerated.find(dbPrimaryKey => dbPrimaryKey.columnName === primaryKey.databaseName);\r\n                })\r\n                .map(primaryKey => new PrimaryKeySchema(\"\", primaryKey.databaseName));\r\n\r\n            const droppedKeys = tableSchema.primaryKeysWithoutGenerated.filter(primaryKeySchema => {\r\n                return !metadataPrimaryColumns.find(primaryKeyMetadata => primaryKeyMetadata.databaseName === primaryKeySchema.columnName);\r\n            });\r\n\r\n            if (addedKeys.length === 0 && droppedKeys.length === 0)\r\n                return;\r\n\r\n            this.logger.logSchemaBuild(`primary keys of ${tableSchema.name} has changed: dropped - ${droppedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}; added - ${addedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}`);\r\n            tableSchema.addPrimaryKeys(addedKeys);\r\n            tableSchema.removePrimaryKeys(droppedKeys);\r\n            await this.queryRunner.updatePrimaryKeys(tableSchema);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates foreign keys which does not exist in the table yet.\r\n     */\r\n    protected createForeignKeys() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            const newKeys = metadata.foreignKeys.filter(foreignKey => {\r\n                return !tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === foreignKey.name);\r\n            });\r\n            if (newKeys.length === 0)\r\n                return;\r\n\r\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\r\n            this.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")}`);\r\n            await this.queryRunner.createForeignKeys(tableSchema, dbForeignKeys);\r\n            tableSchema.addForeignKeys(dbForeignKeys);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates indices which are missing in db yet, and drops indices which exist in the db,\r\n     * but does not exist in the metadata anymore.\r\n     */\r\n    protected createIndices() {\r\n        // return Promise.all(this.entityMetadatas.map(metadata => this.createIndices(metadata.table, metadata.indices)));\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.tableName);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            // drop all indices that exist in the table, but does not exist in the given composite indices\r\n            const dropQueries = tableSchema.indices\r\n                .filter(indexSchema => !metadata.indices.find(indexMetadata => indexMetadata.name === indexSchema.name))\r\n                .map(async indexSchema => {\r\n                    this.logger.logSchemaBuild(`dropping an index: ${indexSchema.name}`);\r\n                    tableSchema.removeIndex(indexSchema);\r\n                    await this.queryRunner.dropIndex(metadata.tableName, indexSchema.name);\r\n                });\r\n\r\n            // then create table indices for all composite indices we have\r\n            const addQueries = metadata.indices\r\n                .filter(indexMetadata => !tableSchema.indices.find(indexSchema => indexSchema.name === indexMetadata.name))\r\n                .map(async indexMetadata => {\r\n                    const indexSchema = IndexSchema.create(indexMetadata);\r\n                    tableSchema.indices.push(indexSchema);\r\n                    this.logger.logSchemaBuild(`adding new index: ${indexSchema.name}`);\r\n                    await this.queryRunner.createIndex(indexSchema.tableName, indexSchema);\r\n                });\r\n\r\n            await Promise.all(dropQueries.concat(addQueries));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Drops all indices where given column of the given table is being used.\r\n     */\r\n    protected async dropColumnReferencedIndices(tableName: string, columnName: string): Promise<void> {\r\n\r\n        const allIndexMetadatas = this.entityMetadatas.reduce(\r\n            (all, metadata) => all.concat(metadata.indices),\r\n            [] as IndexMetadata[]\r\n        );\r\n\r\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\r\n        if (!tableSchema)\r\n            return;\r\n\r\n        // find depend indices to drop them\r\n        const dependIndices = allIndexMetadatas.filter(indexMetadata => {\r\n            return indexMetadata.tableName === tableName && !!indexMetadata.columns.find(column => column.databaseName === columnName);\r\n        });\r\n        if (!dependIndices.length)\r\n            return;\r\n\r\n        const dependIndicesInTable = tableSchema.indices.filter(indexSchema => {\r\n            return !!dependIndices.find(indexMetadata => indexSchema.name === indexMetadata.name);\r\n        });\r\n        if (dependIndicesInTable.length === 0)\r\n            return;\r\n\r\n        this.logger.logSchemaBuild(`dropping related indices of ${tableName}#${columnName}: ${dependIndicesInTable.map(index => index.name).join(\", \")}`);\r\n\r\n        const dropPromises = dependIndicesInTable.map(index => {\r\n            tableSchema.removeIndex(index);\r\n            return this.queryRunner.dropIndex(tableSchema.name, index.name);\r\n        });\r\n\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Drops all foreign keys where given column of the given table is being used.\r\n     */\r\n    protected async dropColumnReferencedForeignKeys(tableName: string, columnName: string): Promise<void> {\r\n\r\n        const allForeignKeyMetadatas = this.entityMetadatas.reduce(\r\n            (all, metadata) => all.concat(metadata.foreignKeys),\r\n            [] as ForeignKeyMetadata[]\r\n        );\r\n\r\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\r\n        if (!tableSchema)\r\n            return;\r\n\r\n        // find depend foreign keys to drop them\r\n        const dependForeignKeys = allForeignKeyMetadatas.filter(foreignKey => {\r\n            if (foreignKey.tableName === tableName) {\r\n                return !!foreignKey.columns.find(fkColumn => {\r\n                    return fkColumn.databaseName === columnName;\r\n                });\r\n            } else if (foreignKey.referencedTableName === tableName) {\r\n                return !!foreignKey.referencedColumns.find(fkColumn => {\r\n                    return fkColumn.databaseName === columnName;\r\n                });\r\n            }\r\n            return false;\r\n        });\r\n        if (!dependForeignKeys.length)\r\n            return;\r\n\r\n        const dependForeignKeyInTable = dependForeignKeys.filter(fk => {\r\n            return !!tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === fk.name);\r\n        });\r\n        if (dependForeignKeyInTable.length === 0)\r\n            return;\r\n\r\n        this.logger.logSchemaBuild(`dropping related foreign keys of ${tableName}#${columnName}: ${dependForeignKeyInTable.map(foreignKey => foreignKey.name).join(\", \")}`);\r\n        const foreignKeySchemas = dependForeignKeyInTable.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\r\n        tableSchema.removeForeignKeys(foreignKeySchemas);\r\n        await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemas);\r\n    }\r\n\r\n    /**\r\n     * Creates new column schemas from the given column metadatas.\r\n     */\r\n    protected metadataColumnsToColumnSchemas(columns: ColumnMetadata[]): ColumnSchema[] {\r\n        return columns.map(columnMetadata => {\r\n            return ColumnSchema.create(columnMetadata, this.queryRunner.normalizeType(columnMetadata));\r\n        });\r\n    }\r\n\r\n}","/**\r\n */\r\nexport class EntityMetadataNotFound extends Error {\r\n    name = \"EntityMetadataNotFound\";\r\n\r\n    constructor(target: Function|string) {\r\n        super();\r\n        const targetName = typeof target === \"function\" && (<any> target).name ? (<any> target).name : target;\r\n        this.message = `No metadata for \"${targetName}\" was found.`;\r\n    }\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\n\r\n/**\r\n * Migrations should implement this interface and all its methods.\r\n */\r\nexport interface MigrationInterface {\r\n\r\n    /**\r\n     * Run the migrations.\r\n     */\r\n    up(queryRunner: QueryRunner, connection: Connection, entityManager?: EntityManager): Promise<any>;\r\n\r\n    /**\r\n     * Reverse the migrations.\r\n     */\r\n    down(queryRunner: QueryRunner, connection: Connection, entityManager?: EntityManager): Promise<any>;\r\n\r\n}","import {MigrationInterface} from \"./MigrationInterface\";\r\n\r\n/**\r\n * Represents entity of the migration in the database.\r\n */\r\nexport class Migration {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Timestamp of the migration.\r\n     */\r\n    timestamp: number;\r\n\r\n    /**\r\n     * Name of the migration (class name).\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Migration instance that needs to be run.\r\n     */\r\n    instance?: MigrationInterface;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(timestamp: number, name: string, instance?: MigrationInterface) {\r\n        this.timestamp = timestamp;\r\n        this.name = name;\r\n        this.instance = instance;\r\n    }\r\n\r\n}","import {TableSchema} from \"../schema-builder/schema/TableSchema\";\r\nimport {ColumnSchema} from \"../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnTypes} from \"../metadata/types/ColumnTypes\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {Migration} from \"./Migration\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\n\r\n/**\r\n * Executes migrations: runs pending and reverts previously executed migrations.\r\n */\r\nexport class MigrationExecutor {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected queryRunnerProvider: QueryRunnerProvider;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\r\n        this.queryRunnerProvider = queryRunnerProvider || new QueryRunnerProvider(connection.driver, true);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\r\n     * thus not saved in the database.\r\n     */\r\n    async executePendingMigrations(): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        const entityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(this.queryRunnerProvider);\r\n\r\n        // create migrations table if its not created yet\r\n        await this.createMigrationsTableIfNotExist();\r\n\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations();\r\n\r\n        // get the time when last migration was executed\r\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations();\r\n\r\n        // find all migrations that needs to be executed\r\n        const pendingMigrations = allMigrations.filter(migration => {\r\n            // check if we already have executed migration\r\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\r\n            if (executedMigration)\r\n                return false;\r\n\r\n            // migration is new and not executed. now check if its timestamp is correct\r\n            if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\r\n                throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\r\n\r\n            // every check is passed means that migration was not run yet and we need to run it\r\n            return true;\r\n        });\r\n\r\n        // if no migrations are pending then nothing to do here\r\n        if (!pendingMigrations.length) {\r\n            this.connection.logger.log(\"info\", `No migrations are pending`);\r\n            return;\r\n        }\r\n\r\n        // log information about migration execution\r\n        this.connection.logger.log(\"info\", `${executedMigrations.length} migrations are already loaded in the database.`);\r\n        this.connection.logger.log(\"info\", `${allMigrations.length} migrations were found in the source code.`);\r\n        if (lastTimeExecutedMigration)\r\n            this.connection.logger.log(\"info\", `${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\r\n        this.connection.logger.log(\"info\", `${pendingMigrations.length} migrations are new migrations that needs to be executed.`);\r\n\r\n        // start transaction if its not started yet\r\n        let transactionStartedByUs = false;\r\n        if (!queryRunner.isTransactionActive()) {\r\n            await queryRunner.beginTransaction();\r\n            transactionStartedByUs = true;\r\n        }\r\n\r\n        // run all pending migrations in a sequence\r\n        try {\r\n            await PromiseUtils.runInSequence(pendingMigrations, migration => {\r\n                return migration.instance!.up(queryRunner, this.connection, entityManager)\r\n                    .then(() => { // now when migration is executed we need to insert record about it into the database\r\n                        return this.insertExecutedMigration(migration);\r\n                    })\r\n                    .then(() => { // informative log about migration success\r\n                        this.connection.logger.log(\"info\", `Migration ${migration.name} has been executed successfully.`);\r\n                    });\r\n            });\r\n\r\n            // commit transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.commitTransaction();\r\n\r\n        } catch (err) { // rollback transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.rollbackTransaction();\r\n\r\n            throw err;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Reverts last migration that were run.\r\n     */\r\n    async undoLastMigration(): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        const entityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(this.queryRunnerProvider);\r\n\r\n        // create migrations table if its not created yet\r\n        await this.createMigrationsTableIfNotExist();\r\n\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations();\r\n\r\n        // get the time when last migration was executed\r\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\r\n\r\n        // if no migrations found in the database then nothing to revert\r\n        if (!lastTimeExecutedMigration) {\r\n            this.connection.logger.log(\"info\", `No migrations was found in the database. Nothing to revert!`);\r\n            return;\r\n        }\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations();\r\n\r\n        // find the instance of the migration we need to remove\r\n        const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration!.name);\r\n\r\n        // if no migrations found in the database then nothing to revert\r\n        if (!migrationToRevert)\r\n            throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\r\n\r\n        // log information about migration execution\r\n        this.connection.logger.log(\"info\", `${executedMigrations.length} migrations are already loaded in the database.`);\r\n        this.connection.logger.log(\"info\", `${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\r\n        this.connection.logger.log(\"info\", `Now reverting it...`);\r\n\r\n        // start transaction if its not started yet\r\n        let transactionStartedByUs = false;\r\n        if (!queryRunner.isTransactionActive()) {\r\n            await queryRunner.beginTransaction();\r\n            transactionStartedByUs = true;\r\n        }\r\n\r\n        try {\r\n            await migrationToRevert.instance!.down(queryRunner, this.connection, entityManager);\r\n            await this.deleteExecutedMigration(migrationToRevert);\r\n            this.connection.logger.log(\"info\", `Migration ${migrationToRevert.name} has been reverted successfully.`);\r\n\r\n            // commit transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.commitTransaction();\r\n\r\n        } catch (err) { // rollback transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.rollbackTransaction();\r\n\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates table \"migrations\" that will store information about executed migrations.\r\n     */\r\n    protected async createMigrationsTableIfNotExist(): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        const tableExist = await queryRunner.hasTable(\"migrations\"); // todo: table name should be configurable\r\n        if (!tableExist) {\r\n            await queryRunner.createTable(new TableSchema(\"migrations\", [\r\n                new ColumnSchema({\r\n                    name: \"timestamp\",\r\n                    type: queryRunner.normalizeType({\r\n                        type: ColumnTypes.NUMBER\r\n                    }),\r\n                    isPrimary: true,\r\n                    isNullable: false\r\n                }),\r\n                new ColumnSchema({\r\n                    name: \"name\",\r\n                    type: queryRunner.normalizeType({\r\n                        type: ColumnTypes.STRING\r\n                    }),\r\n                    isNullable: false\r\n                }),\r\n            ]));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads all migrations that were executed and saved into the database.\r\n     */\r\n    protected async loadExecutedMigrations(): Promise<Migration[]> {\r\n        const migrationsRaw: ObjectLiteral[] = await new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .select()\r\n            .fromTable(\"migrations\", \"migrations\")\r\n            .getRawMany();\r\n\r\n        return migrationsRaw.map(migrationRaw => {\r\n            return new Migration(parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets all migrations that setup for this connection.\r\n     */\r\n    protected getMigrations(): Migration[] {\r\n        const migrations = this.connection.getMigrations().map(migration => {\r\n            const migrationClassName = (migration.constructor as any).name;\r\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13));\r\n            if (!migrationTimestamp)\r\n                throw new Error(`Migration class name should contain a class name at the end of the file. ${migrationClassName} migration name is wrong.`);\r\n\r\n            return new Migration(migrationTimestamp, migrationClassName, migration);\r\n        });\r\n\r\n        // sort them by timestamp\r\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\r\n     */\r\n    protected getLatestMigration(migrations: Migration[]): Migration|undefined {\r\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);\r\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Inserts new executed migration's data into migrations table.\r\n     */\r\n    protected async insertExecutedMigration(migration: Migration): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        await queryRunner.insert(\"migrations\", {\r\n            timestamp: migration.timestamp,\r\n            name: migration.name,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete previously executed migration's data from the migrations table.\r\n     */\r\n    protected async deleteExecutedMigration(migration: Migration): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        await queryRunner.delete(\"migrations\", {\r\n            timestamp: migration.timestamp,\r\n            name: migration.name,\r\n        });\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to run/revert migrations without connection set.\r\n */\r\nexport class CannotRunMigrationNotConnectedError extends Error {\r\n    name = \"CannotRunMigrationNotConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot run/revert migrations on \"${connectionName}\" connection because connection is not yet established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown if same custom repository instance is reused between different connections.\r\n */\r\nexport class CustomRepositoryReusedError extends Error {\r\n    name = \"CustomRepositoryReusedError\";\r\n\r\n    constructor(repository: any) {\r\n        super(`Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +\r\n            `was already used in the different connection. You can't share entity repositories between different connections ` +\r\n            `when useContainer is set to true for the entity repository.`);\r\n    }\r\n\r\n}","import {JoinColumnOptions} from \"./JoinColumnOptions\";\r\n\r\n/**\r\n * Describes all relation's options.\r\n */\r\nexport interface JoinTableOptions {\r\n\r\n    /**\r\n     * Name of the table that will be created to store values of the both tables (join table).\r\n     * By default is auto generated.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * First column of the join table.\r\n     */\r\n    joinColumn?: JoinColumnOptions;\r\n\r\n    /**\r\n     * Second (inverse) column of the join table.\r\n     */\r\n    inverseJoinColumn?: JoinColumnOptions;\r\n\r\n}","import {EntitySchema} from \"./EntitySchema\";\r\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\r\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\r\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\r\nimport {JoinTableOptions} from \"../decorator/options/JoinTableOptions\";\r\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMuplipleColumnsOptions\";\r\nimport {ColumnMode} from \"../metadata-args/types/ColumnMode\";\r\n\r\nexport class EntitySchemaTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transform(schemas: EntitySchema[]): MetadataArgsStorage {\r\n        const metadataArgsStorage = new MetadataArgsStorage();\r\n\r\n        schemas.forEach(schema => {\r\n\r\n            // add table metadata args from the schema\r\n            const tableSchema = schema.table || {} as any;\r\n            const table: TableMetadataArgs = {\r\n                target: schema.target || schema.name,\r\n                name: tableSchema.name,\r\n                type: tableSchema.type || \"regular\",\r\n                orderBy: tableSchema.orderBy\r\n            };\r\n            metadataArgsStorage.tables.push(table);\r\n\r\n            // add columns metadata args from the schema\r\n            Object.keys(schema.columns).forEach(columnName => {\r\n                const columnSchema = schema.columns[columnName];\r\n                let mode: ColumnMode = \"regular\";\r\n                if (columnSchema.createDate)\r\n                    mode = \"createDate\";\r\n                if (columnSchema.updateDate)\r\n                    mode = \"updateDate\";\r\n                if (columnSchema.version)\r\n                    mode = \"version\";\r\n                if (columnSchema.treeChildrenCount)\r\n                    mode = \"treeChildrenCount\";\r\n                if (columnSchema.treeLevel)\r\n                    mode = \"treeLevel\";\r\n\r\n                const column: ColumnMetadataArgs = {\r\n                    target: schema.target || schema.name,\r\n                    mode: mode,\r\n                    propertyName: columnName,\r\n                    options: {\r\n                        type: columnSchema.type,\r\n                        name: columnSchema.name,\r\n                        length: columnSchema.length,\r\n                        primary: columnSchema.primary,\r\n                        generated: columnSchema.generated,\r\n                        unique: columnSchema.unique,\r\n                        nullable: columnSchema.nullable,\r\n                        comment: columnSchema.comment,\r\n                        default: columnSchema.default,\r\n                        precision: columnSchema.precision,\r\n                        scale: columnSchema.scale\r\n                    }\r\n                };\r\n\r\n                metadataArgsStorage.columns.push(column);\r\n            });\r\n\r\n            // add relation metadata args from the schema\r\n            if (schema.relations) {\r\n                Object.keys(schema.relations).forEach(relationName => {\r\n                    const relationSchema = schema.relations[relationName];\r\n                    const relation: RelationMetadataArgs = {\r\n                        target: schema.target || schema.name,\r\n                        propertyName: relationName,\r\n                        relationType: relationSchema.type,\r\n                        isLazy: relationSchema.isLazy || false,\r\n                        type: relationSchema.target,\r\n                        inverseSideProperty: relationSchema.inverseSide,\r\n                        isTreeParent: relationSchema.isTreeParent,\r\n                        isTreeChildren: relationSchema.isTreeChildren,\r\n                        options: {\r\n                            cascadeAll: relationSchema.cascadeAll,\r\n                            cascadeInsert: relationSchema.cascadeInsert,\r\n                            cascadeUpdate: relationSchema.cascadeUpdate,\r\n                            cascadeRemove: relationSchema.cascadeRemove,\r\n                            nullable: relationSchema.nullable,\r\n                            onDelete: relationSchema.onDelete\r\n                        }\r\n                    };\r\n\r\n                    metadataArgsStorage.relations.push(relation);\r\n\r\n                    // add join column\r\n                    if (relationSchema.joinColumn) {\r\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.push(joinColumn);\r\n                        } else {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinColumn.name,\r\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.push(joinColumn);\r\n                        }\r\n                    }\r\n\r\n                    // add join table\r\n                    if (relationSchema.joinTable) {\r\n                        if (typeof relationSchema.joinTable === \"boolean\") {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinTables.push(joinTable);\r\n                        } else {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinTable.name,\r\n                                joinColumns: ((relationSchema.joinTable as JoinTableOptions).joinColumn ? [(relationSchema.joinTable as JoinTableOptions).joinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).joinColumns) as any,\r\n                                inverseJoinColumns: ((relationSchema.joinTable as JoinTableOptions).inverseJoinColumn ? [(relationSchema.joinTable as JoinTableOptions).inverseJoinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\r\n                            };\r\n                            metadataArgsStorage.joinTables.push(joinTable);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        return metadataArgsStorage;\r\n    }\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\n\r\n/**\r\n */\r\nexport class MissingPrimaryColumnError extends Error {\r\n    name = \"MissingPrimaryColumnError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata) {\r\n        super();\r\n        this.message = `Entity \"${entityMetadata.name}\" does not have a primary column. Primary column is required to ` +\r\n            `have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown when circular relations detected with nullable set to false.\r\n */\r\nexport class CircularRelationsError extends Error {\r\n    name = \"CircularRelationsError\";\r\n\r\n    constructor(path: string) {\r\n        super(`Circular relations detected: ${path}. To resolve this issue you need to set nullable: false somewhere in this dependency structure.`);\r\n    }\r\n\r\n}","/**\r\n * This source code is from https://github.com/jriecken/dependency-graph\r\n * Just added \"any\" types here, wrapper everything into exported class.\r\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\r\n */\r\n\r\n/**\r\n * A simple dependency graph\r\n */\r\n\r\n/**\r\n * Helper for creating a Depth-First-Search on\r\n * a set of edges.\r\n *\r\n * Detects cycles and throws an Error if one is detected.\r\n *\r\n * @param edges The set of edges to DFS through\r\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\r\n * @param result An array in which the results will be populated\r\n */\r\nfunction createDFS(edges: any, leavesOnly: any, result: any) {\r\n    let currentPath: any[] = [];\r\n    let visited: any = {};\r\n    return function DFS(currentNode: any) {\r\n        visited[currentNode] = true;\r\n        currentPath.push(currentNode);\r\n        edges[currentNode].forEach(function (node: any) {\r\n            if (!visited[node]) {\r\n                DFS(node);\r\n            } else if (currentPath.indexOf(node) >= 0) {\r\n                currentPath.push(node);\r\n                throw new Error(`Dependency Cycle Found: ${currentPath.join(\" -> \")}`);\r\n            }\r\n        });\r\n        currentPath.pop();\r\n        if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {\r\n            result.push(currentNode);\r\n        }\r\n    };\r\n}\r\n\r\n\r\nexport class DepGraph {\r\n    nodes: any = {};\r\n    outgoingEdges: any = {}; // Node -> [Dependency Node]\r\n    incomingEdges: any = {}; // Node -> [Dependant Node]\r\n\r\n    /**\r\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\r\n     */\r\n    addNode(node: any, data?: any) {\r\n        if (!this.hasNode(node)) {\r\n            // Checking the arguments length allows the user to add a node with undefined data\r\n            if (arguments.length === 2) {\r\n                this.nodes[node] = data;\r\n            } else {\r\n                this.nodes[node] = node;\r\n            }\r\n            this.outgoingEdges[node] = [];\r\n            this.incomingEdges[node] = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\r\n     */\r\n    removeNode(node: any) {\r\n        if (this.hasNode(node)) {\r\n            delete this.nodes[node];\r\n            delete this.outgoingEdges[node];\r\n            delete this.incomingEdges[node];\r\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\r\n                Object.keys(edgeList).forEach(function (key: any) {\r\n                    let idx = edgeList[key].indexOf(node);\r\n                    if (idx >= 0) {\r\n                        edgeList[key].splice(idx, 1);\r\n                    }\r\n                }, this);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a node exists in the graph\r\n     */\r\n    hasNode(node: any) {\r\n        return this.nodes.hasOwnProperty(node);\r\n    }\r\n\r\n    /**\r\n     * Get the data associated with a node name\r\n     */\r\n    getNodeData(node: any) {\r\n        if (this.hasNode(node)) {\r\n            return this.nodes[node];\r\n        } else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\r\n     */\r\n    setNodeData(node: any, data: any) {\r\n        if (this.hasNode(node)) {\r\n            this.nodes[node] = data;\r\n        } else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a dependency between two nodes. If either of the nodes does not exist,\r\n     * an Error will be thrown.\r\n     */\r\n    addDependency(from: any, to: any) {\r\n        if (!this.hasNode(from)) {\r\n            throw new Error(`Node does not exist: ${from}`);\r\n        }\r\n        if (!this.hasNode(to)) {\r\n            throw new Error(`Node does not exist: ${to}`);\r\n        }\r\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\r\n            this.outgoingEdges[from].push(to);\r\n        }\r\n        if (this.incomingEdges[to].indexOf(from) === -1) {\r\n            this.incomingEdges[to].push(from);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Remove a dependency between two nodes.\r\n     */\r\n    removeDependency(from: any, to: any) {\r\n        let idx: any;\r\n        if (this.hasNode(from)) {\r\n            idx = this.outgoingEdges[from].indexOf(to);\r\n            if (idx >= 0) {\r\n                this.outgoingEdges[from].splice(idx, 1);\r\n            }\r\n        }\r\n\r\n        if (this.hasNode(to)) {\r\n            idx = this.incomingEdges[to].indexOf(from);\r\n            if (idx >= 0) {\r\n                this.incomingEdges[to].splice(idx, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an array containing the nodes that the specified node depends on (transitively).\r\n     *\r\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\r\n     * in the array.\r\n     */\r\n    dependenciesOf(node: any, leavesOnly: any) {\r\n        if (this.hasNode(node)) {\r\n            let result: any[] = [];\r\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\r\n            DFS(node);\r\n            let idx = result.indexOf(node);\r\n            if (idx >= 0) {\r\n                result.splice(idx, 1);\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get an array containing the nodes that depend on the specified node (transitively).\r\n     *\r\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\r\n     */\r\n    dependantsOf(node: any, leavesOnly: any) {\r\n        if (this.hasNode(node)) {\r\n            let result: any[] = [];\r\n            let DFS = createDFS(this.incomingEdges, leavesOnly, result);\r\n            DFS(node);\r\n            let idx = result.indexOf(node);\r\n            if (idx >= 0) {\r\n                result.splice(idx, 1);\r\n            }\r\n            return result;\r\n        } else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Construct the overall processing order for the dependency graph.\r\n     *\r\n     * Throws an Error if the graph has a cycle.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\r\n     */\r\n    overallOrder(leavesOnly?: any) {\r\n        let self = this;\r\n        let result: any[] = [];\r\n        let keys = Object.keys(this.nodes);\r\n        if (keys.length === 0) {\r\n            return result; // Empty graph\r\n        } else {\r\n            // Look for cycles - we run the DFS starting at all the nodes in case there\r\n            // are several disconnected subgraphs inside this dependency graph.\r\n            let CycleDFS = createDFS(this.outgoingEdges, false, []);\r\n            keys.forEach(function (n: any) {\r\n                CycleDFS(n);\r\n            });\r\n\r\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\r\n            // Find all potential starting points (nodes with nothing depending on them) an\r\n            // run a DFS starting at these points to get the order\r\n            keys.filter(function (node) {\r\n                return self.incomingEdges[node].length === 0;\r\n            }).forEach(function (n) {\r\n                DFS(n);\r\n            });\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {MissingPrimaryColumnError} from \"./error/MissingPrimaryColumnError\";\r\nimport {CircularRelationsError} from \"./error/CircularRelationsError\";\r\nimport {DepGraph} from \"../util/DepGraph\";\r\n\r\n/// todo: add check if there are multiple tables with the same name\r\n/// todo: add checks when generated column / table names are too long for the specific driver\r\n// todo: type in function validation, inverse side function validation\r\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\r\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\r\n// todo: check if multiple tree parent metadatas in validator\r\n// todo: tree decorators can be used only on closure table (validation)\r\n// todo: throw error if parent tree metadata was not specified in a closure table\r\n\r\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\r\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\r\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\r\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\r\n\r\n/**\r\n * Validates built entity metadatas.\r\n */\r\nexport class EntityMetadataValidator {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validates all given entity metadatas.\r\n     */\r\n    validateMany(entityMetadatas: EntityMetadata[]) {\r\n        entityMetadatas.forEach(entityMetadata => this.validate(entityMetadata, entityMetadatas));\r\n        this.validateDependencies(entityMetadatas);\r\n    }\r\n\r\n    /**\r\n     * Validates given entity metadata.\r\n     */\r\n    validate(entityMetadata: EntityMetadata, allEntityMetadatas: EntityMetadata[]) {\r\n\r\n        // check if table metadata has an id\r\n        if (!entityMetadata.isClassTableChild && !entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\r\n            throw new MissingPrimaryColumnError(entityMetadata);\r\n\r\n        // validate if table is using inheritance it has a discriminator\r\n        // also validate if discriminator values are not empty and not repeated\r\n        if (entityMetadata.inheritanceType === \"single-table\") {\r\n            if (!entityMetadata.discriminatorColumn)\r\n                throw new Error(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put @DiscriminatorColumn decorator?`);\r\n\r\n            if ([\"\", undefined, null].indexOf(entityMetadata.discriminatorValue) !== -1)\r\n                throw new Error(`Entity ${entityMetadata.name} has empty discriminator value. Discriminator value should not be empty.`);\r\n\r\n            const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(metadata => {\r\n                return metadata !== entityMetadata && metadata.discriminatorValue === entityMetadata.discriminatorValue;\r\n            });\r\n            if (sameDiscriminatorValueEntityMetadata)\r\n                throw new Error(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} as equal discriminator values. Make sure their discriminator values are not equal using @DiscriminatorValue decorator.`);\r\n        }\r\n\r\n        entityMetadata.relationCounts.forEach(relationCount => {\r\n            if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne)\r\n                throw new Error(`Relation count can not be implemented on ManyToOne or OneToOne relations.`);\r\n        });\r\n\r\n        // validate relations\r\n        entityMetadata.relations.forEach(relation => {\r\n\r\n            // check join tables:\r\n            // using JoinTable is possible only on one side of the many-to-many relation\r\n            // todo(dima): fix\r\n            // if (relation.joinTable) {\r\n            //     if (!relation.isManyToMany)\r\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\r\n\r\n            //     // if there is inverse side of the relation, then check if it does not have join table too\r\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\r\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\r\n            // }\r\n\r\n            // check join columns:\r\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\r\n            // first check if relation is one-to-one or many-to-one\r\n            // todo(dima): fix\r\n            /*if (relation.joinColumn) {\r\n\r\n                // join column can be applied only on one-to-one and many-to-one relations\r\n                if (!relation.isOneToOne && !relation.isManyToOne)\r\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\r\n\r\n                // if there is inverse side of the relation, then check if it does not have join table too\r\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\r\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\r\n\r\n                // check if join column really has referenced column\r\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\r\n                    throw new Error(`Join column does not have referenced column set`);\r\n\r\n            }\r\n\r\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\r\n            // or its one-side relation without JoinColumn we should give an error\r\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\r\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\r\n\r\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\r\n            // or its one-side relation without JoinTable we should give an error\r\n            // todo(dima): fix it\r\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\r\n            //     throw new MissingJoinTableError(entityMetadata, relation);\r\n\r\n\r\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\r\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\r\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\r\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\r\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\r\n            // todo: check if there are multiple columns on the same column applied.\r\n            // todo: check column type if is missing in relational databases (throw new Error(`Column type of ${type} cannot be determined.`);)\r\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\r\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\r\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\r\n            // todo: check if entity with duplicate names, some decorators exist\r\n\r\n\r\n        });\r\n\r\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\r\n        entityMetadata.relations.forEach(relation => {\r\n            const isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation!.isCascadeRemove;\r\n            if (isCircularCascadeRemove)\r\n                throw new Error(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation!.entityMetadata.name}#${relation.inverseRelation!.propertyName} both has cascade remove set. ` +\r\n                    `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\r\n        }); // todo: maybe better just deny removal from one to one relation without join column?\r\n    }\r\n\r\n    /**\r\n     * Validates dependencies of the entity metadatas.\r\n     */\r\n    protected validateDependencies(entityMetadatas: EntityMetadata[]) {\r\n\r\n        const graph = new DepGraph();\r\n        entityMetadatas.forEach(entityMetadata => {\r\n            graph.addNode(entityMetadata.name);\r\n        });\r\n        entityMetadatas.forEach(entityMetadata => {\r\n            entityMetadata.relationsWithJoinColumns\r\n                .filter(relation => !relation.isNullable)\r\n                .forEach(relation => {\r\n                    graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\r\n                });\r\n        });\r\n        try {\r\n            graph.overallOrder();\r\n\r\n        } catch (err) {\r\n            throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\r\n        }\r\n    }\r\n\r\n}","import {Driver} from \"../driver/Driver\";\r\nimport {Repository} from \"../repository/Repository\";\r\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\r\nimport {RepositoryNotFoundError} from \"./error/RepositoryNotFoundError\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\nimport {importClassesFromDirectories, importJsonsFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\r\nimport {getFromContainer, getMetadataArgsStorage} from \"../index\";\r\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\r\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\r\nimport {CannotImportAlreadyConnectedError} from \"./error/CannotImportAlreadyConnectedError\";\r\nimport {CannotCloseNotConnectedError} from \"./error/CannotCloseNotConnectedError\";\r\nimport {CannotConnectAlreadyConnectedError} from \"./error/CannotConnectAlreadyConnectedError\";\r\nimport {TreeRepository} from \"../repository/TreeRepository\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {NamingStrategyNotFoundError} from \"./error/NamingStrategyNotFoundError\";\r\nimport {RepositoryNotTreeError} from \"./error/RepositoryNotTreeError\";\r\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {CannotSyncNotConnectedError} from \"./error/CannotSyncNotConnectedError\";\r\nimport {CannotUseNamingStrategyNotConnectedError} from \"./error/CannotUseNamingStrategyNotConnectedError\";\r\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\r\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\r\nimport {SpecificRepository} from \"../repository/SpecificRepository\";\r\nimport {RepositoryAggregator} from \"../repository/RepositoryAggregator\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {SchemaBuilder} from \"../schema-builder/SchemaBuilder\";\r\nimport {Logger} from \"../logger/Logger\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {EntityMetadataNotFound} from \"../metadata-args/error/EntityMetadataNotFound\";\r\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\r\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\r\nimport {CannotRunMigrationNotConnectedError} from \"./error/CannotRunMigrationNotConnectedError\";\r\nimport {PlatformTools} from \"../platform/PlatformTools\";\r\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\r\nimport {CustomRepositoryNotFoundError} from \"../repository/error/CustomRepositoryNotFoundError\";\r\nimport {CustomRepositoryReusedError} from \"../repository/error/CustomRepositoryReusedError\";\r\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../repository/error/CustomRepositoryCannotInheritRepositoryError\";\r\nimport {MongoRepository} from \"../repository/MongoRepository\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\r\nimport {EntitySchemaTransformer} from \"../entity-schema/EntitySchemaTransformer\";\r\nimport {EntityMetadataValidator} from \"../metadata-builder/EntityMetadataValidator\";\r\n\r\n/**\r\n * Connection is a single database connection to a specific database of a database management system.\r\n * You can have multiple connections to multiple databases in your application.\r\n */\r\nexport class Connection {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection name.\r\n     */\r\n    public readonly name: string;\r\n\r\n    /**\r\n     * Database driver used by this connection.\r\n     */\r\n    public readonly driver: Driver;\r\n\r\n    /**\r\n     * Logger used to log orm events.\r\n     */\r\n    public readonly logger: Logger;\r\n\r\n    /**\r\n     * All entity metadatas that are registered for this connection.\r\n     */\r\n    public readonly entityMetadatas: EntityMetadata[] = [];\r\n\r\n    /**\r\n     * Used to broadcast connection events.\r\n     */\r\n    public readonly broadcaster: Broadcaster;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets EntityManager of this connection.\r\n     */\r\n    readonly manager: EntityManager;\r\n\r\n    /**\r\n     * Stores all registered repositories.\r\n     */\r\n    private readonly repositoryAggregators: RepositoryAggregator[] = [];\r\n\r\n    /**\r\n     * Stores all entity repository instances.\r\n     */\r\n    private readonly entityRepositories: Object[] = [];\r\n\r\n    /**\r\n     * Entity subscribers that are registered for this connection.\r\n     */\r\n    private readonly entitySubscribers: EntitySubscriberInterface<any>[] = [];\r\n\r\n    /**\r\n     * Registered entity classes to be used for this connection.\r\n     */\r\n    private readonly entityClasses: Function[] = [];\r\n\r\n    /**\r\n     * Registered entity schemas to be used for this connection.\r\n     */\r\n    private readonly entitySchemas: EntitySchema[] = [];\r\n\r\n    /**\r\n     * Registered subscriber classes to be used for this connection.\r\n     */\r\n    private readonly subscriberClasses: Function[] = [];\r\n\r\n    /**\r\n     * Registered naming strategy classes to be used for this connection.\r\n     */\r\n    private readonly namingStrategyClasses: Function[] = [];\r\n\r\n    /**\r\n     * Registered migration classes to be used for this connection.\r\n     */\r\n    private readonly migrationClasses: Function[] = [];\r\n\r\n    /**\r\n     * Naming strategy to be used in this connection.\r\n     */\r\n    private usedNamingStrategy: Function|string;\r\n\r\n    /**\r\n     * Indicates if connection has been done or not.\r\n     */\r\n    private _isConnected = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string, driver: Driver, logger: Logger) {\r\n        this.name = name;\r\n        this.driver = driver;\r\n        this.logger = logger;\r\n        this.manager = this.createEntityManager();\r\n        this.broadcaster = this.createBroadcaster();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection to the database already established for this connection.\r\n     */\r\n    get isConnected(): boolean {\r\n        return this._isConnected;\r\n    }\r\n\r\n    /**\r\n     * Gets entity manager that allows to perform repository operations with any entity in this connection.\r\n     *\r\n     * @deprecated use manager instead.\r\n     */\r\n    get entityManager(): EntityManager {\r\n        return this.manager;\r\n    }\r\n\r\n    /**\r\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\r\n     * with any entity in this connection.\r\n     */\r\n    get mongoEntityManager(): MongoEntityManager {\r\n        if (!(this.manager instanceof MongoEntityManager))\r\n            throw new Error(`MongoEntityManager is only available for MongoDB databases.`);\r\n\r\n        return this.manager as MongoEntityManager;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<this> {\r\n        if (this.isConnected)\r\n            throw new CannotConnectAlreadyConnectedError(this.name);\r\n\r\n        // connect to the database via its driver\r\n        await this.driver.connect();\r\n\r\n        // set connected status for the current connection\r\n        this._isConnected = true;\r\n\r\n        // build all metadatas registered in the current connection\r\n        try {\r\n            this.buildMetadatas();\r\n\r\n        } catch (error) {\r\n\r\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\r\n            // connection needs to be closed\r\n            await this.close();\r\n            throw error;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     * Once connection is closed, you cannot use repositories and perform any operations except\r\n     * opening connection again.\r\n     */\r\n    async close(): Promise<void> {\r\n        if (!this.isConnected)\r\n            throw new CannotCloseNotConnectedError(this.name);\r\n\r\n        await this.driver.disconnect();\r\n        this._isConnected = false;\r\n    }\r\n\r\n    /**\r\n     * Drops the database and all its data.\r\n     */\r\n    async dropDatabase(): Promise<void> {\r\n        const queryRunner = await this.driver.createQueryRunner();\r\n        await queryRunner.clearDatabase();\r\n    }\r\n\r\n    /**\r\n     * Creates database schema for all entities registered in this connection.\r\n     *\r\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\r\n     */\r\n    async syncSchema(dropBeforeSync: boolean = false): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            return Promise.reject(new CannotSyncNotConnectedError(this.name));\r\n\r\n        if (dropBeforeSync)\r\n            await this.dropDatabase();\r\n\r\n        if (this.driver instanceof MongoDriver) { // todo: temporary\r\n            await this.driver.syncSchema(this.entityMetadatas);\r\n\r\n        } else {\r\n            await this.createSchemaBuilder().build();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs all pending migrations.\r\n     */\r\n    async runMigrations(): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            return Promise.reject(new CannotRunMigrationNotConnectedError(this.name));\r\n\r\n        const migrationExecutor = new MigrationExecutor(this);\r\n        await migrationExecutor.executePendingMigrations();\r\n    }\r\n\r\n    /**\r\n     * Reverts last executed migration.\r\n     */\r\n    async undoLastMigration(): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            return Promise.reject(new CannotRunMigrationNotConnectedError(this.name));\r\n\r\n        const migrationExecutor = new MigrationExecutor(this);\r\n        await migrationExecutor.undoLastMigration();\r\n    }\r\n\r\n    /**\r\n     * Imports entities from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importEntitiesFromDirectories(paths: string[]): this {\r\n        this.importEntities(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports entity schemas from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importEntitySchemaFromDirectories(paths: string[]): this {\r\n        this.importEntitySchemas(importJsonsFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports subscribers from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importSubscribersFromDirectories(paths: string[]): this {\r\n        this.importSubscribers(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports naming strategies from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importNamingStrategiesFromDirectories(paths: string[]): this {\r\n        this.importNamingStrategies(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports migrations from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importMigrationsFromDirectories(paths: string[]): this {\r\n        this.importMigrations(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports entities and registers them in the current connection.\r\n     */\r\n    importEntities(entities: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"entities\", this.name);\r\n\r\n        entities.forEach(cls => this.entityClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports schemas and registers them in the current connection.\r\n     */\r\n    importEntitySchemas(schemas: EntitySchema[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"schemas\", this.name);\r\n\r\n        schemas.forEach(schema => this.entitySchemas.push(schema));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports subscribers and registers them in the current connection.\r\n     */\r\n    importSubscribers(subscriberClasses: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"entity subscribers\", this.name);\r\n\r\n        subscriberClasses.forEach(cls => this.subscriberClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports naming strategies and registers them in the current connection.\r\n     */\r\n    importNamingStrategies(strategies: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"naming strategies\", this.name);\r\n\r\n        strategies.forEach(cls => this.namingStrategyClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports migrations and registers them in the current connection.\r\n     */\r\n    importMigrations(migrations: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"migrations\", this.name);\r\n\r\n        migrations.forEach(cls => this.migrationClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets given naming strategy to be used.\r\n     * Naming strategy must be set to be used before connection is established.\r\n     */\r\n    useNamingStrategy(name: string): this;\r\n\r\n    /**\r\n     * Sets given naming strategy to be used.\r\n     * Naming strategy must be set to be used before connection is established.\r\n     */\r\n    useNamingStrategy(strategy: Function): this;\r\n\r\n    /**\r\n     * Sets given naming strategy to be used.\r\n     * Naming strategy must be set to be used before connection is established.\r\n     */\r\n    useNamingStrategy(strategyClassOrName: string|Function): this {\r\n        if (this.isConnected)\r\n            throw new CannotUseNamingStrategyNotConnectedError(this.name);\r\n\r\n        this.usedNamingStrategy = strategyClassOrName;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the entity metadata of the given entity class.\r\n     */\r\n    getMetadata(target: Function): EntityMetadata;\r\n\r\n    /**\r\n     * Gets the entity metadata of the given entity name.\r\n     */\r\n    getMetadata(target: string): EntityMetadata;\r\n\r\n    /**\r\n     * Gets the entity metadata of the given entity class or schema name.\r\n     */\r\n    getMetadata(target: Function|string): EntityMetadata;\r\n\r\n    /**\r\n     Gets entity metadata for the given entity class or schema name.\r\n     */\r\n    getMetadata(target: Function|string): EntityMetadata {\r\n        const metadata = this.entityMetadatas.find(metadata => metadata.target === target || (typeof target === \"string\" && metadata.targetName === target));\r\n        if (!metadata)\r\n            throw new EntityMetadataNotFound(target);\r\n\r\n        return metadata;\r\n    }\r\n\r\n    /**\r\n     * Gets repository for the given entity class.\r\n     */\r\n    getRepository<Entity>(entityClass: ObjectType<Entity>): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity name.\r\n     */\r\n    getRepository<Entity>(entityName: string): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity name.\r\n     */\r\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity class or name.\r\n     */\r\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity> {\r\n        return this.findRepositoryAggregator(entityClassOrName).repository;\r\n    }\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityClass: ObjectType<Entity>): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityName: string): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class or name.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity> {\r\n        // todo: add checks if tree repository is supported by driver (not supported by mongodb at least)\r\n\r\n        const repository = this.findRepositoryAggregator(entityClassOrName).treeRepository;\r\n        if (!repository)\r\n            throw new RepositoryNotTreeError(entityClassOrName);\r\n\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity class.\r\n     */\r\n    getMongoRepository<Entity>(entityClass: ObjectType<Entity>): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity name.\r\n     */\r\n    getMongoRepository<Entity>(entityName: string): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity name.\r\n     */\r\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity class or name.\r\n     */\r\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity> {\r\n        if (!(this.driver instanceof MongoDriver))\r\n            throw new Error(`You can use getMongoRepository only for MongoDB connections.`);\r\n\r\n        return this.findRepositoryAggregator(entityClassOrName).repository as MongoRepository<Entity>;\r\n    }\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityClass: ObjectType<Entity>): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity name.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityName: string): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class or name.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class or name.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity> {\r\n        return this.findRepositoryAggregator(entityClassOrName).specificRepository;\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity manager with a single opened connection to the database.\r\n     * This may be useful if you want to perform all db queries within one connection.\r\n     * After finishing with entity manager, don't forget to release it, to release connection back to pool.\r\n     */\r\n    createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider?: QueryRunnerProvider): EntityManager {\r\n        if (!queryRunnerProvider)\r\n            queryRunnerProvider = new QueryRunnerProvider(this.driver, true);\r\n\r\n        return new EntityManager(this, queryRunnerProvider);\r\n    }\r\n\r\n    /**\r\n     * Gets migration instances that are registered for this connection.\r\n     */\r\n    getMigrations(): MigrationInterface[] {\r\n        if (this.migrationClasses && this.migrationClasses.length) {\r\n            return this.migrationClasses.map(migrationClass => {\r\n                return getFromContainer<MigrationInterface>(migrationClass);\r\n            });\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Gets custom entity repository marked with @EntityRepository decorator.\r\n     */\r\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\r\n        return this.manager.getCustomRepository(customRepository);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Finds repository aggregator of the given entity class or name.\r\n     */\r\n    protected findRepositoryAggregator(entityClassOrName: ObjectType<any>|string): RepositoryAggregator {\r\n        // if (!this.isConnected)\r\n        //     throw new NoConnectionForRepositoryError(this.name);\r\n\r\n        if (!this.entityMetadatas.find(metadata => metadata.target === entityClassOrName || (typeof entityClassOrName === \"string\" && metadata.targetName === entityClassOrName)))\r\n            throw new RepositoryNotFoundError(this.name, entityClassOrName);\r\n\r\n        const metadata = this.getMetadata(entityClassOrName);\r\n        const repositoryAggregator = this.repositoryAggregators.find(repositoryAggregate => repositoryAggregate.metadata === metadata);\r\n        if (!repositoryAggregator)\r\n            throw new RepositoryNotFoundError(this.name, entityClassOrName);\r\n\r\n        return repositoryAggregator;\r\n    }\r\n\r\n    /**\r\n     * Builds all registered metadatas.\r\n     */\r\n    public buildMetadatas() {\r\n\r\n        this.entitySubscribers.length = 0;\r\n        this.repositoryAggregators.length = 0;\r\n        this.entityMetadatas.length = 0;\r\n\r\n        this.driver.namingStrategy = this.createNamingStrategy(); // todo: why they are in the driver\r\n        this.driver.lazyRelationsWrapper = this.createLazyRelationsWrapper(); // todo: why they are in the driver\r\n        const entityMetadataValidator = new EntityMetadataValidator();\r\n\r\n        // take imported event subscribers\r\n        if (this.subscriberClasses && this.subscriberClasses.length && !PlatformTools.getEnvVariable(\"SKIP_SUBSCRIBERS_LOADING\")) {\r\n            getMetadataArgsStorage()\r\n                .filterSubscribers(this.subscriberClasses)\r\n                .map(metadata => getFromContainer(metadata.target))\r\n                .forEach(subscriber => this.entitySubscribers.push(subscriber));\r\n        }\r\n\r\n        // take imported entity listeners\r\n        if (this.entityClasses && this.entityClasses.length) {\r\n\r\n            // build entity metadatas from metadata args storage (collected from decorators)\r\n            new EntityMetadataBuilder(this, getMetadataArgsStorage())\r\n                .build(this.entityClasses)\r\n                .forEach(metadata => {\r\n                    this.entityMetadatas.push(metadata);\r\n                    this.repositoryAggregators.push(new RepositoryAggregator(this, metadata));\r\n                });\r\n        }\r\n\r\n        // build entity metadatas from given entity schemas\r\n        if (this.entitySchemas && this.entitySchemas.length) {\r\n            const metadataArgsStorage = getFromContainer(EntitySchemaTransformer).transform(this.entitySchemas);\r\n            new EntityMetadataBuilder(this, metadataArgsStorage)\r\n                .build()\r\n                .forEach(metadata => {\r\n                    this.entityMetadatas.push(metadata);\r\n                    this.repositoryAggregators.push(new RepositoryAggregator(this, metadata));\r\n                });\r\n        }\r\n\r\n        entityMetadataValidator.validateMany(this.entityMetadatas);\r\n    }\r\n\r\n    /**\r\n     * Creates a naming strategy to be used for this connection.\r\n     */\r\n    protected createNamingStrategy(): NamingStrategyInterface {\r\n\r\n        // if naming strategies are not loaded, or used naming strategy is not set then use default naming strategy\r\n        if (!this.namingStrategyClasses || !this.namingStrategyClasses.length || !this.usedNamingStrategy)\r\n            return getFromContainer(DefaultNamingStrategy);\r\n\r\n        // try to find used naming strategy in the list of loaded naming strategies\r\n        const namingMetadata = getMetadataArgsStorage()\r\n            .filterNamingStrategies(this.namingStrategyClasses)\r\n            .find(strategy => {\r\n                if (typeof this.usedNamingStrategy === \"string\") {\r\n                    return strategy.name === this.usedNamingStrategy;\r\n                } else {\r\n                    return strategy.target === this.usedNamingStrategy;\r\n                }\r\n            });\r\n\r\n        // throw an error if not found\r\n        if (!namingMetadata)\r\n            throw new NamingStrategyNotFoundError(this.usedNamingStrategy, this.name);\r\n\r\n        // initialize a naming strategy instance\r\n        return getFromContainer<NamingStrategyInterface>(namingMetadata.target);\r\n    }\r\n\r\n    /**\r\n     * Creates a new default entity manager without single connection setup.\r\n     */\r\n    protected createEntityManager() {\r\n        if (this.driver instanceof MongoDriver)\r\n            return new MongoEntityManager(this);\r\n\r\n        return new EntityManager(this);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity broadcaster using in this connection.\r\n     */\r\n    protected createBroadcaster() {\r\n        return new Broadcaster(this, this.entitySubscribers);\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build a database schema for the entities of the current connection.\r\n     */\r\n    protected createSchemaBuilder() {\r\n        return new SchemaBuilder(this.driver, this.logger, this.entityMetadatas);\r\n    }\r\n\r\n    /**\r\n     * Creates a lazy relations wrapper.\r\n     */\r\n    protected createLazyRelationsWrapper() {\r\n        return new LazyRelationsWrapper(this);\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to get connection that does not exist.\r\n */\r\nexport class ConnectionNotFoundError extends Error {\r\n    name = \"ConnectionNotFoundError\";\r\n\r\n    constructor(name: string) {\r\n        super();\r\n        this.message = `Connection \"${name}\" was not found.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {DriverOptions} from \"../driver/DriverOptions\";\r\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {LoggerOptions} from \"../logger/LoggerOptions\";\r\n\r\n/**\r\n * ConnectionOptions is an interface with settings and options for specific connection.\r\n * Options contain database and other connection-related settings.\r\n * Consumer must provide connection options for each of your connections.\r\n */\r\nexport interface ConnectionOptions {\r\n\r\n    /**\r\n     * Database options of this connection.\r\n     */\r\n    readonly driver: DriverOptions;\r\n\r\n    /**\r\n     * Connection name. If connection name is not given then it will be called \"default\".\r\n     * Different connections must have different names.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Name of the naming strategy or target class of the naming strategy to be used for this connection.\r\n     */\r\n    readonly usedNamingStrategy?: string|Function;\r\n\r\n    /**\r\n     * Entities to be loaded for this connection.\r\n     * Accepts both entity classes and directories where from entities need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly entities?: Function[]|string[];\r\n\r\n    /**\r\n     * Subscribers to be loaded for this connection.\r\n     * Accepts both subscriber classes and directories where from subscribers need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly subscribers?: Function[]|string[];\r\n\r\n    /**\r\n     * Naming strategies to be loaded for this connection.\r\n     * Accepts both naming strategy classes and directories where from naming strategies need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly namingStrategies?: Function[]|string[];\r\n\r\n    /**\r\n     * Entity schemas to be loaded for this connection.\r\n     * Accepts both entity schema classes and directories where from entity schemas need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly entitySchemas?: EntitySchema[]|string[];\r\n\r\n    /**\r\n     * Migrations to be loaded for this connection.\r\n     * Accepts both migration classes and directories where from migrations need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly migrations?: Function[]|string[];\r\n\r\n    /**\r\n     * Logging options.\r\n     */\r\n    readonly logging?: LoggerOptions;\r\n\r\n    /**\r\n     * Drops the schema each time connection is being established.\r\n     * Be careful with this option and don't use this in production - otherwise you'll loose all production data.\r\n     * This option is useful during debug and development.\r\n     */\r\n    readonly dropSchemaOnConnection?: boolean;\r\n\r\n    /**\r\n     * Indicates if database schema should be auto created on every application launch.\r\n     * Be careful with this option and don't use this in production - otherwise you can loose production data.\r\n     * This option is useful during debug and development.\r\n     * Alternative to it, you can use CLI and run schema:sync command.\r\n     *\r\n     * Note that for MongoDB database it does not create schema, because MongoDB is schemaless.\r\n     * Instead, it syncs just by creating indices.\r\n     *\r\n     * todo: rename it simply to synchronize: boolean ?\r\n     */\r\n    readonly autoSchemaSync?: boolean;\r\n\r\n    /**\r\n     * Indicates if migrations should be auto run on every application launch.\r\n     * Alternative to it, you can use CLI and run migration:create command.\r\n     *\r\n     * todo: rename it simply to runMigrations: boolean ?\r\n     */\r\n    readonly autoMigrationsRun?: boolean;\r\n\r\n    /**\r\n     * Environment in which connection will run.\r\n     * Current environment is determined from the environment NODE_ENV variable's value.\r\n     * For example, if NODE_ENV is \"test\" and this property is set to \"test\",\r\n     * then this connection will be created. On any other NODE_ENV value it will be skipped.\r\n     * This option is specific to the configuration in the ormconfig.json file.\r\n     */\r\n    readonly environment?: string;\r\n\r\n    /**\r\n     * CLI settings.\r\n     */\r\n    readonly cli?: {\r\n\r\n        /**\r\n         * Directory where entities should be created by default.\r\n         */\r\n        readonly entitiesDir?: string;\r\n\r\n        /**\r\n         * Directory where migrations should be created by default.\r\n         */\r\n        readonly migrationsDir?: string;\r\n\r\n        /**\r\n         * Directory where subscribers should be created by default.\r\n         */\r\n        readonly subscribersDir?: string;\r\n\r\n    };\r\n\r\n}","/**\r\n * Thrown when consumer specifies driver type that does not exist or supported.\r\n */\r\nexport class MissingDriverError extends Error {\r\n    name = \"MissingDriverError\";\r\n\r\n    constructor(driverType: string) {\r\n        super();\r\n        this.message = `Wrong driver ${driverType} given. Supported drivers are: \"mysql\", \"postgres\", \"mssql\", \"oracle\", \"mariadb\", \"sqlite\".`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.\r\n */\r\nexport class AlreadyHasActiveConnectionError extends Error {\r\n    name = \"AlreadyHasActiveConnectionError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot create a new connection named \"${connectionName}\", because connection with such name ` +\r\n            `already exist and it now has an active connection session.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {SqliteDriver} from \"./SqliteDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n *\r\n * Does not support compose primary keys with autoincrement field.\r\n * todo: need to throw exception for this case.\r\n */\r\nexport class SqliteQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: SqliteDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.query(`PRAGMA foreign_keys = OFF;`);\r\n        await this.beginTransaction();\r\n        try {\r\n            const selectDropsQuery = `select 'drop table ' || name || ';' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'`;\r\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n            await this.query(`PRAGMA foreign_keys = ON;`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.databaseConnection.isTransactionActive = true;\r\n        await this.query(\"BEGIN TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise<any[]>((ok, fail) => {\r\n            this.logger.logQuery(query, parameters);\r\n            this.databaseConnection.connection.all(query, parameters, (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    fail(err);\r\n                } else {\r\n                    ok(result);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\r\n        const sql = columns.length > 0 ? (`INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`) : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        return new Promise<any[]>((ok, fail) => {\r\n            this.logger.logQuery(sql, parameters);\r\n            const __this = this;\r\n            this.databaseConnection.connection.run(sql, parameters, function (err: any): void {\r\n                if (err) {\r\n                    __this.logger.logFailedQuery(sql, parameters);\r\n                    __this.logger.logQueryError(err);\r\n                    fail(err);\r\n                } else {\r\n                    if (generatedColumn)\r\n                        return ok(this[\"lastID\"]);\r\n\r\n                    ok();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\r\n        const query = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(query, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (${tableNamesString})`);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables || !dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"name\"]);\r\n\r\n            // load columns and indices\r\n            const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\r\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\r\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\r\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\r\n            ]);\r\n\r\n            // find column name with auto increment\r\n            let autoIncrementColumnName: string|undefined = undefined;\r\n            const tableSql: string = dbTable[\"sql\"];\r\n            if (tableSql.indexOf(\"AUTOINCREMENT\") !== -1) {\r\n                autoIncrementColumnName = tableSql.substr(0, tableSql.indexOf(\"AUTOINCREMENT\"));\r\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\r\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\r\n                if (comma !== -1) {\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\r\n\r\n                } else if (bracket !== -1) {\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\r\n                }\r\n            }\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns.map(dbColumn => {\r\n                const columnSchema = new ColumnSchema();\r\n                columnSchema.name = dbColumn[\"name\"];\r\n                columnSchema.type = dbColumn[\"type\"].toLowerCase();\r\n                columnSchema.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\r\n                columnSchema.isNullable = dbColumn[\"notnull\"] === 0;\r\n                columnSchema.isPrimary = dbColumn[\"pk\"] === 1;\r\n                columnSchema.comment = \"\"; // todo later\r\n                columnSchema.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\r\n                const columnForeignKeys = dbForeignKeys\r\n                    .filter(foreignKey => foreignKey[\"from\"] === dbColumn[\"name\"])\r\n                    .map(foreignKey => {\r\n                        const keyName = this.driver.namingStrategy.foreignKeyName(dbTable[\"name\"], [foreignKey[\"from\"]], foreignKey[\"table\"], [foreignKey[\"to\"]]);\r\n                        return new ForeignKeySchema(keyName, [foreignKey[\"from\"]], [foreignKey[\"to\"]], foreignKey[\"table\"], foreignKey[\"on_delete\"]); // todo: how sqlite return from and to when they are arrays? (multiple column foreign keys)\r\n                    });\r\n                tableSchema.addForeignKeys(columnForeignKeys);\r\n                return columnSchema;\r\n            });\r\n\r\n            // create primary key schema\r\n            await Promise.all(dbIndices\r\n                .filter(index => index[\"origin\"] === \"pk\")\r\n                .map(async index => {\r\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${index[\"name\"]}\")`);\r\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\r\n                    indexColumns.forEach(indexColumn => {\r\n                        tableSchema.primaryKeys.push(new PrimaryKeySchema(index[\"name\"], indexColumn));\r\n                    });\r\n                }));\r\n\r\n            // create index schemas from the loaded indices\r\n            const indicesPromises = dbIndices\r\n                .filter(dbIndex => {\r\n                    return dbIndex[\"origin\"] !== \"pk\" &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"name\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"name\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"name\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(async dbIndexName => {\r\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\r\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\r\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\r\n\r\n                    // check if db index is generated by sqlite itself and has special use case\r\n                    if (dbIndex![\"name\"].substr(0, \"sqlite_autoindex\".length) === \"sqlite_autoindex\") {\r\n                        if (dbIndex![\"unique\"] === 1) { // this means we have a special index generated for a column\r\n                            // so we find and update the column\r\n                            indexColumns.forEach(columnName => {\r\n                                const column = tableSchema.columns.find(column => column.name === columnName);\r\n                                if (column)\r\n                                    column.isUnique = true;\r\n                            });\r\n                        }\r\n\r\n                        return Promise.resolve(undefined);\r\n\r\n                    } else {\r\n                        return new IndexSchema(dbTable[\"name\"], dbIndex![\"name\"], indexColumns, dbIndex![\"unique\"] === \"1\");\r\n                    }\r\n                });\r\n\r\n            const indices = await Promise.all(indicesPromises);\r\n            tableSchema.indices = indices.filter(index => !!index) as IndexSchema[];\r\n\r\n            return tableSchema;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM sqlite_master WHERE type = 'table' AND name = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // skip columns with foreign keys, we will add them later\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generates a wrong schema\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\r\n        const columns: ObjectLiteral[] = await this.query(sql);\r\n        return !!columns.find(column => column[\"name\"] === columnName);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const newTableSchema = tableSchema.clone();\r\n        newTableSchema.addColumns([column]);\r\n        await this.recreateTable(newTableSchema, tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const newTableSchema = tableSchema.clone();\r\n        newTableSchema.addColumns(columns);\r\n        await this.recreateTable(newTableSchema, tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        // todo: fix it. it should not depend on tableSchema\r\n        return this.recreateTable(tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     * Changed column looses all its keys in the db.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // todo: fix it. it should not depend on tableSchema\r\n        return this.recreateTable(tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        return this.dropColumns(tableSchemaOrName as any, [columnSchemaOrName as any]);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const updatingTableSchema = tableSchema.clone();\r\n        const columns = (columnSchemasOrNames as any[]).map(columnSchemasOrName => {\r\n            if (typeof columnSchemasOrName === \"string\") {\r\n                const column = tableSchema.columns.find(column => column.name === columnSchemasOrName);\r\n                if (!column)\r\n                    throw new Error(`Cannot drop a column - column \"${columnSchemasOrName}\" was not found in the \"${tableSchema.name}\" table.`);\r\n\r\n                return column;\r\n\r\n            } else {\r\n                return columnSchemasOrName as ColumnSchema;\r\n            }\r\n        });\r\n        updatingTableSchema.removeColumns(columns);\r\n        return this.recreateTable(updatingTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.recreateTable(dbTable);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.createForeignKeys(tableSchemaOrName as any, [foreignKey]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const changedTableSchema = tableSchema.clone();\r\n        changedTableSchema.addForeignKeys(foreignKeys);\r\n        return this.recreateTable(changedTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.dropForeignKeys(tableSchemaOrName as any, [foreignKey]);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const changedTableSchema = tableSchema.clone();\r\n        changedTableSchema.removeForeignKeys(foreignKeys);\r\n        return this.recreateTable(changedTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `DROP INDEX \"${indexName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                return \"character varying(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n            case \"text\":\r\n                return \"text\";\r\n            case \"boolean\":\r\n                return \"boolean\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"integer\";\r\n            case \"smallint\":\r\n                return \"smallint\";\r\n            case \"bigint\":\r\n                return \"bigint\";\r\n            case \"float\":\r\n                return \"real\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"double precision\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                if (typeOptions.timezone) {\r\n                    return \"time with time zone\";\r\n                } else {\r\n                    return \"time without time zone\";\r\n                }\r\n            case \"datetime\":\r\n                if (typeOptions.timezone) {\r\n                    return \"timestamp with time zone\";\r\n                } else {\r\n                    return \"timestamp without time zone\";\r\n                }\r\n            case \"json\":\r\n                return \"json\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"character varying(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"SQLite\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`DELETE FROM ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => this.driver.escapeColumnName(key) + \"=$\" + (startIndex + index + 1));\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema): string {\r\n        let c = \"\\\"\" + column.name + \"\\\"\";\r\n        if (column instanceof ColumnMetadata) {\r\n            c += \" \" + this.normalizeType(column);\r\n        } else {\r\n            c += \" \" + column.type;\r\n        }\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isUnique === true)\r\n            c += \" UNIQUE\";\r\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" PRIMARY KEY AUTOINCREMENT\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"1\" : \"0\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n    protected async recreateTable(tableSchema: TableSchema, oldTableSchema?: TableSchema, migrateData = true): Promise<void> {\r\n        // const withoutForeignKeyColumns = columns.filter(column => column.foreignKeys.length === 0);\r\n        // const createForeignKeys = options && options.createForeignKeys;\r\n        const columnDefinitions = tableSchema.columns.map(dbColumn => this.buildCreateColumnSql(dbColumn)).join(\", \");\r\n        const columnNames = tableSchema.columns.map(column => `\"${column.name}\"`).join(\", \");\r\n\r\n        let sql1 = `CREATE TABLE \"temporary_${tableSchema.name}\" (${columnDefinitions}`;\r\n        // if (options && options.createForeignKeys) {\r\n        tableSchema.foreignKeys.forEach(foreignKey => {\r\n            const columnNames = foreignKey.columnNames.map(name => `\"${name}\"`).join(\", \");\r\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(name => `\"${name}\"`).join(\", \");\r\n            sql1 += `, FOREIGN KEY(${columnNames}) REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\r\n            if (foreignKey.onDelete) sql1 += \" ON DELETE \" + foreignKey.onDelete;\r\n        });\r\n\r\n        const primaryKeyColumns = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql1 += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generate a wrong schema\r\n\r\n        sql1 += \")\";\r\n\r\n        // todo: need also create uniques and indices?\r\n\r\n        // recreate a table with a temporary name\r\n        await this.query(sql1);\r\n\r\n        // we need only select data from old columns\r\n        const oldColumnNames = oldTableSchema ? oldTableSchema.columns.map(column => `\"${column.name}\"`).join(\", \") : columnNames;\r\n\r\n        // migrate all data from the table into temporary table\r\n        if (migrateData) {\r\n            const sql2 = `INSERT INTO \"temporary_${tableSchema.name}\"(${oldColumnNames}) SELECT ${oldColumnNames} FROM \"${tableSchema.name}\"`;\r\n            await this.query(sql2);\r\n        }\r\n\r\n        // drop old table\r\n        const sql3 = `DROP TABLE \"${tableSchema.name}\"`;\r\n        await this.query(sql3);\r\n\r\n        // rename temporary table\r\n        const sql4 = `ALTER TABLE \"temporary_${tableSchema.name}\" RENAME TO \"${tableSchema.name}\"`;\r\n        await this.query(sql4);\r\n\r\n        // also re-create indices\r\n        const indexPromises = tableSchema.indices.map(index => this.createIndex(tableSchema.name, index));\r\n        // const uniquePromises = tableSchema.uniqueKeys.map(key => this.createIndex(key));\r\n        await Promise.all(indexPromises/*.concat(uniquePromises)*/);\r\n    }\r\n\r\n    /**\r\n     * If given value is a table name then it loads its table schema representation from the database.\r\n     */\r\n    protected async getTableSchema(tableSchemaOrName: TableSchema|string): Promise<TableSchema> {\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            return tableSchemaOrName;\r\n        } else {\r\n            const tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n            if (!tableSchema)\r\n                throw new Error(`Table named ${tableSchemaOrName} was not found in the database.`);\r\n\r\n            return tableSchema;\r\n        }\r\n    }\r\n\r\n}\r\n","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {SqliteQueryRunner} from \"./SqliteQueryRunner\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\nimport {LazyRelationsWrapper} from \"../../lazy-loading/LazyRelationsWrapper\";\r\n\r\n/**\r\n * Organizes communication with sqlite DBMS.\r\n */\r\nexport class SqliteDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Used to wrap lazy relations to be able to perform lazy loadings.\r\n     */\r\n    lazyRelationsWrapper: LazyRelationsWrapper;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * SQLite library.\r\n     */\r\n    protected sqlite: any;\r\n\r\n    /**\r\n     * Connection to SQLite database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connectionOptions: DriverOptions, logger: Logger, sqlite?: any) {\r\n\r\n        this.options = connectionOptions;\r\n        this.logger = logger;\r\n        this.sqlite = sqlite;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.storage)\r\n            throw new DriverOptionNotSetError(\"storage\");\r\n\r\n        // if sqlite package instance was not set explicitly then try to load it\r\n        if (!sqlite)\r\n            this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    connect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            const connection = new this.sqlite.Database(this.options.storage, (err: any) => {\r\n                if (err)\r\n                    return fail(err);\r\n\r\n                this.databaseConnection = {\r\n                    id: 1,\r\n                    connection: connection,\r\n                    isTransactionActive: false\r\n                };\r\n\r\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n                // working properly. this also makes onDelete to work with sqlite.\r\n                connection.run(`PRAGMA foreign_keys = ON;`, (err: any, result: any) => {\r\n                    ok();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n\r\n            if (!this.databaseConnection)\r\n                return fail(new ConnectionIsNotSetError(\"sqlite\"));\r\n            this.databaseConnection.connection.close(handler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"sqlite\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new SqliteQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.sqlite,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n\r\n        const builtParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\r\n            const value = parameters[key.substr(1)];\r\n            if (value instanceof Array) {\r\n                return value.map((v: any) => {\r\n                    builtParameters.push(v);\r\n                    return \"$\" + builtParameters.length;\r\n                }).join(\", \");\r\n            } else {\r\n                builtParameters.push(value);\r\n            }\r\n            return \"$\" + builtParameters.length;\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, builtParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return \"\\\"\" + columnName + \"\\\"\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return \"\\\"\" + aliasName + \"\\\"\";\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return \"\\\"\" + tableName + \"\\\"\";\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"sqlite\");\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.sqlite = PlatformTools.load(\"sqlite3\").verbose();\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\");\r\n        }\r\n    }\r\n\r\n}","/**\r\n * Thrown when connection is trying to be created automatically from connection options found in the ormconfig.json\r\n * or environment variables, but failed due to missing these configurations.\r\n */\r\nexport class CannotDetermineConnectionOptionsError extends Error {\r\n    name = \"CannotDetermineConnectionOptionsError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Cannot create connection, because connection options are missing. ` +\r\n            `You either need to explicitly pass connection options, either create a ormconfig.json with connection options ` +\r\n            `and \"default\" connection name, either to set proper environment variables. Also, if you are using environment-specific ` +\r\n            `configurations in your ormconfig.json make sure your are running under correct NODE_ENV.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {WebsqlDriver} from \"./WebsqlDriver\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single websql database connection.\r\n */\r\nexport class WebsqlQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: WebsqlDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // await this.query(`PRAGMA foreign_keys = OFF;`);\r\n        await this.beginTransaction();\r\n        try {\r\n            const selectDropsQuery = `select 'drop table ' || name || ';' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'`;\r\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n            // await this.query(`PRAGMA foreign_keys = ON;`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.databaseConnection.isTransactionActive = true;\r\n        // await this.query(\"BEGIN TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        // await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        // await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise((ok, fail) => {\r\n\r\n            this.logger.logQuery(query, parameters);\r\n            const db = this.databaseConnection.connection;\r\n            // todo: check if transaction is not active\r\n            db.transaction((tx: any) => {\r\n                tx.executeSql(query, parameters, (tx: any, result: any) => {\r\n                    const rows = Object\r\n                        .keys(result.rows)\r\n                        .filter(key => key !== \"length\")\r\n                        .map(key => result.rows[key]);\r\n                    ok(rows);\r\n\r\n                }, (tx: any, err: any) => {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\r\n        const sql = columns.length > 0 ? (`INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`) : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        return new Promise<any[]>((ok, fail) => {\r\n            this.logger.logQuery(sql, parameters);\r\n\r\n            const db = this.databaseConnection.connection;\r\n            // todo: check if transaction is not active\r\n            db.transaction((tx: any) => {\r\n                tx.executeSql(sql, parameters, (tx: any, result: any) => {\r\n                    if (generatedColumn)\r\n                        return ok(result[\"insertId\"]);\r\n                    ok();\r\n\r\n                }, (tx: any, err: any) => {\r\n                    this.logger.logFailedQuery(sql, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\r\n        const query = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(query, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (${tableNamesString})`);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables || !dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"name\"]);\r\n\r\n            // load columns and indices\r\n            /*const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\r\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\r\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\r\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\r\n            ]);\r\n\r\n            // find column name with auto increment\r\n            let autoIncrementColumnName: string|undefined = undefined;\r\n            const tableSql: string = dbTable[\"sql\"];\r\n            if (tableSql.indexOf(\"AUTOINCREMENT\") !== -1) {\r\n                autoIncrementColumnName = tableSql.substr(0, tableSql.indexOf(\"AUTOINCREMENT\"));\r\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\r\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\r\n                if (comma !== -1) {\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\r\n\r\n                } else if (bracket !== -1) {\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\r\n                }\r\n            }\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns.map(dbColumn => {\r\n                const columnSchema = new ColumnSchema();\r\n                columnSchema.name = dbColumn[\"name\"];\r\n                columnSchema.type = dbColumn[\"type\"].toLowerCase();\r\n                columnSchema.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\r\n                columnSchema.isNullable = dbColumn[\"notnull\"] === 0;\r\n                columnSchema.isPrimary = dbColumn[\"pk\"] === 1;\r\n                columnSchema.comment = \"\"; // todo later\r\n                columnSchema.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\r\n                const columnForeignKeys = dbForeignKeys\r\n                    .filter(foreignKey => foreignKey[\"from\"] === dbColumn[\"name\"])\r\n                    .map(foreignKey => {\r\n                        const keyName = namingStrategy.foreignKeyName(dbTable[\"name\"], [foreignKey[\"from\"]], foreignKey[\"table\"], [foreignKey[\"to\"]]);\r\n                        return new ForeignKeySchema(keyName, [foreignKey[\"from\"]], [foreignKey[\"to\"]], foreignKey[\"table\"], foreignKey[\"on_delete\"]); // todo: how sqlite return from and to when they are arrays? (multiple column foreign keys)\r\n                    });\r\n                tableSchema.addForeignKeys(columnForeignKeys);\r\n                return columnSchema;\r\n            });\r\n\r\n            // create primary key schema\r\n            await Promise.all(dbIndices\r\n                .filter(index => index[\"origin\"] === \"pk\")\r\n                .map(async index => {\r\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${index[\"name\"]}\")`);\r\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\r\n                    indexColumns.forEach(indexColumn => {\r\n                        tableSchema.primaryKeys.push(new PrimaryKeySchema(index[\"name\"], indexColumn));\r\n                    });\r\n                }));\r\n\r\n            // create index schemas from the loaded indices\r\n            const indicesPromises = dbIndices\r\n                .filter(dbIndex => {\r\n                    return  dbIndex[\"origin\"] !== \"pk\" &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"name\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"name\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"name\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(async dbIndexName => {\r\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\r\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\r\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\r\n\r\n                    // check if db index is generated by sqlite itself and has special use case\r\n                    if (dbIndex![\"name\"].substr(0, \"sqlite_autoindex\".length) === \"sqlite_autoindex\") {\r\n                        if (dbIndex![\"unique\"] === 1) { // this means we have a special index generated for a column\r\n                            // so we find and update the column\r\n                            indexColumns.forEach(columnName => {\r\n                                const column = tableSchema.columns.find(column => column.name === columnName);\r\n                                if (column)\r\n                                    column.isUnique = true;\r\n                            });\r\n                        }\r\n\r\n                        return Promise.resolve(undefined);\r\n\r\n                    } else {\r\n                        return new IndexSchema(dbTable[\"name\"], dbIndex![\"name\"], indexColumns, dbIndex![\"unique\"] === \"1\");\r\n                    }\r\n                });\r\n\r\n            const indices = await Promise.all(indicesPromises);\r\n            tableSchema.indices = indices.filter(index => !!index) as IndexSchema[];*/\r\n\r\n            return tableSchema;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM sqlite_master WHERE type = 'table' AND name = ${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // skip columns with foreign keys, we will add them later\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generates a wrong schema\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\r\n        const columns: ObjectLiteral[] = await this.query(sql);\r\n        return !!columns.find(column => column[\"name\"] === columnName);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const newTableSchema = tableSchema.clone();\r\n        newTableSchema.addColumns([column]);\r\n        await this.recreateTable(newTableSchema, tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const newTableSchema = tableSchema.clone();\r\n        newTableSchema.addColumns(columns);\r\n        await this.recreateTable(newTableSchema, tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        // todo: fix it. it should not depend on tableSchema\r\n        return this.recreateTable(tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     * Changed column looses all its keys in the db.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // todo: fix it. it should not depend on tableSchema\r\n        return this.recreateTable(tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        return this.dropColumns(tableSchemaOrName as any, [columnSchemaOrName as any]);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const updatingTableSchema = tableSchema.clone();\r\n        const columns = (columnSchemasOrNames as any[]).map(columnSchemasOrName => {\r\n            if (typeof columnSchemasOrName === \"string\") {\r\n                const column = tableSchema.columns.find(column => column.name === columnSchemasOrName);\r\n                if (!column)\r\n                    throw new Error(`Cannot drop a column - column \"${columnSchemasOrName}\" was not found in the \"${tableSchema.name}\" table.`);\r\n\r\n                return column;\r\n\r\n            } else {\r\n                return columnSchemasOrName as ColumnSchema;\r\n            }\r\n        });\r\n        updatingTableSchema.removeColumns(columns);\r\n        return this.recreateTable(updatingTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.recreateTable(dbTable);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.createForeignKeys(tableSchemaOrName as any, [foreignKey]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const changedTableSchema = tableSchema.clone();\r\n        changedTableSchema.addForeignKeys(foreignKeys);\r\n        return this.recreateTable(changedTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.dropForeignKeys(tableSchemaOrName as any, [foreignKey]);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const changedTableSchema = tableSchema.clone();\r\n        changedTableSchema.removeForeignKeys(foreignKeys);\r\n        return this.recreateTable(changedTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `DROP INDEX \"${indexName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                return \"character varying(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n            case \"text\":\r\n                return \"text\";\r\n            case \"boolean\":\r\n                return \"boolean\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"integer\";\r\n            case \"smallint\":\r\n                return \"smallint\";\r\n            case \"bigint\":\r\n                return \"bigint\";\r\n            case \"float\":\r\n                return \"real\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"double precision\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                if (typeOptions.timezone) {\r\n                    return \"time with time zone\";\r\n                } else {\r\n                    return \"time without time zone\";\r\n                }\r\n            case \"datetime\":\r\n                if (typeOptions.timezone) {\r\n                    return \"timestamp with time zone\";\r\n                } else {\r\n                    return \"timestamp without time zone\";\r\n                }\r\n            case \"json\":\r\n                return \"json\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"character varying(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"WebSQL\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`DELETE FROM ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => this.driver.escapeColumnName(key) + \"=$\" + (startIndex + index + 1));\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema): string {\r\n        let c = \"\\\"\" + column.name + \"\\\"\";\r\n        if (column instanceof ColumnMetadata) {\r\n            c += \" \" + this.normalizeType(column);\r\n        } else {\r\n            c += \" \" + column.type;\r\n        }\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isUnique === true)\r\n            c += \" UNIQUE\";\r\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" PRIMARY KEY AUTOINCREMENT\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n    protected async recreateTable(tableSchema: TableSchema, oldTableSchema?: TableSchema): Promise<void> {\r\n        // const withoutForeignKeyColumns = columns.filter(column => column.foreignKeys.length === 0);\r\n        // const createForeignKeys = options && options.createForeignKeys;\r\n        const columnDefinitions = tableSchema.columns.map(dbColumn => this.buildCreateColumnSql(dbColumn)).join(\", \");\r\n        const columnNames = tableSchema.columns.map(column => `\"${column.name}\"`).join(\", \");\r\n\r\n        let sql1 = `CREATE TABLE \"temporary_${tableSchema.name}\" (${columnDefinitions}`;\r\n        // if (options && options.createForeignKeys) {\r\n        tableSchema.foreignKeys.forEach(foreignKey => {\r\n            const columnNames = foreignKey.columnNames.map(name => `\"${name}\"`).join(\", \");\r\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(name => `\"${name}\"`).join(\", \");\r\n            sql1 += `, FOREIGN KEY(${columnNames}) REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\r\n            if (foreignKey.onDelete) sql1 += \" ON DELETE \" + foreignKey.onDelete;\r\n        });\r\n\r\n        const primaryKeyColumns = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql1 += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generate a wrong schema\r\n\r\n        sql1 += \")\";\r\n\r\n        // todo: need also create uniques and indices?\r\n\r\n        // recreate a table with a temporary name\r\n        await this.query(sql1);\r\n\r\n        // we need only select data from old columns\r\n        const oldColumnNames = oldTableSchema ? oldTableSchema.columns.map(column => `\"${column.name}\"`).join(\", \") : columnNames;\r\n\r\n        // migrate all data from the table into temporary table\r\n        const sql2 = `INSERT INTO \"temporary_${tableSchema.name}\"(${oldColumnNames}) SELECT ${oldColumnNames} FROM \"${tableSchema.name}\"`;\r\n        await this.query(sql2);\r\n\r\n        // drop old table\r\n        const sql3 = `DROP TABLE \"${tableSchema.name}\"`;\r\n        await this.query(sql3);\r\n\r\n        // rename temporary table\r\n        const sql4 = `ALTER TABLE \"temporary_${tableSchema.name}\" RENAME TO \"${tableSchema.name}\"`;\r\n        await this.query(sql4);\r\n\r\n        // also re-create indices\r\n        const indexPromises = tableSchema.indices.map(index => this.createIndex(tableSchema.name, index));\r\n        // const uniquePromises = tableSchema.uniqueKeys.map(key => this.createIndex(key));\r\n        await Promise.all(indexPromises/*.concat(uniquePromises)*/);\r\n    }\r\n\r\n    /**\r\n     * If given value is a table name then it loads its table schema representation from the database.\r\n     */\r\n    protected async getTableSchema(tableSchemaOrName: TableSchema|string): Promise<TableSchema> {\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            return tableSchemaOrName;\r\n        } else {\r\n            const tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n            if (!tableSchema)\r\n                throw new Error(`Table named ${tableSchemaOrName} was not found in the database.`);\r\n\r\n            return tableSchema;\r\n        }\r\n    }\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {WebsqlQueryRunner} from \"./WebsqlQueryRunner\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\nimport {LazyRelationsWrapper} from \"../../lazy-loading/LazyRelationsWrapper\";\r\n\r\n/**\r\n * Declare a global function that is only available in browsers that support WebSQL.\r\n */\r\ndeclare function openDatabase(...params: any[]): any;\r\n\r\n/**\r\n * Organizes communication with WebSQL in the browser.\r\n */\r\nexport class WebsqlDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Used to wrap lazy relations to be able to perform lazy loadings.\r\n     */\r\n    lazyRelationsWrapper: LazyRelationsWrapper;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection to database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(options);\r\n        this.logger = logger;\r\n\r\n        // validate options to make sure everything is set\r\n        // if (!this.options.host)\r\n        //     throw new DriverOptionNotSetError(\"host\");\r\n        // if (!this.options.username)\r\n        //     throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n        // todo: what about extra options: version, description, size\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            database: this.options.database,\r\n        }, this.options.extra || {});\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const connection = openDatabase(\r\n                options.database,\r\n                options.version,\r\n                options.description,\r\n                options.size,\r\n            );\r\n            this.databaseConnection = {\r\n                id: 1,\r\n                connection: connection,\r\n                isTransactionActive: false\r\n            };\r\n            ok();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        if (!this.databaseConnection)\r\n            throw new ConnectionIsNotSetError(\"websql\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            // const handler = (err: any) => err ? fail(err) : ok();\r\n            // todo: find out how to close connection\r\n            ok();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"websql\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new WebsqlQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            escapedParameters.push(parameters[key.substr(1)]);\r\n            return \"?\";\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return columnName; // \"`\" + columnName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return aliasName; // \"`\" + aliasName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return tableName; // \"`\" + tableName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"websql\");\r\n    }\r\n\r\n}","import {Connection} from \"./Connection\";\r\nimport {ConnectionNotFoundError} from \"./error/ConnectionNotFoundError\";\r\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\r\nimport {ConnectionOptions} from \"./ConnectionOptions\";\r\nimport {DriverOptions} from \"../driver/DriverOptions\";\r\nimport {Driver} from \"../driver/Driver\";\r\nimport {MissingDriverError} from \"./error/MissingDriverError\";\r\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\r\nimport {AlreadyHasActiveConnectionError} from \"./error/AlreadyHasActiveConnectionError\";\r\nimport {Logger} from \"../logger/Logger\";\r\nimport {SqliteDriver} from \"../driver/sqlite/SqliteDriver\";\r\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\nimport {CannotDetermineConnectionOptionsError} from \"./error/CannotDetermineConnectionOptionsError\";\r\nimport {PlatformTools} from \"../platform/PlatformTools\";\r\nimport {WebsqlDriver} from \"../driver/websql/WebsqlDriver\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\n\r\n/**\r\n * ConnectionManager is used to store and manage all these different connections.\r\n * It also provides useful factory methods to simplify connection creation.\r\n */\r\nexport class ConnectionManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * List of connections registered in this connection manager.\r\n     */\r\n    protected connections: Connection[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if connection with the given name exist in the manager.\r\n     */\r\n    has(name: string): boolean {\r\n        return !!this.connections.find(connection => connection.name === name);\r\n    }\r\n\r\n    /**\r\n     * Gets registered connection with the given name.\r\n     * If connection name is not given then it will get a default connection.\r\n     * Throws exception if connection with the given name was not found.\r\n     */\r\n    get(name: string = \"default\"): Connection {\r\n        const connection = this.connections.find(connection => connection.name === name);\r\n        if (!connection)\r\n            throw new ConnectionNotFoundError(name);\r\n\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection based on the given connection options and registers it in the manager.\r\n     * You need to manually call #connect method to establish connection.\r\n     * Note that dropSchemaOnConnection and autoSchemaSync options of a ConnectionOptions will not work there - use\r\n     * createAndConnect method to use them.\r\n     */\r\n    create(options: ConnectionOptions): Connection {\r\n\r\n        const logger = new Logger(options.logging || {});\r\n        const driver = this.createDriver(options.driver, logger);\r\n        const connection = this.createConnection(options.name || \"default\", driver, logger);\r\n\r\n        // import entity schemas\r\n        if (options.entitySchemas) {\r\n            const [directories, classes] = this.splitStringsAndClasses(options.entitySchemas);\r\n            connection\r\n                .importEntitySchemas(classes)\r\n                .importEntitySchemaFromDirectories(directories);\r\n        }\r\n\r\n        // import entities\r\n        if (options.entities) {\r\n            const [directories, classes] = this.splitStringsAndClasses(options.entities);\r\n            connection\r\n                .importEntities(classes)\r\n                .importEntitiesFromDirectories(directories);\r\n        }\r\n\r\n        // import subscriber\r\n        if (options.subscribers) {\r\n            const [directories, classes] = this.splitStringsAndClasses(options.subscribers);\r\n            connection\r\n                .importSubscribers(classes)\r\n                .importSubscribersFromDirectories(directories);\r\n        }\r\n\r\n        // import naming strategies\r\n        if (options.namingStrategies) {\r\n            const [directories, classes] = this.splitStringsAndClasses(options.namingStrategies);\r\n            connection\r\n                .importNamingStrategies(classes)\r\n                .importNamingStrategiesFromDirectories(directories);\r\n        }\r\n\r\n        // import migrations\r\n        if (options.migrations) {\r\n            const [directories, classes] = this.splitStringsAndClasses(options.migrations);\r\n            connection\r\n                .importMigrations(classes)\r\n                .importMigrationsFromDirectories(directories);\r\n        }\r\n\r\n        // set naming strategy to be used for this connection\r\n        if (options.usedNamingStrategy)\r\n            connection.useNamingStrategy(options.usedNamingStrategy as any);\r\n\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection and registers it in the manager.\r\n     *\r\n     * If connection options were not specified, then it will try to create connection automatically.\r\n     *\r\n     * First, it will try to find a \"default\" configuration from ormconfig.json.\r\n     * You can also specify a connection name to use from ormconfig.json,\r\n     * and you even can specify a path to custom ormconfig.json file.\r\n     *\r\n     * In the case if options were not specified, and ormconfig.json file also wasn't found,\r\n     * it will try to create connection from environment variables.\r\n     * There are several environment variables you can set:\r\n     *\r\n     * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\r\n     * - TYPEORM_URL - database connection url. Should be a string.\r\n     * - TYPEORM_HOST - database host. Should be a string.\r\n     * - TYPEORM_PORT - database access port. Should be a number.\r\n     * - TYPEORM_USERNAME - database username. Should be a string.\r\n     * - TYPEORM_PASSWORD - database user's password. Should be a string.\r\n     * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\r\n     * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\r\n     * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\r\n     * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\r\n     * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\r\n     * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\r\n     * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\r\n     * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\r\n     *\r\n     * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\r\n     */\r\n    async createAndConnect(): Promise<Connection>;\r\n\r\n    /**\r\n     * Creates connection from the given connection options and registers it in the manager.\r\n     */\r\n    async createAndConnect(options: ConnectionOptions): Promise<Connection>;\r\n\r\n    /**\r\n     * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\r\n     * Optionally you can specify a path to custom ormconfig.json file.\r\n     */\r\n    async createAndConnect(connectionNameFromConfig: string, ormConfigPath?: string): Promise<Connection>;\r\n\r\n    /**\r\n     * Creates connection and and registers it in the manager.\r\n     */\r\n    async createAndConnect(optionsOrConnectionNameFromConfig?: ConnectionOptions|string, ormConfigPath?: string): Promise<Connection> {\r\n\r\n        // if connection options are given, then create connection from them\r\n        if (optionsOrConnectionNameFromConfig && optionsOrConnectionNameFromConfig instanceof Object)\r\n            return this.createAndConnectByConnectionOptions(optionsOrConnectionNameFromConfig as ConnectionOptions);\r\n\r\n        // if connection name is specified then explicitly try to load connection options from it\r\n        if (typeof optionsOrConnectionNameFromConfig === \"string\")\r\n            return this.createFromConfigAndConnect(optionsOrConnectionNameFromConfig || \"default\", ormConfigPath);\r\n\r\n        // if nothing is specified then try to silently load config from ormconfig.json\r\n        if (this.hasDefaultConfigurationInConfigurationFile())\r\n            return this.createFromConfigAndConnect(\"default\");\r\n\r\n        // if driver type is set in environment variables then try to create connection from env variables\r\n        if (this.hasDefaultConfigurationInEnvironmentVariables())\r\n            return this.createFromEnvAndConnect();\r\n\r\n        throw new CannotDetermineConnectionOptionsError();\r\n    }\r\n\r\n    /**\r\n     * Creates new connections and registers them in the manager.\r\n     *\r\n     * If array of connection options were not specified, then it will try to create them automatically\r\n     * from ormconfig.json. You can also specify path to your custom ormconfig.json file.\r\n     *\r\n     * In the case if options were not specified, and ormconfig.json file also wasn't found,\r\n     * it will try to create connection from environment variables.\r\n     * There are several environment variables you can set:\r\n     *\r\n     * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\r\n     * - TYPEORM_URL - database connection url. Should be a string.\r\n     * - TYPEORM_HOST - database host. Should be a string.\r\n     * - TYPEORM_PORT - database access port. Should be a number.\r\n     * - TYPEORM_USERNAME - database username. Should be a string.\r\n     * - TYPEORM_PASSWORD - database user's password. Should be a string.\r\n     * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\r\n     * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\r\n     * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\r\n     * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\r\n     * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\r\n     * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\r\n     * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\r\n     * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\r\n     *\r\n     * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\r\n     */\r\n    async createAndConnectToAll(): Promise<Connection[]>;\r\n\r\n    /**\r\n     * Creates connections from the given connection options and registers them in the manager.\r\n     */\r\n    async createAndConnectToAll(options?: ConnectionOptions[]): Promise<Connection[]>;\r\n\r\n    /**\r\n     * Creates connections from the ormconfig.json file.\r\n     * Optionally you can specify a path to custom ormconfig.json file.\r\n     */\r\n    async createAndConnectToAll(ormConfigPath?: string): Promise<Connection[]>;\r\n\r\n    /**\r\n     * Creates connections and and registers them in the manager.\r\n     */\r\n    async createAndConnectToAll(optionsOrOrmConfigFilePath?: ConnectionOptions[]|string): Promise<Connection[]> {\r\n\r\n        // if connection options are given, then create connection from them\r\n        if (optionsOrOrmConfigFilePath && optionsOrOrmConfigFilePath instanceof Array)\r\n            return Promise.all(optionsOrOrmConfigFilePath.map(options => {\r\n                return this.createAndConnectByConnectionOptions(options as ConnectionOptions);\r\n            }));\r\n\r\n        // if connection name is specified then explicitly try to load connection options from it\r\n        if (typeof optionsOrOrmConfigFilePath === \"string\")\r\n            return this.createFromConfigAndConnectToAll(optionsOrOrmConfigFilePath as string);\r\n\r\n        // if nothing is specified then try to silently load config from ormconfig.json\r\n        if (this.hasOrmConfigurationFile())\r\n            return this.createFromConfigAndConnectToAll();\r\n\r\n        // if driver type is set in environment variables then try to create connection from env variables\r\n        if (this.hasDefaultConfigurationInEnvironmentVariables())\r\n            return [await this.createFromEnvAndConnect()];\r\n\r\n        throw new CannotDetermineConnectionOptionsError();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if ormconfig.json exists.\r\n     */\r\n    protected hasOrmConfigurationFile(): boolean {\r\n        const path = PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\";\r\n        if (!PlatformTools.fileExist(path))\r\n            return false;\r\n\r\n        const configuration: ConnectionOptions[]|ConnectionOptions = PlatformTools.load(path);\r\n        if (configuration instanceof Array) {\r\n            return configuration\r\n                    .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\"))\r\n                    .length > 0;\r\n\r\n        } else if (configuration instanceof Object) {\r\n            if (configuration.environment && configuration.environment !== PlatformTools.getEnvVariable(\"NODE_ENV\"))\r\n                return false;\r\n\r\n            return Object.keys(configuration).length > 0;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if there is a default connection in the ormconfig.json file.\r\n     */\r\n    protected hasDefaultConfigurationInConfigurationFile(): boolean {\r\n        const path = PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\";\r\n        if (!PlatformTools.fileExist(path))\r\n            return false;\r\n\r\n        const configuration: ConnectionOptions[]|ConnectionOptions = PlatformTools.load(path);\r\n        if (configuration instanceof Array) {\r\n            return !!configuration\r\n                .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\"))\r\n                .find(config => !!config.name || config.name === \"default\");\r\n\r\n        } else if (configuration instanceof Object) {\r\n            if (!configuration.name ||\r\n                configuration.name !== \"default\")\r\n                return false;\r\n\r\n            if (configuration.environment && configuration.environment !== PlatformTools.getEnvVariable(\"NODE_ENV\"))\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if environment variables contains connection options.\r\n     */\r\n    protected hasDefaultConfigurationInEnvironmentVariables(): boolean {\r\n        return !!PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_TYPE\");\r\n    }\r\n\r\n    /**\r\n     * Allows to quickly create a connection based on the environment variable values.\r\n     */\r\n    protected async createFromEnvAndConnect(): Promise<Connection> {\r\n        return this.createAndConnectByConnectionOptions({\r\n            driver: {\r\n                type: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_TYPE\"),\r\n                url: PlatformTools.getEnvVariable(\"TYPEORM_URL\"),\r\n                host: PlatformTools.getEnvVariable(\"TYPEORM_HOST\"),\r\n                port: PlatformTools.getEnvVariable(\"TYPEORM_PORT\"),\r\n                username: PlatformTools.getEnvVariable(\"TYPEORM_USERNAME\"),\r\n                password: PlatformTools.getEnvVariable(\"TYPEORM_PASSWORD\"),\r\n                database: PlatformTools.getEnvVariable(\"TYPEORM_DATABASE\"),\r\n                sid: PlatformTools.getEnvVariable(\"TYPEORM_SID\"),\r\n                storage: PlatformTools.getEnvVariable(\"TYPEORM_STORAGE\"),\r\n                usePool: PlatformTools.getEnvVariable(\"TYPEORM_USE_POOL\") !== undefined ? OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_USE_POOL\")) : undefined, // special check for defined is required here\r\n                extra: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\") ? JSON.parse(PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\")) : undefined\r\n            },\r\n            autoSchemaSync: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_AUTO_SCHEMA_SYNC\")),\r\n            entities: PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\").split(\",\") : [],\r\n            subscribers: PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\") ? PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\").split(\",\") : [],\r\n            entitySchemas: PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\").split(\",\") : [],\r\n            namingStrategies: PlatformTools.getEnvVariable(\"TYPEORM_NAMING_STRATEGIES\") ? PlatformTools.getEnvVariable(\"TYPEORM_NAMING_STRATEGIES\").split(\",\") : [],\r\n            usedNamingStrategy: PlatformTools.getEnvVariable(\"TYPEORM_USED_NAMING_STRATEGY\"),\r\n            logging: {\r\n                logQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_QUERIES\")),\r\n                logFailedQueryError: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_FAILED_QUERIES\")),\r\n                logOnlyFailedQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_ONLY_FAILED_QUERIES\")),\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates a new connection based on the connection options from \"ormconfig.json\"\r\n     * and registers a new connection in the manager.\r\n     * Optionally you can specify a path to the json configuration.\r\n     * If path is not given, then ormconfig.json file will be searched near node_modules directory.\r\n     */\r\n    protected async createFromConfigAndConnectToAll(path?: string): Promise<Connection[]> {\r\n        const optionsArray: ConnectionOptions[] = PlatformTools.load(path || (PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\"));\r\n        if (!optionsArray)\r\n            throw new Error(`Configuration ${path || \"ormconfig.json\"} was not found. Add connection configuration inside ormconfig.json file.`);\r\n\r\n        const promises = optionsArray\r\n            .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\")) // skip connection creation if environment is set in the options, and its not equal to the value in the NODE_ENV variable\r\n            .map(options => this.createAndConnectByConnectionOptions(options));\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection based on the connection options from \"ormconfig.json\"\r\n     * and registers a new connection in the manager.\r\n     * Optionally you can specify a path to the json configuration.\r\n     * If path is not given, then ormconfig.json file will be searched near node_modules directory.\r\n     */\r\n    protected async createFromConfigAndConnect(connectionName: string, path?: string): Promise<Connection> {\r\n        const optionsArray: ConnectionOptions[] = PlatformTools.load(path || (PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\"));\r\n        if (!optionsArray)\r\n            throw new Error(`Configuration ${path || \"ormconfig.json\"} was not found. Add connection configuration inside ormconfig.json file.`);\r\n\r\n        const environmentLessOptions = optionsArray.filter(options => (options.name || \"default\") === connectionName);\r\n        const options = environmentLessOptions.filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\")); // skip connection creation if environment is set in the options, and its not equal to the value in the NODE_ENV variable\r\n\r\n        if (!options.length)\r\n            throw new Error(`Connection \"${connectionName}\" ${PlatformTools.getEnvVariable(\"NODE_ENV\") ? \"for the environment \" + PlatformTools.getEnvVariable(\"NODE_ENV\") + \" \" : \"\"}was not found in the json configuration file.` +\r\n                (environmentLessOptions.length ? ` However there are such configurations for other environments: ${environmentLessOptions.map(options => options.environment).join(\", \")}.` : \"\"));\r\n\r\n        return this.createAndConnectByConnectionOptions(options[0]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection based on the given connection options and registers a new connection in the manager.\r\n     */\r\n    protected async createAndConnectByConnectionOptions(options: ConnectionOptions): Promise<Connection> {\r\n        const connection = this.create(options);\r\n\r\n        // connect to the database\r\n        await connection.connect();\r\n\r\n        // if option is set - drop schema once connection is done\r\n        if (options.dropSchemaOnConnection && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\r\n            await connection.dropDatabase();\r\n\r\n        // if option is set - automatically synchronize a schema\r\n        if (options.autoSchemaSync && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\r\n            await connection.syncSchema();\r\n\r\n        // if option is set - automatically synchronize a schema\r\n        if (options.autoMigrationsRun && !PlatformTools.getEnvVariable(\"SKIP_MIGRATIONS_RUN\"))\r\n            await connection.runMigrations();\r\n\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Splits given array of mixed strings and / or functions into two separate array of string and array of functions.\r\n     */\r\n    protected splitStringsAndClasses<T>(strAndClses: string[]|T[]): [string[], T[]] {\r\n        return [\r\n            (strAndClses as string[]).filter(str => typeof str === \"string\"),\r\n            (strAndClses as T[]).filter(cls => typeof cls !== \"string\"),\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Creates a new driver based on the given driver type and options.\r\n     */\r\n    protected createDriver(options: DriverOptions, logger: Logger): Driver {\r\n        switch (options.type) {\r\n            case \"mysql\":\r\n                return new MysqlDriver(options, logger, undefined);\r\n            case \"postgres\":\r\n                return new PostgresDriver(options, logger);\r\n            case \"mariadb\":\r\n                return new MysqlDriver(options, logger);\r\n            case \"sqlite\":\r\n                return new SqliteDriver(options, logger);\r\n            case \"oracle\":\r\n                return new OracleDriver(options, logger);\r\n            case \"mssql\":\r\n                return new SqlServerDriver(options, logger);\r\n            case \"websql\":\r\n                return new WebsqlDriver(options, logger);\r\n            case \"mongodb\":\r\n                return new MongoDriver(options, logger);\r\n            default:\r\n                throw new MissingDriverError(options.type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection and registers it in the connection manager.\r\n     */\r\n    protected createConnection(name: string, driver: Driver, logger: Logger) {\r\n        const existConnection = this.connections.find(connection => connection.name === name);\r\n        if (existConnection) {\r\n            if (existConnection.isConnected)\r\n                throw new AlreadyHasActiveConnectionError(name);\r\n\r\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\r\n        }\r\n\r\n        const connection = new Connection(name, driver, logger);\r\n        this.connections.push(connection);\r\n        return connection;\r\n    }\r\n\r\n}\r\n","export class GeneratedOnlyForPrimaryError extends Error {\r\n    name = \"GeneratedOnlyForPrimaryError\";\r\n\r\n    constructor(object: Object, propertyName: string) {\r\n        super();\r\n        this.message = `Column for property ${(<any>object.constructor).name}#${propertyName} cannot have a generated ` +\r\n            `value because its not a primary column. Try to use @PrimaryColumn decorator.`;\r\n    }\r\n\r\n}","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {GeneratedOnlyForPrimaryError} from \"../error/GeneratedOnlyForPrimaryError\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnType, ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this\r\n * decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(type: ColumnType): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(options: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(type: ColumnType, options: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\r\n    let type: ColumnType|undefined;\r\n    if (typeof typeOrOptions === \"string\") {\r\n        type = <ColumnType> typeOrOptions;\r\n\r\n    } else if (typeOrOptions) {\r\n        options = <ColumnOptions> typeOrOptions;\r\n        type = typeOrOptions.type;\r\n    }\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // todo: need to store not string type, but original type instead? (like in relation metadata)\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if type is not given implicitly then try to guess it\r\n        if (!type) {\r\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\r\n            if (reflectMetadataType)\r\n                type = ColumnTypes.determineTypeFromFunction(reflectMetadataType);\r\n        }\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // check if there is no type in column options then set type from first function argument, or guessed one\r\n        if (!options.type && type)\r\n            options = Object.assign({ type: type } as ColumnOptions, options);\r\n\r\n        // if we still don't have a type then we need to give error to user that type is required\r\n        // if (!options.type)\r\n        //     throw new ColumnTypeUndefinedError(object, propertyName);\r\n\r\n        // check if auto increment is not set for simple column\r\n        if (options.generated)\r\n            throw new GeneratedOnlyForPrimaryError(object, propertyName);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"regular\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * This column will store a creation date of the inserted object.\r\n * Creation date is generated and inserted only once,\r\n * at the first time when you create an object, the value is inserted into the table, and is never touched again.\r\n */\r\nexport function CreateDateColumn(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // implicitly set a type, because this column's type cannot be anything else except date\r\n        options = Object.assign({ type: ColumnTypes.DATETIME } as ColumnOptions, options);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"createDate\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * DiscriminatorColumn is a special type column used on entity class (not entity property)\r\n * and creates a special column which will contain an entity type.\r\n * This type is required for entities which use single table inheritance pattern.\r\n */\r\nexport function DiscriminatorColumn(discriminatorOptions: { name: string, type: ColumnType }): Function {\r\n    return function (target: Function) {\r\n\r\n        // if column options are not given then create a new empty options\r\n        const options: ColumnOptions = {\r\n            name: discriminatorOptions.name,\r\n            type: discriminatorOptions.type\r\n        };\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: target,\r\n            mode: \"discriminator\",\r\n            propertyName: discriminatorOptions.name,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n\r\n","export class PrimaryColumnCannotBeNullableError extends Error {\r\n    name = \"PrimaryColumnCannotBeNullableError\";\r\n\r\n    constructor(object: Object, propertyName: string) {\r\n        super();\r\n        this.message = `Primary column ${(<any>object.constructor).name}#${propertyName} cannot be nullable. ` +\r\n            `Its not allowed for primary keys. Try to remove nullable option.`;\r\n    }\r\n\r\n}","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {PrimaryColumnCannotBeNullableError} from \"../error/PrimaryColumnCannotBeNullableError\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n// todo: add overloads for PrimaryGeneratedColumn(generationType: \"sequence\"|\"uuid\" = \"sequence\", options?: ColumnOptions)\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * This column creates an integer PRIMARY COLUMN with generated set to true.\r\n * This column creates is an alias for @PrimaryColumn(\"int\", { generated: true }).\r\n */\r\nexport function PrimaryGeneratedColumn(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // check if there is no type in column options then set the int type - by default for auto generated column\r\n            options = Object.assign({type: \"int\"} as ColumnOptions, options);\r\n\r\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\r\n        if (options.nullable)\r\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\r\n\r\n        // implicitly set a primary and generated to column options\r\n        options = Object.assign({ primary: true, generated: true } as ColumnOptions, options);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"regular\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n\r\n","export class ColumnTypeUndefinedError extends Error {\r\n    name = \"ColumnTypeUndefinedError\";\r\n\r\n    constructor(object: Object, propertyName: string) {\r\n        super();\r\n        this.message = `Column type for ${(<any>object.constructor).name}#${propertyName} is not defined or cannot be guessed. ` +\r\n            `Try to implicitly provide a column type to @Column decorator.`;\r\n    }\r\n\r\n}","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnType, ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ColumnTypeUndefinedError} from \"../error/ColumnTypeUndefinedError\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {PrimaryColumnCannotBeNullableError} from \"../error/PrimaryColumnCannotBeNullableError\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * Primary columns also creates a PRIMARY KEY for this column in a db.\r\n */\r\nexport function PrimaryColumn(options?: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * Primary columns also creates a PRIMARY KEY for this column in a db.\r\n */\r\nexport function PrimaryColumn(type?: ColumnType, options?: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * Primary columns also creates a PRIMARY KEY for this column in a db.\r\n */\r\nexport function PrimaryColumn(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\r\n    let type: ColumnType|undefined;\r\n    if (typeof typeOrOptions === \"string\") {\r\n        type = <ColumnType> typeOrOptions;\r\n    } else {\r\n        options = <ColumnOptions> typeOrOptions;\r\n    }\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if type is not given implicitly then try to guess it\r\n        if (!type) {\r\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\r\n            if (reflectMetadataType)\r\n                type = ColumnTypes.determineTypeFromFunction(reflectMetadataType);\r\n        }\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // check if there is no type in column options then set type from first function argument, or guessed one\r\n        if (!options.type && type)\r\n            options = Object.assign({ type: type } as ColumnOptions, options);\r\n\r\n        // if we still don't have a type then we need to give error to user that type is required\r\n        if (!options.type)\r\n            throw new ColumnTypeUndefinedError(object, propertyName);\r\n\r\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\r\n        if (options.nullable)\r\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\r\n\r\n        // implicitly set a primary to column options\r\n        options = Object.assign({ primary: true } as ColumnOptions, options);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"regular\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n\r\n","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * This column will store an update date of the updated object.\r\n * This date is being updated each time you persist the object.\r\n */\r\nexport function UpdateDateColumn(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // implicitly set a type, because this column's type cannot be anything else except date\r\n        options = Object.assign({ type: ColumnTypes.DATETIME } as ColumnOptions, options);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"updateDate\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n\r\n","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * This column will store a number - version of the entity.\r\n * Every time your entity will be persisted, this number will be increased by one -\r\n * so you can organize visioning and update strategies of your entity.\r\n */\r\nexport function VersionColumn(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // implicitly set a type, because this column's type cannot be anything else except date\r\n        options = Object.assign({ type: ColumnTypes.INTEGER } as ColumnOptions, options);\r\n\r\n        // todo: check if reflectedType is number too\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"version\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n\r\n","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * Special type of column that is available only for MongoDB database.\r\n * Marks your entity's column to be an object id.\r\n */\r\nexport function ObjectIdColumn<T>(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n        options = Object.assign(options, {\r\n            primary: true,\r\n            name: options.name ? options.name : \"_id\"\r\n        });\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            mode: \"objectId\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied after this entity insertion.\r\n */\r\nexport function AfterInsert() {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.AFTER_INSERT\r\n        };\r\n        getMetadataArgsStorage().entityListeners.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied after entity is loaded.\r\n */\r\nexport function AfterLoad() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.AFTER_LOAD\r\n        };\r\n        getMetadataArgsStorage().entityListeners.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied after this entity removal.\r\n */\r\nexport function AfterRemove() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.AFTER_REMOVE\r\n        };\r\n        getMetadataArgsStorage().entityListeners.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied after this entity update.\r\n */\r\nexport function AfterUpdate() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.AFTER_UPDATE\r\n        };\r\n        getMetadataArgsStorage().entityListeners.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied before this entity insertion.\r\n */\r\nexport function BeforeInsert() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.BEFORE_INSERT\r\n        };\r\n        getMetadataArgsStorage().entityListeners.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied before this entity removal.\r\n */\r\nexport function BeforeRemove() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.BEFORE_REMOVE\r\n        };\r\n        getMetadataArgsStorage().entityListeners.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied before this entity update.\r\n */\r\nexport function BeforeUpdate() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.BEFORE_UPDATE\r\n        };\r\n        getMetadataArgsStorage().entityListeners.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EntitySubscriberMetadataArgs} from \"../../metadata-args/EntitySubscriberMetadataArgs\";\r\n\r\n/**\r\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\r\n * occurs. Those classes must implement EventSubscriberInterface interface.\r\n */\r\nexport function EventSubscriber() {\r\n    return function (target: Function) {\r\n        const args: EntitySubscriberMetadataArgs = {\r\n            target: target\r\n        };\r\n        getMetadataArgsStorage().entitySubscribers.push(args);\r\n    };\r\n}","/**\r\n * Describes all composite index's options.\r\n */\r\nexport interface IndexOptions {\r\n\r\n    /**\r\n     * Indicates if this composite index must be unique or not.\r\n     */\r\n    unique?: boolean;\r\n\r\n    /**\r\n     * If true, the index only references documents with the specified field.\r\n     * These indexes use less space but behave differently in some situations (particularly sorts).\r\n     * This option is only supported for mongodb database.\r\n     */\r\n    sparse?: boolean;\r\n\r\n}","import {OrderByCondition} from \"../../find-options/OrderByCondition\";\r\n\r\n/**\r\n * Describes all entity's options.\r\n */\r\nexport interface EntityOptions {\r\n\r\n    /**\r\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\r\n     */\r\n    orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\r\n\r\n    /**\r\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\r\n     * It is used only during table creation.\r\n     * If you update this value and table is already created, it will not change table's engine type.\r\n     * Note that not all databases support this option.\r\n     */\r\n    engine?: string;\r\n\r\n    /**\r\n     * Specifies if this table will be skipped during schema synchronization.\r\n     */\r\n    skipSchemaSync?: boolean;\r\n\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationCountMetadataArgs} from \"../../metadata-args/RelationCountMetadataArgs\";\r\nimport {QueryBuilder} from \"../../query-builder/QueryBuilder\";\r\n\r\n/**\r\n * Holds a number of children in the closure table of the column.\r\n */\r\nexport function RelationCount<T>(relation: string|((object: T) => any), alias?: string, queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: RelationCountMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            relation: relation,\r\n            alias: alias,\r\n            queryBuilderFactory: queryBuilderFactory\r\n        };\r\n        getMetadataArgsStorage().relationCounts.push(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {JoinColumnOptions} from \"../options/JoinColumnOptions\";\r\nimport {JoinColumnMetadataArgs} from \"../../metadata-args/JoinColumnMetadataArgs\";\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(): Function;\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(options: JoinColumnOptions): Function;\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(options: JoinColumnOptions[]): Function;\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(optionsOrOptionsArray?: JoinColumnOptions|JoinColumnOptions[]): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        const options = optionsOrOptionsArray instanceof Array ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];\r\n        options.forEach(options => {\r\n            const args: JoinColumnMetadataArgs = {\r\n                target: object.constructor,\r\n                propertyName: propertyName,\r\n                name: options.name,\r\n                referencedColumnName: options.referencedColumnName\r\n            };\r\n            getMetadataArgsStorage().joinColumns.push(args);\r\n        });\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {JoinTableOptions} from \"../options/JoinTableOptions\";\r\nimport {JoinTableMetadataArgs} from \"../../metadata-args/JoinTableMetadataArgs\";\r\nimport {JoinTableMultipleColumnsOptions} from \"../options/JoinTableMuplipleColumnsOptions\";\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(): Function;\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options: JoinTableOptions): Function;\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options: JoinTableMultipleColumnsOptions): Function;\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options?: JoinTableOptions|JoinTableMultipleColumnsOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        options = options || {} as JoinTableOptions|JoinTableMultipleColumnsOptions;\r\n        const args: JoinTableMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            name: options.name,\r\n            joinColumns: (options && (options as JoinTableOptions).joinColumn ? [(options as JoinTableOptions).joinColumn!] : (options as JoinTableMultipleColumnsOptions).joinColumns) as any,\r\n            inverseJoinColumns: (options && (options as JoinTableOptions).inverseJoinColumn ? [(options as JoinTableOptions).inverseJoinColumn!] : (options as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\r\n        };\r\n        getMetadataArgsStorage().joinTables.push(args);\r\n    };\r\n}\r\n\r\n","import {RelationOptions} from \"../options/RelationOptions\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ObjectType} from \"../../common/ObjectType\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\r\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\r\n * entity1 and entity2 ids. This is owner side of the relationship.\r\n */\r\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>, options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function;\r\n\r\n/**\r\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\r\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\r\n * entity1 and entity2 ids. This is owner side of the relationship.\r\n */\r\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                              inverseSide?: string|((object: T) => any),\r\n                              options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function;\r\n\r\n/**\r\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\r\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\r\n * entity1 and entity2 ids. This is owner side of the relationship.\r\n */\r\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                              inverseSideOrOptions?: string|((object: T) => any)|{ cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean },\r\n                              options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\r\n    let inverseSideProperty: string|((object: T) => any);\r\n    if (typeof inverseSideOrOptions === \"object\") {\r\n        options = <RelationOptions> inverseSideOrOptions;\r\n    } else {\r\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\r\n    }\r\n\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            relationType: \"many-to-many\",\r\n            isLazy: isLazy,\r\n            type: typeFunction,\r\n            inverseSideProperty: inverseSideProperty,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.push(args);\r\n    };\r\n}\r\n\r\n","import {RelationOptions} from \"../options/RelationOptions\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ObjectType} from \"../../common/ObjectType\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\r\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\r\n * on its own side.\r\n */\r\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>, options?: RelationOptions): Function;\r\n\r\n/**\r\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\r\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\r\n * on its own side.\r\n */\r\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                             inverseSide?: string|((object: T) => any),\r\n                             options?: RelationOptions): Function;\r\n\r\n/**\r\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\r\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\r\n * on its own side.\r\n */\r\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                             inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\r\n                             options?: RelationOptions): Function {\r\n    let inverseSideProperty: string|((object: T) => any);\r\n    if (typeof inverseSideOrOptions === \"object\") {\r\n        options = <RelationOptions> inverseSideOrOptions;\r\n    } else {\r\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\r\n    }\r\n\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            relationType: \"many-to-one\",\r\n            isLazy: isLazy,\r\n            type: typeFunction,\r\n            inverseSideProperty: inverseSideProperty,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.push(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {ObjectType} from \"../../common/ObjectType\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\nimport {RelationOptions} from \"../options/RelationOptions\";\r\n\r\n// todo: make decorators which use inverse side string separate\r\n\r\n/**\r\n * One-to-many relation allows to create type of relation when Entity2 can have multiple instances of Entity1.\r\n * Entity1 have only one Entity2. Entity1 is an owner of the relationship, and storages Entity2 id on its own side.\r\n */\r\nexport function OneToMany<T>(typeFunction: (type?: any) => ObjectType<T>, inverseSide: string|((object: T) => any), options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            isLazy: isLazy,\r\n            relationType: \"one-to-many\",\r\n            type: typeFunction,\r\n            inverseSideProperty: inverseSide,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.push(args);\r\n    };\r\n}\r\n\r\n","import {RelationOptions} from \"../options/RelationOptions\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ObjectType} from \"../../common/ObjectType\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\r\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\r\n */\r\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>, options?: RelationOptions): Function;\r\n\r\n/**\r\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\r\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\r\n */\r\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                            inverseSide?: string|((object: T) => any),\r\n                            options?: RelationOptions): Function;\r\n\r\n/**\r\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\r\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\r\n */\r\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                            inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\r\n                            options?: RelationOptions): Function {\r\n    let inverseSideProperty: string|((object: T) => any);\r\n    if (typeof inverseSideOrOptions === \"object\") {\r\n        options = <RelationOptions> inverseSideOrOptions;\r\n    } else {\r\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\r\n    }\r\n\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            isLazy: isLazy,\r\n            relationType: \"one-to-one\",\r\n            type: typeFunction,\r\n            inverseSideProperty: inverseSideProperty,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationIdMetadataArgs} from \"../../metadata-args/RelationIdMetadataArgs\";\r\nimport {QueryBuilder} from \"../../query-builder/QueryBuilder\";\r\n\r\n/**\r\n * Special decorator used to extract relation id into separate entity property.\r\n */\r\nexport function RelationId<T>(relation: string|((object: T) => any), alias?: string, queryBuilderFactory?: (qb: QueryBuilder<any>) => QueryBuilder<any>): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: RelationIdMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            relation: relation,\r\n            alias: alias,\r\n            queryBuilderFactory: queryBuilderFactory\r\n        };\r\n        getMetadataArgsStorage().relationIds.push(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\nimport {EntityOptions} from \"../options/EntityOptions\";\r\n\r\n/**\r\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\r\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\r\n */\r\nexport function Entity(name?: string, options?: EntityOptions) {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: name,\r\n            type: \"regular\",\r\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\r\n            engine: options && options.engine ? options.engine : undefined,\r\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\r\n        };\r\n        getMetadataArgsStorage().tables.push(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\n\r\n/**\r\n * Abstract entity is a class that contains columns and relations for all entities that will inherit this entity.\r\n * Database table for the abstract entity is not created.\r\n *\r\n * @deprecated don't use it anymore. Now entity can extend any class with columns, no need to mark it with this decorator\r\n */\r\nexport function AbstractEntity() {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: undefined,\r\n            type: \"abstract\"\r\n        };\r\n        getMetadataArgsStorage().tables.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\nimport {EntityOptions} from \"../options/EntityOptions\";\r\n\r\n/**\r\n * Special type of the entity used in the class-table inherited tables.\r\n */\r\nexport function ClassEntityChild(tableName?: string, options?: EntityOptions) {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: tableName,\r\n            type: \"class-table-child\",\r\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\r\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\r\n        };\r\n        getMetadataArgsStorage().tables.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\nimport {EntityOptions} from \"../options/EntityOptions\";\r\n\r\n/**\r\n * Used on a entities that stores its children in a tree using closure design pattern.\r\n */\r\nexport function ClosureEntity(name?: string, options?: EntityOptions) {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: name,\r\n            type: \"closure\",\r\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\r\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\r\n        };\r\n        getMetadataArgsStorage().tables.push(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\n\r\n/**\r\n * This decorator is used on the entities that must be embedded into another entities.\r\n *\r\n * @deprecated don't use it anymore. Now entity can embed any class with columns, no need to mark it with this decorator\r\n */\r\nexport function EmbeddableEntity(): Function {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            type: \"embeddable\",\r\n            orderBy: undefined\r\n        };\r\n        getMetadataArgsStorage().tables.push(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\n\r\n/**\r\n * Special type of the table used in the single-table inherited tables.\r\n */\r\nexport function SingleEntityChild() {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: undefined,\r\n            type: \"single-table-child\",\r\n            orderBy: undefined\r\n        };\r\n        getMetadataArgsStorage().tables.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {InheritanceMetadataArgs} from \"../../metadata-args/InheritanceMetadataArgs\";\r\n\r\n/**\r\n * Sets what kind of table-inheritance table will use.\r\n */\r\nexport function TableInheritance(type: \"single-table\"|\"class-table\") {\r\n    return function (target: Function) {\r\n        const args: InheritanceMetadataArgs = {\r\n            target: target,\r\n            type: type\r\n        };\r\n        getMetadataArgsStorage().inheritances.push(args);\r\n    };\r\n}","import {getConnection, getMetadataArgsStorage} from \"../../index\";\r\n\r\n/**\r\n * Wraps some method into the transaction.\r\n * Note, method result will return a promise if this decorator applied.\r\n * Note, all database operations in the wrapped method should be executed using entity managed passed as a first parameter\r\n * into the wrapped method.\r\n * If you want to control at what position in your method parameters entity manager should be injected,\r\n * then use @TransactionEntityManager() decorator.\r\n */\r\nexport function Transaction(connectionName: string = \"default\"): Function {\r\n    return function (target: Object, methodName: string, descriptor: PropertyDescriptor) {\r\n\r\n        // save original method - we gonna need it\r\n        const originalMethod = descriptor.value;\r\n\r\n        // override method descriptor with proxy method\r\n        descriptor.value = function(...args: any[]) {\r\n            return getConnection(connectionName)\r\n                .manager\r\n                .transaction(entityManager => {\r\n\r\n                    // gets all @TransactionEntityManager() decorator usages for this method\r\n                    const indices = getMetadataArgsStorage()\r\n                        .filterTransactionEntityManagers(target.constructor)\r\n                        .filter(transactionEntityManager => transactionEntityManager.methodName === methodName)\r\n                        .map(transactionEntityManager => transactionEntityManager.index);\r\n\r\n                    let argsWithInjectedEntityManager: any[];\r\n                    if (indices.length) { // if there are @TransactionEntityManager() decorator usages the inject them\r\n                        argsWithInjectedEntityManager = [...args];\r\n                        indices.forEach(index => argsWithInjectedEntityManager.splice(index, 0, entityManager));\r\n\r\n                    } else { // otherwise inject it as a first parameter\r\n                        argsWithInjectedEntityManager = [entityManager, ...args];\r\n                    }\r\n\r\n                    return originalMethod.apply(this, argsWithInjectedEntityManager);\r\n                });\r\n        };\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TransactionEntityMetadataArgs} from \"../../metadata-args/TransactionEntityMetadataArgs\";\r\n\r\n/**\r\n * Injects transaction's entity manager into the method wrapped with @Transaction decorator.\r\n */\r\nexport function TransactionEntityManager(): Function {\r\n    return function (object: Object, methodName: string, index: number) {\r\n        const args: TransactionEntityMetadataArgs = {\r\n            target: object.constructor,\r\n            methodName: methodName,\r\n            index: index,\r\n        };\r\n        getMetadataArgsStorage().transactionEntityManagers.push(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * Creates a \"level\"/\"length\" column to the table that holds a closure table.\r\n */\r\nexport function TreeLevelColumn(): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // implicitly set a type, because this column's type cannot be anything else except number\r\n        const options: ColumnOptions = { type: ColumnTypes.INTEGER };\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"treeLevel\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationOptions} from \"../options/RelationOptions\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Marks a specific property of the class as a parent of the tree.\r\n */\r\nexport function TreeParent(options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            isTreeParent: true,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            isLazy: isLazy,\r\n            relationType: \"many-to-one\",\r\n            type: () => object.constructor,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.push(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationOptions} from \"../options/RelationOptions\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Marks a specific property of the class as a children of the tree.\r\n */\r\nexport function TreeChildren(options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        // add one-to-many relation for this \r\n        const args: RelationMetadataArgs = {\r\n            isTreeChildren: true,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            isLazy: isLazy,\r\n            relationType: \"one-to-many\",\r\n            type: () => object.constructor,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.push(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../index\";\r\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\r\nimport {IndexOptions} from \"./options/IndexOptions\";\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(name: string, options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(name: string, fields: string[], options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(fields: string[], options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(name: string, fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(nameOrFieldsOrOptions: string|string[]|((object: any) => any[])|IndexOptions,\r\n                      maybeFieldsOrOptions?: ((object?: any) => (any[]|{ [key: string]: number }))|IndexOptions|string[],\r\n                      maybeOptions?: IndexOptions): Function {\r\n    const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\r\n    const fields = typeof nameOrFieldsOrOptions === \"string\" ? <((object?: any) => (any[]|{ [key: string]: number }))|string[]> maybeFieldsOrOptions : nameOrFieldsOrOptions as string[];\r\n    let options = (typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions as IndexOptions : maybeOptions;\r\n    if (!options)\r\n        options = (typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions)) ? maybeFieldsOrOptions as IndexOptions : maybeOptions;\r\n\r\n    return function (clsOrObject: Function|Object, propertyName?: string) {\r\n        const args: IndexMetadataArgs = {\r\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\r\n            name: name,\r\n            columns: propertyName ? [propertyName] : fields,\r\n            unique: options && options.unique ? true : false\r\n        };\r\n        getMetadataArgsStorage().indices.push(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../index\";\r\nimport {NamingStrategyMetadataArgs} from \"../metadata-args/NamingStrategyMetadataArgs\";\r\n\r\n/**\r\n * Decorator registers a new naming strategy to be used in naming things.\r\n *\r\n * todo: deprecate using naming strategies this way. use it without decorators\r\n * todo: but add multiple default naming strategies for use\r\n */\r\nexport function NamingStrategy(name?: string): Function {\r\n    return function (target: Function) {\r\n        const strategyName = name ? name : (<any> target).name;\r\n        const args: NamingStrategyMetadataArgs = {\r\n            target: target,\r\n            name: strategyName\r\n        };\r\n        getMetadataArgsStorage().namingStrategies.push(args);\r\n    };\r\n}\r\n","import {ObjectType} from \"../common/ObjectType\";\r\nimport {getMetadataArgsStorage} from \"../index\";\r\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\r\n\r\n/**\r\n * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the\r\n * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the\r\n * embedded will be mapped to it from the single table.\r\n *\r\n * Array option works only in monogodb.\r\n */\r\nexport function Embedded<T>(typeFunction: (type?: any) => ObjectType<T>, options?: { prefix?: string|boolean, array?: boolean }) {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\r\n        const isArray = reflectMetadataType === Array || (options && options.array === true) ? true : false;\r\n\r\n        const args: EmbeddedMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            isArray: isArray,\r\n            prefix: options && options.prefix !== undefined ? options.prefix : undefined,\r\n            type: typeFunction\r\n        };\r\n        getMetadataArgsStorage().embeddeds.push(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../index\";\r\nimport {DiscriminatorValueMetadataArgs} from \"../metadata-args/DiscriminatorValueMetadataArgs\";\r\n\r\n/**\r\n * If entity is a child table of some table, it should have a discriminator value.\r\n * This decorator sets custom discriminator value for the entity.\r\n */\r\nexport function DiscriminatorValue(value: any): Function {\r\n    return function (target: Function) {\r\n        const args: DiscriminatorValueMetadataArgs = {\r\n            target: target,\r\n            value: value\r\n        };\r\n        getMetadataArgsStorage().discriminatorValues.push(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../index\";\r\nimport {EntityRepositoryMetadataArgs} from \"../metadata-args/EntityRepositoryMetadataArgs\";\r\n\r\n/**\r\n * Used to declare a class as a custom repository.\r\n * Custom repository can either manage some specific entity, either just be generic.\r\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\r\n */\r\nexport function EntityRepository(entity?: Function): Function {\r\n    return function (target: Function) {\r\n        const args: EntityRepositoryMetadataArgs = {\r\n            target: target,\r\n            entity: entity,\r\n        };\r\n        getMetadataArgsStorage().entityRepositories.push(args);\r\n    };\r\n}\r\n","import {Repository} from \"./Repository\";\r\nimport {getConnection} from \"../index\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\nimport {SaveOptions} from \"./SaveOptions\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {RemoveOptions} from \"./RemoveOptions\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\n\r\n/**\r\n * Base abstract entity for all entities, used in ActiveRecord patterns.\r\n */\r\nexport class EntityModel {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used in all static methods of the EntityModel.\r\n     */\r\n    private static usedConnection?: Connection;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     * If entity composite compose ids, it will check them all.\r\n     */\r\n    hasId(): boolean {\r\n        return (this.constructor as any).getRepository().hasId(this);\r\n    }\r\n\r\n    /**\r\n     * Saves current entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save(): Promise<this> {\r\n        return (this.constructor as any).getRepository().save(this);\r\n    }\r\n\r\n    /**\r\n     * Removes current entity from the database.\r\n     */\r\n    remove(): Promise<this> {\r\n        return (this.constructor as any).getRepository().remove(this);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Sets connection to be used by entity.\r\n     */\r\n    static useConnection(connection: Connection) {\r\n        this.usedConnection = connection;\r\n    }\r\n\r\n    /**\r\n     * Gets current entity's Repository.\r\n     */\r\n    static getRepository<T extends EntityModel>(this: ObjectType<T>, ): Repository<T> {\r\n        const connection: Connection = (this as any).usedConnection || getConnection();\r\n        return connection.getRepository<T>(this);\r\n    }\r\n\r\n    /**\r\n     * Returns object that is managed by this repository.\r\n     * If this repository manages entity from schema,\r\n     * then it returns a name of that schema instead.\r\n     */\r\n    static get target(): Function|string {\r\n        return this.getRepository().target;\r\n    }\r\n\r\n    /**\r\n     * Checks entity has an id.\r\n     * If entity composite compose ids, it will check them all.\r\n     */\r\n    static hasId(entity: EntityModel): boolean {\r\n        return this.getRepository().hasId(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    static getId<T extends EntityModel>(this: ObjectType<T>, entity: T): any {\r\n        return (this as any).getRepository().getId(entity);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    static createQueryBuilder<T extends EntityModel>(this: ObjectType<T>, alias: string): QueryBuilder<T> {\r\n        return (this as any).getRepository().createQueryBuilder(alias);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    static create<T extends EntityModel>(this: ObjectType<T>): T {\r\n        return (this as any).getRepository().create();\r\n    }\r\n\r\n    /**\r\n     * Merges multiple entities (or entity-like objects) into a given entity.\r\n     */\r\n    static merge<T extends EntityModel>(this: ObjectType<T>, mergeIntoEntity: T, ...entityLikes: DeepPartial<T>[]): T {\r\n        return (this as any).getRepository().merge(mergeIntoEntity, ...entityLikes);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     *\r\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\r\n     * Returns undefined if entity with given id was not found.\r\n     */\r\n    static preload<T extends EntityModel>(this: ObjectType<T>, entityLike: DeepPartial<T>): Promise<T|undefined> {\r\n        return (this as any).getRepository().preload(entityLike);\r\n    }\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    static save<T extends EntityModel>(this: ObjectType<T>, entities: T[], options?: SaveOptions): Promise<T[]>;\r\n\r\n    /**\r\n     * Saves a given entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    static save<T extends EntityModel>(this: ObjectType<T>, entity: T, options?: SaveOptions): Promise<T>;\r\n\r\n    /**\r\n     * Saves one or many given entities.\r\n     */\r\n    static save<T extends EntityModel>(this: ObjectType<T>, entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\r\n        return (this as any).getRepository().save(entityOrEntities as any, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    static update<T extends EntityModel>(this: ObjectType<T>, conditions: Partial<T>, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given find options.\r\n     */\r\n    static update<T extends EntityModel>(this: ObjectType<T>, findOptions: FindOneOptions<T>, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    static update<T extends EntityModel>(this: ObjectType<T>, conditionsOrFindOptions: Partial<T>|FindOneOptions<T>, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void> {\r\n        return (this as any).getRepository().update(conditionsOrFindOptions as any, partialEntity, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity will be found by a given id.\r\n     */\r\n    static updateById<T extends EntityModel>(this: ObjectType<T>, id: any, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void> {\r\n        return (this as any).getRepository().updateById(id, partialEntity, options);\r\n    }\r\n\r\n    /**\r\n     * Removes a given entities from the database.\r\n     */\r\n    static remove<T extends EntityModel>(this: ObjectType<T>, entities: T[], options?: RemoveOptions): Promise<T[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    static remove<T extends EntityModel>(this: ObjectType<T>, entity: T, options?: RemoveOptions): Promise<T>;\r\n\r\n    /**\r\n     * Removes one or many given entities.\r\n     */\r\n    static remove<T extends EntityModel>(this: ObjectType<T>, entityOrEntities: T|T[], options?: RemoveOptions): Promise<T|T[]> {\r\n        return (this as any).getRepository().remove(entityOrEntities as any, options);\r\n    }\r\n\r\n    /**\r\n     * Removes entity by a given entity id.\r\n     */\r\n    static removeById<T extends EntityModel>(this: ObjectType<T>, id: any, options?: RemoveOptions): Promise<void> {\r\n        return (this as any).getRepository().removeById(id, options);\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     */\r\n    static count<T extends EntityModel>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     */\r\n    static count<T extends EntityModel>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given find options or conditions.\r\n     */\r\n    static count<T extends EntityModel>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<number> {\r\n        return (this as any).getRepository().count(optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    static find<T extends EntityModel>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<T[]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    static find<T extends EntityModel>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<T[]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    static find<T extends EntityModel>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<T[]> {\r\n        return (this as any).getRepository().find(optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    static findAndCount<T extends EntityModel>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<[ T[], number ]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    static findAndCount<T extends EntityModel>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<[ T[], number ]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    static findAndCount<T extends EntityModel>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<[ T[], number ]> {\r\n        return (this as any).getRepository().findAndCount(optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    static findByIds<T extends EntityModel>(this: ObjectType<T>, ids: any[], options?: FindManyOptions<T>): Promise<T[]>;\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    static findByIds<T extends EntityModel>(this: ObjectType<T>, ids: any[], conditions?: DeepPartial<T>): Promise<T[]>;\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    static findByIds<T extends EntityModel>(this: ObjectType<T>, ids: any[], optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<T[]> {\r\n        return (this as any).getRepository().findByIds(ids, optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given options.\r\n     */\r\n    static findOne<T extends EntityModel>(this: ObjectType<T>, options?: FindOneOptions<T>): Promise<T|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    static findOne<T extends EntityModel>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<T|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    static findOne<T extends EntityModel>(this: ObjectType<T>, optionsOrConditions?: FindOneOptions<T>|DeepPartial<T>): Promise<T|undefined> {\r\n        return (this as any).getRepository().findOne(optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options can be applied.\r\n     */\r\n    static findOneById<T extends EntityModel>(this: ObjectType<T>, id: any, options?: FindOneOptions<T>): Promise<T|undefined>;\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    static findOneById<T extends EntityModel>(this: ObjectType<T>, id: any, conditions?: DeepPartial<T>): Promise<T|undefined>;\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    static findOneById<T extends EntityModel>(this: ObjectType<T>, id: any, optionsOrConditions?: FindOneOptions<T>|DeepPartial<T>): Promise<T|undefined> {\r\n        return (this as any).getRepository().findOneById(id, optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Executes a raw SQL query and returns a raw database results.\r\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\r\n     */\r\n    static query<T extends EntityModel>(this: ObjectType<T>, query: string, parameters?: any[]): Promise<any> {\r\n        return (this as any).getRepository().query(query, parameters);\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table/collection (truncates/drops it).\r\n     */\r\n    static clear<T extends EntityModel>(this: ObjectType<T>, ): Promise<void> {\r\n        return (this as any).getRepository().clear();\r\n    }\r\n\r\n}","/*!\r\n */\r\nimport {DriverOptions} from \"./driver/DriverOptions\";\r\nimport {ConnectionManager} from \"./connection/ConnectionManager\";\r\nimport {Connection} from \"./connection/Connection\";\r\nimport {MetadataArgsStorage} from \"./metadata-args/MetadataArgsStorage\";\r\nimport {ConnectionOptions} from \"./connection/ConnectionOptions\";\r\nimport {getFromContainer} from \"./container\";\r\nimport {ObjectType} from \"./common/ObjectType\";\r\nimport {Repository} from \"./repository/Repository\";\r\nimport {EntityManager} from \"./entity-manager/EntityManager\";\r\nimport {PlatformTools} from \"./platform/PlatformTools\";\r\nimport {TreeRepository} from \"./repository/TreeRepository\";\r\nimport {MongoRepository} from \"./repository/MongoRepository\";\r\n\r\n// -------------------------------------------------------------------------\r\n// Commonly Used exports\r\n// -------------------------------------------------------------------------\r\n\r\nexport * from \"./container\";\r\nexport * from \"./common/ObjectType\";\r\nexport * from \"./common/ObjectLiteral\";\r\nexport * from \"./decorator/columns/Column\";\r\nexport * from \"./decorator/columns/CreateDateColumn\";\r\nexport * from \"./decorator/columns/DiscriminatorColumn\";\r\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\r\nexport * from \"./decorator/columns/PrimaryColumn\";\r\nexport * from \"./decorator/columns/UpdateDateColumn\";\r\nexport * from \"./decorator/columns/VersionColumn\";\r\nexport * from \"./decorator/columns/ObjectIdColumn\";\r\nexport * from \"./decorator/listeners/AfterInsert\";\r\nexport * from \"./decorator/listeners/AfterLoad\";\r\nexport * from \"./decorator/listeners/AfterRemove\";\r\nexport * from \"./decorator/listeners/AfterUpdate\";\r\nexport * from \"./decorator/listeners/BeforeInsert\";\r\nexport * from \"./decorator/listeners/BeforeRemove\";\r\nexport * from \"./decorator/listeners/BeforeUpdate\";\r\nexport * from \"./decorator/listeners/EventSubscriber\";\r\nexport * from \"./decorator/options/ColumnOptions\";\r\nexport * from \"./decorator/options/IndexOptions\";\r\nexport * from \"./decorator/options/JoinColumnOptions\";\r\nexport * from \"./decorator/options/JoinTableOptions\";\r\nexport * from \"./decorator/options/RelationOptions\";\r\nexport * from \"./decorator/options/EntityOptions\";\r\nexport * from \"./decorator/relations/RelationCount\";\r\nexport * from \"./decorator/relations/JoinColumn\";\r\nexport * from \"./decorator/relations/JoinTable\";\r\nexport * from \"./decorator/relations/ManyToMany\";\r\nexport * from \"./decorator/relations/ManyToOne\";\r\nexport * from \"./decorator/relations/OneToMany\";\r\nexport * from \"./decorator/relations/OneToOne\";\r\nexport * from \"./decorator/relations/RelationCount\";\r\nexport * from \"./decorator/relations/RelationId\";\r\nexport * from \"./decorator/entity/Entity\";\r\nexport * from \"./decorator/entity/AbstractEntity\";\r\nexport * from \"./decorator/entity/ClassEntityChild\";\r\nexport * from \"./decorator/entity/ClosureEntity\";\r\nexport * from \"./decorator/entity/EmbeddableEntity\";\r\nexport * from \"./decorator/entity/SingleEntityChild\";\r\nexport * from \"./decorator/entity/Entity\";\r\nexport * from \"./decorator/entity/TableInheritance\";\r\nexport * from \"./decorator/transaction/Transaction\";\r\nexport * from \"./decorator/transaction/TransactionEntityManager\";\r\nexport * from \"./decorator/tree/TreeLevelColumn\";\r\nexport * from \"./decorator/tree/TreeParent\";\r\nexport * from \"./decorator/tree/TreeChildren\";\r\nexport * from \"./decorator/Index\";\r\nexport * from \"./decorator/NamingStrategy\";\r\nexport * from \"./decorator/Embedded\";\r\nexport * from \"./decorator/DiscriminatorValue\";\r\nexport * from \"./decorator/EntityRepository\";\r\nexport * from \"./schema-builder/schema/ColumnSchema\";\r\nexport * from \"./schema-builder/schema/ForeignKeySchema\";\r\nexport * from \"./schema-builder/schema/IndexSchema\";\r\nexport * from \"./schema-builder/schema/PrimaryKeySchema\";\r\nexport * from \"./schema-builder/schema/TableSchema\";\r\nexport * from \"./driver/mongodb/typings\";\r\n\r\nexport {Connection} from \"./connection/Connection\";\r\nexport {ConnectionManager} from \"./connection/ConnectionManager\";\r\nexport {ConnectionOptions} from \"./connection/ConnectionOptions\";\r\nexport {DriverOptions} from \"./driver/DriverOptions\";\r\nexport {Driver} from \"./driver/Driver\";\r\nexport {QueryBuilder} from \"./query-builder/QueryBuilder\";\r\nexport {QueryRunner} from \"./query-runner/QueryRunner\";\r\nexport {EntityManager} from \"./entity-manager/EntityManager\";\r\nexport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\r\nexport {MigrationInterface} from \"./migration/MigrationInterface\";\r\nexport {DefaultNamingStrategy} from \"./naming-strategy/DefaultNamingStrategy\";\r\nexport {NamingStrategyInterface} from \"./naming-strategy/NamingStrategyInterface\";\r\nexport {Repository} from \"./repository/Repository\";\r\nexport {TreeRepository} from \"./repository/TreeRepository\";\r\nexport {SpecificRepository} from \"./repository/SpecificRepository\";\r\nexport {MongoRepository} from \"./repository/MongoRepository\";\r\nexport {FindManyOptions} from \"./find-options/FindManyOptions\";\r\nexport {InsertEvent} from \"./subscriber/event/InsertEvent\";\r\nexport {UpdateEvent} from \"./subscriber/event/UpdateEvent\";\r\nexport {RemoveEvent} from \"./subscriber/event/RemoveEvent\";\r\nexport {EntitySubscriberInterface} from \"./subscriber/EntitySubscriberInterface\";\r\nexport {EntityModel} from \"./repository/EntityModel\";\r\n\r\n// -------------------------------------------------------------------------\r\n// Deprecated\r\n// -------------------------------------------------------------------------\r\n\r\n// -------------------------------------------------------------------------\r\n// Commonly used functionality\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Gets metadata args storage.\r\n */\r\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\r\n    // we should store metadata storage in a global variable otherwise it brings too much problems\r\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\r\n    // useContainer method with his own container implementation, that entity will be registered in the\r\n    // old old container (default one post probably) and consumer will his entity.\r\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\r\n    // another reason is that when we run migrations typeorm is being called from a global package\r\n    // and it may load entities which register decorators in typeorm of local package\r\n    // this leads to impossibility of usage of entities in migrations and cli related operations\r\n    const globalScope = PlatformTools.getGlobalVariable();\r\n    if (!globalScope.typeormMetadataArgsStorage)\r\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\r\n\r\n    return globalScope.typeormMetadataArgsStorage;\r\n}\r\n\r\n/**\r\n * Gets a ConnectionManager which creates connections.\r\n */\r\nexport function getConnectionManager(): ConnectionManager {\r\n    return getFromContainer(ConnectionManager);\r\n}\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n *\r\n * If connection options were not specified, then it will try to create connection automatically.\r\n *\r\n * First, it will try to find a \"default\" configuration from ormconfig.json.\r\n * You can also specify a connection name to use from ormconfig.json,\r\n * and you even can specify a path to your custom ormconfig.json.\r\n *\r\n * In the case if options were not specified, and ormconfig.json file also wasn't found,\r\n * it will try to create connection from environment variables.\r\n * There are several environment variables you can set:\r\n *\r\n * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\r\n * - TYPEORM_URL - database connection url. Should be a string.\r\n * - TYPEORM_HOST - database host. Should be a string.\r\n * - TYPEORM_PORT - database access port. Should be a number.\r\n * - TYPEORM_USERNAME - database username. Should be a string.\r\n * - TYPEORM_PASSWORD - database user's password. Should be a string.\r\n * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\r\n * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\r\n * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\r\n * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\r\n * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\r\n * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\r\n * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\r\n * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\r\n *\r\n * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\r\n */\r\nexport function createConnection(): Promise<Connection>;\r\n\r\n/**\r\n * Creates connection from the given connection options and registers it in the manager.\r\n */\r\nexport function createConnection(options?: ConnectionOptions): Promise<Connection>;\r\n\r\n/**\r\n * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\r\n * Optionally you can specify a path to custom ormconfig.json file.\r\n */\r\nexport function createConnection(connectionNameFromConfig: string, ormConfigPath?: string): Promise<Connection>;\r\n\r\n/**\r\n * Creates connection and and registers it in the manager.\r\n */\r\nexport function createConnection(optionsOrConnectionNameFromConfig?: ConnectionOptions|string, ormConfigPath?: string): Promise<Connection> {\r\n    return getConnectionManager().createAndConnect(optionsOrConnectionNameFromConfig as any, ormConfigPath);\r\n}\r\n\r\n/**\r\n * Creates new connections and registers them in the manager.\r\n *\r\n * If array of connection options were not specified, then it will try to create them automatically\r\n * from ormconfig.json. You can also specify path to your custom ormconfig.json.\r\n *\r\n * In the case if options were not specified, and ormconfig.json file also wasn't found,\r\n * it will try to create connection from environment variables.\r\n * There are several environment variables you can set:\r\n *\r\n * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\r\n * - TYPEORM_URL - database connection url. Should be a string.\r\n * - TYPEORM_HOST - database host. Should be a string.\r\n * - TYPEORM_PORT - database access port. Should be a number.\r\n * - TYPEORM_USERNAME - database username. Should be a string.\r\n * - TYPEORM_PASSWORD - database user's password. Should be a string.\r\n * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\r\n * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\r\n * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\r\n * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\r\n * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\r\n * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\r\n * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\r\n * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\r\n *\r\n * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\r\n */\r\nexport function createConnections(): Promise<Connection[]>;\r\n\r\n/**\r\n * Creates connections from the given connection options and registers them in the manager.\r\n */\r\nexport function createConnections(options?: ConnectionOptions[]): Promise<Connection[]>;\r\n\r\n/**\r\n * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\r\n * Optionally you can specify a path to custom ormconfig.json file.\r\n */\r\nexport function createConnections(ormConfigPath?: string): Promise<Connection[]>;\r\n\r\n/**\r\n * Creates connections and and registers them in the manager.\r\n */\r\nexport function createConnections(optionsOrOrmConfigFilePath?: ConnectionOptions[]|string): Promise<Connection[]> {\r\n    return getConnectionManager().createAndConnectToAll(optionsOrOrmConfigFilePath as any);\r\n}\r\n\r\n/**\r\n * Gets connection from the connection manager.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n */\r\nexport function getConnection(connectionName: string = \"default\"): Connection {\r\n    return getConnectionManager().get(connectionName);\r\n}\r\n\r\n/**\r\n * Gets entity manager from the connection.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n */\r\nexport function getEntityManager(connectionName: string = \"default\"): EntityManager {\r\n    return getConnectionManager().get(connectionName).manager;\r\n}\r\n\r\n/**\r\n * Gets repository for the given entity class.\r\n */\r\nexport function getRepository<Entity>(entityClass: ObjectType<Entity>, connectionName?: string): Repository<Entity>;\r\n\r\n/**\r\n * Gets repository for the given entity name.\r\n */\r\nexport function getRepository<Entity>(entityName: string, connectionName?: string): Repository<Entity>;\r\n\r\n/**\r\n * Gets repository for the given entity class or name.\r\n */\r\nexport function getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string, connectionName: string = \"default\"): Repository<Entity> {\r\n    return getConnectionManager().get(connectionName).getRepository<Entity>(entityClassOrName as any);\r\n}\r\n\r\n/**\r\n * Gets tree repository for the given entity class.\r\n */\r\nexport function getTreeRepository<Entity>(entityClass: ObjectType<Entity>, connectionName?: string): TreeRepository<Entity>;\r\n\r\n/**\r\n * Gets tree repository for the given entity name.\r\n */\r\nexport function getTreeRepository<Entity>(entityName: string, connectionName?: string): TreeRepository<Entity>;\r\n\r\n/**\r\n * Gets tree repository for the given entity class or name.\r\n */\r\nexport function getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string, connectionName: string = \"default\"): TreeRepository<Entity> {\r\n    return getConnectionManager().get(connectionName).getTreeRepository<Entity>(entityClassOrName as any);\r\n}\r\n\r\n/**\r\n * Gets mongodb repository for the given entity class.\r\n */\r\nexport function getMongoRepository<Entity>(entityClass: ObjectType<Entity>, connectionName?: string): MongoRepository<Entity>;\r\n\r\n/**\r\n * Gets mongodb repository for the given entity name.\r\n */\r\nexport function getMongoRepository<Entity>(entityName: string, connectionName?: string): MongoRepository<Entity>;\r\n\r\n/**\r\n * Gets mongodb repository for the given entity class or name.\r\n */\r\nexport function getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string, connectionName: string = \"default\"): MongoRepository<Entity> {\r\n    return getConnectionManager().get(connectionName).getMongoRepository<Entity>(entityClassOrName as any);\r\n}\r\n","export * from \"./typeorm/index\";","import {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\r\nimport {RelationIdMetadata} from \"../metadata/RelationIdMetadata\";\r\nimport {RelationCountMetadata} from \"../metadata/RelationCountMetadata\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {TableType} from \"../metadata/types/TableTypes\";\r\n\r\n/**\r\n * Arguments for EntityMetadata class.\r\n */\r\nexport interface EntityMetadataArgs {\r\n\r\n    readonly junction: boolean;\r\n    readonly target: Function|string;\r\n    readonly tablesPrefix?: string;\r\n    readonly tableName?: string;\r\n    readonly tableType: TableType;\r\n    readonly inheritanceType?: \"single-table\"|\"class-table\";\r\n    readonly discriminatorValue?: string;\r\n    readonly namingStrategy: NamingStrategyInterface;\r\n    readonly columnMetadatas?: ColumnMetadata[];\r\n    readonly relationMetadatas?: RelationMetadata[];\r\n    readonly relationIdMetadatas?: RelationIdMetadata[];\r\n    readonly relationCountMetadatas?: RelationCountMetadata[];\r\n    readonly indexMetadatas?: IndexMetadata[];\r\n    readonly foreignKeyMetadatas?: ForeignKeyMetadata[];\r\n    readonly embeddedMetadatas?: EmbeddedMetadata[];\r\n    readonly engine?: string;\r\n    readonly skipSchemaSync?: boolean;\r\n    readonly orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\r\n\r\n}\r\n","/**\r\n * Thrown when consumer tries to access entity manager before connection is established.\r\n */\r\nexport class CannotGetEntityManagerNotConnectedError extends Error {\r\n    name = \"CannotGetEntityManagerNotConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot get entity manager for \"${connectionName}\" connection because connection is not yet established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to access repository before connection is established.\r\n */\r\nexport class NoConnectionForRepositoryError extends Error {\r\n    name = \"NoConnectionForRepositoryError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot get a Repository for \"${connectionName} connection, because connection with the database ` +\r\n            `is not established yet. Call connection#connect method to establish connection.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when some unexpected error occur on driver packages load.\r\n */\r\nexport class DriverPackageLoadError extends Error {\r\n    name = \"DriverPackageLoadError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Cannot load driver dependencies. Try to install all required dependencies.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown if database driver does not support pooling.\r\n */\r\nexport class DriverPoolingNotSupportedError extends Error {\r\n    name = \"DriverPoolingNotSupportedError\";\r\n\r\n    constructor(driverName: string) {\r\n        super();\r\n        this.message = `Connection pooling is not supported by (${driverName}) driver.`;\r\n    }\r\n\r\n}","/**\r\n */\r\nexport class MetadataAlreadyExistsError extends Error {\r\n    name = \"MetadataAlreadyExistsError\";\r\n\r\n    constructor(metadataType: string, constructor: Function, propertyName?: string) {\r\n        super();\r\n        this.message = metadataType + \" metadata already exists for the class constructor \" + JSON.stringify(constructor) +\r\n            (propertyName ? \" on property \" + propertyName : \". If you previously renamed or moved entity class, make sure\" +\r\n            \" that compiled version of old entity class source wasn't left in the compiler output directory.\");\r\n    }\r\n\r\n}","/**\r\n */\r\nexport class MetadataWithSuchNameAlreadyExistsError extends Error {\r\n    name = \"MetadataWithSuchNameAlreadyExistsError\";\r\n\r\n    constructor(metadataType: string, name: string) {\r\n        super();\r\n        this.message = metadataType + \" metadata with such name \" + name + \" already exists. \" +\r\n            \"Do you apply decorator twice? Or maybe try to change a name?\";\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class MissingJoinColumnError extends Error {\r\n    name = \"MissingJoinColumnError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        if (relation.inverseRelation) {\r\n            this.message = `JoinColumn is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +\r\n                `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} one-to-one relationship. ` +\r\n                `You need to put JoinColumn decorator on one of the sides.`;\r\n        } else {\r\n            this.message = `JoinColumn is missing on ${entityMetadata.name}#${relation.propertyName} one-to-one relationship. ` +\r\n                `You need to put JoinColumn decorator on it.`;\r\n        }\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class MissingJoinTableError extends Error {\r\n    name = \"MissingJoinTableError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n\r\n        if (relation.inverseRelation) {\r\n            this.message = `JoinTable is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +\r\n                `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} many-to-many relationship. ` +\r\n                `You need to put decorator decorator on one of the sides.`;\r\n        } else {\r\n            this.message = `JoinTable is missing on ${entityMetadata.name}#${relation.propertyName} many-to-many relationship. ` +\r\n                `You need to put JoinTable decorator on it.`;\r\n        }\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class UsingJoinColumnIsNotAllowedError extends Error {\r\n    name = \"UsingJoinColumnIsNotAllowedError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        this.message = `Using JoinColumn on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\r\n            `You can use JoinColumn only on one-to-one and many-to-one relations.`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class UsingJoinColumnOnlyOnOneSideAllowedError extends Error {\r\n    name = \"UsingJoinColumnOnlyOnOneSideAllowedError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        this.message = `Using JoinColumn is allowed only on one side of the one-to-one relationship. ` +\r\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation!.propertyName} ` +\r\n            `has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class UsingJoinTableIsNotAllowedError extends Error {\r\n    name = \"UsingJoinTableIsNotAllowedError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        this.message = `Using JoinTable on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\r\n            `${entityMetadata.name}#${relation.propertyName} has ${relation.relationType} relation, ` +\r\n            `however you can use JoinTable only on many-to-many relations.`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class UsingJoinTableOnlyOnOneSideAllowedError extends Error {\r\n    name = \"UsingJoinTableOnlyOnOneSideAllowedError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        this.message = `Using JoinTable is allowed only on one side of the many-to-many relationship. ` +\r\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation!.propertyName} ` +\r\n            `has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class CascadesNotAllowedError extends Error {\r\n    name = \"CascadesNotAllowedError\";\r\n\r\n    // todo: remove metadata attribute since its present in relation attribute\r\n    constructor(type: \"insert\"|\"update\"|\"remove\", metadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        this.message = `Cascades (${type}) are not allowed for the given relation ${metadata.name}#${relation.joinColumns[0].referencedColumn!.databaseName}`;\r\n    }\r\n\r\n}","/**\r\n * Thrown . Theoretically can't be thrown.\r\n */\r\nexport class PersistedEntityNotFoundError extends Error {\r\n    name = \"PersistedEntityNotFoundError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Internal error. Persisted entity was not found in the list of prepared operated entities.`;\r\n    }\r\n\r\n}"],"sourceRoot":"."}