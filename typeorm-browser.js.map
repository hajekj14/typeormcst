{"version":3,"sources":["build/browser/typeorm/driver/DriverOptions.ts","build/browser/typeorm/metadata/types/ColumnTypes.ts","build/browser/typeorm/decorator/options/ColumnOptions.ts","build/browser/typeorm/metadata-args/ColumnMetadataArgs.ts","build/browser/typeorm/metadata/types/TableTypes.ts","build/browser/typeorm/find-options/OrderByCondition.ts","build/browser/typeorm/metadata-args/TableMetadataArgs.ts","build/browser/typeorm/metadata/error/EntityMetadataAlreadySetError.ts","build/browser/typeorm/metadata/error/EntityMetadataNotSetError.ts","build/browser/typeorm/metadata/TableMetadata.ts","build/browser/typeorm/metadata/types/RelationTypes.ts","build/browser/typeorm/metadata/ForeignKeyMetadata.ts","build/browser/typeorm/decorator/options/JoinColumnOptions.ts","build/browser/typeorm/metadata-args/JoinTableMetadataArgs.ts","build/browser/typeorm/metadata/JoinTableMetadata.ts","build/browser/typeorm/metadata-args/JoinColumnMetadataArgs.ts","build/browser/typeorm/metadata/JoinColumnMetadata.ts","build/browser/typeorm/decorator/options/RelationOptions.ts","build/browser/typeorm/metadata-args/RelationMetadataArgs.ts","build/browser/typeorm/common/ObjectLiteral.ts","build/browser/typeorm/metadata/RelationMetadata.ts","build/browser/typeorm/metadata-args/IndexMetadataArgs.ts","build/browser/typeorm/metadata/IndexMetadata.ts","build/browser/typeorm/naming-strategy/NamingStrategyInterface.ts","build/browser/typeorm/metadata-args/EmbeddedMetadataArgs.ts","build/browser/typeorm/metadata/EmbeddedMetadata.ts","build/browser/typeorm/metadata-args/EntityMetadataArgs.ts","build/browser/typeorm/query-builder/alias/Alias.ts","build/browser/typeorm/query-builder/alias/AliasMap.ts","build/browser/typeorm/util/OrmUtils.ts","build/browser/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.ts","build/browser/typeorm/driver/error/ConnectionIsNotSetError.ts","build/browser/typeorm/driver/DatabaseConnection.ts","build/browser/typeorm/driver/error/DriverPackageNotInstalledError.ts","build/browser/typeorm/driver/DriverUtils.ts","build/browser/typeorm/logger/LoggerOptions.ts","build/browser/typeorm/platform/PlatformTools.ts","build/browser/typeorm/logger/Logger.ts","build/browser/typeorm/driver/error/TransactionAlreadyStartedError.ts","build/browser/typeorm/driver/error/TransactionNotStartedError.ts","build/browser/typeorm/driver/error/DataTypeNotSupportedByDriverError.ts","build/browser/typeorm/schema-builder/schema/IndexSchema.ts","build/browser/typeorm/schema-builder/schema/ForeignKeySchema.ts","build/browser/typeorm/schema-builder/schema/PrimaryKeySchema.ts","build/browser/typeorm/schema-builder/schema/TableSchema.ts","build/browser/typeorm/query-runner/error/QueryRunnerAlreadyReleasedError.ts","build/browser/typeorm/driver/sqlserver/SqlServerQueryRunner.ts","build/browser/typeorm/driver/error/DriverOptionNotSetError.ts","build/browser/typeorm/util/DataTransformationUtils.ts","build/browser/typeorm/driver/sqlserver/SqlServerDriver.ts","build/browser/typeorm/query-builder/JoinOptions.ts","build/browser/typeorm/query-runner/QueryRunnerProvider.ts","build/browser/typeorm/query-builder/error/PessimisticLockTransactionRequiredError.ts","build/browser/typeorm/query-builder/error/NoVersionOrUpdateDateColumnError.ts","build/browser/typeorm/query-builder/error/OptimisticLockVersionMismatchError.ts","build/browser/typeorm/query-builder/error/OptimisticLockCanNotBeUsedError.ts","build/browser/typeorm/driver/postgres/PostgresQueryRunner.ts","build/browser/typeorm/driver/postgres/PostgresDriver.ts","build/browser/typeorm/driver/mysql/MysqlQueryRunner.ts","build/browser/typeorm/driver/mysql/MysqlDriver.ts","build/browser/typeorm/query-builder/error/LockNotSupportedOnGivenDriverError.ts","build/browser/typeorm/driver/oracle/OracleQueryRunner.ts","build/browser/typeorm/driver/oracle/OracleDriver.ts","build/browser/typeorm/query-builder/QueryBuilder.ts","build/browser/typeorm/lazy-loading/LazyRelationsWrapper.ts","build/browser/typeorm/metadata/EntityMetadata.ts","build/browser/typeorm/metadata/ColumnMetadata.ts","build/browser/typeorm/schema-builder/schema/ColumnSchema.ts","build/browser/typeorm/query-runner/QueryRunner.ts","build/browser/typeorm/driver/Driver.ts","build/browser/typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer.ts","build/browser/typeorm/find-options/FindOneOptions.ts","build/browser/typeorm/find-options/FindManyOptions.ts","build/browser/typeorm/common/ObjectType.ts","build/browser/typeorm/repository/TreeRepository.ts","build/browser/typeorm/persistence/Subject.ts","build/browser/typeorm/repository/SpecificRepository.ts","build/browser/typeorm/driver/mongodb/MongoQueryRunner.ts","build/browser/typeorm/driver/mongodb/MongoDriver.ts","build/browser/typeorm/query-builder/transformer/DocumentToEntityTransformer.ts","build/browser/typeorm/find-options/FindOptionsUtils.ts","build/browser/typeorm/common/DeepPartial.ts","build/browser/typeorm/repository/MongoRepository.ts","build/browser/typeorm/repository/RepositoryFactory.ts","build/browser/typeorm/container.ts","build/browser/typeorm/repository/RepositoryAggregator.ts","build/browser/typeorm/connection/error/RepositoryNotTreeError.ts","build/browser/typeorm/entity-manager/error/NoNeedToReleaseEntityManagerError.ts","build/browser/typeorm/query-runner/error/QueryRunnerProviderAlreadyReleasedError.ts","build/browser/typeorm/entity-manager/BaseEntityManager.ts","build/browser/typeorm/repository/RemoveOptions.ts","build/browser/typeorm/repository/PersistOptions.ts","build/browser/typeorm/entity-manager/EntityManager.ts","build/browser/typeorm/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.ts","build/browser/typeorm/util/PromiseUtils.ts","build/browser/typeorm/persistence/SubjectOperationExecutor.ts","build/browser/typeorm/persistence/SubjectBuilder.ts","build/browser/typeorm/repository/Repository.ts","build/browser/typeorm/subscriber/event/UpdateEvent.ts","build/browser/typeorm/subscriber/event/RemoveEvent.ts","build/browser/typeorm/subscriber/event/InsertEvent.ts","build/browser/typeorm/subscriber/EntitySubscriberInterface.ts","build/browser/typeorm/connection/error/RepositoryNotFoundError.ts","build/browser/typeorm/metadata/types/EventListenerTypes.ts","build/browser/typeorm/metadata-args/EntityListenerMetadataArgs.ts","build/browser/typeorm/metadata/EntityListenerMetadata.ts","build/browser/typeorm/util/DirectoryExportedClassesLoader.ts","build/browser/typeorm/metadata-builder/error/UsingJoinTableIsNotAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinTableOnlyOnOneSideAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinColumnIsNotAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinColumnOnlyOnOneSideAllowedError.ts","build/browser/typeorm/metadata-builder/error/MissingJoinColumnError.ts","build/browser/typeorm/metadata-builder/error/MissingJoinTableError.ts","build/browser/typeorm/metadata-builder/error/MissingPrimaryColumnError.ts","build/browser/typeorm/metadata-builder/error/CircularRelationsError.ts","build/browser/typeorm/util/DepGraph.ts","build/browser/typeorm/metadata-builder/EntityMetadataValidator.ts","build/browser/typeorm/metadata-builder/JunctionEntityMetadataBuilder.ts","build/browser/typeorm/metadata-builder/ClosureJunctionEntityMetadataBuilder.ts","build/browser/typeorm/entity-schema/EntitySchema.ts","build/browser/typeorm/metadata-builder/error/MetadataAlreadyExistsError.ts","build/browser/typeorm/metadata-args/collection/TargetMetadataArgsCollection.ts","build/browser/typeorm/metadata-args/collection/PropertyMetadataArgsCollection.ts","build/browser/typeorm/metadata-args/RelationCountMetadataArgs.ts","build/browser/typeorm/metadata-args/NamingStrategyMetadataArgs.ts","build/browser/typeorm/metadata-args/EntitySubscriberMetadataArgs.ts","build/browser/typeorm/metadata-args/RelationIdMetadataArgs.ts","build/browser/typeorm/metadata-args/InheritanceMetadataArgs.ts","build/browser/typeorm/metadata-args/DiscriminatorValueMetadataArgs.ts","build/browser/typeorm/metadata-args/EntityRepositoryMetadataArgs.ts","build/browser/typeorm/metadata-args/TransactionEntityMetadataArgs.ts","build/browser/typeorm/metadata-args/MetadataArgsStorage.ts","build/browser/typeorm/metadata-builder/EntityMetadataBuilder.ts","build/browser/typeorm/util/RandomGenerator.ts","build/browser/typeorm/util/StringUtils.ts","build/browser/typeorm/naming-strategy/DefaultNamingStrategy.ts","build/browser/typeorm/connection/error/CannotImportAlreadyConnectedError.ts","build/browser/typeorm/connection/error/CannotCloseNotConnectedError.ts","build/browser/typeorm/connection/error/CannotConnectAlreadyConnectedError.ts","build/browser/typeorm/connection/error/NamingStrategyNotFoundError.ts","build/browser/typeorm/connection/error/CannotSyncNotConnectedError.ts","build/browser/typeorm/connection/error/CannotUseNamingStrategyNotConnectedError.ts","build/browser/typeorm/subscriber/Broadcaster.ts","build/browser/typeorm/schema-builder/SchemaBuilder.ts","build/browser/typeorm/metadata-args/error/EntityMetadataNotFound.ts","build/browser/typeorm/migration/MigrationInterface.ts","build/browser/typeorm/migration/Migration.ts","build/browser/typeorm/migration/MigrationExecutor.ts","build/browser/typeorm/connection/error/CannotRunMigrationNotConnectedError.ts","build/browser/typeorm/repository/error/CustomRepositoryDoesNotHaveEntityError.ts","build/browser/typeorm/repository/AbstractRepository.ts","build/browser/typeorm/repository/error/CustomRepositoryNotFoundError.ts","build/browser/typeorm/repository/error/CustomRepositoryReusedError.ts","build/browser/typeorm/repository/error/CustomRepositoryCannotInheritRepositoryError.ts","build/browser/typeorm/entity-manager/MongoEntityManager.ts","build/browser/typeorm/connection/Connection.ts","build/browser/typeorm/connection/error/ConnectionNotFoundError.ts","build/browser/typeorm/connection/ConnectionOptions.ts","build/browser/typeorm/connection/error/MissingDriverError.ts","build/browser/typeorm/connection/error/AlreadyHasActiveConnectionError.ts","build/browser/typeorm/driver/sqlite/SqliteQueryRunner.ts","build/browser/typeorm/driver/sqlite/SqliteDriver.ts","build/browser/typeorm/connection/error/CannotDetermineConnectionOptionsError.ts","build/browser/typeorm/driver/websql/WebsqlQueryRunner.ts","build/browser/typeorm/driver/websql/WebsqlDriver.ts","build/browser/typeorm/connection/ConnectionManager.ts","build/browser/typeorm/decorator/error/GeneratedOnlyForPrimaryError.ts","build/browser/typeorm/decorator/columns/Column.ts","build/browser/typeorm/decorator/columns/CreateDateColumn.ts","build/browser/typeorm/decorator/columns/DiscriminatorColumn.ts","build/browser/typeorm/decorator/error/PrimaryColumnCannotBeNullableError.ts","build/browser/typeorm/decorator/columns/PrimaryGeneratedColumn.ts","build/browser/typeorm/decorator/error/ColumnTypeUndefinedError.ts","build/browser/typeorm/decorator/columns/PrimaryColumn.ts","build/browser/typeorm/decorator/columns/UpdateDateColumn.ts","build/browser/typeorm/decorator/columns/VersionColumn.ts","build/browser/typeorm/decorator/columns/ObjectIdColumn.ts","build/browser/typeorm/decorator/listeners/AfterInsert.ts","build/browser/typeorm/decorator/listeners/AfterLoad.ts","build/browser/typeorm/decorator/listeners/AfterRemove.ts","build/browser/typeorm/decorator/listeners/AfterUpdate.ts","build/browser/typeorm/decorator/listeners/BeforeInsert.ts","build/browser/typeorm/decorator/listeners/BeforeRemove.ts","build/browser/typeorm/decorator/listeners/BeforeUpdate.ts","build/browser/typeorm/decorator/listeners/EventSubscriber.ts","build/browser/typeorm/decorator/options/IndexOptions.ts","build/browser/typeorm/decorator/options/JoinTableOptions.ts","build/browser/typeorm/decorator/options/EntityOptions.ts","build/browser/typeorm/decorator/relations/RelationCount.ts","build/browser/typeorm/decorator/relations/JoinColumn.ts","build/browser/typeorm/decorator/relations/JoinTable.ts","build/browser/typeorm/decorator/relations/ManyToMany.ts","build/browser/typeorm/decorator/relations/ManyToOne.ts","build/browser/typeorm/decorator/relations/OneToMany.ts","build/browser/typeorm/decorator/relations/OneToOne.ts","build/browser/typeorm/decorator/relations/RelationId.ts","build/browser/typeorm/decorator/entity/Entity.ts","build/browser/typeorm/decorator/entity/AbstractEntity.ts","build/browser/typeorm/decorator/entity/ClassEntityChild.ts","build/browser/typeorm/decorator/entity/ClosureEntity.ts","build/browser/typeorm/decorator/entity/EmbeddableEntity.ts","build/browser/typeorm/decorator/entity/SingleEntityChild.ts","build/browser/typeorm/decorator/entity/TableInheritance.ts","build/browser/typeorm/decorator/transaction/Transaction.ts","build/browser/typeorm/decorator/transaction/TransactionEntityManager.ts","build/browser/typeorm/decorator/tree/TreeLevelColumn.ts","build/browser/typeorm/decorator/tree/TreeParent.ts","build/browser/typeorm/decorator/tree/TreeChildren.ts","build/browser/typeorm/decorator/Index.ts","build/browser/typeorm/decorator/NamingStrategy.ts","build/browser/typeorm/decorator/Embedded.ts","build/browser/typeorm/decorator/DiscriminatorValue.ts","build/browser/typeorm/decorator/EntityRepository.ts","build/browser/typeorm/index.ts","build/browser/typeorm.ts","build/browser/typeorm/metadata/EntitySubscriberMetadata.ts","build/browser/typeorm/metadata/TargetMetadata.ts","build/browser/typeorm/metadata/PropertyMetadata.ts","build/browser/typeorm/metadata/RelationCountMetadata.ts","build/browser/typeorm/connection/error/CannotGetEntityManagerNotConnectedError.ts","build/browser/typeorm/connection/error/NoConnectionForRepositoryError.ts","build/browser/typeorm/driver/error/DriverPackageLoadError.ts","build/browser/typeorm/driver/error/DriverPoolingNotSupportedError.ts","build/browser/typeorm/persistence/error/CascadesNotAllowedError.ts","build/browser/typeorm/persistence/error/PersistedEntityNotFoundError.ts","build/browser/typeorm/metadata-builder/error/MetadataWithSuchNameAlreadyExistsError.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAkFA,CAAC;;;;;;;;;;YC5ED;;eAEG;YACH;gBAAA;gBA6KA,CAAC;gBAhFG;;mBAEG;gBACI,2BAAe,GAAtB,UAAuB,IAAY;oBAC/B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAc,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjE,CAAC;gBAKD,sBAAW,6BAAc;oBAHzB;;uBAEG;yBACH;wBACI,MAAM,CAAC;4BACH,IAAI,CAAC,MAAM;4BACX,IAAI,CAAC,IAAI;4BACT,IAAI,CAAC,MAAM;4BACX,IAAI,CAAC,OAAO;4BACZ,IAAI,CAAC,GAAG;4BACR,IAAI,CAAC,QAAQ;4BACb,IAAI,CAAC,MAAM;4BACX,IAAI,CAAC,KAAK;4BACV,IAAI,CAAC,MAAM;4BACX,IAAI,CAAC,OAAO;4BACZ,IAAI,CAAC,IAAI;4BACT,IAAI,CAAC,IAAI;4BACT,IAAI,CAAC,QAAQ;4BACb,IAAI,CAAC,OAAO;4BACZ,IAAI,CAAC,IAAI;4BACT,IAAI,CAAC,KAAK;4BACV,IAAI,CAAC,YAAY;4BACjB,IAAI,CAAC,IAAI;yBACZ,CAAC;oBACN,CAAC;;;mBAAA;gBAED;;mBAEG;gBACI,qCAAyB,GAAhC,UAAiC,IAAc;oBAC3C,EAAE,CAAC,CAAC,IAAI,YAAY,IAAI,CAAC,CAAC,CAAC;wBACvB,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;oBAEhC,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,YAAY,QAAQ,CAAC,CAAC,CAAC;wBAClC,IAAM,QAAQ,GAAS,IAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;wBAChD,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACf,KAAK,QAAQ;gCACT,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;4BAC9B,KAAK,SAAS;gCACV,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC;4BAC/B,KAAK,QAAQ;gCACT,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;4BAC9B,KAAK,MAAM;gCACP,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;4BAChC,KAAK,QAAQ;gCACT,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;wBAChC,CAAC;oBAEL,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,YAAY,MAAM,CAAC,CAAC,CAAC;wBAChC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;oBAE5B,CAAC;oBAED,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAEM,wBAAY,GAAnB,UAAoB,IAAc;oBAC9B,MAAM,CAAE,IAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBAC5C,CAAC;gBAED;;mBAEG;gBACI,qBAAS,GAAhB,UAAiB,IAAgB;oBAC7B,MAAM,CAAE,IAAI,KAAK,WAAW,CAAC,MAAM;wBAC3B,IAAI,KAAK,WAAW,CAAC,GAAG;wBACxB,IAAI,KAAK,WAAW,CAAC,OAAO;wBAC5B,IAAI,KAAK,WAAW,CAAC,MAAM;wBAC3B,IAAI,KAAK,WAAW,CAAC,QAAQ;wBAC7B,IAAI,KAAK,WAAW,CAAC,MAAM;wBAC3B,IAAI,KAAK,WAAW,CAAC,KAAK,CAAC;gBACvC,CAAC;gBAEL,kBAAC;YAAD,CA7KA,AA6KC,IAAA;YA3KG;;eAEG;YACI,kBAAM,GAAe,QAAQ,CAAC;YAErC;;eAEG;YACI,gBAAI,GAAe,MAAM,CAAC;YAEjC;;eAEG;YACI,kBAAM,GAAe,QAAQ,CAAC;YAErC;;eAEG;YACI,mBAAO,GAAe,SAAS,CAAC;YAEvC;;eAEG;YACI,eAAG,GAAe,KAAK,CAAC;YAE/B;;eAEG;YACI,oBAAQ,GAAe,UAAU,CAAC;YAEzC;;eAEG;YACI,kBAAM,GAAe,QAAQ,CAAC;YAErC;;eAEG;YACI,iBAAK,GAAe,OAAO,CAAC;YAEnC;;eAEG;YACI,kBAAM,GAAe,QAAQ,CAAC;YAErC;;eAEG;YACI,mBAAO,GAAe,SAAS,CAAC;YAEvC;;eAEG;YACI,gBAAI,GAAe,MAAM,CAAC;YAEjC;;eAEG;YACI,gBAAI,GAAe,MAAM,CAAC;YAEjC;;eAEG;YACI,oBAAQ,GAAe,UAAU,CAAC;YAEzC;;eAEG;YACI,mBAAO,GAAe,SAAS,CAAC;YAEvC;;eAEG;YACI,gBAAI,GAAe,MAAM,CAAC;YAEjC;;eAEG;YACI,iBAAK,GAAe,OAAO,CAAC;YAEnC;;;eAGG;YACI,wBAAY,GAAe,cAAc,CAAC;YAEjD;;eAEG;YACI,gBAAI,GAAe,MAAM,CAAC;;QAkFpC,CAAC;;;;;;;;;QC7FF,CAAC;;;;;;;;;QCnDD,CAAC;;;;;;;;;;YChCD;;eAEG;YACH;gBAAA;gBA2CA,CAAC;gBAAD,iBAAC;YAAD,CA3CA,AA2CC,IAAA;YAzCG;;eAEG;YACI,kBAAO,GAAc,SAAS,CAAC;YAEtC;;;eAGG;YACI,mBAAQ,GAAc,UAAU,CAAC;YAExC;;eAEG;YACI,mBAAQ,GAAc,UAAU,CAAC;YAExC;;eAEG;YACI,kBAAO,GAAc,SAAS,CAAC;YAEtC;;eAEG;YACI,2BAAgB,GAAc,kBAAkB,CAAC;YAExD;;;eAGG;YACI,qBAAU,GAAc,YAAY,CAAC;YAE5C;;eAEG;YACI,6BAAkB,GAAc,oBAAoB,CAAC;YAE5D;;eAEG;YACI,4BAAiB,GAAc,mBAAmB,CAAC;;QAC7D,CAAC;;;;;;;;;QCnDF,CAAC;;;;;;;;;QCyCD,CAAC;;;;;;;;;;YC1CD;;eAEG;YACH;gBAAmD,iDAAK;gBAGpD,uCAAY,IAAc,EAAE,MAAiC,EAAE,SAA2B;oBAA1F,YACI,iBAAO,SAIV;oBAPD,UAAI,GAAG,+BAA+B,CAAC;oBAInC,IAAM,aAAa,GAAG,MAAM,GAAG,WAAS,MAAM,YAAY,QAAQ,GAAI,MAAM,CAAC,WAAmB,CAAC,IAAI,GAAG,MAAM,CAAG,GAAG,EAAE,CAAC;oBACvH,IAAM,gBAAgB,GAAG,SAAS,GAAG,WAAU,SAAS,gBAAc,GAAG,EAAE,CAAC;oBAC5E,KAAI,CAAC,OAAO,GAAG,iBAAiB,GAAG,aAAa,GAAG,gBAAgB,GAAG,gCAAgC,GAAI,IAAI,CAAC,WAAmB,CAAC,IAAI,CAAC;;gBAC5I,CAAC;gBAEL,oCAAC;YAAD,CAVA,AAUC,CAVkD,KAAK,GAUvD;;QAAA,CAAC;;;;;;;;;;YCbF;;;eAGG;YACH;gBAA+C,6CAAK;gBAGhD,mCAAY,IAAc,EAAE,MAAiC,EAAE,SAA2B;oBAA1F,YACI,iBAAO,SAIV;oBAPD,UAAI,GAAG,2BAA2B,CAAC;oBAI/B,IAAM,aAAa,GAAG,MAAM,GAAG,WAAS,MAAM,YAAY,QAAQ,GAAI,MAAM,CAAC,WAAmB,CAAC,IAAI,GAAG,MAAM,CAAG,GAAG,EAAE,CAAC;oBACvH,IAAM,gBAAgB,GAAG,SAAS,GAAG,WAAU,SAAS,gBAAc,GAAG,EAAE,CAAC;oBAC5E,KAAI,CAAC,OAAO,GAAG,iBAAiB,GAAG,aAAa,GAAG,gBAAgB,GAAG,iBAAiB,GAAI,IAAI,CAAC,WAAmB,CAAC,IAAI,CAAC;;gBAC7H,CAAC;gBAEL,gCAAC;YAAD,CAVA,AAUC,CAV8C,KAAK,GAUnD;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;YCPF;;eAEG;YACH;gBAgDI,wEAAwE;gBACxE,cAAc;gBACd,wEAAwE;gBAExE;;mBAEG;gBACH,uBAAY,IAAuB;oBA1BnC,wEAAwE;oBACxE,qBAAqB;oBACrB,wEAAwE;oBAExE;;uBAEG;oBACc,cAAS,GAAc,SAAS,CAAC;oBAoB9C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;oBAC3B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;oBACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;gBAC9C,CAAC;gBAWD,sBAAI,yCAAc;oBAOlB;;;uBAGG;yBACH;wBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;4BACtB,MAAM,IAAI,qDAAyB,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;wBAEhF,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;oBAChC,CAAC;oBAzBD,wEAAwE;oBACxE,YAAY;oBACZ,wEAAwE;oBAExE;;;;uBAIG;yBACH,UAAmB,QAAwB;wBACvC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;4BACrB,MAAM,IAAI,6DAA6B,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;wBAEpF,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;oBACpC,CAAC;;;mBAAA;gBAmBD,sBAAI,4CAAiB;oBANrB;;;;;uBAKG;yBACH;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,KAAK,CAAC;4BACrC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAEnF,mDAAmD;wBACnD,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,YAAY,QAAQ,GAAI,IAAI,CAAC,MAAc,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;wBACvF,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC1E,CAAC;;;mBAAA;gBAMD,sBAAI,+BAAI;oBAJR;;;uBAGG;yBACH;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;4BACjC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;wBAExH,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;oBAClC,CAAC;;;mBAAA;gBAMD,sBAAI,kCAAO;oBAJX;;;uBAGG;yBACH;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,YAAY,QAAQ,CAAC;4BAClC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC;wBAEpE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACzB,CAAC;;;mBAAA;gBAMD,sBAAI,oCAAS;oBAJb;;;uBAGG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,uBAAU,CAAC,OAAO,CAAC;oBACjD,CAAC;;;mBAAA;gBAOD,sBAAI,qCAAU;oBALd;;;;uBAIG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,uBAAU,CAAC,QAAQ,CAAC;oBAClD,CAAC;;;mBAAA;gBAMD,sBAAI,qCAAU;oBAJd;;;uBAGG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,uBAAU,CAAC,QAAQ,CAAC;oBAClD,CAAC;;;mBAAA;gBAMD,sBAAI,oCAAS;oBAJb;;;uBAGG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,uBAAU,CAAC,OAAO,CAAC;oBACjD,CAAC;;;mBAAA;gBAMD,sBAAI,4CAAiB;oBAJrB;;;uBAGG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,uBAAU,CAAC,gBAAgB,CAAC;oBAC1D,CAAC;;;mBAAA;gBAOD,sBAAI,uCAAY;oBALhB;;;;uBAIG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,uBAAU,CAAC,UAAU,CAAC;oBACpD,CAAC;;;mBAAA;gBAMD,sBAAI,6CAAkB;oBAJtB;;;uBAGG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,uBAAU,CAAC,kBAAkB,CAAC;oBAC5D,CAAC;;;mBAAA;gBAMD,sBAAI,4CAAiB;oBAJrB;;;uBAGG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,uBAAU,CAAC,iBAAiB,CAAC;oBAC3D,CAAC;;;mBAAA;gBAEL,oBAAC;YAAD,CAlMA,AAkMC,IAAA;;QACD,CAAC;;;;;;;;;;YCxMD;;eAEG;YACH;gBAAA;gBAKA,CAAC;gBAAD,oBAAC;YAAD,CALA,AAKC,IAAA;YAJU,wBAAU,GAAiB,YAAY,CAAC;YACxC,yBAAW,GAAiB,aAAa,CAAC;YAC1C,yBAAW,GAAiB,aAAa,CAAC;YAC1C,0BAAY,GAAiB,cAAc,CAAC;;QACtD,CAAC;;;;;;;;;;YCJF;;eAEG;YACH;gBAmCI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,4BAAY,OAAyB,EACzB,eAA8B,EAC9B,iBAAmC,EACnC,QAAuB;oBAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;oBACvB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;oBACvC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;oBAC3C,EAAE,CAAC,CAAC,QAAQ,CAAC;wBACT,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACjC,CAAC;gBASD,sBAAI,yCAAS;oBAPb,4EAA4E;oBAC5E,YAAY;oBACZ,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC;oBAC1C,CAAC;;;mBAAA;gBAKD,sBAAI,mDAAmB;oBAHvB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;oBACrC,CAAC;;;mBAAA;gBAKD,sBAAI,oCAAI;oBAHR;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;oBACtJ,CAAC;;;mBAAA;gBAKD,sBAAI,2CAAW;oBAHf;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC,CAAC;oBACvD,CAAC;;;mBAAA;gBAKD,sBAAI,qDAAqB;oBAHzB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC,CAAC;oBACjE,CAAC;;;mBAAA;gBAEL,yBAAC;YAAD,CAzFA,AAyFC,IAAA;;QAAA,CAAC;;;;;;;;;QCtFD,CAAC;;;;;;;;;QCmBF,CAAC;;;;;;;;;;YC9BD;;eAEG;YACH;gBAkDI,wEAAwE;gBACxE,cAAc;gBACd,wEAAwE;gBAExE,2BAAY,IAA2B;oBACnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBACtC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;oBAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;wBAClB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;4BACrB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;wBAChD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC;4BACrC,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC;oBACpF,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;4BAC5B,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;wBAC9D,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC;4BAC5C,IAAI,CAAC,sCAAsC,GAAG,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC;oBAClG,CAAC;gBACL,CAAC;gBASD,sBAAI,mCAAI;oBAPR,wEAAwE;oBACxE,YAAY;oBACZ,wEAAwE;oBAExE;;uBAEG;yBACH;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;4BACX,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;wBAEtB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,aAAa,CAC5D,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,EACpD,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,CAAC,iBAAiB,EAC3D,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,GAAG,EAAE,EAC9E,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAC9B,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CACxC,CAAC;oBACN,CAAC;;;mBAAA;gBAKD,sBAAI,6CAAc;oBAHlB;;uBAEG;yBACH;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;4BACrB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;wBAEhC,MAAM,CAAC,IAAI,CAAC,QAAQ;6BACf,cAAc;6BACd,cAAc;6BACd,mBAAmB,CAChB,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,EACpD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAC9B,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,CAAC,iBAAiB,EAC3D,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CACxC,CAAC;oBACV,CAAC;;;mBAAA;gBAKD,sBAAI,oDAAqB;oBAHzB;;uBAEG;yBACH;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC;4BAC5B,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC;wBAEvC,MAAM,CAAC,IAAI,CAAC,QAAQ;6BACf,cAAc;6BACd,cAAc;6BACd,0BAA0B,CACvB,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,CAAC,iBAAiB,EAC3D,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EACrC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,EACpD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CACjC,CAAC;oBACV,CAAC;;;mBAAA;gBAKD,sBAAI,+CAAgB;oBAHpB;;uBAEG;yBACH;wBAAA,iBAaC;wBAZG,EAAE,CAAC,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC;4BACvC,IAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,KAAK,KAAI,CAAC,+BAA+B,EAAxD,CAAwD,CAAC,CAAC;4BACvI,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;gCAClB,MAAM,IAAI,KAAK,CAAC,uBAAqB,IAAI,CAAC,+BAA+B,iCAA4B,IAAI,CAAC,IAAM,CAAC,CAAC;4BAEtH,MAAM,CAAC,gBAAgB,CAAC;wBAC5B,CAAC;wBAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;4BACvD,MAAM,IAAI,KAAK,CAAC,iEAA8D,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,gGAA4F,CAAC,CAAC;wBAEjN,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC;oBAC3D,CAAC;;;mBAAA;gBAKD,sBAAI,sDAAuB;oBAH3B;;uBAEG;yBACH;wBAAA,iBAaC;wBAZG,EAAE,CAAC,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC,CAAC;4BAC9C,IAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,KAAK,KAAI,CAAC,sCAAsC,EAA/D,CAA+D,CAAC,CAAC;4BACrJ,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;gCAClB,MAAM,IAAI,KAAK,CAAC,uBAAqB,IAAI,CAAC,sCAAsC,iCAA4B,IAAI,CAAC,IAAM,CAAC,CAAC;4BAE7H,MAAM,CAAC,gBAAgB,CAAC;wBAC5B,CAAC;wBAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;4BAC9D,MAAM,IAAI,KAAK,CAAC,uEAAoE,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAAI,gGAA4F,CAAC,CAAC;wBAE9N,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,kBAAkB,CAAC;oBAClE,CAAC;;;mBAAA;gBAEL,wBAAC;YAAD,CAvKA,AAuKC,IAAA;;QAAA,CAAC;;;;;;;;;QCpJF,CAAC;;;;;;;;;;YCtBD;;eAEG;YACH;gBAmCI,wEAAwE;gBACxE,cAAc;gBACd,wEAAwE;gBAExE,4BAAY,IAA4B;oBACpC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBACtC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;oBACvB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;gBAC1D,CAAC;gBASD,sBAAI,oCAAI;oBAPR,wEAAwE;oBACxE,YAAY;oBACZ,wEAAwE;oBAExE;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,yBAAyB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;oBACzH,CAAC;;;mBAAA;gBAKD,sBAAI,gDAAgB;oBAHpB;;uBAEG;yBACH;wBAAA,iBAgBC;wBAfG,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;4BAC5B,IAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,UAAU,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,KAAK,KAAI,CAAC,oBAAoB,EAA7C,CAA6C,CAAC,CAAC;4BACtI,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;gCAClB,MAAM,IAAI,KAAK,CAAC,uBAAqB,IAAI,CAAC,oBAAoB,iCAA4B,IAAI,CAAC,IAAM,CAAC,CAAC;4BAE3G,MAAM,CAAC,gBAAgB,CAAC;wBAC5B,CAAC;wBAED,IAAM,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;wBAClE,IAAM,cAAc,GAAG,qBAAqB,CAAC,iCAAiC,CAAC;wBAE/E,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;4BAC1B,MAAM,IAAI,KAAK,CAAC,iEAA8D,qBAAqB,CAAC,IAAI,gGAA4F,CAAC,CAAC;wBAE1M,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;oBAC7B,CAAC;;;mBAAA;gBAEL,yBAAC;YAAD,CA9EA,AA8EC,IAAA;;QAAA,CAAC;;;;;;;;;QCjCD,CAAC;;;;;;;;;QCgBD,CAAC;;;;;;;;;QC9DF,CAAC;;;;;;;;;;;;;;YCeD;;eAEG;YACH;gBAgII,wEAAwE;gBACxE,cAAc;gBACd,wEAAwE;gBAExE,0BAAY,IAA0B;oBA1EtC;;uBAEG;oBACM,iBAAY,GAAY,KAAK,CAAC;oBAEvC;;uBAEG;oBACM,mBAAc,GAAY,KAAK,CAAC;oBAiCzC;;uBAEG;oBACM,eAAU,GAAY,IAAI,CAAC;oBA+BhC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBACtC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBAEtC,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;wBACzB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,mBAAmB,CAAC;oBACzD,yBAAyB;oBACzB,6CAA6C;oBAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC;wBAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;wBACtD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;oBAChC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;wBACtD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;oBAChC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;wBACtD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;oBAChC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC;wBACpC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,SAAS,CAAC;wBACnC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;wBAClB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;wBACpB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;oBAE/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;wBACZ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;gBAC/B,CAAC;gBAYD,sBAAI,0CAAY;oBAVhB,wEAAwE;oBACxE,YAAY;oBACZ,wEAAwE;oBAExE;;;;;uBAKG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;oBACtC,CAAC;;;mBAAA;gBAOD,sBAAI,kCAAI;oBALR;;;;uBAIG;yBACH;wBACI,2CAA2C;wBAE3C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;4BAChB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gCACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC;4BACzC,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gCACzB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;4BAChC,CAAC;wBAEL,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;4BAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;gCACjC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,qBAAqB,CAAC;4BAChE,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC;gCAC7F,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC;4BACrE,CAAC;wBACL,CAAC;wBAED,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;oBAC1D,CAAC;;;mBAAA;gBAOD,sBAAI,kDAAoB;oBALxB;;;;uBAIG;yBACH;wBACI,sBAAsB;wBACtB,gHAAgH;wBAEhH,2FAA2F;wBAC3F;;;;;;;;;;2BAUG;wBAEH,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;4BAChB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gCACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC;4BAEpD,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gCACzB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC;4BACrD,CAAC;wBAEL,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;4BAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;gCACjC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,uBAAuB,CAAC,QAAQ,CAAC;4BAC3E,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;gCACzC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,mCAAmC;4BACpF,CAAC;wBACL,CAAC;wBAED,sDAAsD;wBACtD,MAAM,IAAI,KAAK,CAAC,uDAAqD,IAAI,CAAC,cAAc,CAAC,IAAI,SAAI,IAAI,CAAC,IAAM,CAAC,CAAC;oBAClH,CAAC;;;mBAAA;gBAKD,sBAAI,8CAAgB;oBAHpB;;uBAEG;yBACH;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;4BAChB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gCACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC;4BAE3C,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gCACzB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC;4BAC5C,CAAC;wBAEL,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;4BAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;gCACjC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,uBAAuB,CAAC;4BAClE,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;gCACzC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC;4BAC5D,CAAC;wBACL,CAAC;wBAED,sDAAsD;wBACtD,MAAM,IAAI,KAAK,CAAC,kDAAgD,IAAI,CAAC,cAAc,CAAC,IAAI,SAAI,IAAI,CAAC,IAAM,CAAC,CAAC;oBAC7G,CAAC;;;mBAAA;gBAKD,sBAAI,kCAAI;oBAHR;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,KAAK,YAAY,QAAQ,GAAI,IAAI,CAAC,KAAmB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;oBACrF,CAAC;;;mBAAA;gBAKD,sBAAI,sCAAQ;oBAHZ;;uBAEG;yBACH;wBACI,MAAM,CAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW;4BACnB,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC;4BACrC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBAClD,CAAC;;;mBAAA;gBAKD,sBAAI,wCAAU;oBAHd;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,YAAY,KAAK,6BAAa,CAAC,UAAU,CAAC;oBAC1D,CAAC;;;mBAAA;gBAMD,sBAAI,6CAAe;oBAJnB;;;uBAGG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,CAAC;oBAC5C,CAAC;;;mBAAA;gBAMD,sBAAI,gDAAkB;oBAJtB;;;uBAGG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;oBAC7C,CAAC;;;mBAAA;gBAKD,sBAAI,yCAAW;oBAHf;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,YAAY,KAAK,6BAAa,CAAC,WAAW,CAAC;oBAC3D,CAAC;;;mBAAA;gBAKD,sBAAI,yCAAW;oBAHf;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,YAAY,KAAK,6BAAa,CAAC,WAAW,CAAC;oBAC3D,CAAC;;;mBAAA;gBAKD,sBAAI,0CAAY;oBAHhB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,YAAY,KAAK,6BAAa,CAAC,YAAY,CAAC;oBAC5D,CAAC;;;mBAAA;gBAMD,sBAAI,+CAAiB;oBAJrB;;;uBAGG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,QAAQ,CAAC;oBAC9C,CAAC;;;mBAAA;gBAMD,sBAAI,kDAAoB;oBAJxB;;;uBAGG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;oBAC/C,CAAC;;;mBAAA;gBAKD,sBAAI,4CAAc;oBAHlB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,qBAAqB,CAAC,2BAA2B,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;oBAC1H,CAAC;;;mBAAA;gBAKD,sBAAI,iDAAmB;oBAHvB;;uBAEG;yBACH;wBAEI,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;4BAC5B,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;wBAE9D,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BAC1E,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,YAAY,CAAC;wBAEjE,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC,CAAC;4BAC1E,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,YAAY,CAAC;wBAE/D,CAAC;wBAED,MAAM,CAAC,EAAE,CAAC;oBACd,CAAC;;;mBAAA;gBAKD,sBAAI,6CAAe;oBAHnB;;uBAEG;yBACH;wBACI,IAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,4BAA4B,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;wBACnG,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;4BACV,MAAM,IAAI,KAAK,CAAC,gDAA8C,IAAI,CAAC,cAAc,CAAC,IAAI,SAAI,IAAI,CAAC,mBAAqB,CAAC,CAAC;wBAE1H,MAAM,CAAC,QAAQ,CAAC;oBACpB,CAAC;;;mBAAA;gBAED,wEAAwE;gBACxE,iBAAiB;gBACjB,wEAAwE;gBAExE;;;mBAGG;gBACH,yCAAc,GAAd,UAAe,MAAqB;oBAChC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC7F,CAAC;gBAED;;mBAEG;gBACH,yCAAc,GAAd,UAAe,MAAqB;oBAChC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC7F,CAAC;gBAED;;;;;;;;;;;;;mBAaG;gBACH,iDAAsB,GAAtB,UAAuB,SAAwB;oBAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBACzB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;oBAEnE,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBACnC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;oBAE1F,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;wBAClD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;oBAEnD,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;wBACrD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;oBACpF,CAAC;gBACL,CAAC;gBAED;;;;;;;;;;;;;;mBAcG;gBACH,qDAA0B,GAA1B,UAA2B,aAA4B;oBACnD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBACzB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;oBAE9E,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBACnC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;oBAEvF,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;wBAClD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;oBAExE,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;wBACrD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;oBACvE,CAAC;gBACL,CAAC;gBAED,wEAAwE;gBACxE,kBAAkB;gBAClB,wEAAwE;gBAExE;;;;mBAIG;gBACK,6CAAkB,GAA1B,UAA2B,WAAwC;oBAC/D,IAAM,wBAAwB,GAAG,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,EAAE,CAAC;oBAClF,EAAE,CAAC,CAAC,OAAO,WAAW,KAAK,UAAU,CAAC;wBAClC,MAAM,CAAa,WAAY,CAAC,wBAAwB,CAAC,CAAC;oBAC9D,EAAE,CAAC,CAAC,OAAO,WAAW,KAAK,QAAQ,CAAC;wBAChC,MAAM,CAAU,WAAW,CAAC;oBAEhC,kEAAkE;oBAClE,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBACL,uBAAC;YAAD,CAheA,AAgeC,IAAA;;QAAA,CAAC;;;;;;;;;QC9dF,CAAC;;;;;;;;;;YCvBD;;eAEG;YACH;gBAuCI,wEAAwE;gBACxE,cAAc;gBACd,wEAAwE;gBAExE,uBAAY,IAAuB;oBAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;oBACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC;gBAChC,CAAC;gBASD,sBAAI,+BAAI;oBAPR,wEAAwE;oBACxE,YAAY;oBACZ,wEAAwE;oBAExE;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;oBAClH,CAAC;;;mBAAA;gBAKD,sBAAI,oCAAS;oBAHb;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC;oBAC1C,CAAC;;;mBAAA;gBAKD,sBAAI,kCAAO;oBAHX;;uBAEG;yBACH;wBAAA,iBAsBC;wBApBG,8DAA8D;wBAC9D,IAAI,mBAAmB,GAAa,EAAE,CAAC;wBACvC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,YAAY,KAAK,CAAC,CAAC,CAAC;4BACjC,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC;wBACxC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,2GAA2G;4BAC3G,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC;4BAChE,IAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;4BACrD,IAAM,wBAAwB,GAAG,eAAe,YAAY,KAAK,GAAG,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;4BACnH,mBAAmB,GAAG,wBAAwB,CAAC,GAAG,CAAC,UAAC,CAAM,IAAK,OAAA,MAAM,CAAC,CAAC,CAAC,EAAT,CAAS,CAAC,CAAC;wBAC9E,CAAC;wBAED,IAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,mBAAmB,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAvD,CAAuD,CAAC,CAAC;wBACtH,IAAM,kBAAkB,GAAG,mBAAmB,CAAC,MAAM,CAAC,UAAA,kBAAkB,IAAI,OAAA,CAAC,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,KAAK,kBAAkB,EAA1C,CAA0C,CAAC,EAAvF,CAAuF,CAAC,CAAC;wBACrK,EAAE,CAAC,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,4CAA4C;4BAC5C,MAAM,IAAI,KAAK,CAAC,YAAS,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,EAAE,uDAAmD,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC7J,CAAC;wBAED,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC,CAAC;oBAClD,CAAC;;;mBAAA;gBAED;;;mBAGG;gBACH,yCAAiB,GAAjB,UAAkB,YAAgB;oBAAlC,iBA4BC;oBA5BiB,6BAAA,EAAA,gBAAgB;oBAE9B,IAAM,GAAG,GAA8B,EAAE,CAAC;oBAE1C,yEAAyE;oBACzE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,YAAY,KAAK,CAAC,CAAC,CAAC;wBACjC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,UAAU,IAAI,OAAA,GAAG,CAAC,UAAU,CAAC,GAAG,YAAY,EAA9B,CAA8B,CAAC,CAAC;oBAExE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,2GAA2G;wBAC3G,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC;wBAChE,IAAM,iBAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;wBACrD,EAAE,CAAC,CAAC,iBAAe,YAAY,KAAK,CAAC,CAAC,CAAC;4BACnC,iBAAe,CAAC,OAAO,CAAC,UAAA,UAAU,IAAI,OAAA,GAAG,CAAC,UAAU,CAAC,GAAG,YAAY,EAA9B,CAA8B,CAAC,CAAC;wBAC1E,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,MAAM,CAAC,IAAI,CAAC,iBAAe,CAAC,CAAC,OAAO,CAAC,UAAA,UAAU,IAAI,OAAA,GAAG,CAAC,UAAU,CAAC,GAAG,iBAAe,CAAC,UAAU,CAAC,EAA7C,CAA6C,CAAC,CAAC;wBACtG,CAAC;oBACL,CAAC;oBAED,+CAA+C;oBAC/C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAC,UAAU,EAAE,GAAG;wBAC3C,IAAM,MAAM,GAAG,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,KAAK,GAAG,EAA3B,CAA2B,CAAC,CAAC;wBACvF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,YAAS,KAAI,CAAC,KAAK,GAAG,IAAI,GAAG,KAAI,CAAC,KAAK,GAAG,KAAK,GAAG,EAAE,0DAAoD,GAAK,CAAC,CAAC;wBAEnI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;wBACnC,MAAM,CAAC,UAAU,CAAC;oBACtB,CAAC,EAAE,EAA+B,CAAC,CAAC;gBACxC,CAAC;gBAEL,oBAAC;YAAD,CAjIA,AAiIC,IAAA;;QAAA,CAAC;;;;;;;;;QCtDD,CAAC;;;;;;;;;QCjDF,CAAC;;;;;;;;;;YC3BD;;eAEG;YACH;gBAwDI,wEAAwE;gBACxE,cAAc;gBACd,wEAAwE;gBAExE,0BAAY,KAAoB,EACpB,OAAyB,EACzB,SAA6B,EAC7B,IAA0B;oBAHtC,iBAiBC;oBAbG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;oBAChD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC;oBAChC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;oBACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;wBAC3B,QAAQ,CAAC,sBAAsB,GAAG,KAAI,CAAC;oBAC3C,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;wBACvB,MAAM,CAAC,gBAAgB,GAAG,KAAI,CAAC;oBACnC,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,wEAAwE;gBACxE,iBAAiB;gBACjB,wEAAwE;gBAExE;;mBAEG;gBACH,iCAAM,GAAN;oBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;wBACX,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;oBAEvF,MAAM,CAAC,IAAK,IAAI,CAAC,IAAY,CAAC;gBAClC,CAAC;gBAQD,sBAAI,oCAAM;oBANV;;;;;uBAKG;yBACH;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC;4BAChC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;wBAE7B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;oBAC7B,CAAC;;;mBAAA;gBAEL,uBAAC;YAAD,CA1GA,AA0GC,IAAA;;QAAA,CAAC;;;;;;;;;QCvFF,CAAC;;;;;;;;;;YC1BD;eACG;YACH;gBAOI,eAAY,IAAY;oBACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,CAAC;gBAED,sBAAI,4BAAS;yBAAb;wBACI,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC;oBAChE,CAAC;;;mBAAA;gBAED,sBAAI,yBAAM;yBAAV;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAChC,CAAC;;;mBAAA;gBAEL,YAAC;YAAD,CAnBA,AAmBC,IAAA;;QAAA,CAAC;;;;;;;;;;YClBF;eACG;YACH;gBAQI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,kBAAoB,UAAsB;oBAAtB,eAAU,GAAV,UAAU,CAAY;oBAV1C,4EAA4E;oBAC5E,aAAa;oBACb,4EAA4E;oBAE5E,YAAO,GAAY,EAAE,CAAC;gBAOtB,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E,+BAAY,GAAZ,UAAa,KAAY;oBACrB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;wBAClB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;oBAEjE,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;oBACpB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7B,CAAC;gBAED,2BAAQ,GAAR,UAAS,KAAY;oBACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7B,CAAC;gBAED,sBAAI,kCAAY;yBAAhB;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,MAAM,EAAZ,CAAY,CAAC,CAAC;oBACtD,CAAC;;;mBAAA;gBAED,sBAAI,+BAAS;yBAAb;wBACI,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,MAAM,EAAZ,CAAY,CAAC,CAAC;wBACvD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;4BACP,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;wBAE9C,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC;;;mBAAA;gBAED,kCAAe,GAAf,UAAgB,IAAY;oBACxB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,IAAI,EAAnB,CAAmB,CAAC,CAAC;gBAC3D,CAAC;gBAED,oCAAiB,GAAjB,UAAkB,eAAuB,EAAE,kBAA0B;oBACjE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,KAAK;wBAC1B,MAAM,CAAC,KAAK,CAAC,eAAe,KAAK,eAAe,IAAI,KAAK,CAAC,kBAAkB,KAAK,kBAAkB,CAAC;oBACxG,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACH,2CAAwB,GAAxB,UAAyB,KAAY;oBACjC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACjB,4CAA4C;wBAC5C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;oBAE1B,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,eAAe,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBAE3D,IAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;wBAChE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;4BACb,MAAM,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,eAAe,qBAAiB,CAAC,CAAC;wBAEtE,IAAM,oBAAoB,GAAG,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC;wBACxE,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC;4BACtB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;wBAEpF,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC,2BAA2B,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;4BAC5E,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,KAAK,CAAC,eAAe,GAAG,GAAG,GAAG,KAAK,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,CAAC;wBAE3H,IAAM,QAAQ,GAAG,oBAAoB,CAAC,4BAA4B,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;wBAC7F,MAAM,CAAC,QAAQ,CAAC,qBAAqB,CAAC;oBAC1C,CAAC;oBAED,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAML,eAAC;YAAD,CArFA,AAqFC,IAAA;;QAAA,CAAC;;;;;;;;;;YCzFF;gBAAA;gBAyCA,CAAC;gBAvCU,gBAAO,GAAd,UAAqB,KAAU,EAAE,gBAAgC;oBAC7D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,YAAY,EAAE,KAAK;wBACpC,IAAM,GAAG,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;wBACpC,IAAI,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,GAAG,EAAZ,CAAY,CAAC,CAAC;wBACnD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;4BACX,OAAO,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;4BACjC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC/B,CAAC;wBACD,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC1B,MAAM,CAAC,YAAY,CAAC;oBACxB,CAAC,EAAE,EAAkC,CAAC,CAAC;gBAC3C,CAAC;gBAED;;mBAEG;gBACI,kBAAS,GAAhB,UAAiB,KAAU;oBACvB,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,SAAS,CAAC;wBAC3B,MAAM,CAAC,KAAK,CAAC;oBAEjB,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC;wBAC1B,MAAM,CAAC,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,GAAG,CAAC;oBAE7C,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC;wBAC1B,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;oBAErB,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACI,kBAAS,GAAhB,UAAiB,IAAW,EAAE,MAAa;oBACvC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,MAAM,EAAE,KAAK;wBACrC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC/B,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC,EAAE,EAAmB,CAAC,CAAC;gBAC5B,CAAC;gBAEL,eAAC;YAAD,CAzCA,AAyCC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;YCnCF;;;eAGG;YACH;gBAEI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,0CAAoB,MAAc,EACd,QAAkB,EAClB,YAA2B,EAC3B,kBAAuC,EACvC,sBAA+B;oBAJ/B,WAAM,GAAN,MAAM,CAAQ;oBACd,aAAQ,GAAR,QAAQ,CAAU;oBAClB,iBAAY,GAAZ,YAAY,CAAe;oBAC3B,uBAAkB,GAAlB,kBAAkB,CAAqB;oBACvC,2BAAsB,GAAtB,sBAAsB,CAAS;gBACnD,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E,oDAAS,GAAT,UAAU,aAAoB;oBAC1B,iDAAiD;oBACjD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAC1E,CAAC;gBAED,4EAA4E;gBAC5E,kBAAkB;gBAClB,4EAA4E;gBAE5E;;;mBAGG;gBACK,4DAAiB,GAAzB,UAA0B,aAAoB,EAAE,KAAY;oBAA5D,iBAiBC;oBAfG,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;oBAC/D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;wBACV,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;oBAEpF,IAAM,cAAc,GAAG,mBAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,UAAA,MAAM;wBACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;4BAAC,MAAM,CAAC;wBACtB,MAAM,CAAC,QAAQ,CAAC,iCAAiC,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,EAA1C,CAA0C,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB;oBAC5I,CAAC,CAAC,CAAC;oBACH,mDAAmD;oBACnD,MAAM,CAAC,cAAc;yBAChB,GAAG,CAAC,UAAA,KAAK;wBACN,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;4BAAC,MAAM,CAAC;wBACtB,MAAM,CAAC,KAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;oBACxE,CAAC,CAAC;yBACD,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,CAAC,GAAG,EAAL,CAAK,CAAC,CAAC;gBAC9B,CAAC;gBAGD;;mBAEG;gBACK,oEAAyB,GAAjC,UAAkC,aAAoB,EAAE,KAAY,EAAE,QAAwB;oBAA9F,iBAmKC;oBAlKG,IAAM,MAAM,GAAQ,QAAQ,CAAC,MAAM,EAAE,CAAC;oBACtC,IAAI,OAAO,GAAG,KAAK,CAAC;oBAEpB,8BAA8B;oBAE9B,iDAAiD;oBACjD,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;wBAC9B,QAAQ,CAAC,OAAO;6BACX,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,CAAC,MAAM,CAAC,gBAAgB,EAAzB,CAAyB,CAAC;6BAC3C,OAAO,CAAC,UAAA,MAAM;4BACX,IAAM,aAAa,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,2CAA2C;4BACvH,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;gCAC/E,IAAM,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;gCACtE,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;gCACpC,OAAO,GAAG,IAAI,CAAC;4BACnB,CAAC;wBACL,CAAC,CAAC,CAAC;oBACX,CAAC,CAAC,KAAK;oBAEP,IAAI,CAAC,YAAY;yBACZ,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,UAAU,KAAK,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,IAAI,WAAW,CAAC,KAAK,CAAC,MAAM,EAAvG,CAAuG,CAAC;yBAC9H,GAAG,CAAC,UAAA,WAAW;wBACZ,IAAM,eAAe,GAAG,KAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;wBACjF,IAAM,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC;wBACzC,IAAM,MAAM,GAAG,CAAC,aAAa,GAAG,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC;wBAErE,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,aAAa,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BAClD,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC;4BAC1C,OAAO,GAAG,IAAI,CAAC;wBACnB,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEP,6DAA6D;oBAC7D,QAAQ,CAAC,uBAAuB,CAAC,OAAO,CAAC,UAAA,MAAM;wBAC3C,IAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC;wBACnC,IAAM,aAAa,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,2CAA2C;wBAClH,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,IAAI,MAAM,CAAC,YAAY,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;4BACrJ,IAAM,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;4BAEtE,6BAA6B;4BAC7B,4CAA4C;4BAC5C,8EAA8E;4BAC9E,EAAE;4BACF,oEAAoE;4BACpE,WAAW;4BACX,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;4BACpC,IAAI;4BACJ,OAAO,GAAG,IAAI,CAAC;wBACnB,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,IAAM,4BAA4B,GAAG,UAAC,MAAW,EAAE,SAA6B;wBAC5E,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;4BACtB,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;gCAC3B,IAAM,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;gCACnE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;oCAAC,MAAM,CAAC;gCAEnB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;oCAC/B,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;gCAEtD,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;gCAC3D,OAAO,GAAG,IAAI,CAAC;4BACnB,CAAC,CAAC,CAAC;4BACH,4BAA4B,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;wBACpF,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC;oBAEF,4BAA4B,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;oBAEzD,6BAA6B;oBAC7B,8BAA8B;oBAC9B,oBAAoB;oBACpB,EAAE,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBAChC,QAAQ,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,OAAO,CAAC,UAAA,MAAM;4BAChE,IAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC;4BACnC,IAAM,aAAa,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,iBAAiB,GAAG,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,2CAA2C;4BACpK,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,IAAI,MAAM,CAAC,YAAY,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;gCACrJ,IAAM,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;gCAEtE,6BAA6B;gCAC7B,4CAA4C;gCAC5C,8EAA8E;gCAC9E,EAAE;gCACF,oEAAoE;gCACpE,WAAW;gCACX,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;gCACpC,IAAI;gCACJ,OAAO,GAAG,IAAI,CAAC;4BACnB,CAAC;wBACL,CAAC,CAAC,CAAC;wBAEH,4BAA4B,CAAC,MAAM,EAAE,QAAQ,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;oBAClF,CAAC;oBAED,iFAAiF;oBACjF,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;wBAC/B,IAAM,aAAa,GAAG,KAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;wBACzF,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;4BAChB,IAAM,WAAW,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,IAAI,KAAK,MAAM,IAAI,WAAW,CAAC,KAAK,KAAK,aAAa,EAAlE,CAAkE,CAAC,CAAC;4BAC9H,IAAM,eAAe,GAAG,KAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;4BAC7E,IAAM,aAAa,GAAG,QAAQ,CAAC,YAAY,IAAI,QAAQ,CAAC,WAAW,CAAC;4BACpE,IAAM,MAAM,GAAG,CAAC,aAAa,GAAG,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC;4BAErE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gCACT,IAAI,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;gCACzC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;oCACd,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC;gCAC5C,CAAC;gCAED,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;oCAClB,MAAM,CAAC,IAAI,GAAG,YAAY,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC;gCAChD,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACJ,MAAM,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC;gCAClC,CAAC;gCAED,EAAE,CAAC,CAAC,CAAC,aAAa,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;oCACpC,OAAO,GAAG,IAAI,CAAC;4BACvB,CAAC;wBACL,CAAC;wBAED,+DAA+D;wBAC/D,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;4BACxB,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gCAChB,IAAM,KAAG,GAAU,EAAE,CAAC;gCACtB,IAAM,WAAW,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,IAAI,KAAK,YAAY,IAAI,WAAW,CAAC,KAAK,KAAK,aAAa,EAAxE,CAAwE,CAAC,CAAC;gCAEpI,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,IAAI,WAAW,CAAC,CAAC,CAAC;oCAClC,IAAM,YAAY,GAAG,WAAW,GAAG,WAAW,CAAC,YAAY,GAAG,QAAQ,CAAC,OAAiB,CAAC;oCACzF,IAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAsB,CAAC;oCACzD,IAAM,YAAU,GAAG,QAAQ,CAAC,QAAQ,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;oCAEnH,aAAa,CAAC,OAAO,CAAC,UAAA,OAAO;wCACzB,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;4CAChB,IAAM,UAAU,GAAG,aAAa,CAAC,IAAI,GAAG,GAAG,GAAG,YAAU,CAAC;4CACzD,IAAM,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC,gBAAgB,CAAC,CAAC;4CAC/F,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC;gDACtC,KAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wCACxB,CAAC;oCACL,CAAC,CAAC,CAAC;oCAEH,EAAE,CAAC,CAAC,KAAG,IAAI,KAAG,CAAC,MAAM,CAAC;wCAClB,MAAM,CAAC,YAAY,CAAC,GAAG,KAAG,CAAC;gCACnC,CAAC;4BACL,CAAC;wBACL,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;4BAC1B,IAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC;4BACnC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,KAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,YAAY,CAAC,EAAE,QAAQ,CAAC,gBAAgB,CAAC,CAAC;wBAC9I,CAAC;wBAED,sBAAsB;wBACtB,KAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAA,QAAQ;4BACpC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,KAAK,aAAa,CAAC,CAAC,CAAC;gCACnC,oEAAoE;gCACpE,4BAA4B;gCAC5B,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;gCAC/D,yBAAyB;gCACzB,wCAAwC;4BAC5C,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC;gBACnC,CAAC;gBAEL,uCAAC;YAAD,CA1NA,AA0NC,IAAA;;QAAA,CAAC;;;;;;;;;;YCtOF;;eAEG;YACH;gBAA6C,2CAAK;gBAG9C,iCAAY,MAAc;oBAA1B,YACI,iBAAO,SAEV;oBALD,UAAI,GAAG,yBAAyB,CAAC;oBAI7B,KAAI,CAAC,OAAO,GAAG,qBAAmB,MAAM,kEAA+D,CAAC;;gBAC5G,CAAC;gBAEL,8BAAC;YAAD,CARA,AAQC,CAR4C,KAAK,GAQjD;;QAAA,CAAC;;;;;;;;;QCqBD,CAAC;;;;;;;;;;YChCF;;eAEG;YACH;gBAAoD,kDAAK;gBAGrD,wCAAY,UAAkB,EAAE,WAAmB;oBAAnD,YACI,iBAAO,SAEV;oBALD,UAAI,GAAG,gCAAgC,CAAC;oBAIpC,KAAI,CAAC,OAAO,GAAM,UAAU,8EAAyE,WAAW,YAAS,CAAC;;gBAC9H,CAAC;gBAEL,qCAAC;YAAD,CARA,AAQC,CARmD,KAAK,GAQxD;;QAAA,CAAC;;;;;;;;;;YCTF;;eAEG;YACH;gBAAA;gBAiEA,CAAC;gBA/DG,4EAA4E;gBAC5E,wBAAwB;gBACxB,4EAA4E;gBAE5E;;;mBAGG;gBACI,8BAAkB,GAAzB,UAA0B,OAAsB,EAAE,YAAkC;oBAChF,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;wBACd,IAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;wBACvD,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;4BACtC,IAAM,gBAAgB,GAAkB;gCACpC,IAAI,EAAE,OAAO,CAAC,IAAI;gCAClB,IAAI,EAAE,SAAS,CAAC,IAAI;gCACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;gCAC5B,QAAQ,EAAE,SAAS,CAAC,QAAQ;gCAC5B,IAAI,EAAE,SAAS,CAAC,IAAI;gCACpB,GAAG,EAAE,SAAS,CAAC,QAAQ;6BAC1B,CAAC;4BACF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;wBAEpD,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,IAAM,gBAAgB,GAAkB;gCACpC,IAAI,EAAE,OAAO,CAAC,IAAI;gCAClB,IAAI,EAAE,SAAS,CAAC,IAAI;gCACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;gCAC5B,QAAQ,EAAE,SAAS,CAAC,QAAQ;gCAC5B,IAAI,EAAE,SAAS,CAAC,IAAI;gCACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;6BAC/B,CAAC;4BACF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;wBACpD,CAAC;oBACL,CAAC;oBACD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;gBACtC,CAAC;gBAED,4EAA4E;gBAC5E,yBAAyB;gBACzB,4EAA4E;gBAE5E;;mBAEG;gBACY,8BAAkB,GAAjC,UAAkC,GAAW;oBACzC,IAAM,YAAY,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACvC,IAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;oBAC7C,IAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACzC,IAAM,IAAI,GAAG,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,GAAG,OAAO,CAAC;oBAC7E,IAAM,SAAS,GAAG,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;oBAC/E,IAAA,oBAAoD,EAAnD,2BAAmB,EAAE,mBAAW,CAAoB;oBACrD,IAAA,mCAAqD,EAApD,gBAAQ,EAAE,gBAAQ,CAAmC;oBACtD,IAAA,2BAAqC,EAApC,YAAI,EAAE,YAAI,CAA2B;oBAE5C,MAAM,CAAC;wBACH,IAAI,EAAE,IAAI;wBACV,QAAQ,EAAE,QAAQ;wBAClB,QAAQ,EAAE,QAAQ;wBAClB,IAAI,EAAE,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,SAAS;wBACvC,QAAQ,EAAE,SAAS,IAAI,SAAS;qBACnC,CAAC;gBACN,CAAC;gBAEL,kBAAC;YAAD,CAjEA,AAiEC,IAAA;;QAAA,CAAC;;;;;;;;;QCxCD,CAAC;;;;;;;;;;YC9BF;;;;;;eAMG;YACH;gBAAA;gBA0EA,CAAC;gBAnEG;;mBAEG;gBACI,+BAAiB,GAAxB;oBACI,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC;gBAED;;;mBAGG;gBACI,kBAAI,GAAX,UAAY,IAAY;oBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;wBACxB,MAAM,IAAI,KAAK,CAAC,mGAAgG,IAAI,SAAK,CAAC,CAAC;oBAE/H,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAED;;mBAEG;gBACI,2BAAa,GAApB,UAAqB,OAAe;oBAChC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;wBACxB,MAAM,IAAI,KAAK,CAAC,0GAAuG,OAAO,SAAK,CAAC,CAAC;oBAEzI,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAED;;mBAEG;gBACI,yBAAW,GAAlB,UAAmB,OAAe;oBAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;wBACxB,MAAM,IAAI,KAAK,CAAC,wGAAqG,OAAO,SAAK,CAAC,CAAC;oBAEvI,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAED;;mBAEG;gBACI,yBAAW,GAAlB,UAAmB,OAAe;oBAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;wBACxB,MAAM,IAAI,KAAK,CAAC,wGAAqG,OAAO,SAAK,CAAC,CAAC;oBAEvI,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAED;;mBAEG;gBACI,uBAAS,GAAhB,UAAiB,OAAe;oBAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;wBACxB,MAAM,IAAI,KAAK,CAAC,yGAAsG,OAAO,SAAK,CAAC,CAAC;oBAExI,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACI,4BAAc,GAArB,UAAsB,IAAY;oBAC9B,+BAA+B;oBAC/B,sIAAsI;oBACtI,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAEL,oBAAC;YAAD,CA1EA,AA0EC,IAAA;YAxEG;;eAEG;YACI,kBAAI,GAAqB,SAAS,CAAC;;QAqE7C,CAAC;;;;;;;;;;;;;;YC9EF;;eAEG;YACH;gBAEI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,gBAAoB,OAAsB;oBAAtB,YAAO,GAAP,OAAO,CAAe;gBAC1C,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,yBAAQ,GAAR,UAAS,KAAa,EAAE,UAAkB;oBACtC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU;wBACvB,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;wBACvD,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,sBAAoB,KAAK,IAAG,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,EAAE,CAAE,CAAC,CAAC;gBACpJ,CAAC;gBAED;;mBAEG;gBACH,+BAAc,GAAd,UAAe,KAAa,EAAE,UAAkB;oBAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU;wBACvB,IAAI,CAAC,OAAO,CAAC,oBAAoB;wBACjC,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;wBACvD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAiB,KAAK,IAAG,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,EAAE,CAAE,CAAC,CAAC;gBACnJ,CAAC;gBAED;;mBAEG;gBACH,8BAAa,GAAb,UAAc,KAAU;oBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB;wBAChC,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;wBACvD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,+BAA+B,GAAG,KAAK,CAAC,CAAC;gBACnE,CAAC;gBAED;;mBAEG;gBACH,+BAAc,GAAd,UAAe,OAAe;oBAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB;wBAC9B,6BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;wBACvD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBAClC,CAAC;gBAED;;;mBAGG;gBACH,oBAAG,GAAH,UAAI,KAAkC,EAAE,OAAY;oBAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;wBAAC,MAAM,CAAC;oBAE1B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;wBACtB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;oBACxC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACZ,KAAK,KAAK;gCACN,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gCACrB,KAAK,CAAC;4BACV,KAAK,MAAM;gCACP,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gCACtB,KAAK,CAAC;4BACV,KAAK,MAAM;gCACP,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gCACtB,KAAK,CAAC;4BACV,KAAK,OAAO;gCACR,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gCACvB,KAAK,CAAC;wBACd,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;;mBAGG;gBACO,gCAAe,GAAzB,UAA0B,UAAiB;oBACvC,IAAI,CAAC;wBACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;oBAEtC,CAAC;oBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACb,MAAM,CAAC,UAAU,CAAC;oBACtB,CAAC;gBACL,CAAC;gBAEL,aAAC;YAAD,CA9FA,AA8FC,IAAA;;QAAA,CAAC;;;;;;;;;;YCpGF;;eAEG;YACH;gBAAoD,kDAAK;gBAGrD;oBAAA,YACI,iBAAO,SAEV;oBALD,UAAI,GAAG,gCAAgC,CAAC;oBAIpC,KAAI,CAAC,OAAO,GAAG,6GAA6G,CAAC;;gBACjI,CAAC;gBAEL,qCAAC;YAAD,CARA,AAQC,CARmD,KAAK,GAQxD;;QAAA,CAAC;;;;;;;;;;YCXF;;eAEG;YACH;gBAAgD,8CAAK;gBAGjD;oBAAA,YACI,iBAAO,SAEV;oBALD,UAAI,GAAG,4BAA4B,CAAC;oBAIhC,KAAI,CAAC,OAAO,GAAG,yFAAyF,CAAC;;gBAC7G,CAAC;gBAEL,iCAAC;YAAD,CARA,AAQC,CAR+C,KAAK,GAQpD;;QAAA,CAAC;;;;;;;;;;YCXF;;eAEG;YACH;gBAAuD,qDAAK;gBAGxD,2CAAY,QAAgB,EAAE,UAAkB;oBAAhD,YACI,iBAAO,SAEV;oBALD,UAAI,GAAG,mCAAmC,CAAC;oBAIvC,KAAI,CAAC,OAAO,GAAG,qBAAmB,QAAQ,8BAAyB,UAAU,aAAU,CAAC;;gBAC5F,CAAC;gBAEL,wCAAC;YAAD,CARA,AAQC,CARsD,KAAK,GAQ3D;;QAAA,CAAC;;;;;;;;;;YCTF;;eAEG;YACH;gBA0BI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,qBAAY,SAAiB,EAAE,IAAY,EAAE,WAAqB,EAAE,QAAiB;oBACjF,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;oBAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC7B,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,2BAAK,GAAL;oBACI,MAAM,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzG,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACI,kBAAM,GAAb,UAAc,aAA4B;oBACtC,MAAM,CAAC,IAAI,WAAW,CAClB,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EACvC,aAAa,CAAC,IAAI,EAClB,aAAa,CAAC,OAAO,EACrB,aAAa,CAAC,QAAQ,CACzB,CAAC;gBACN,CAAC;gBAEL,kBAAC;YAAD,CAhEA,AAgEC,IAAA;;QAAA,CAAC;;;;;;;;;;YCnEF;;eAEG;YACH;gBAgCI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,0BAAY,IAAY,EACZ,WAAqB,EACrB,qBAA+B,EAC/B,eAAuB,EACvB,QAAiB;oBAEzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;oBAC/B,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;oBACnD,IAAI,CAAC,mBAAmB,GAAG,eAAe,CAAC;oBAC3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC7B,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,gCAAK,GAAL;oBACI,MAAM,CAAC,IAAI,gBAAgB,CACvB,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,qBAAqB,EAC1B,IAAI,CAAC,mBAAmB,CAC3B,CAAC;gBACN,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACI,uBAAM,GAAb,UAAc,QAA4B;oBACtC,MAAM,CAAC,IAAI,gBAAgB,CACvB,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,qBAAqB,EAC9B,QAAQ,CAAC,mBAAmB,EAC5B,QAAQ,CAAC,QAAQ,CACpB,CAAC;gBACN,CAAC;gBAEL,uBAAC;YAAD,CAlFA,AAkFC,IAAA;;QAAA,CAAC;;;;;;;;;;YCvFF;;eAEG;YACH;gBAgBI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,0BAAY,IAAY,EAAE,UAAkB;oBACxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBACjC,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,gCAAK,GAAL;oBACI,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC5D,CAAC;gBAEL,uBAAC;YAAD,CApCA,AAoCC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;YC9BF;;eAEG;YACH;gBAsCI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,qBAAY,IAAY,EAAE,OAAwC,EAAE,WAAqB;oBA/BzF;;uBAEG;oBACH,YAAO,GAAmB,EAAE,CAAC;oBAE7B;;uBAEG;oBACH,YAAO,GAAkB,EAAE,CAAC;oBAE5B;;uBAEG;oBACH,gBAAW,GAAuB,EAAE,CAAC;oBAErC;;uBAEG;oBACH,gBAAW,GAAuB,EAAE,CAAC;oBAErC;;;;uBAIG;oBACH,gBAAW,GAAY,KAAK,CAAC;oBAOzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACV,IAAI,CAAC,OAAO,GAAI,OAAiB,CAAC,GAAG,CAAC,UAAA,MAAM;4BACxC,EAAE,CAAC,CAAC,MAAM,YAAY,2BAAY,CAAC,CAAC,CAAC;gCACjC,MAAM,CAAC,MAAM,CAAC;4BAClB,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,IAAI,2BAAY,CAAC,MAAM,CAAC,CAAC;4BACpC,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC;oBAED,EAAE,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC;wBAC1B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;gBACvC,CAAC;gBASD,sBAAI,oDAA2B;oBAP/B,4EAA4E;oBAC5E,YAAY;oBACZ,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,IAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,WAAW,EAAlB,CAAkB,CAAC,CAAC;wBACxE,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC;4BACjB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;wBAE5B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,UAAU;4BACrC,MAAM,CAAC,UAAU,CAAC,UAAU,KAAK,eAAe,CAAC,IAAI,CAAC;wBAC1D,CAAC,CAAC,CAAC;oBACP,CAAC;;;mBAAA;gBAED,sBAAI,2CAAkB;yBAAtB;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,WAAW,EAAlB,CAAkB,CAAC,CAAC;oBAC7D,CAAC;;;mBAAA;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,2BAAK,GAAL;oBACI,IAAM,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC1C,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,EAAE,EAAd,CAAc,CAAC,CAAC;oBAC5D,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,KAAK,EAAE,EAAb,CAAa,CAAC,CAAC;oBAC1D,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,KAAK,EAAE,EAAX,CAAW,CAAC,CAAC;oBAC9D,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,KAAK,EAAE,EAAX,CAAW,CAAC,CAAC;oBAC9D,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC;gBAED;;mBAEG;gBACH,gCAAU,GAAV,UAAW,OAAuB;oBAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAChD,CAAC;gBAED;;mBAEG;gBACH,mCAAa,GAAb,UAAc,SAAuB,EAAE,SAAuB;oBAC1D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC;gBAC9D,CAAC;gBAED;;mBAEG;gBACH,kCAAY,GAAZ,UAAa,cAA4B;oBACrC,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,cAAc,CAAC,IAAI,EAAnC,CAAmC,CAAC,CAAC;oBACrF,EAAE,CAAC,CAAC,WAAW,CAAC;wBACZ,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;gBAClE,CAAC;gBAED;;mBAEG;gBACH,mCAAa,GAAb,UAAc,OAAuB;oBAArC,iBAEC;oBADG,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAzB,CAAyB,CAAC,CAAC;gBACzD,CAAC;gBAED;;mBAEG;gBACH,oCAAc,GAAd,UAAe,SAA6B;oBAA5C,iBAEC;oBADG,SAAS,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAA1B,CAA0B,CAAC,CAAC;gBACzD,CAAC;gBAED;;mBAEG;gBACH,uCAAiB,GAAjB,UAAkB,WAA+B;oBAAjD,iBAIC;oBAHG,WAAW,CAAC,OAAO,CAAC,UAAA,GAAG;wBACnB,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC9D,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACH,gDAA0B,GAA1B,UAA2B,OAAuB;oBAC9C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,UAAU;wBACjD,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,UAAU,EAArC,CAAqC,CAAC,CAAC;oBAC1E,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACH,oCAAc,GAAd,UAAe,WAA+B;oBAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBAC5D,CAAC;gBAED;;mBAEG;gBACH,sCAAgB,GAAhB,UAAiB,iBAAmC;oBAChD,IAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,iBAAiB,CAAC,IAAI,EAA1C,CAA0C,CAAC,CAAC,CAAC,uBAAuB;oBACnH,EAAE,CAAC,CAAC,EAAE,CAAC;wBACH,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjE,CAAC;gBAED;;mBAEG;gBACH,uCAAiB,GAAjB,UAAkB,aAAiC;oBAAnD,iBAEC;oBADG,aAAa,CAAC,OAAO,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAjC,CAAiC,CAAC,CAAC;gBAC3E,CAAC;gBAED;;mBAEG;gBACH,iCAAW,GAAX,UAAY,WAAwB;oBAChC,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,EAA/B,CAA+B,CAAC,CAAC;oBAC1E,EAAE,CAAC,CAAC,KAAK,CAAC;wBACN,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC5D,CAAC;gBAED;;;mBAGG;gBACH,wCAAkB,GAAlB,UAAmB,WAAwB,EAAE,eAAiC;oBAC1E,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,YAAY;wBACnC,IAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,QAAQ,KAAK,YAAY,CAAC,IAAI,EAA7C,CAA6C,CAAC,CAAC;wBAC7G,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;4BAChB,MAAM,CAAC,KAAK,CAAC,CAAC,4DAA4D;wBAE9E,MAAM,CAAE,YAAY,CAAC,IAAI,KAAK,cAAc,CAAC,QAAQ;4BAC7C,YAAY,CAAC,IAAI,KAAK,WAAW,CAAC,aAAa,CAAC,cAAc,CAAC;4BAC/D,YAAY,CAAC,OAAO,KAAK,cAAc,CAAC,OAAO;4BAC/C,CAAC,CAAC,YAAY,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;4BAC9G,YAAY,CAAC,UAAU,KAAK,cAAc,CAAC,UAAU;4BACrD,YAAY,CAAC,QAAQ,KAAK,cAAc,CAAC,QAAQ;4BACjD,yDAAyD;4BACzD,YAAY,CAAC,WAAW,KAAK,cAAc,CAAC,WAAW,CAAC;oBACpE,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;;mBAIG;gBACI,kBAAM,GAAb,UAAc,cAA8B,EAAE,WAAwB;oBAClE,IAAM,WAAW,GAAG,IAAI,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAC/D,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;wBACjC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,2BAAY,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC7F,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,WAAW,CAAC;gBACvB,CAAC;gBAEL,kBAAC;YAAD,CA7NA,AA6NC,IAAA;;QAAA,CAAC;;;;;;;;;;YCzOF;eACG;YACH;gBAAqD,mDAAK;gBAGtD;oBAAA,YACI,iBAAO,SAEV;oBALD,UAAI,GAAG,iCAAiC,CAAC;oBAIrC,KAAI,CAAC,OAAO,GAAG,4DAA4D,CAAC;;gBAChF,CAAC;gBAEL,sCAAC;YAAD,CARA,AAQC,CARoD,KAAK,GAQzD;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCOF;;eAEG;YACH;gBAYI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,8BAAsB,kBAAsC,EACtC,MAAuB,EACvB,MAAc;oBAFd,uBAAkB,GAAlB,kBAAkB,CAAoB;oBACtC,WAAM,GAAN,MAAM,CAAiB;oBACvB,WAAM,GAAN,MAAM,CAAQ;oBAhBpC,4EAA4E;oBAC5E,uBAAuB;oBACvB,4EAA4E;oBAE5E;;;uBAGG;oBACO,eAAU,GAAG,KAAK,CAAC;gBAS7B,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;;mBAIG;gBACH,sCAAO,GAAP;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC;wBAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,CAAC;oBACrD,CAAC;oBAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBAED;;mBAEG;gBACG,4CAAa,GAAnB;;;4BAMc,YAAY,oBAEZ,UAAU;;;;oCAPpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;oCAA7B,SAA6B,CAAC;;;;mDAEL,kFAAkF;oCAC7D,qBAAM,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAA;;uDAA9B,SAA8B;iDACrD,gBAAgB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,CAAC,EAApB,CAAoB,CAAC;oCACvE,qBAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,UAAM,SAAS;;gDACtC,iBAAiB;;;;4EAAG,+MAA6M,SAAS,OAAI;wDAC7M,qBAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAA;;wEAAnC,SAAmC;wDAC1E,sBAAO,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,OAAO,CAAC,EAAf,CAAe,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS;gEACzE,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;4DACjC,CAAC,CAAC,CAAC,EAAC;;;6CACP,CAAC,CAAC,EAAA;;oCANH,SAMG,CAAC;oCACJ,qBAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS;4CACtC,IAAM,YAAY,GAAG,kBAAe,SAAS,OAAG,CAAC;4CACjD,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;wCACpC,CAAC,CAAC,CAAC,EAAA;;oCAHH,SAGG,CAAC;oCAEJ,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;oCAA9B,SAA8B,CAAC;;;;oCAG/B,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;oCAAhC,SAAgC,CAAC;oCACjC,MAAM,OAAK,CAAC;wCAGZ,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;oCAApB,SAAoB,CAAC;;;;;;iBA4B5B;gBAED;;mBAEG;gBACG,+CAAgB,GAAtB;;;;4BACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gCAC5C,MAAM,IAAI,+DAA8B,EAAE,CAAC;4BAE/C,sBAAO,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;oCAC9B,KAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,IAAI,CAAC;oCACnD,KAAI,CAAC,kBAAkB,CAAC,WAAW,GAAG,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;oCACvF,KAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,UAAC,GAAQ;wCAC/C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4CACN,KAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;4CACpD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wCACrB,CAAC;wCACD,EAAE,EAAE,CAAC;oCACT,CAAC,CAAC,CAAC;gCACP,CAAC,CAAC,EAAC;;;iBACN;gBAED;;mBAEG;gBACG,gDAAiB,GAAvB;;;;4BACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;4BAE3C,sBAAO,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;oCAC9B,KAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,UAAC,GAAQ;wCAChD,EAAE,CAAC,CAAC,GAAG,CAAC;4CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wCAC1B,KAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;wCACpD,EAAE,EAAE,CAAC;oCACT,CAAC,CAAC,CAAC;gCACP,CAAC,CAAC,EAAC;;;iBACN;gBAED;;mBAEG;gBACG,kDAAmB,GAAzB;;;;4BACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;4BAE3C,sBAAO,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;oCAC9B,KAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAC,GAAQ;wCAClD,EAAE,CAAC,CAAC,GAAG,CAAC;4CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wCAC1B,KAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;wCACpD,EAAE,EAAE,CAAC;oCACT,CAAC,CAAC,CAAC;gCACP,CAAC,CAAC,EAAC;;;iBACN;gBAED;;mBAEG;gBACH,kDAAmB,GAAnB;oBACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gBACvD,CAAC;gBAED;;mBAEG;gBACH,oCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;oBAAvC,iBAuBC;oBAtBG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wBAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oBAEhD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,EAAE,EAAE,IAAI;wBAExB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;wBACxC,IAAM,OAAO,GAAG,IAAI,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAI,CAAC,mBAAmB,EAAE,GAAG,KAAI,CAAC,kBAAkB,CAAC,WAAW,GAAG,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;wBACrJ,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;4BAClC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS,EAAE,KAAK;gCAChC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,UAAW,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC7C,CAAC,CAAC,CAAC;wBACP,CAAC;wBACD,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,UAAC,GAAQ,EAAE,MAAW;4BACvC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACN,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gCAC9C,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gCAC/B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BACrB,CAAC;4BAED,EAAE,CAAC,MAAM,CAAC,CAAC;wBACf,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,qCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,eAAgC;;;4BAIhF,IAAI,EACJ,OAAO,EACP,MAAM,EACN,UAAU,EAEV,GAAG;;;;oCART,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;2CAEnC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;8CACnB,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAjC,CAAiC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;6CAC9D,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,GAAG,GAAG,KAAK,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;iDAC3C,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;0CAEtC,OAAO,CAAC,MAAM,GAAG,CAAC;0CACxB,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,SAAI,OAAO,WAAM,eAAe,GAAG,kBAAkB,GAAG,eAAe,CAAC,QAAQ,GAAG,GAAG,GAAG,EAAE,iBAAY,MAAM,MAAG;0CACrK,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,UAAK,eAAe,GAAG,kBAAkB,GAAG,eAAe,CAAC,QAAQ,GAAG,GAAG,GAAG,EAAE,qBAAkB;oCAE7I,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;6CAAjC,SAAiC;oCAChD,sBAAO,eAAe,GAAG,MAAM,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,SAAS,EAAC;;;;iBACzI;gBAED;;mBAEG;gBACG,qCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,UAAyB;;4BAIzE,eAAe,EACf,YAAY,EACZ,aAAa,EAEb,YAAY,EACZ,eAAe,EACf,GAAG;;;;oCATT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;sDAExB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC;mDACtD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;oDAChD,YAAY,CAAC,MAAM,CAAC,eAAe,CAAC;mDAErC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;sDACnC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;0CAC3E,YAAU,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,aAAQ,YAAY,UAAI,eAAe,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC,GAAG,EAAE,CAAE;oCAE1I,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,EAAA;;oCAApC,SAAoC,CAAC;;;;;iBACxC;gBAYD;;mBAEG;gBACG,qCAAM,GAAZ,UAAa,SAAiB,EAAE,UAAgC,EAAE,eAAuB;;4BAI/E,eAAe,EACf,UAAU,EAEV,GAAG;;;;oCANT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;sDAExB,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;iDAC7F,UAAU,YAAY,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAC,UAA4B,CAAC,GAAG,CAAC,EAAlC,CAAkC,CAAC,GAAG,eAAe;0CAE9H,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,eAAU,eAAiB;oCAC5F,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAED;;mBAEG;gBACG,qDAAsB,GAA5B,UAA6B,SAAiB,EAAE,WAAgB,EAAE,QAAa,EAAE,QAAiB;;4BAI1F,GAAG;;;;oCAHP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEtC,EAAE;oCACZ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wCACX,GAAG,GAAK,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,mCAAgC;6CACrF,sBAAoB,WAAW,yBAAoB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAC3H,sBAAoB,WAAW,UAAK,WAAW,QAAK,CAAA,CAAC;oCACjE,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,GAAG,GAAK,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAyB;6CAC9E,sBAAoB,WAAW,cAAS,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAChH,sBAAoB,WAAW,UAAK,WAAa,CAAA,CAAC;oCAC9D,CAAC;oCACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;oCACW,qBAAM,IAAI,CAAC,KAAK,CAAC,qCAAmC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAU,CAAC,EAAA;;8CAA5H,SAA4H;oCAC7J,sBAAO,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC;;;;iBAC/F;gBAED;;mBAEG;gBACG,8CAAe,GAArB,UAAsB,SAAiB;;;;;wCACd,qBAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,SAAS,CAAC,CAAC,EAAA;;mDAAxC,SAAwC;oCAC7D,sBAAO,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;iBAChE;gBAED;;mBAEG;gBACG,+CAAgB,GAAtB,UAAuB,UAAoB;;;4BAUjC,gBAAgB,EAChB,SAAS,EACT,UAAU,EACV,cAAc,EAGd,kBAAkB,EAClB,UAAU;;;;oCAhBhB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,6CAA6C;oCAE7C,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;wCAClC,MAAM,gBAAC,EAAE,EAAC;uDAGW,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,MAAI,SAAS,MAAG,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gDACtD,oEAAkE,IAAI,CAAC,MAAM,6BAAwB,gBAAgB,MAAG;iDACxH,qEAAmE,IAAI,CAAC,MAAM,MAAG;qDACjF,gHAAgH;wCACnJ,qIAAqI;yCACrI,yCAAuC,IAAI,CAAC,MAAM,gDAA2C,IAAI,CAAC,MAAM,MAAG,CAAA;yDACxE,2FAAyF,IAAI,CAAC,MAAM,gFAA6E;iDACjL,uJAAuJ;wCAC1L,kNAAkN;wCAClN,gOAAgO;oCAC1H,qBAAM,OAAO,CAAC,GAAG,CAAC;4CAC5G,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;4CACrB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;4CACtB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;4CAC1B,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;4CAC9B,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;yCACzB,CAAC,EAAA;;yCAN4F,SAM5F;oCAEF,yDAAyD;oCACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;wCACjB,MAAM,gBAAC,EAAE,EAAC;oCAEd,yCAAyC;oCACzC,sBAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAM,OAAO;gDACnC,WAAW;;8DAAG,IAAI,yBAAW,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;gDAE1D,gDAAgD;gDAChD,WAAW,CAAC,OAAO,GAAG,SAAS;qDAC1B,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,EAA3C,CAA2C,CAAC;qDAC/D,GAAG,CAAC,UAAA,QAAQ;oDAET,IAAM,SAAS,GAAG,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,YAAY;wDAC/C,MAAM,CAAE,YAAY,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;4DAC/C,YAAY,CAAC,aAAa,CAAC,KAAK,QAAQ,CAAC,aAAa,CAAC;4DACvD,YAAY,CAAC,iBAAiB,CAAC,KAAK,aAAa,CAAC;oDAC9D,CAAC,CAAC,CAAC;oDACH,IAAM,WAAW,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAA,MAAM;wDAC/C,MAAM,CAAE,MAAM,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;4DACzC,MAAM,CAAC,aAAa,CAAC,KAAK,QAAQ,CAAC,aAAa,CAAC,CAAC;oDAC9D,CAAC,CAAC,CAAC;oDACH,IAAM,QAAQ,GAAG,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,YAAY;wDAC9C,MAAM,CAAE,YAAY,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;4DAC/C,YAAY,CAAC,aAAa,CAAC,KAAK,QAAQ,CAAC,aAAa,CAAC;4DACvD,YAAY,CAAC,iBAAiB,CAAC,KAAK,QAAQ,CAAC;oDACzD,CAAC,CAAC,CAAC;oDAEH,IAAM,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;oDACxC,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;oDAC5C,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,0BAA0B,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC,0BAA0B,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,4BAA4B;oDACtL,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI,IAAI,QAAQ,CAAC,gBAAgB,CAAC,KAAK,SAAS,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,SAAS,CAAC;oDAChJ,YAAY,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,KAAK,CAAC;oDAC5D,YAAY,CAAC,SAAS,GAAG,SAAS,CAAC;oDACnC,YAAY,CAAC,WAAW,GAAG,WAAW,CAAC;oDACvC,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC;oDACjC,YAAY,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC,4CAA4C;oDACvE,MAAM,CAAC,YAAY,CAAC;gDACxB,CAAC,CAAC,CAAC;gDAEP,4BAA4B;gDAC5B,WAAW,CAAC,WAAW,GAAG,aAAa;qDAClC,MAAM,CAAC,UAAA,YAAY;oDAChB,MAAM,CAAE,YAAY,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;wDAC/C,YAAY,CAAC,iBAAiB,CAAC,KAAK,aAAa,CAAC;gDAC9D,CAAC,CAAC;qDACD,GAAG,CAAC,UAAA,cAAc;oDACf,MAAM,CAAC,IAAI,mCAAgB,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;gDAClG,CAAC,CAAC,CAAC;gDAEP,qDAAqD;gDACrD,WAAW,CAAC,WAAW,GAAG,aAAa;qDAClC,MAAM,CAAC,UAAA,YAAY;oDAChB,MAAM,CAAE,YAAY,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;wDAC/C,YAAY,CAAC,iBAAiB,CAAC,KAAK,aAAa,CAAC;gDAC9D,CAAC,CAAC;qDACD,GAAG,CAAC,UAAA,YAAY,IAAI,OAAA,IAAI,mCAAgB,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAArE,CAAqE,CAAC,CAAC,CAAC,2BAA2B;gDAE5H,+CAA+C;gDAC/C,WAAW,CAAC,OAAO,GAAG,SAAS;qDAC1B,MAAM,CAAC,UAAA,OAAO;oDACX,MAAM,CAAE,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;wDAC1C,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,EAAzC,CAAyC,CAAC,CAAC;wDACxF,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,EAAzC,CAAyC,CAAC,CAAC,CAAC;gDACrG,CAAC,CAAC;qDACD,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,YAAY,CAAC,EAArB,CAAqB,CAAC;qDACrC,MAAM,CAAC,UAAC,KAAK,EAAE,KAAK,EAAE,IAAI,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,EAA7B,CAA6B,CAAC,CAAC,SAAS;qDACvE,GAAG,CAAC,UAAA,WAAW;oDACZ,IAAM,WAAW,GAAG,SAAS;yDACxB,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,IAAI,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,EAAnF,CAAmF,CAAC;yDACtG,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,aAAa,CAAC,EAAtB,CAAsB,CAAC,CAAC;oDAE5C,MAAM,CAAC,IAAI,yBAAW,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,CAAC,uBAAuB,CAAC,CAAC;gDAC3G,CAAC,CAAC,CAAC;gDAEP,sBAAO,WAAW,EAAC;;6CACtB,CAAC,CAAC,EAAC;;;;iBACP;gBAED;;mBAEG;gBACG,uCAAQ,GAAd,UAAe,SAAiB;;4BACtB,GAAG;;;;0CAAG,oEAAkE,IAAI,CAAC,MAAM,4BAAuB,SAAS,MAAG;oCAC7G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;6CAArB,SAAqB;oCACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;iBACvC;gBAED;;mBAEG;gBACG,0CAAW,GAAjB,UAAkB,KAAkB;;;4BAI1B,iBAAiB,EACnB,GAAG,EAKD,iBAAiB;;;;oCATvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wDAEtB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,CAAC,EAAxC,CAAwC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;0CAChG,oBAAiB,KAAK,CAAC,IAAI,YAAM,iBAAmB;oCAC9D,GAAG,IAAI,KAAK,CAAC,OAAO;yCACf,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC;yCACjC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,uBAAoB,KAAK,CAAC,IAAI,SAAI,MAAM,CAAC,IAAI,qBAAc,MAAM,CAAC,IAAI,QAAI,EAA1E,CAA0E,CAAC;yCACzF,IAAI,CAAC,GAAG,CAAC,CAAC;wDACW,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,EAAhB,CAAgB,CAAC;oCAC1E,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;wCAC7B,GAAG,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC;oCAC9F,GAAG,IAAI,GAAG,CAAC;oCACX,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,wCAAS,GAAf,UAAgB,SAAiB;;4BACzB,GAAG;;;;0CAAG,kBAAe,SAAS,OAAG;oCACrC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,wCAAS,GAAf,UAAgB,SAAiB,EAAE,UAAkB;;4BAC3C,GAAG;;;;0CAAG,oEAAkE,IAAI,CAAC,MAAM,4BAAuB,SAAS,6BAAwB,UAAU,MAAG;oCAC/I,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;6CAArB,SAAqB;oCACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;iBACvC;gBAYD;;mBAEG;gBACG,wCAAS,GAAf,UAAgB,iBAAqC,EAAE,MAAoB;;4BAIjE,SAAS,EACT,GAAG;;4BAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;kCAC3F,mBAAgB,SAAS,eAAS,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAG;4BACjF,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,yCAAU,GAAhB,UAAiB,iBAAqC,EAAE,OAAuB;;;4BAIrE,OAAO;;;;oCAHb,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;8CAEhC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,iBAAwB,EAAE,MAAM,CAAC,EAAhD,CAAgD,CAAC;oCACvF,qBAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAA;;oCAA1B,SAA0B,CAAC;;;;;iBAC9B;gBAYD;;mBAEG;gBACG,2CAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,qBAA0C;;4BAExI,WAAW,EAUX,SAAS,EAUT,SAAS;;;;kDApB4B,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;gDAEpE,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;wCAC9B,SAAS,CAAC,IAAI,GAAG,qBAAqB,CAAC;oCAC3C,CAAC;oCAED,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,EAAC;;;;iBAC/D;gBAYD;;mBAEG;gBACG,2CAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,SAAuB;;4BAIrH,WAAW,EAUX,SAAS,EAgBP,GAAG;;;;oCA7BT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;kDAEP,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;yCAGxG,CAAA,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,WAAW,CAAA,EAA/C,wBAA+C;oCAC/C,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,yBAAkB,SAAS,CAAC,IAAI,OAAG,CAAC,EAAA;;oCAArF,SAAqF,CAAC;oCACtF,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,eAAS,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAG,CAAC,EAAA;;oCAAjG,SAAiG,CAAC;;;0CAG1F,mBAAgB,WAAW,CAAC,IAAI,wBAAkB,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,IAAI,CAAG;oCAC1G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;yCAElB,CAAA,SAAS,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,CAAA,EAAzC,yBAAyC;yCACrC,CAAA,SAAS,CAAC,QAAQ,KAAK,IAAI,CAAA,EAA3B,wBAA2B;oCAC3B,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,+BAAwB,SAAS,CAAC,IAAI,qBAAc,SAAS,CAAC,IAAI,QAAI,CAAC,EAAA;;oCAAxH,SAAwH,CAAC;;;yCAElH,CAAA,SAAS,CAAC,QAAQ,KAAK,KAAK,CAAA,EAA5B,yBAA4B;oCACnC,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,gCAAyB,SAAS,CAAC,IAAI,OAAG,CAAC,EAAA;;oCAA5F,SAA4F,CAAC;;;;;;iBAIxG;gBAED;;mBAEG;gBACG,4CAAa,GAAnB,UAAoB,WAAwB,EAAE,cAAsE;;;4BAI1G,cAAc;;;;oCAHpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;qDAEzB,cAAc,CAAC,GAAG,CAAC,UAAM,aAAa;;4CACzD,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,EAAC;;yCAC3F,CAAC;oCAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAYD;;mBAEG;gBACG,yCAAU,GAAhB,UAAiB,iBAAqC,EAAE,kBAAuC;;4BACrF,SAAS,EACT,UAAU;;wCADE,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;yCACpF,kBAAkB,YAAY,2BAAY,GAAG,kBAAkB,CAAC,IAAI,GAAG,kBAAkB;4BAC5G,sBAAO,IAAI,CAAC,KAAK,CAAC,mBAAgB,SAAS,yBAAkB,UAAU,OAAG,CAAC,EAAC;;;iBAC/E;gBAYD;;mBAEG;gBACG,0CAAW,GAAjB,UAAkB,iBAAqC,EAAE,oBAA6C;;;4BAI5F,YAAY;;;;oCAHlB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mDAE1B,oBAA8B,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,iBAAwB,EAAE,MAAa,CAAC,EAAxD,CAAwD,CAAC;oCAC5H,qBAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAA;;oCAA/B,SAA+B,CAAC;;;;;iBACnC;gBAED;;mBAEG;gBACG,gDAAiB,GAAvB,UAAwB,OAAoB;;4BAIlC,gBAAgB,iBAOhB,kBAAkB;;;;oCAVxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;uDAEvB,iVAEK,IAAI,CAAC,MAAM,gDAA2C,IAAI,CAAC,MAAM,MAAG;oCAC5E,qBAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAA;;oDAAlC,SAAkC;yCACpD,CAAA,aAAa,CAAC,MAAM,GAAG,CAAC,CAAA,EAAxB,wBAAwB;oCACxB,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,OAAO,CAAC,IAAI,6BAAsB,aAAa,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,OAAG,CAAC,EAAA;;oCAA1G,SAA0G,CAAC;;;yDAEpF,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,IAAG,GAAG,UAAU,CAAC,UAAU,GAAG,IAAG,EAAjC,CAAiC,CAAC;yCAC/F,CAAA,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA7B,wBAA6B;oCAC7B,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,OAAO,CAAC,IAAI,4BAAsB,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,EAAA;;oCAApG,SAAoG,CAAC;;;;;;iBAE5G;gBAYD;;mBAEG;gBACG,+CAAgB,GAAtB,UAAuB,iBAAqC,EAAE,UAA4B;;4BAIhF,SAAS,EACT,WAAW,EACX,qBAAqB,EACvB,GAAG;;4BANP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;0CACnF,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,IAAG,GAAG,MAAM,GAAG,IAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;oDACzD,UAAU,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,IAAG,GAAG,MAAM,GAAG,IAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;kCAChG,mBAAgB,SAAS,4BAAqB,UAAU,CAAC,IAAI,QAAI;iCACvE,kBAAgB,WAAW,OAAI,CAAA;iCAC/B,kBAAe,UAAU,CAAC,mBAAmB,WAAK,qBAAqB,MAAG,CAAA;4BAC9E,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;gCAAC,GAAG,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC;4BACpE,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,gDAAiB,GAAvB,UAAwB,iBAAqC,EAAE,WAA+B;;;4BAIpF,QAAQ;;;;oCAHd,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;+CAE/B,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,iBAAwB,EAAE,UAAU,CAAC,EAA3D,CAA2D,CAAC;oCAC3G,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAYD;;mBAEG;gBACG,6CAAc,GAApB,UAAqB,iBAAqC,EAAE,UAA4B;;4BAI9E,SAAS,EACT,GAAG;;4BAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;kCAC3F,mBAAgB,SAAS,6BAAsB,UAAU,CAAC,IAAI,OAAG;4BAC7E,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,8CAAe,GAArB,UAAsB,iBAAqC,EAAE,WAA+B;;;4BAIlF,QAAQ;;;;oCAHd,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;+CAE/B,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,iBAAwB,EAAE,UAAU,CAAC,EAAzD,CAAyD,CAAC;oCACzG,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED;;mBAEG;gBACG,0CAAW,GAAjB,UAAkB,SAAiB,EAAE,KAAkB;;4BAI7C,OAAO,EACP,GAAG;;;;oCAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;8CAEhC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,OAAI,UAAU,OAAG,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;0CACrE,aAAU,KAAK,CAAC,QAAQ,GAAG,SAAS,GAAG,EAAE,iBAAU,KAAK,CAAC,IAAI,gBAAS,SAAS,WAAK,OAAO,MAAG;oCAC1G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,wCAAS,GAAf,UAAgB,SAAiB,EAAE,SAAiB;;4BAI1C,GAAG;;;;oCAHT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEpC,kBAAe,SAAS,aAAM,SAAS,OAAG;oCACtD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACH,4CAAa,GAAb,UAAc,WAAwI;oBAClJ,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;wBACvB,KAAK,QAAQ;4BACT,EAAE,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gCAC1B,MAAM,CAAC,QAAQ,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;4BAC5E,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,WAAW,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;4BAC/E,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,OAAO,CAAC;wBACnB,KAAK,SAAS;4BACV,MAAM,CAAC,KAAK,CAAC;wBACjB,KAAK,SAAS,CAAC;wBACf,KAAK,KAAK;4BACN,MAAM,CAAC,KAAK,CAAC;wBACjB,KAAK,UAAU;4BACX,MAAM,CAAC,UAAU,CAAC;wBACtB,KAAK,QAAQ;4BACT,MAAM,CAAC,QAAQ,CAAC;wBACpB,KAAK,OAAO;4BACR,MAAM,CAAC,OAAO,CAAC;wBACnB,KAAK,QAAQ,CAAC;wBACd,KAAK,QAAQ;4BACT,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,SAAS;4BACV,0CAA0C;4BAC1C,6DAA6D;4BAC7D,EAAE;4BACF,6BAA6B;4BAC7B,yCAAyC;4BACzC,EAAE;4BACF,iCAAiC;4BACjC,6CAA6C;4BAC7C,EAAE;4BACF,WAAW;4BACP,MAAM,CAAC,SAAS,CAAC;wBACrB,IAAI;wBACR,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,UAAU;4BACX,MAAM,CAAC,UAAU,CAAC;wBACtB,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,cAAc;4BACf,MAAM,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;oBACpF,CAAC;oBAED,MAAM,IAAI,qEAAiC,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;gBAC/E,CAAC;gBAED;;mBAEG;gBACH,mDAAoB,GAApB,UAAqB,mBAAwB,EAAE,aAAkB;oBAE7D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,QAAQ,CAAC;wBACxC,MAAM,CAAC,mBAAmB,KAAK,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAC3D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,SAAS,CAAC;wBACzC,MAAM,CAAC,mBAAmB,KAAK,CAAC,CAAC,CAAC,aAAa,IAAI,aAAa,KAAK,OAAO,CAAC,CAAC;oBAClF,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,UAAU,CAAC;wBAC1C,MAAM,CAAC,mBAAmB,EAAE,KAAK,aAAa,CAAC;oBAEnD,MAAM,CAAC,mBAAmB,KAAK,aAAa,CAAC;gBACjD,CAAC;gBAED;;mBAEG;gBACG,uCAAQ,GAAd,UAAe,SAAiB;;;;wCAC5B,qBAAM,IAAI,CAAC,KAAK,CAAC,oBAAkB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAG,CAAC,EAAA;;oCAA5E,SAA4E,CAAC;;;;;iBAChF;gBASD,sBAAc,wCAAM;oBAPpB,4EAA4E;oBAC5E,oBAAoB;oBACpB,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAkB,CAAC;oBAClD,CAAC;;;mBAAA;gBAED;;mBAEG;gBACO,0CAAW,GAArB,UAAsB,aAA4B,EAAE,SAAqB;oBAAzE,iBAIC;oBAJmD,0BAAA,EAAA,aAAqB;oBACrE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK;wBAC7C,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;oBAC1E,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACO,mDAAoB,GAA9B,UAA+B,MAAoB,EAAE,YAA6B;oBAA7B,6BAAA,EAAA,oBAA6B;oBAC9E,IAAI,CAAC,GAAG,OAAI,MAAM,CAAC,IAAI,WAAK,MAAM,CAAC,IAAM,CAAC;oBAC1C,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC;wBAC3B,CAAC,IAAI,WAAW,CAAC;oBACrB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC;wBAC7C,CAAC,IAAI,gBAAgB,CAAC;oBAC1B,iDAAiD;oBACjD,2BAA2B;oBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;wBACf,CAAC,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;oBAC7C,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;wBAC1D,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BACrC,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC7C,CAAC,IAAI,WAAW,GAAG,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;wBAClE,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;4BAC9C,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC5C,CAAC,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;oBACL,CAAC;oBACD,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBAGL,2BAAC;YAAD,CAz4BA,AAy4BC,IAAA;;QAAA,CAAC;;;;;;;;;;YC75BF;;eAEG;YACH;gBAA6C,2CAAK;gBAG9C,iCAAY,UAAkB;oBAA9B,YACI,iBAAO,SAEV;oBALD,UAAI,GAAG,yBAAyB,CAAC;oBAI7B,KAAI,CAAC,OAAO,GAAG,oBAAkB,UAAU,uEAAoE,CAAC;;gBACpH,CAAC;gBAEL,8BAAC;YAAD,CARA,AAQC,CAR4C,KAAK,GAQjD;;QAAA,CAAC;;;;;;;;;;YCXF;;eAEG;YACH;gBAAA;gBAyIA,CAAC;gBAvIG,4EAA4E;gBAC5E,wBAAwB;gBACxB,4EAA4E;gBAE5E;;mBAEG;gBACI,6CAAqB,GAA5B,UAA6B,SAAgC,EAAE,aAAsB;oBACjF,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wBACX,MAAM,CAAC,SAAS,CAAC;oBAErB,IAAM,IAAI,GAAG,OAAO,SAAS,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,SAAiB,CAAC;oBACrF,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;wBAEjB,0EAA0E;wBAC1E,+GAA+G;wBAE/G,IAAM,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;wBACjC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;wBAClF,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;wBACzG,MAAM,CAAC,aAAa,CAAC;oBACzB,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACI,6CAAqB,GAA5B,UAA6B,KAAe;oBACxC,EAAE,CAAC,CAAC,KAAK,YAAY,IAAI,CAAC;wBACtB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;oBAElK,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACI,6CAAqB,GAA5B,UAA6B,KAAe;oBACxC,EAAE,CAAC,CAAC,KAAK,YAAY,IAAI,CAAC;wBACtB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;oBAEhK,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACI,yCAAiB,GAAxB,UAAyB,KAAiB;oBACtC,KAAK,GAAG,KAAK,YAAY,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,KAAK,CAAC,UAAU,EAAE,GAAG,GAAG,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC;oBACjH,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC5B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;6BAClB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC,CAAC,+DAA+D;6BACtG,IAAI,CAAC,GAAG,CAAC,CAAC;oBACnB,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACI,iDAAyB,GAAhC,UAAiC,KAAe;oBAC5C,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC5B,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC5B,CAAC;oBACD,EAAE,CAAC,CAAC,KAAK,YAAY,IAAI,CAAC,CAAC,CAAC;wBACxB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,GAAG;4BACtD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG;4BACpD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,GAAG;4BAC/C,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,GAAG,GAAG;4BAChD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,GAAG;4BAClD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;oBACrD,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACI,oDAA4B,GAAnC,UAAoC,KAAe;oBAC/C,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC5B,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC5B,CAAC;oBACD,EAAE,CAAC,CAAC,KAAK,YAAY,IAAI,CAAC,CAAC,CAAC;wBACxB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,GAAG,GAAG;4BACzD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG;4BACvD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,GAAG;4BAClD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,GAAG;4BACnD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,GAAG;4BACrD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;oBACxD,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACI,2CAAmB,GAA1B,UAA2B,KAAgB;oBACvC,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;wBACzB,MAAM,CAAE,KAAe;6BAClB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,CAAC,CAAC,EAAT,CAAS,CAAC;6BACnB,IAAI,CAAC,GAAG,CAAC,CAAC;oBACnB,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACI,2CAAmB,GAA1B,UAA2B,KAAiB;oBACxC,EAAE,CAAC,CAAC,KAAK,YAAY,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;wBACvD,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC5B,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,4EAA4E;gBAC5E,yBAAyB;gBACzB,4EAA4E;gBAE5E;;mBAEG;gBACY,2CAAmB,GAAlC,UAAmC,KAAa;oBAC5C,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;wBACX,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC;oBAEvB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACzB,CAAC;gBAEL,8BAAC;YAAD,CAzIA,AAyIC,IAAA;;QACD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YC5HD;;eAEG;YACH;gBA6CI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,yBAAY,OAAsB,EAAE,MAAc,EAAE,KAAW;oBAd/D;;uBAEG;oBACO,2BAAsB,GAAyB,EAAE,CAAC;oBAaxD,IAAI,CAAC,OAAO,GAAG,yBAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBAEnB,kDAAkD;oBAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;wBACnB,MAAM,IAAI,iDAAuB,CAAC,MAAM,CAAC,CAAC;oBAC9C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACvB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;oBAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACvB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;oBAElD,uEAAuE;oBACvE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;wBACP,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAChC,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;;mBAIG;gBACH,iCAAO,GAAP;oBAAA,iBA+BC;oBA7BG,0CAA0C;oBAC1C,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;wBAC9B,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;wBACzB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC3B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC/B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC/B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;qBAC1B,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;oBAE7B,kDAAkD;oBAClD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;wBAAC,OAAO,CAAC,OAAO,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;oBAC1D,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;wBAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;oBAEjE,6DAA6D;oBAC7D,+DAA+D;oBAC/D,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;wBAC9B,IAAM,UAAU,GAAG,IAAI,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,GAAQ;4BACnE,EAAE,CAAC,CAAC,GAAG,CAAC;gCAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BAC1B,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;4BAC7B,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC;gCACjC,KAAI,CAAC,kBAAkB,GAAG;oCACtB,EAAE,EAAE,CAAC;oCACL,UAAU,EAAE,IAAI,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC;oCAC9C,mBAAmB,EAAE,KAAK;iCAC7B,CAAC;4BACN,CAAC;4BACD,EAAE,EAAE,CAAC;wBACT,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,oCAAU,GAAhB;;;4BACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCACjB,MAAM,IAAI,iDAAuB,CAAC,OAAO,CAAC,CAAC;4BAE/C,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;4BACxB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;4BAC5B,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;4BACpC,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;;;;iBACpC;gBAED;;mBAEG;gBACG,2CAAiB,GAAvB;;;;;;oCACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCACjB,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,IAAI,iDAAuB,CAAC,OAAO,CAAC,CAAC,EAAC;oCAErC,qBAAM,IAAI,CAAC,0BAA0B,EAAE,EAAA;;yDAAvC,SAAuC;oCAClE,sBAAO,IAAI,2CAAoB,CAAC,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAC;;;;iBAC1E;gBAED;;mBAEG;gBACH,yCAAe,GAAf;oBACI,MAAM,CAAC;wBACH,MAAM,EAAE,IAAI,CAAC,KAAK;wBAClB,UAAU,EAAE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,GAAG,SAAS;wBACpF,IAAI,EAAE,IAAI,CAAC,UAAU;qBACxB,CAAC;gBACN,CAAC;gBAED;;;mBAGG;gBACH,mDAAyB,GAAzB,UAA0B,GAAW,EAAE,UAAyB;oBAC5D,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;wBAC/C,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBACrB,IAAM,iBAAiB,GAAU,EAAE,CAAC;oBACpC,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,GAAG,SAAS,GAAG,MAAM,EAAzB,CAAyB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC3F,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,UAAC,GAAW;wBACjD,IAAM,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;wBACxC,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;4BACzB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAM;gCACpB,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gCAC1B,MAAM,CAAC,GAAG,GAAG,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;4BAChD,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAClB,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAClC,CAAC;wBACD,MAAM,CAAC,GAAG,GAAG,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBAChD,CAAC,CAAC,CAAC,CAAC,kEAAkE;oBACtE,MAAM,CAAC,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;gBACpC,CAAC;gBAED;;mBAEG;gBACH,0CAAgB,GAAhB,UAAiB,UAAkB;oBAC/B,MAAM,CAAC,OAAI,UAAU,OAAG,CAAC;gBAC7B,CAAC;gBAED;;mBAEG;gBACH,yCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,OAAI,SAAS,OAAG,CAAC;gBAC5B,CAAC;gBAED;;mBAEG;gBACH,yCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,OAAI,SAAS,OAAG,CAAC;gBAC5B,CAAC;gBAED;;mBAEG;gBACH,gDAAsB,GAAtB,UAAuB,KAAU,EAAE,cAA8B;oBAC7D,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;wBACtC,MAAM,CAAC,IAAI,CAAC;oBAEhB,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;wBAElC,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,QAAQ;4BACrB,EAAE,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,iDAAuB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;4BACpE,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,iDAAuB,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;4BACvE,CAAC;wBAEL,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;wBAEjC,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACH,8CAAoB,GAApB,UAAqB,KAAU,EAAE,cAA8B;oBAC3D,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;wBAEhC,KAAK,yBAAW,CAAC,QAAQ;4BACrB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,EAAE,cAAc,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC;wBAEvG,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;wBAE5D,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAE7B,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;;;mBAIG;gBACO,oDAA0B,GAApC;oBAAA,iBAuCC;oBArCG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wBACjB,MAAM,IAAI,iDAAuB,CAAC,OAAO,CAAC,CAAC;oBAE/C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,EAAE,EAAE,IAAI;wBACxB,EAAE,CAAC,CAAC,KAAI,CAAC,kBAAkB,CAAC;4BACxB,MAAM,CAAC,EAAE,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC;wBACvC,kDAAkD;wBAClD,uDAAuD;wBACvD,eAAe;wBACf,4BAA4B;wBAC5B,wBAAwB;wBACxB,MAAM;wBACN,EAAE;wBACF,2BAA2B;wBAC3B,0BAA0B;wBAC1B,yCAAyC;wBAEzC,2DAA2D;wBAC3D,oCAAoC;wBACpC,+GAA+G;wBAC/G,uBAAuB;wBACvB,IAAI,YAAY,GAAuB;4BACnC,EAAE,EAAE,KAAI,CAAC,sBAAsB,CAAC,MAAM;4BACtC,UAAU,EAAE,KAAI,CAAC,UAAU;4BAC3B,mBAAmB,EAAE,KAAK;yBAC7B,CAAC;wBACF,YAAY,CAAC,eAAe,GAAG;4BAC3B,IAAI;4BACJ,yCAAyC;4BACzC,qBAAqB;4BACrB,KAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,KAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;4BACzF,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;wBAC7B,CAAC,CAAC;wBACF,KAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBAC/C,EAAE,CAAC,YAAY,CAAC,CAAC;wBACjB,IAAI;oBACR,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACO,0CAAgB,GAA1B;oBACI,IAAI,CAAC;wBACD,IAAI,CAAC,KAAK,GAAG,6BAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAE7C,CAAC;oBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,MAAM,IAAI,+DAA8B,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;oBACpE,CAAC;gBACL,CAAC;gBAEL,sBAAC;YAAD,CAtTA,AAsTC,IAAA;;QACD,CAAC;;;;;;;;;QCzUA,CAAC;;;;;;;;;;YCCF;;;eAGG;YACH;gBAiBI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,6BAAsB,MAAc,EACd,oBAAqC;oBAArC,qCAAA,EAAA,4BAAqC;oBADrC,WAAM,GAAN,MAAM,CAAQ;oBACd,yBAAoB,GAApB,oBAAoB,CAAiB;gBAC3D,CAAC;gBAMD,sBAAI,2CAAU;oBAJd,4EAA4E;oBAC5E,YAAY;oBACZ,4EAA4E;yBAE5E;wBACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;oBAC5B,CAAC;;;mBAAA;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;mBAGG;gBACH,qCAAO,GAAP;oBAAA,iBAkBC;oBAjBG,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;4BAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC;gCACnC,+DAA+D;gCAC/D,oDAAoD;gCACpD,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,MAAM;qCACxC,iBAAiB,EAAE;qCACnB,IAAI,CAAC,UAAA,mBAAmB;oCACrB,KAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;oCAC/C,MAAM,CAAC,mBAAmB,CAAC;gCAC/B,CAAC,CAAC,CAAC;4BACX,CAAC;4BACD,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC;wBAC3C,CAAC;wBACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;oBACrD,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;gBAC3C,CAAC;gBAED;;;;;mBAKG;gBACG,qCAAO,GAAb,UAAc,WAAwB;;;4BAClC,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,mBAAmB,CAAC;gCACzC,MAAM,gBAAC;4BAEX,sBAAO,WAAW,CAAC,OAAO,EAAE,EAAC;;;iBAChC;gBAED;;mBAEG;gBACG,2CAAa,GAAnB;;;4BACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;4BACxB,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;gCACzB,MAAM,gBAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAC;;;;iBACjD;gBAEL,0BAAC;YAAD,CAnFA,AAmFC,IAAA;;QAAA,CAAC;;;;;;;;;;YC1FF;;eAEG;YACH;gBAA6D,2DAAK;gBAG9D;oBAAA,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,yCAAyC,CAAC;oBAI7C,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,uCAAuC,CAAC,SAAS,CAAC,CAAC;oBAC/E,KAAI,CAAC,OAAO,GAAG,uDAAuD,CAAC;;gBAC3E,CAAC;gBAEL,8CAAC;YAAD,CATA,AASC,CAT4D,KAAK,GASjE;;QAAA,CAAC;;;;;;;;;;YCZF;;eAEG;YACH;gBAAsD,oDAAK;gBAGvD,0CAAY,MAAc;oBAA1B,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,kCAAkC,CAAC;oBAItC,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,gCAAgC,CAAC,SAAS,CAAC,CAAC;oBACxE,KAAI,CAAC,OAAO,GAAG,YAAU,MAAM,mDAAgD,CAAC;;gBACpF,CAAC;gBAEL,uCAAC;YAAD,CATA,AASC,CATqD,KAAK,GAS1D;;QAAA,CAAC;;;;;;;;;;YCZF;;eAEG;YACH;gBAAwD,sDAAK;gBAGzD,4CAAY,MAAc,EAAE,eAA4B,EAAE,aAA0B;oBAApF,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,oCAAoC,CAAC;oBAIxC,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,kCAAkC,CAAC,SAAS,CAAC,CAAC;oBAC1E,KAAI,CAAC,OAAO,GAAG,mCAAiC,MAAM,yBAAoB,eAAe,uCAAkC,aAAa,MAAG,CAAC;;gBAChJ,CAAC;gBAEL,yCAAC;YAAD,CATA,AASC,CATuD,KAAK,GAS5D;;QACD,CAAC;;;;;;;;;;YCbD;;eAEG;YACH;gBAAqD,mDAAK;gBAGtD;oBAAA,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,iCAAiC,CAAC;oBAIrC,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,+BAA+B,CAAC,SAAS,CAAC,CAAC;oBACvE,KAAI,CAAC,OAAO,GAAG,4DAA4D,CAAC;;gBAChF,CAAC;gBAEL,sCAAC;YAAD,CATA,AASC,CAToD,KAAK,GASzD;;QACD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCID;;eAEG;YACH;gBAcI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,6BAAsB,kBAAsC,EACtC,MAAsB,EACtB,MAAc;oBAFd,uBAAkB,GAAlB,kBAAkB,CAAoB;oBACtC,WAAM,GAAN,MAAM,CAAgB;oBACtB,WAAM,GAAN,MAAM,CAAQ;oBAlBpC,4EAA4E;oBAC5E,uBAAuB;oBACvB,4EAA4E;oBAE5E;;;uBAGG;oBACO,eAAU,GAAG,KAAK,CAAC;oBAWzB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,QAAQ,CAAC;gBACpD,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;mBAGG;gBACH,qCAAO,GAAP;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC;wBAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,CAAC;oBACrD,CAAC;oBAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBAED;;mBAEG;gBACG,2CAAa,GAAnB;;;4BAMc,gBAAgB;;;;oCAL1B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;oCAA7B,SAA6B,CAAC;;;;uDAED,gHAA4G,IAAI,CAAC,UAAU,MAAG;oCAClH,qBAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAA;;kDAAlC,SAAkC;oCACvE,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC,EAAA;;oCAA/D,SAA+D,CAAC;oCAEhE,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;oCAA9B,SAA8B,CAAC;;;;oCAG/B,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;oCAAhC,SAAgC,CAAC;oCACjC,MAAM,OAAK,CAAC;wCAGZ,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;oCAApB,SAAoB,CAAC;;;;;;iBAE5B;gBAED;;mBAEG;gBACG,8CAAgB,GAAtB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAChD,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC5C,MAAM,IAAI,+DAA8B,EAAE,CAAC;oCAE/C,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,IAAI,CAAC;oCACnD,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAA;;oCAArC,SAAqC,CAAC;;;;;iBACzC;gBAED;;mBAEG;gBACG,+CAAiB,GAAvB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;oCAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAA;;oCAA1B,SAA0B,CAAC;oCAC3B,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;iBACvD;gBAED;;mBAEG;gBACG,iDAAmB,GAAzB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;oCAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAA;;oCAA5B,SAA4B,CAAC;oCAC7B,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;iBACvD;gBAED;;mBAEG;gBACH,iDAAmB,GAAnB;oBACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gBACvD,CAAC;gBAED;;mBAEG;gBACH,mCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;oBAAvC,iBAkBC;oBAjBG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wBAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oBAEhD,iCAAiC;oBACjC,2CAA2C;oBAC3C,MAAM,CAAC,IAAI,OAAO,CAAQ,UAAC,EAAE,EAAE,IAAI;wBAC/B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;wBACxC,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,EAAE,UAAC,GAAQ,EAAE,MAAW;4BAC9E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACN,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gCAC9C,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gCAC/B,IAAI,CAAC,GAAG,CAAC,CAAC;4BACd,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;4BACpB,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,oCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,eAAgC;;;4BAIhF,IAAI,EACJ,OAAO,EACP,MAAM,EACN,GAAG,EAGH,UAAU;;;;oCAThB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;2CAEnC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;8CACnB,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAjC,CAAiC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;6CAC9D,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;0CACxD,OAAO,CAAC,MAAM,GAAG,CAAC;0CACxB,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,SAAI,OAAO,kBAAa,MAAM,WAAM,eAAe,GAAG,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAG;0CACzL,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,yBAAoB,eAAe,GAAG,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAG;iDAC5J,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;oCAClB,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;6CAAjC,SAAiC;oCACjE,EAAE,CAAC,CAAC,eAAe,CAAC;wCAChB,MAAM,gBAAC,MAAM,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAC;oCAE/C,sBAAO,MAAM,EAAC;;;;iBACjB;gBAED;;mBAEG;gBACG,oCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,UAAyB;;4BAIzE,YAAY,EACZ,eAAe,EACf,KAAK,EACL,YAAY,EACZ,eAAe,EACf,aAAa;;;;oCARnB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mDAE3B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;sDACnC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;4CACnF,YAAU,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,aAAQ,YAAY,UAAI,eAAe,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC,GAAG,EAAE,CAAE;mDACvH,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;sDAC9C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC;oDACrD,YAAY,CAAC,MAAM,CAAC,eAAe,CAAC;oCAC1D,qBAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,aAAa,CAAC,EAAA;;oCAAtC,SAAsC,CAAC;;;;;iBAC1C;gBAYD;;mBAEG;gBACG,oCAAM,GAAZ,UAAa,SAAiB,EAAE,UAAgC,EAAE,eAAuB;;4BAI/E,eAAe,EACf,UAAU,EAEV,GAAG;;;;oCANT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;sDAExB,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;iDAC7F,UAAU,YAAY,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAC,UAA4B,CAAC,GAAG,CAAC,EAAlC,CAAkC,CAAC,GAAG,eAAe;0CAE9H,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,eAAU,eAAiB;oCAC5F,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAED;;mBAEG;gBACG,oDAAsB,GAA5B,UAA6B,SAAiB,EAAE,WAAgB,EAAE,QAAa,EAAE,QAAiB;;4BAI1F,GAAG;;;;oCAHP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEtC,EAAE;oCACZ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wCACX,GAAG,GAAG,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,mCAAgC;6CACvF,sBAAoB,WAAW,yBAAoB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAC3H,sBAAoB,WAAW,UAAK,WAAW,QAAK,CAAA,CAAC;oCAC7D,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,GAAG,GAAG,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAyB;6CAChF,sBAAoB,WAAW,cAAS,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAChH,sBAAoB,WAAW,UAAK,WAAa,CAAA,CAAC;oCAC1D,CAAC;oCACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;oCACW,qBAAM,IAAI,CAAC,KAAK,CAAC,qCAAmC,SAAS,4BAAuB,QAAU,CAAC,EAAA;;8CAA/F,SAA+F;oCAChI,sBAAO,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC;;;;iBAC/F;gBAED;;mBAEG;gBACG,6CAAe,GAArB,UAAsB,SAAiB;;;;;wCACd,qBAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,SAAS,CAAC,CAAC,EAAA;;mDAAxC,SAAwC;oCAC7D,sBAAO,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;iBAChE;gBAED;;mBAEG;gBACG,8CAAgB,GAAtB,UAAuB,UAAoB;;4BASjC,gBAAgB,EAChB,SAAS,EACT,UAAU,EACV,UAAU,EAGV,cAAc,EACd,aAAa,EACb,cAAc;;;;oCAhBpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,6CAA6C;oCAC7C,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;wCAClC,MAAM,gBAAC,EAAE,EAAC;uDAGW,UAAU,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,GAAG,GAAG,IAAI,GAAG,GAAG,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gDACrD,oEAAkE,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,6BAAwB,gBAAgB,MAAG;iDAChK,qEAAmE,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,MAAG;iDACzH,mTAEuC,gBAAgB,uDAAkD,IAAI,CAAC,UAAU,oCAAiC;qDACzJ,yGAAuG,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,0CAAuC;oDACjM,+EAA6E,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,qCAAkC;qDAClK,8ZAG+B,IAAI,CAAC,UAAU,kCAA6B,IAAI,CAAC,MAAM,MAAG;oCACV,qBAAM,OAAO,CAAC,GAAG,CAAC;4CACpH,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;4CACrB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;4CACtB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;4CACtB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;4CAC1B,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;4CACzB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;yCAC7B,CAAC,EAAA;;yCAPoG,SAOpG;oCAEF,yDAAyD;oCACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;wCACjB,MAAM,gBAAC,EAAE,EAAC;oCAEd,yCAAyC;oCACzC,sBAAO,QAAQ,CAAC,GAAG,CAAC,UAAA,OAAO;4CACvB,IAAM,WAAW,GAAG,IAAI,yBAAW,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;4CAE3D,gDAAgD;4CAChD,WAAW,CAAC,OAAO,GAAG,SAAS;iDAC1B,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,EAA3C,CAA2C,CAAC;iDAC/D,GAAG,CAAC,UAAA,QAAQ;gDACT,IAAM,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,0BAA0B,CAAC,KAAK,SAAS,IAAI,QAAQ,CAAC,0BAA0B,CAAC,KAAK,IAAI,GAAG,CAAC,GAAG,GAAG,QAAQ,CAAC,0BAA0B,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;gDACzN,IAAM,WAAW,GAAG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,cAAY,QAAQ,CAAC,YAAY,CAAC,wBAAqB;uDACnG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,gBAAa,QAAQ,CAAC,YAAY,CAAC,0BAAsB;uDACxF,0BAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;gDAEnE,IAAM,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;gDACxC,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;gDAC5C,YAAY,CAAC,IAAI,GAAG,UAAU,CAAC;gDAC/B,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI,IAAI,QAAQ,CAAC,gBAAgB,CAAC,KAAK,SAAS,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,SAAS,CAAC;gDAChJ,YAAY,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,KAAK,CAAC;gDAC5D,yEAAyE;gDACzE,YAAY,CAAC,WAAW,GAAG,WAAW,CAAC;gDACvC,YAAY,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC,8BAA8B;gDACzD,YAAY,CAAC,QAAQ,GAAG,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,iBAAiB,CAAC,KAAM,QAAM,QAAQ,CAAC,YAAY,CAAC,SAAI,QAAQ,CAAC,aAAa,CAAG,EAArF,CAAqF,CAAC,CAAC;gDAC1I,MAAM,CAAC,YAAY,CAAC;4CACxB,CAAC,CAAC,CAAC;4CAEP,4BAA4B;4CAC5B,WAAW,CAAC,WAAW,GAAG,WAAW;iDAChC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,EAA7C,CAA6C,CAAC;iDACnE,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,IAAI,mCAAgB,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE,UAAU,CAAC,aAAa,CAAC,CAAC,EAA9E,CAA8E,CAAC,CAAC;4CAEvG,qDAAqD;4CACrD,WAAW,CAAC,WAAW,GAAG,aAAa;iDAClC,MAAM,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,EAA/C,CAA+C,CAAC;iDACvE,GAAG,CAAC,UAAA,YAAY,IAAI,OAAA,IAAI,mCAAgB,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAArE,CAAqE,CAAC,CAAC,CAAC,2BAA2B;4CAE5H,oDAAoD;4CACpD;;;;qDAIS;4CAET,+CAA+C;4CAC/C,WAAW,CAAC,OAAO,GAAG,SAAS;iDAC1B,MAAM,CAAC,UAAA,OAAO;gDACX,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;oDAC7C,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,EAAzC,CAAyC,CAAC,CAAC;oDACxF,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,EAAzC,CAAyC,CAAC,CAAC;oDACxF,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,iBAAiB,CAAC,KAAK,OAAO,CAAC,YAAY,CAAC,EAAhD,CAAgD,CAAC,CAAC,CAAC;4CACtF,CAAC,CAAC;iDACD,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,YAAY,CAAC,EAArB,CAAqB,CAAC;iDACrC,MAAM,CAAC,UAAC,KAAK,EAAE,KAAK,EAAE,IAAI,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,EAA7B,CAA6B,CAAC,CAAC,SAAS;iDACvE,GAAG,CAAC,UAAA,WAAW;gDACZ,IAAM,WAAW,GAAG,SAAS;qDACxB,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,IAAI,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,EAAnF,CAAmF,CAAC;qDACtG,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,aAAa,CAAC,EAAtB,CAAsB,CAAC,CAAC;gDAE5C,MAAM,CAAC,IAAI,yBAAW,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,CAAC,sBAAsB,CAAC,CAAC;4CAC1G,CAAC,CAAC,CAAC;4CAEP,MAAM,CAAC,WAAW,CAAC;wCACvB,CAAC,CAAC,EAAC;;;;iBACN;gBAED;;mBAEG;gBACG,sCAAQ,GAAd,UAAe,SAAiB;;4BACtB,GAAG;;;;0CAAG,oEAAkE,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,4BAAuB,SAAS,MAAG;oCACrJ,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;6CAArB,SAAqB;oCACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;iBACvC;gBAED;;mBAEG;gBACG,yCAAW,GAAjB,UAAkB,KAAkB;;;4BAI1B,iBAAiB,EACnB,GAAG,EAKD,iBAAiB;;;;oCATvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wDAEtB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,CAAC,EAAxC,CAAwC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;0CAChG,mCAAgC,IAAI,CAAC,UAAU,0BAAmB,KAAK,CAAC,IAAI,YAAM,iBAAmB;oCAC/G,GAAG,IAAI,KAAK,CAAC,OAAO;yCACf,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC;yCACjC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,uBAAoB,KAAK,CAAC,IAAI,SAAI,MAAM,CAAC,IAAI,qBAAc,MAAM,CAAC,IAAI,QAAI,EAA1E,CAA0E,CAAC;yCACzF,IAAI,CAAC,GAAG,CAAC,CAAC;wDACW,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC;oCACjG,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;wCAC7B,GAAG,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC;oCAC9F,GAAG,IAAI,GAAG,CAAC;oCACX,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,uCAAS,GAAf,UAAgB,SAAiB;;4BACzB,GAAG;;;;0CAAG,kBAAe,SAAS,OAAG;oCACrC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,uCAAS,GAAf,UAAgB,SAAiB,EAAE,UAAkB;;4BAC3C,GAAG;;;;0CAAG,qEAAmE,IAAI,CAAC,MAAM,8BAAyB,IAAI,CAAC,UAAU,4BAAuB,SAAS,6BAAwB,UAAU,MAAG;oCACxL,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;6CAArB,SAAqB;oCACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;iBACvC;gBAYD;;mBAEG;gBACG,uCAAS,GAAf,UAAgB,iBAAqC,EAAE,MAAoB;;4BAIjE,SAAS,EACT,GAAG;;4BAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;kCAC3F,mBAAgB,SAAS,eAAS,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,CAAG;4BACxF,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,wCAAU,GAAhB,UAAiB,iBAAqC,EAAE,OAAuB;;;4BAIrE,OAAO;;;;oCAHb,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;8CAEhC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,iBAAwB,EAAE,MAAM,CAAC,EAAhD,CAAgD,CAAC;oCACvF,qBAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAA;;oCAA1B,SAA0B,CAAC;;;;;iBAC9B;gBAYD;;mBAEG;gBACG,0CAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,qBAA0C;;4BAExI,WAAW,EAUX,SAAS,EAUT,SAAS;;;;kDApB4B,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;gDAEpE,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;wCAC9B,SAAS,CAAC,IAAI,GAAG,qBAAqB,CAAC;oCAC3C,CAAC;oCAED,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,EAAC;;;;iBAC/D;gBAYD;;mBAEG;gBACG,0CAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,SAAuB;;4BAIrH,WAAW,EAUX,SAAS,EAaL,GAAG,EAWH,GAAG;;;;oCArCX,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;kDAEP,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;yCAExG,CAAA,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI;wCACjC,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAA,EADjC,wBACiC;0CAEvB,mBAAgB,WAAW,CAAC,IAAI,0BAAmB,SAAS,CAAC,IAAI,OAAG;oCAC9E,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;wCACpC,GAAG,IAAI,WAAS,SAAS,CAAC,IAAM,CAAC;oCACrC,CAAC;oCACD,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;wCACpC,GAAG,IAAI,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC;oCAC1C,CAAC;oCACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;yCAGtB,CAAA,SAAS,CAAC,UAAU,KAAK,SAAS,CAAC,UAAU,CAAA,EAA7C,wBAA6C;0CACnC,mBAAgB,WAAW,CAAC,IAAI,0BAAmB,SAAS,CAAC,IAAI,OAAG;oCAC9E,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;wCACvB,GAAG,IAAI,gBAAgB,CAAC;oCAC5B,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,GAAG,IAAI,eAAe,CAAC;oCAC3B,CAAC;oCACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;yCAItB,CAAA,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,WAAW,CAAA,EAA/C,yBAA+C;yCAC3C,CAAA,CAAC,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,IAAI,KAAK,MAAM,CAAA,EAAnD,yBAAmD;oCACnD,qBAAM,IAAI,CAAC,KAAK,CAAC,uBAAoB,WAAW,CAAC,IAAI,6BAAsB,WAAW,CAAC,IAAI,aAAM,SAAS,CAAC,IAAI,OAAG,CAAC,EAAA;;oCAAnH,SAAmH,CAAC;oCACpH,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,0BAAmB,SAAS,CAAC,IAAI,kCAA2B,WAAW,CAAC,IAAI,gBAAY,CAAC,EAAA;;oCAA1I,SAA0I,CAAC;;yCAE3I,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,0BAAmB,SAAS,CAAC,IAAI,oBAAgB,CAAC,EAAA;;oCAAnG,SAAmG,CAAC;oCACpG,qBAAM,IAAI,CAAC,KAAK,CAAC,qBAAkB,WAAW,CAAC,IAAI,cAAU,CAAC,EAAA;;oCAA9D,SAA8D,CAAC;;;yCAInE,CAAA,SAAS,CAAC,OAAO,KAAK,SAAS,CAAC,OAAO,CAAA,EAAvC,yBAAuC;oCACvC,qBAAM,IAAI,CAAC,KAAK,CAAC,yBAAsB,WAAW,CAAC,IAAI,aAAM,SAAS,CAAC,IAAI,eAAS,SAAS,CAAC,OAAO,MAAG,CAAC,EAAA;;oCAAzG,SAAyG,CAAC;;;yCAG1G,CAAA,SAAS,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,CAAA,EAAzC,yBAAyC;yCACrC,CAAA,SAAS,CAAC,QAAQ,KAAK,IAAI,CAAA,EAA3B,yBAA2B;oCAC3B,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,+BAAwB,SAAS,CAAC,IAAI,qBAAc,SAAS,CAAC,IAAI,QAAI,CAAC,EAAA;;oCAAxH,SAAwH,CAAC;;;yCAElH,CAAA,SAAS,CAAC,QAAQ,KAAK,KAAK,CAAA,EAA5B,yBAA4B;oCACnC,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,WAAW,CAAC,IAAI,gCAAyB,SAAS,CAAC,IAAI,OAAG,CAAC,EAAA;;oCAA5F,SAA4F,CAAC;;;;;;iBAIxG;gBAED;;mBAEG;gBACG,2CAAa,GAAnB,UAAoB,WAAwB,EAAE,cAAsE;;;4BAI1G,cAAc;;;;oCAHpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;qDAEzB,cAAc,CAAC,GAAG,CAAC,UAAM,aAAa;;4CACzD,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,EAAC;;yCAC3F,CAAC;oCAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAYD;;mBAEG;gBACG,wCAAU,GAAhB,UAAiB,iBAAqC,EAAE,kBAAuC;;4BACrF,SAAS,EACT,UAAU;;wCADE,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;yCACpF,kBAAkB,YAAY,2BAAY,GAAG,kBAAkB,CAAC,IAAI,GAAG,kBAAkB;4BAC5G,sBAAO,IAAI,CAAC,KAAK,CAAC,mBAAgB,SAAS,kBAAW,UAAU,OAAG,CAAC,EAAC;;;iBACxE;gBAYD;;mBAEG;gBACG,yCAAW,GAAjB,UAAkB,iBAAqC,EAAE,oBAA6C;;;4BAI5F,YAAY;;;;oCAHlB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mDAE1B,oBAA8B,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,iBAAwB,EAAE,MAAa,CAAC,EAAxD,CAAwD,CAAC;oCAC5H,qBAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAA;;oCAA/B,SAA+B,CAAC;;;;;iBACnC;gBAED;;mBAEG;gBACG,+CAAiB,GAAvB,UAAwB,OAAoB;;4BAIlC,kBAAkB;;;;oCAHxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;yDAErB,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,OAAI,UAAU,CAAC,UAAU,OAAG,EAA5B,CAA4B,CAAC;oCAC9F,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,OAAO,CAAC,IAAI,uCAAgC,OAAO,CAAC,IAAI,YAAQ,CAAC,EAAA;;oCAAlG,SAAkG,CAAC;oCACnG,qBAAM,IAAI,CAAC,KAAK,CAAC,4BAAyB,OAAO,CAAC,IAAI,YAAQ,CAAC,EAAA;;oCAA/D,SAA+D,CAAC;yCAC5D,CAAA,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA7B,wBAA6B;oCAC7B,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,OAAO,CAAC,IAAI,4BAAsB,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,EAAA;;oCAApG,SAAoG,CAAC;;;;;;iBAC5G;gBAYD;;mBAEG;gBACG,8CAAgB,GAAtB,UAAuB,iBAAqC,EAAE,UAA4B;;4BAIhF,SAAS,EACX,GAAG;;4BAJP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;kCAC7F,mBAAgB,SAAS,4BAAqB,UAAU,CAAC,IAAI,QAAI;iCACvE,oBAAiB,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAK,CAAA;iCAC3D,kBAAe,UAAU,CAAC,mBAAmB,aAAM,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAI,CAAA;4BAC1G,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;gCAAC,GAAG,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC;4BACpE,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,+CAAiB,GAAvB,UAAwB,iBAAqC,EAAE,WAA+B;;;4BAIpF,QAAQ;;;;oCAHd,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;+CAE/B,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,iBAAwB,EAAE,UAAU,CAAC,EAA3D,CAA2D,CAAC;oCAC3G,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAYD;;mBAEG;gBACG,4CAAc,GAApB,UAAqB,iBAAqC,EAAE,UAA4B;;4BAI9E,SAAS,EACT,GAAG;;4BAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;kCAC3F,mBAAgB,SAAS,6BAAsB,UAAU,CAAC,IAAI,OAAG;4BAC7E,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,6CAAe,GAArB,UAAsB,iBAAqC,EAAE,WAA+B;;;4BAIlF,QAAQ;;;;oCAHd,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;+CAE/B,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,iBAAwB,EAAE,UAAU,CAAC,EAAzD,CAAyD,CAAC;oCACzG,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED;;mBAEG;gBACG,yCAAW,GAAjB,UAAkB,SAAiB,EAAE,KAAkB;;4BAI7C,WAAW,EACX,GAAG;;;;oCAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;kDAE5B,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,OAAI,UAAU,OAAG,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;0CACxE,aAAU,KAAK,CAAC,QAAQ,GAAG,SAAS,GAAG,EAAE,iBAAU,KAAK,CAAC,IAAI,gBAAS,SAAS,WAAK,WAAW,MAAG;oCAC9G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,uCAAS,GAAf,UAAgB,SAAiB,EAAE,SAAiB,EAAE,WAA4B;oBAA5B,4BAAA,EAAA,mBAA4B;;4BAQxE,GAAG;;;;oCAPT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;yCAE5C,WAAW,EAAX,wBAAW;oCACX,qBAAM,IAAI,CAAC,KAAK,CAAC,sBAAmB,SAAS,4BAAwB,CAAC,EAAA;;oCAAtE,SAAsE,CAAC;;;0CAG/D,kBAAe,SAAS,OAAG;oCACvC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACH,2CAAa,GAAb,UAAc,WAAwI;oBAClJ,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;wBACvB,KAAK,QAAQ;4BACT,EAAE,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gCAC1B,MAAM,CAAC,YAAY,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;4BAChF,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,oBAAoB,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;4BACxF,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,SAAS;4BACV,MAAM,CAAC,SAAS,CAAC;wBACrB,KAAK,SAAS,CAAC;wBACf,KAAK,KAAK;4BACN,MAAM,CAAC,SAAS,CAAC;wBACrB,KAAK,UAAU;4BACX,MAAM,CAAC,UAAU,CAAC;wBACtB,KAAK,QAAQ;4BACT,MAAM,CAAC,QAAQ,CAAC;wBACpB,KAAK,OAAO;4BACR,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,QAAQ,CAAC;wBACd,KAAK,QAAQ;4BACT,MAAM,CAAC,kBAAkB,CAAC;wBAC9B,KAAK,SAAS;4BACV,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gCAC7C,MAAM,CAAC,aAAW,WAAW,CAAC,SAAS,SAAI,WAAW,CAAC,KAAK,MAAG,CAAC;4BAEpE,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gCAC3B,MAAM,CAAC,aAAW,WAAW,CAAC,KAAK,MAAG,CAAC;4BAE3C,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,aAAW,WAAW,CAAC,SAAS,MAAG,CAAC;4BAE/C,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,SAAS,CAAC;4BAErB,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,MAAM;4BACP,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACvB,MAAM,CAAC,qBAAqB,CAAC;4BACjC,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,wBAAwB,CAAC;4BACpC,CAAC;wBACL,KAAK,UAAU;4BACX,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACvB,MAAM,CAAC,0BAA0B,CAAC;4BACtC,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,6BAA6B,CAAC;4BACzC,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,OAAO;4BACR,MAAM,CAAC,OAAO,CAAC;wBACnB,KAAK,cAAc;4BACf,MAAM,CAAC,WAAW,CAAC,MAAM,GAAG,oBAAoB,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;wBACzF,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;oBACtB,CAAC;oBAED,MAAM,IAAI,qEAAiC,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBAC9E,CAAC;gBAED;;mBAEG;gBACH,kDAAoB,GAApB,UAAqB,mBAAwB,EAAE,aAAkB;oBAE7D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,QAAQ,CAAC;wBACxC,MAAM,CAAC,mBAAmB,KAAK,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAC3D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,SAAS,CAAC;wBACzC,MAAM,CAAC,mBAAmB,KAAK,CAAC,CAAC,CAAC,aAAa,IAAI,aAAa,KAAK,OAAO,CAAC,CAAC;oBAClF,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,UAAU,CAAC;wBAC1C,MAAM,CAAC,mBAAmB,EAAE,KAAK,aAAa,CAAC;oBAEnD,MAAM,CAAC,mBAAmB,KAAK,aAAa,CAAC;gBACjD,CAAC;gBAED;;mBAEG;gBACG,sCAAQ,GAAd,UAAe,SAAiB;;;;wCAC5B,qBAAM,IAAI,CAAC,KAAK,CAAC,oBAAkB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAG,CAAC,EAAA;;oCAA5E,SAA4E,CAAC;;;;;iBAChF;gBASD,sBAAc,uCAAM;oBAPpB,4EAA4E;oBAC5E,oBAAoB;oBACpB,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAkB,CAAC;oBAClD,CAAC;;;mBAAA;gBAED;;mBAEG;gBACO,yCAAW,GAArB,UAAsB,aAA4B,EAAE,UAAsB;oBAA1E,iBAEC;oBAFmD,2BAAA,EAAA,cAAsB;oBACtE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC,EAAnE,CAAmE,CAAC,CAAC;gBAC/H,CAAC;gBAED;;mBAEG;gBACO,kDAAoB,GAA9B,UAA+B,MAAoB,EAAE,WAAoB;oBACrE,IAAI,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;oBAClC,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,KAAK,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC;wBACtD,CAAC,IAAI,SAAS,CAAC;oBACnB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC;wBAC9C,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;oBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC;wBAC3B,CAAC,IAAI,WAAW,CAAC;oBACrB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;wBACnB,CAAC,IAAI,cAAc,CAAC;oBACxB,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;wBAC1D,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BACrC,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC7C,CAAC,IAAI,WAAW,GAAG,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI,GAAG,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;wBACzE,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;4BAC9C,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC5C,CAAC,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;oBACL,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAChE,CAAC,IAAI,6BAA6B,CAAC;oBACvC,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBAEL,0BAAC;YAAD,CAt2BA,AAs2BC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCz2BF,eAAe;YACf,4BAA4B;YAC5B,oEAAoE;YACpE,EAAE;YAEF;;eAEG;YACH;gBAoDI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,wBAAY,iBAAgC,EAAE,MAAc,EAAE,QAAc;oBArB5E;;uBAEG;oBACO,2BAAsB,GAAyB,EAAE,CAAC;oBAoBxD,IAAI,CAAC,OAAO,GAAG,yBAAW,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;oBACjE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,UAAU,GAAG,iBAAiB,CAAC,UAAU,IAAI,QAAQ,CAAC;oBAE3D,kDAAkD;oBAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;wBACnB,MAAM,IAAI,iDAAuB,CAAC,MAAM,CAAC,CAAC;oBAC9C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACvB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;oBAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACvB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;oBAElD,0EAA0E;oBAC1E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;wBACV,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAChC,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;;mBAIG;gBACH,gCAAO,GAAP;oBAAA,iBAyCC;oBAvCG,0CAA0C;oBAC1C,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;wBAC9B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;wBACvB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC3B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC/B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC/B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;qBAC1B,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;oBAE7B,6DAA6D;oBAC7D,+DAA+D;oBAC/D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;wBACtE,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC5C,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;oBAE7B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;4BAC9B,KAAI,CAAC,kBAAkB,GAAG;gCACtB,EAAE,EAAE,CAAC;gCACL,UAAU,EAAE,IAAI,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC;gCAC7C,mBAAmB,EAAE,KAAK;6BAC7B,CAAC;4BACF,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,GAAQ;gCAChD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oCACN,IAAI,CAAC,GAAG,CAAC,CAAC;gCACd,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACJ,KAAI,CAAC,kBAAmB,CAAC,UAAU,CAAC,KAAK,CAAC,yBAAuB,KAAI,CAAC,UAAU,iBAAc,EAAE,UAAC,GAAQ,EAAE,MAAW;wCAClH,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4CACN,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,yBAAuB,KAAI,CAAC,UAAU,iBAAc,CAAC,CAAC;4CACjF,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;4CAC/B,IAAI,CAAC,GAAG,CAAC,CAAC;wCACd,CAAC;wCAAC,IAAI,CAAC,CAAC;4CACJ,EAAE,EAAE,CAAC;wCACT,CAAC;oCACL,CAAC,CAAC,CAAC;gCACP,CAAC;4BACL,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACH,mCAAU,GAAV;oBAAA,iBAyBC;oBAxBG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACvC,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;oBAElD,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;wBAC9B,IAAM,OAAO,GAAG,UAAC,GAAQ,IAAK,OAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,EAAtB,CAAsB,CAAC;wBAErD,EAAE,CAAC,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;4BAC1B,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,GAAG,EAAa,CAAC,CAAC,oCAAoC;4BACzF,KAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;wBACxC,CAAC;wBAED,EAAE,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;4BACZ,KAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,UAAA,YAAY;gCAC5C,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC;oCAC/C,YAAY,CAAC,eAAe,EAAE,CAAC;gCACnC,CAAC;4BACL,CAAC,CAAC,CAAC;4BACH,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;4BACvB,KAAI,CAAC,IAAI,GAAG,SAAS,CAAC;4BACtB,KAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;wBACrC,CAAC;wBAED,EAAE,EAAE,CAAC;oBACT,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,0CAAiB,GAAvB;;;;;;oCACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wCACvC,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC,EAAC;oCAExC,qBAAM,IAAI,CAAC,0BAA0B,EAAE,EAAA;;yDAAvC,SAAuC;oCAClE,sBAAO,IAAI,yCAAmB,CAAC,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAC;;;;iBACzE;gBAED;;mBAEG;gBACH,wCAAe,GAAf;oBACI,MAAM,CAAC;wBACH,MAAM,EAAE,IAAI,CAAC,QAAQ;wBACrB,UAAU,EAAE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,GAAG,SAAS;wBACpF,IAAI,EAAE,IAAI,CAAC,IAAI;qBAClB,CAAC;gBACN,CAAC;gBAED;;mBAEG;gBACH,+CAAsB,GAAtB,UAAuB,KAAU,EAAE,MAAsB;oBACrD,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;wBACtC,MAAM,CAAC,IAAI,CAAC;oBAEhB,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;wBAClB,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;wBAElC,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,QAAQ;4BACrB,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;gCACvB,MAAM,CAAC,iDAAuB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;4BACpE,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,iDAAuB,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;4BACvE,CAAC;wBAEL,KAAK,yBAAW,CAAC,IAAI,CAAC;wBACtB,KAAK,yBAAW,CAAC,KAAK;4BAClB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;wBAEjC,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACH,6CAAoB,GAApB,UAAqB,KAAU,EAAE,cAA8B;oBAC3D,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;wBAEhC,KAAK,yBAAW,CAAC,QAAQ;4BACrB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,EAAE,cAAc,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC;wBAEvG,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;wBAE5D,KAAK,yBAAW,CAAC,IAAI,CAAC;wBACtB,KAAK,yBAAW,CAAC,KAAK;4BAClB,+CAA+C;4BAC/C,gHAAgH;4BAChH,MAAM,CAAC,KAAK,CAAC;wBAEjB,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;;mBAGG;gBACH,kDAAyB,GAAzB,UAA0B,GAAW,EAAE,UAAyB;oBAC5D,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;wBAC/C,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBAErB,IAAM,eAAe,GAAU,EAAE,CAAC;oBAClC,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,GAAG,SAAS,GAAG,MAAM,EAAzB,CAAyB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC3F,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,UAAC,GAAW;wBACjD,IAAM,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;wBACxC,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;4BACzB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAM;gCACpB,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gCACxB,MAAM,CAAC,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC;4BACxC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAClB,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChC,CAAC;wBACD,MAAM,CAAC,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC;oBACxC,CAAC,CAAC,CAAC,CAAC,kEAAkE;oBACtE,MAAM,CAAC,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;gBAClC,CAAC;gBAED;;mBAEG;gBACH,yCAAgB,GAAhB,UAAiB,UAAkB;oBAC/B,MAAM,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC;gBACpC,CAAC;gBAED;;mBAEG;gBACH,wCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,IAAI,GAAG,SAAS,GAAG,IAAI,CAAC;gBACnC,CAAC;gBAED;;mBAEG;gBACH,wCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,IAAI,GAAG,SAAS,GAAG,IAAI,CAAC;gBACnC,CAAC;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;;;mBAIG;gBACO,mDAA0B,GAApC;oBAAA,iBA0CC;oBAzCG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBACZ,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,EAAE,EAAE,IAAI;4BACxB,KAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,UAAe,EAAE,OAAiB;gCAC3D,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oCACN,IAAI,CAAC,GAAG,CAAC,CAAC;oCACV,MAAM,CAAC;gCACX,CAAC;gCAED,IAAI,YAAY,GAAG,KAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,UAAU,KAAK,UAAU,EAAtC,CAAsC,CAAC,CAAC;gCAC5G,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oCAChB,YAAY,GAAG;wCACX,EAAE,EAAE,KAAI,CAAC,sBAAsB,CAAC,MAAM;wCACtC,UAAU,EAAE,UAAU;wCACtB,mBAAmB,EAAE,KAAK;qCAC7B,CAAC;oCACF,KAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gCACnD,CAAC;gCACD,YAAY,CAAC,eAAe,GAAG;oCAC3B,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wCACf,KAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,KAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;oCAC7F,CAAC;oCACD,OAAO,EAAE,CAAC;oCACV,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gCAC7B,CAAC,CAAC;gCACF,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,yBAAuB,KAAI,CAAC,UAAU,iBAAc,EAAE,UAAC,GAAQ;oCACzF,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wCACN,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,yBAAuB,KAAI,CAAC,UAAU,iBAAc,CAAC,CAAC;wCACjF,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;wCAC/B,IAAI,CAAC,GAAG,CAAC,CAAC;oCACd,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,EAAE,CAAC,YAAY,CAAC,CAAC;oCACrB,CAAC;gCACL,CAAC,CAAC,CAAC;4BACP,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;wBACxB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBAEpD,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;gBAClD,CAAC;gBAED;;mBAEG;gBACO,yCAAgB,GAA1B;oBACI,IAAI,CAAC;wBACD,IAAI,CAAC,QAAQ,GAAG,6BAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAE7C,CAAC;oBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,MAAM,IAAI,+DAA8B,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBAC/D,CAAC;gBACL,CAAC;gBAEL,qBAAC;YAAD,CAjWA,AAiWC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCzWF;;eAEG;YACH;gBAYI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,0BAAsB,kBAAsC,EACtC,MAAmB,EACnB,MAAc;oBAFd,uBAAkB,GAAlB,kBAAkB,CAAoB;oBACtC,WAAM,GAAN,MAAM,CAAa;oBACnB,WAAM,GAAN,MAAM,CAAQ;oBAhBpC,4EAA4E;oBAC5E,uBAAuB;oBACvB,4EAA4E;oBAE5E;;;uBAGG;oBACO,eAAU,GAAG,KAAK,CAAC;gBAS7B,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;;mBAIG;gBACH,kCAAO,GAAP;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC;wBAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,CAAC;oBACrD,CAAC;oBAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBAED;;;;mBAIG;gBACG,wCAAa,GAAnB;;;4BAMc,4BAA4B,EAC5B,eAAe,EACf,2BAA2B;;;;oCAPrC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;oCAA7B,SAA6B,CAAC;;;;mEAEW,6BAA6B;sDAC1C,2HAAyH,IAAI,CAAC,MAAM,MAAG;kEAC3H,6BAA6B;oCAEjE,qBAAM,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;oCACV,qBAAM,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,EAAA;;kDAAjC,SAAiC;oCACtE,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAA1B,CAA0B,CAAC,CAAC,EAAA;;oCAAvE,SAAuE,CAAC;oCACxE,qBAAM,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,EAAA;;oCAA7C,SAA6C,CAAC;oCAE9C,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;oCAA9B,SAA8B,CAAC;;;;oCAG/B,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;oCAAhC,SAAgC,CAAC;oCACjC,MAAM,OAAK,CAAC;yCAGZ,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;oCAApB,SAAoB,CAAC;;;;;;iBAE5B;gBAED;;mBAEG;gBACG,2CAAgB,GAAtB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC5C,MAAM,IAAI,+DAA8B,EAAE,CAAC;oCAE/C,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,IAAI,CAAC;oCACnD,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAA;;oCAArC,SAAqC,CAAC;;;;;iBACzC;gBAED;;mBAEG;gBACG,4CAAiB,GAAvB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;oCAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAA;;oCAA1B,SAA0B,CAAC;oCAC3B,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;iBACvD;gBAED;;mBAEG;gBACG,8CAAmB,GAAzB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;oCAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAA;;oCAA5B,SAA4B,CAAC;oCAC7B,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;iBACvD;gBAED;;mBAEG;gBACH,8CAAmB,GAAnB;oBACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gBACvD,CAAC;gBAED;;mBAEG;gBACH,gCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;oBAAvC,iBAgBC;oBAfG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wBAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oBAEhD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,EAAE,EAAE,IAAI;wBACxB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;wBACxC,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,EAAE,UAAC,GAAQ,EAAE,MAAW;4BAC9E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACN,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gCAC9C,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gCAC/B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BACrB,CAAC;4BAED,EAAE,CAAC,MAAM,CAAC,CAAC;wBACf,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,iCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,eAAgC;;;4BAIhF,IAAI,EACJ,OAAO,EACP,MAAM,EACN,UAAU,EACV,GAAG;;;;oCAPT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;2CAEnC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;8CACnB,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAjC,CAAiC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;6CAC9D,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,EAAH,CAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;iDAC1B,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;0CACtC,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,SAAI,OAAO,kBAAa,MAAM,MAAG;oCACnF,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;6CAAjC,SAAiC;oCAChD,sBAAO,eAAe,GAAG,MAAM,CAAC,QAAQ,GAAG,SAAS,EAAC;;;;iBACxD;gBAED;;mBAEG;gBACG,iCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,UAAyB;;4BAIzE,YAAY,EACZ,eAAe,EACf,GAAG,EACH,eAAe,EACf,YAAY,EACZ,aAAa;;;;oCARnB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mDAE3B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;sDACnC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;0CACtD,YAAU,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,aAAQ,YAAY,UAAI,eAAe,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC,GAAG,EAAE,CAAE;sDAClH,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC;mDACtD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;oDAChD,YAAY,CAAC,MAAM,CAAC,eAAe,CAAC;oCAC1D,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,EAAA;;oCAApC,SAAoC,CAAC;;;;;iBACxC;gBAYD;;mBAEG;gBACG,iCAAM,GAAZ,UAAa,SAAiB,EAAE,UAAgC,EAAE,eAAuB;;4BAI/E,eAAe,EACf,UAAU,EAEV,GAAG;;;;oCANT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;sDAExB,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;iDAC7F,UAAU,YAAY,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAC,UAA4B,CAAC,GAAG,CAAC,EAAlC,CAAkC,CAAC,GAAG,eAAe;0CAE9H,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,eAAU,eAAiB;oCAC5F,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAED;;mBAEG;gBACG,iDAAsB,GAA5B,UAA6B,SAAiB,EAAE,WAAgB,EAAE,QAAa,EAAE,QAAiB;;4BAI1F,GAAG;;;;oCAHP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEtC,EAAE;oCACZ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wCACX,GAAG,GAAK,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,mCAAgC;6CACrF,sBAAoB,WAAW,yBAAoB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAC3H,sBAAoB,WAAW,UAAK,WAAW,QAAK,CAAA,CAAC;oCACjE,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,GAAG,GAAK,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAyB;6CAC9E,sBAAoB,WAAW,cAAS,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAChH,sBAAoB,WAAW,UAAK,WAAa,CAAA,CAAC;oCAC9D,CAAC;oCACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;oCACW,qBAAM,IAAI,CAAC,KAAK,CAAC,qCAAmC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAU,CAAC,EAAA;;8CAA5H,SAA4H;oCAC7J,sBAAO,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC;;;;iBAC/F;gBAED;;mBAEG;gBACG,0CAAe,GAArB,UAAsB,SAAiB;;;;;wCACd,qBAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,SAAS,CAAC,CAAC,EAAA;;mDAAxC,SAAwC;oCAC7D,sBAAO,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;iBAChE;gBAED;;mBAEG;gBACG,2CAAgB,GAAtB,UAAuB,UAAoB;;;4BASjC,gBAAgB,EAChB,SAAS,EACT,UAAU,EACV,UAAU,EACV,cAAc;;;;oCAZpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,6CAA6C;oCAC7C,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;wCAClC,MAAM,gBAAC,EAAE,EAAC;uDAGW,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,MAAI,SAAS,MAAG,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gDAC1D,mEAAiE,IAAI,CAAC,MAAM,6BAAwB,gBAAgB,MAAG;iDACvH,oEAAkE,IAAI,CAAC,MAAM,MAAG;iDAChF,uEAAqE,IAAI,CAAC,MAAM,kCAA+B;qDAC/G,6EAA2E,IAAI,CAAC,MAAM,6CAA0C;oCAC5E,qBAAM,OAAO,CAAC,GAAG,CAAC;4CACzF,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;4CACrB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;4CACtB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;4CACtB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;yCAC7B,CAAC,EAAA;;yCALyE,SAKzE;oCAEF,yDAAyD;oCACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;wCACjB,MAAM,gBAAC,EAAE,EAAC;oCAEd,yCAAyC;oCACzC,sBAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAM,OAAO;gDACnC,WAAW;;;;sEAAG,IAAI,yBAAW,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;wDACrB,qBAAM,IAAI,CAAC,KAAK,CAAC,sBAAqB,OAAO,CAAC,YAAY,CAAC,iCAA+B,CAAC,EAAA;;sEAA3F,SAA2F;wDAEhI,gDAAgD;wDAChD,WAAW,CAAC,OAAO,GAAG,SAAS;6DAC1B,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,EAA3C,CAA2C,CAAC;6DAC/D,GAAG,CAAC,UAAA,QAAQ;4DACT,IAAM,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;4DACxC,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;4DAC5C,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;4DAC1D,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI,IAAI,QAAQ,CAAC,gBAAgB,CAAC,KAAK,SAAS,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,SAAS,CAAC;4DAChJ,YAAY,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,KAAK,CAAC;4DAC5D,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;4DACtE,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;4DACrE,YAAY,CAAC,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;4DAC9E,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC;4DAClD,MAAM,CAAC,YAAY,CAAC;wDACxB,CAAC,CAAC,CAAC;wDAEP,sBAAsB;wDACtB,WAAW,CAAC,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU;4DAChD,MAAM,CAAC,IAAI,mCAAgB,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;wDACnF,CAAC,CAAC,CAAC;wDAEH,qDAAqD;wDACrD,WAAW,CAAC,WAAW,GAAG,aAAa;6DAClC,MAAM,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,EAA/C,CAA+C,CAAC;6DACvE,GAAG,CAAC,UAAA,YAAY,IAAI,OAAA,IAAI,mCAAgB,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAArE,CAAqE,CAAC,CAAC,CAAC,2BAA2B;wDAE5H,+CAA+C;wDAC/C,WAAW,CAAC,OAAO,GAAG,SAAS;6DAC1B,MAAM,CAAC,UAAA,OAAO;4DACX,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;gEAC7C,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,EAAzC,CAAyC,CAAC,CAAC;gEACxF,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,EAAzC,CAAyC,CAAC,CAAC,CAAC;wDACjG,CAAC,CAAC;6DACD,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,YAAY,CAAC,EAArB,CAAqB,CAAC;6DACrC,MAAM,CAAC,UAAC,KAAK,EAAE,KAAK,EAAE,IAAI,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,EAA7B,CAA6B,CAAC,CAAC,SAAS;6DACvE,GAAG,CAAC,UAAA,WAAW;4DACZ,IAAM,gBAAgB,GAAG,SAAS,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,IAAI,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,EAAnF,CAAmF,CAAC,CAAC;4DAC1I,IAAM,WAAW,GAAG,gBAAgB,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,aAAa,CAAC,EAAtB,CAAsB,CAAC,CAAC;4DAE5E,0CAA0C;4DAC1C,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,KAAK,CAAC,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gEAC3E,IAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,EAAvG,CAAuG,CAAC,CAAC;gEAC3J,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oEACT,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;oEACvB,MAAM,CAAC;gEACX,CAAC;4DACL,CAAC;4DAED,MAAM,CAAC,IAAI,yBAAW,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,CAAC,sBAAsB,CAAC,CAAC;wDAC1G,CAAC,CAAC;6DACD,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAkB,CAAC,CAAC,uBAAuB;wDAEvE,sBAAO,WAAW,EAAC;;;6CACtB,CAAC,CAAC,EAAC;;;;iBACP;gBAED;;mBAEG;gBACG,mCAAQ,GAAd,UAAe,SAAiB;;4BACtB,GAAG;;;;0CAAG,oEAAkE,IAAI,CAAC,MAAM,4BAAuB,SAAS,MAAG;oCAC7G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;6CAArB,SAAqB;oCACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;iBACvC;gBAED;;mBAEG;gBACG,sCAAW,GAAjB,UAAkB,KAAkB;;;4BAI1B,iBAAiB,EACnB,GAAG,EACD,iBAAiB;;;;oCALvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wDAEtB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,CAAC,EAAxC,CAAwC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;0CAChG,mBAAkB,KAAK,CAAC,IAAI,WAAO,iBAAmB;wDACtC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC;oCACjG,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;wCAC7B,GAAG,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAK,MAAM,CAAC,IAAI,MAAI,EAApB,CAAoB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC;oCAChG,GAAG,IAAI,kBAAkB,CAAC,CAAC,gCAAgC;oCAE3D,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,SAAiB;;4BACzB,GAAG;;;;0CAAG,iBAAgB,SAAS,MAAI;oCACvC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,SAAiB,EAAE,UAAkB;;4BAC3C,GAAG;;;;0CAAG,oEAAkE,IAAI,CAAC,MAAM,4BAAuB,SAAS,6BAAwB,UAAU,MAAG;oCAC/I,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;6CAArB,SAAqB;oCACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;iBACvC;gBAYD;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,iBAAqC,EAAE,MAAoB;;4BAIjE,SAAS,EACT,GAAG;;4BAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;kCAC3F,kBAAiB,SAAS,cAAU,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,CAAG;4BAC1F,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,qCAAU,GAAhB,UAAiB,iBAAqC,EAAE,OAAuB;;;4BAIrE,OAAO;;;;oCAHb,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;8CAEhC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,iBAAwB,EAAE,MAAM,CAAC,EAAhD,CAAgD,CAAC;oCACvF,qBAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAA;;oCAA1B,SAA0B,CAAC;;;;;iBAC9B;gBAYD;;mBAEG;gBACG,uCAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,qBAA0C;;4BAExI,WAAW,EAUX,SAAS,EAUT,SAAS;;;;kDApB4B,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;gDAEpE,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;wCAC9B,SAAS,CAAC,IAAI,GAAG,qBAAqB,CAAC;oCAC3C,CAAC;oCAED,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,EAAC;;;;iBAC/D;gBAYD;;mBAEG;gBACG,uCAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,SAAuB;;4BAIrH,WAAW,EAUX,SAAS;;;;oCAbb,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;kDAEP,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;yCAExG,CAAA,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,SAAS,CAAC,QAAQ,KAAK,IAAI,CAAA,EAA3D,wBAA2D;oCAC3D,qBAAM,IAAI,CAAC,KAAK,CAAC,kBAAiB,WAAW,CAAC,IAAI,sBAAmB,SAAS,CAAC,IAAI,MAAI,CAAC,EAAA;;oCAAxF,SAAwF,CAAC;;wCAE7F,sBAAO,IAAI,CAAC,KAAK,CAAC,kBAAiB,WAAW,CAAC,IAAI,kBAAe,SAAS,CAAC,IAAI,UAAM,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAG,CAAC,EAAC;;;;iBACtJ;gBAED;;mBAEG;gBACG,wCAAa,GAAnB,UAAoB,WAAwB,EAAE,cAAsE;;;4BAI1G,cAAc;;;;oCAHpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;qDAEzB,cAAc,CAAC,GAAG,CAAC,UAAM,aAAa;;4CACzD,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,EAAC;;yCAC3F,CAAC;oCAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAYD;;mBAEG;gBACG,qCAAU,GAAhB,UAAiB,iBAAqC,EAAE,kBAAuC;;4BACrF,SAAS,EACT,UAAU;;wCADE,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;yCACpF,kBAAkB,YAAY,2BAAY,GAAG,kBAAkB,CAAC,IAAI,GAAG,kBAAkB;4BAC5G,sBAAO,IAAI,CAAC,KAAK,CAAC,kBAAiB,SAAS,gBAAa,UAAU,MAAI,CAAC,EAAC;;;iBAC5E;gBAYD;;mBAEG;gBACG,sCAAW,GAAjB,UAAkB,iBAAqC,EAAE,oBAA6C;;;4BAI5F,YAAY;;;;oCAHlB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mDAE1B,oBAA8B,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,iBAAwB,EAAE,MAAa,CAAC,EAAxD,CAAwD,CAAC;oCAC5H,qBAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAA;;oCAA/B,SAA+B,CAAC;;;;;iBACnC;gBAED;;mBAEG;gBACG,4CAAiB,GAAvB,UAAwB,WAAwB;;4BAOtC,kBAAkB;;;;oCANxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;yCAE5C,CAAC,WAAW,CAAC,kBAAkB,EAA/B,wBAA+B;oCAC/B,qBAAM,IAAI,CAAC,KAAK,CAAC,iBAAe,WAAW,CAAC,IAAI,sBAAmB,CAAC,EAAA;;oCAApE,SAAoE,CAAC;;;yDAE9C,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,GAAG,GAAG,MAAM,CAAC,IAAI,GAAG,GAAG,EAAvB,CAAuB,CAAC;yCAC3I,CAAA,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA7B,wBAA6B;oCAC7B,qBAAM,IAAI,CAAC,KAAK,CAAC,iBAAe,WAAW,CAAC,IAAI,0BAAqB,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,EAAA;;oCAAtG,SAAsG,CAAC;;;;;;iBAC9G;gBAYD;;mBAEG;gBACG,2CAAgB,GAAtB,UAAuB,iBAAqC,EAAE,UAA4B;;4BAIhF,SAAS,EACT,WAAW,EACX,qBAAqB,EACvB,GAAG;;4BANP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;0CACnF,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,GAAG,GAAG,MAAM,GAAG,GAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;oDACzD,UAAU,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,GAAG,GAAG,MAAM,GAAG,GAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;kCAChG,kBAAiB,SAAS,0BAAuB,UAAU,CAAC,IAAI,OAAK;iCAC3E,kBAAgB,WAAW,OAAI,CAAA;iCAC/B,iBAAgB,UAAU,CAAC,mBAAmB,UAAM,qBAAqB,MAAG,CAAA;4BAChF,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;gCAAC,GAAG,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC;4BACpE,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,4CAAiB,GAAvB,UAAwB,iBAAqC,EAAE,WAA+B;;;4BAIpF,QAAQ;;;;oCAHd,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;+CAE/B,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,iBAAwB,EAAE,UAAU,CAAC,EAA3D,CAA2D,CAAC;oCAC3G,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAYD;;mBAEG;gBACG,yCAAc,GAApB,UAAqB,iBAAqC,EAAE,UAA4B;;4BAI9E,SAAS;;4BAHf,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;4BACvG,sBAAO,IAAI,CAAC,KAAK,CAAC,kBAAiB,SAAS,4BAAyB,UAAU,CAAC,IAAI,MAAI,CAAC,EAAC;;;iBAC7F;gBAYD;;mBAEG;gBACG,0CAAe,GAArB,UAAsB,iBAAqC,EAAE,WAA+B;;;4BAIlF,QAAQ;;;;oCAHd,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;+CAE/B,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,iBAAwB,EAAE,UAAU,CAAC,EAAzD,CAAyD,CAAC;oCACzG,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED;;mBAEG;gBACG,sCAAW,GAAjB,UAAkB,SAAiB,EAAE,KAAkB;;4BAI7C,OAAO,EACP,GAAG;;;;oCAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;8CAEhC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,GAAG,GAAG,UAAU,GAAG,GAAG,EAAtB,CAAsB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;0CAC1E,aAAU,KAAK,CAAC,QAAQ,GAAG,SAAS,GAAG,EAAE,gBAAW,KAAK,CAAC,IAAI,cAAW,SAAS,UAAM,OAAO,MAAG;oCAC9G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,SAAiB,EAAE,SAAiB;;4BAI1C,GAAG;;;;oCAHT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEpC,kBAAiB,SAAS,sBAAmB,SAAS,MAAI;oCACtE,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACH,wCAAa,GAAb,UAAc,WAAwI;oBAElJ,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;wBACvB,KAAK,QAAQ;4BACT,EAAE,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gCAC1B,MAAM,CAAC,OAAO,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;4BAC3E,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,UAAU,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;4BAC9E,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,SAAS;4BACV,MAAM,CAAC,YAAY,CAAC;wBACxB,KAAK,SAAS,CAAC;wBACf,KAAK,KAAK;4BACN,MAAM,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;wBACzE,KAAK,UAAU;4BACX,MAAM,CAAC,WAAW,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;wBAC9E,KAAK,QAAQ;4BACT,MAAM,CAAC,SAAS,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;wBAC5E,KAAK,OAAO;4BACR,MAAM,CAAC,OAAO,CAAC;wBACnB,KAAK,QAAQ,CAAC;wBACd,KAAK,QAAQ;4BACT,MAAM,CAAC,QAAQ,CAAC;wBACpB,KAAK,SAAS;4BACV,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gCAC7C,MAAM,CAAC,aAAW,WAAW,CAAC,SAAS,SAAI,WAAW,CAAC,KAAK,MAAG,CAAC;4BAEpE,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gCAC3B,MAAM,CAAC,aAAW,WAAW,CAAC,KAAK,MAAG,CAAC;4BAE3C,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,aAAW,WAAW,CAAC,SAAS,MAAG,CAAC;4BAE/C,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,SAAS,CAAC;4BAErB,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,UAAU;4BACX,MAAM,CAAC,UAAU,CAAC;wBACtB,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,cAAc;4BACf,MAAM,CAAC,WAAW,CAAC,MAAM,GAAG,UAAU,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;oBACnF,CAAC;oBAED,MAAM,IAAI,qEAAiC,CAAC,WAAW,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;gBACnF,CAAC;gBAED;;mBAEG;gBACH,+CAAoB,GAApB,UAAqB,mBAAwB,EAAE,aAAkB;oBAE7D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,QAAQ,CAAC;wBACxC,MAAM,CAAC,mBAAmB,KAAK,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAC3D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,SAAS,CAAC;wBACzC,MAAM,CAAC,mBAAmB,KAAK,CAAC,CAAC,CAAC,aAAa,IAAI,aAAa,KAAK,OAAO,CAAC,CAAC;oBAClF,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,UAAU,CAAC;wBAC1C,MAAM,CAAC,mBAAmB,EAAE,KAAK,aAAa,CAAC;oBAEnD,MAAM,CAAC,mBAAmB,KAAK,aAAa,CAAC;gBACjD,CAAC;gBAED;;mBAEG;gBACG,mCAAQ,GAAd,UAAe,SAAiB;;;;wCAC5B,qBAAM,IAAI,CAAC,KAAK,CAAC,oBAAkB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAG,CAAC,EAAA;;oCAA5E,SAA4E,CAAC;;;;;iBAChF;gBASD,sBAAc,oCAAM;oBAPpB,4EAA4E;oBAC5E,oBAAoB;oBACpB,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAkB,CAAC;oBAClD,CAAC;;;mBAAA;gBAED;;mBAEG;gBACO,sCAAW,GAArB,UAAsB,aAA4B;oBAAlD,iBAEC;oBADG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,IAAI,EAAxC,CAAwC,CAAC,CAAC;gBAC3F,CAAC;gBAED;;mBAEG;gBACO,+CAAoB,GAA9B,UAA+B,MAAoB,EAAE,WAAoB;oBACrE,IAAI,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;oBAC/C,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC;wBAC3B,CAAC,IAAI,WAAW,CAAC;oBACrB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC;wBACzB,CAAC,IAAI,SAAS,CAAC;oBACnB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,SAAS,IAAI,CAAC,WAAW,CAAC;wBACvD,CAAC,IAAI,cAAc,CAAC;oBACxB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC;wBAC5B,CAAC,IAAI,iBAAiB,CAAC;oBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;wBACf,CAAC,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;oBAC7C,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;wBAC1D,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BACrC,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC7C,CAAC,IAAI,WAAW,GAAG,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI,GAAG,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;wBACzE,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;4BAC9C,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC5C,CAAC,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;oBACL,CAAC;oBACD,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBAEL,uBAAC;YAAD,CAhyBA,AAgyBC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCnyBF;;eAEG;YACH;gBA6CI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,qBAAY,OAAsB,EAAE,MAAc,EAAE,KAAW;oBAd/D;;uBAEG;oBACO,2BAAsB,GAAyB,EAAE,CAAC;oBAaxD,IAAI,CAAC,OAAO,GAAG,yBAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBAEnB,kDAAkD;oBAClD,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;wBAC9E,MAAM,IAAI,iDAAuB,CAAC,qBAAqB,CAAC,CAAC;oBAC7D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACvB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;oBAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACvB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;oBAElD,uEAAuE;oBACvE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;wBACP,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAChC,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;;mBAIG;gBACH,6BAAO,GAAP;oBAAA,iBA4BC;oBA1BG,0CAA0C;oBAC1C,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;wBAC9B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;wBACvB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC3B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC/B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC/B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;qBAC1B,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;oBAE7B,6DAA6D;oBAC7D,+DAA+D;oBAC/D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;wBACtE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;wBAC3C,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;oBAE7B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;4BAC9B,IAAM,UAAU,GAAG,KAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;4BACxD,KAAI,CAAC,kBAAkB,GAAG;gCACtB,EAAE,EAAE,CAAC;gCACL,UAAU,EAAE,UAAU;gCACtB,mBAAmB,EAAE,KAAK;6BAC7B,CAAC;4BACF,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,GAAQ,IAAK,OAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,EAAtB,CAAsB,CAAC,CAAC;wBACrF,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACH,gCAAU,GAAV;oBAAA,iBAoBC;oBAnBG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACvC,MAAM,IAAI,iDAAuB,CAAC,OAAO,CAAC,CAAC;oBAE/C,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;wBAC9B,IAAM,OAAO,GAAG,UAAC,GAAQ,IAAK,OAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,EAAtB,CAAsB,CAAC;wBAErD,8CAA8C;wBAC9C,EAAE,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;4BACZ,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;4BACvB,KAAI,CAAC,IAAI,GAAG,SAAS,CAAC;4BACtB,KAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;wBACrC,CAAC;wBAED,gDAAgD;wBAChD,EAAE,CAAC,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;4BAC1B,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;4BAChD,KAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;wBACxC,CAAC;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,uCAAiB,GAAvB;;;;;;oCACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wCACvC,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,IAAI,iDAAuB,CAAC,OAAO,CAAC,CAAC,EAAC;oCAErC,qBAAM,IAAI,CAAC,0BAA0B,EAAE,EAAA;;yDAAvC,SAAuC;oCAClE,sBAAO,IAAI,mCAAgB,CAAC,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAC;;;;iBACtE;gBAED;;mBAEG;gBACH,qCAAe,GAAf;oBACI,MAAM,CAAC;wBACH,MAAM,EAAE,IAAI,CAAC,KAAK;wBAClB,UAAU,EAAE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,GAAG,SAAS;wBACpF,IAAI,EAAE,IAAI,CAAC,IAAI;qBAClB,CAAC;gBACN,CAAC;gBAED;;;mBAGG;gBACH,+CAAyB,GAAzB,UAA0B,GAAW,EAAE,UAAyB;oBAC5D,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;wBAC/C,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBACrB,IAAM,iBAAiB,GAAU,EAAE,CAAC;oBACpC,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,GAAG,SAAS,GAAG,MAAM,EAAzB,CAAyB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC3F,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,UAAC,GAAW;wBACjD,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAClD,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC,CAAC,CAAC,CAAC,kEAAkE;oBACtE,MAAM,CAAC,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;gBACpC,CAAC;gBAED;;mBAEG;gBACH,sCAAgB,GAAhB,UAAiB,UAAkB;oBAC/B,MAAM,CAAC,GAAG,GAAG,UAAU,GAAG,GAAG,CAAC;gBAClC,CAAC;gBAED;;mBAEG;gBACH,qCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG,CAAC;gBACjC,CAAC;gBAED;;mBAEG;gBACH,qCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG,CAAC;gBACjC,CAAC;gBAED;;mBAEG;gBACH,4CAAsB,GAAtB,UAAuB,KAAU,EAAE,cAA8B;oBAC7D,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;wBACtC,MAAM,CAAC,IAAI,CAAC;oBAEhB,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;wBAElC,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,QAAQ;4BACrB,EAAE,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,iDAAuB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;4BACpE,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,iDAAuB,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;4BACvE,CAAC;wBAEL,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;wBAEjC,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACH,0CAAoB,GAApB,UAAqB,KAAU,EAAE,cAA8B;oBAC3D,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;wBAEhC,KAAK,yBAAW,CAAC,QAAQ;4BACrB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,EAAE,cAAc,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC;wBAEvG,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;wBAE5D,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAE7B,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;;;mBAIG;gBACO,gDAA0B,GAApC;oBAAA,iBAiCC;oBA/BG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBACZ,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,EAAE,EAAE,IAAI;4BACxB,KAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAC,GAAQ,EAAE,UAAe;gCAC9C,EAAE,CAAC,CAAC,GAAG,CAAC;oCACJ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gCAErB,IAAI,YAAY,GAAG,KAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,UAAU,KAAK,UAAU,EAAtC,CAAsC,CAAC,CAAC;gCAC5G,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oCAChB,YAAY,GAAG;wCACX,EAAE,EAAE,KAAI,CAAC,sBAAsB,CAAC,MAAM;wCACtC,UAAU,EAAE,UAAU;wCACtB,mBAAmB,EAAE,KAAK;qCAC7B,CAAC;oCACF,YAAY,CAAC,eAAe,GAAG;wCAC3B,EAAE,CAAC,CAAC,KAAI,CAAC,IAAI,IAAI,YAAY,CAAC,CAAC,CAAC;4CAC5B,UAAU,CAAC,OAAO,EAAE,CAAC;4CACrB,KAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,KAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;wCAC7F,CAAC;wCACD,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;oCAC7B,CAAC,CAAC;oCACF,KAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gCACnD,CAAC;gCACD,EAAE,CAAC,YAAY,CAAC,CAAC;4BACrB,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;wBACxB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBAEpD,MAAM,IAAI,iDAAuB,CAAC,OAAO,CAAC,CAAC;gBAC/C,CAAC;gBAED;;mBAEG;gBACO,sCAAgB,GAA1B;oBACI,IAAI,CAAC;wBACD,IAAI,CAAC,KAAK,GAAG,6BAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAE,sCAAsC;oBAErF,CAAC;oBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC;4BACD,IAAI,CAAC,KAAK,GAAG,6BAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,uCAAuC;wBAEtF,CAAC;wBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACT,MAAM,IAAI,+DAA8B,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;wBAC/D,CAAC;oBACL,CAAC;gBACL,CAAC;gBAEL,kBAAC;YAAD,CAtTA,AAsTC,IAAA;;QAAA,CAAC;;;;;;;;;;YC1UF;;eAEG;YACH;gBAAwD,sDAAK;gBAGzD;oBAAA,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,oCAAoC,CAAC;oBAIxC,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,kCAAkC,CAAC,SAAS,CAAC,CAAC;oBAC1E,KAAI,CAAC,OAAO,GAAG,wCAAwC,CAAC;;gBAC5D,CAAC;gBAEL,yCAAC;YAAD,CATA,AASC,CATuD,KAAK,GAS5D;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCKF;;;;eAIG;YACH;gBAYI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,2BAAsB,kBAAsC,EACtC,MAAoB,EACpB,MAAc;oBAFd,uBAAkB,GAAlB,kBAAkB,CAAoB;oBACtC,WAAM,GAAN,MAAM,CAAc;oBACpB,WAAM,GAAN,MAAM,CAAQ;oBAhBpC,4EAA4E;oBAC5E,uBAAuB;oBACvB,4EAA4E;oBAE5E;;;uBAGG;oBACO,eAAU,GAAG,KAAK,CAAC;gBAS7B,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;;mBAIG;gBACH,mCAAO,GAAP;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC;wBAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,CAAC;oBACrD,CAAC;oBAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBAED;;mBAEG;gBACG,yCAAa,GAAnB;;;4BAMc,4BAA4B,EAC5B,eAAe,EACf,2BAA2B;;;;oCAPrC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;oCAA7B,SAA6B,CAAC;;;;mEAEW,6BAA6B;sDAC1C,2HAAyH,IAAI,CAAC,MAAM,MAAG;kEAC3H,6BAA6B;oCAEjE,qBAAM,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;oCACV,qBAAM,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,EAAA;;kDAAjC,SAAiC;oCACtE,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAA1B,CAA0B,CAAC,CAAC,EAAA;;oCAAvE,SAAuE,CAAC;oCACxE,qBAAM,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,EAAA;;oCAA7C,SAA6C,CAAC;oCAE9C,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;oCAA9B,SAA8B,CAAC;;;;oCAG/B,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;oCAAhC,SAAgC,CAAC;oCACjC,MAAM,OAAK,CAAC;yCAGZ,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;oCAApB,SAAoB,CAAC;;;;;;iBAG5B;gBAED;;mBAEG;gBACG,4CAAgB,GAAtB;;;4BACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gCAC5C,MAAM,IAAI,+DAA8B,EAAE,CAAC;4BAE/C,yCAAyC;4BACzC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,IAAI,CAAC;;;;iBACtD;gBAED;;mBAEG;gBACG,6CAAiB,GAAvB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;oCAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAA;;oCAA1B,SAA0B,CAAC;oCAC3B,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;iBACvD;gBAED;;mBAEG;gBACG,+CAAmB,GAAzB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;oCAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAA;;oCAA5B,SAA4B,CAAC;oCAC7B,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;iBACvD;gBAED;;mBAEG;gBACH,+CAAmB,GAAnB;oBACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gBACvD,CAAC;gBAED;;mBAEG;gBACH,iCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;oBAAvC,iBAoBC;oBAnBG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wBAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oBAEhD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,EAAE,EAAE,IAAI;wBACxB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;wBACxC,IAAM,OAAO,GAAG,UAAC,GAAQ,EAAE,MAAW;4BAClC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACN,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gCAC9C,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gCAC/B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BACrB,CAAC;4BAED,EAAE,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC;wBACvC,CAAC,CAAC;wBACF,IAAM,gBAAgB,GAAG;4BACrB,UAAU,EAAE,KAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,GAAG,IAAI;yBACzE,CAAC;wBACF,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;oBACnG,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,kCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,eAAgC;;;4BAIhF,IAAI,EACJ,OAAO,EACP,MAAM,EACN,UAAU,EAEV,SAAS,EAIL,IAAI;;;;oCAZd,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;2CAEnC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;8CACnB,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAjC,CAAiC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;6CAC9D,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,GAAG,GAAG,EAAT,CAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;iDACjC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;gDAEhC,OAAO,CAAC,MAAM,GAAG,CAAC;0CAC9B,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,SAAI,OAAO,kBAAa,MAAM,MAAG;0CACtF,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,oBAAiB;yCACxE,eAAe,EAAf,wBAAe;2CACF,kCAAgC,SAAS,0HAAqH;oCACxJ,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC;4CACxD,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE;4CACrF,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;yCACxE,CAAC,CAAC,EAAA;;iDAHgB,SAGhB;oCACH,sBAAO,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAC;wCAE/B,sBAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,EAAC;;;;iBAEhD;gBAED;;mBAEG;gBACG,kCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,UAAyB;;4BAIzE,YAAY,EACZ,eAAe,EACf,GAAG,EACH,eAAe,EACf,YAAY,EACZ,aAAa;;;;oCARnB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mDAE3B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;sDACnC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;0CACtD,YAAU,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,aAAQ,YAAY,UAAI,eAAe,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC,GAAG,EAAE,CAAE;sDAClH,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC;mDACtD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;oDAChD,YAAY,CAAC,MAAM,CAAC,eAAe,CAAC;oCAC1D,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,EAAA;;oCAApC,SAAoC,CAAC;;;;;iBACxC;gBAYD;;mBAEG;gBACG,kCAAM,GAAZ,UAAa,SAAiB,EAAE,UAAgC,EAAE,eAAuB;;4BAI/E,eAAe,EACf,UAAU,EAEV,GAAG;;;;oCANT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;sDAExB,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;iDAC7F,UAAU,YAAY,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAC,UAA4B,CAAC,GAAG,CAAC,EAAlC,CAAkC,CAAC,GAAG,eAAe;0CAE9H,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,eAAU,eAAiB;oCAC5F,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAED;;mBAEG;gBACG,kDAAsB,GAA5B,UAA6B,SAAiB,EAAE,WAAgB,EAAE,QAAa,EAAE,QAAiB;;4BAI1F,GAAG;;;;oCAHP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEtC,EAAE;oCACZ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wCACX,GAAG,GAAK,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,mCAAgC;6CACrF,sBAAoB,WAAW,yBAAoB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAC3H,sBAAoB,WAAW,UAAK,WAAW,QAAK,CAAA,CAAC;oCACjE,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,GAAG,GAAK,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAyB;6CAC9E,sBAAoB,WAAW,cAAS,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAChH,sBAAoB,WAAW,UAAK,WAAa,CAAA,CAAC;oCAC9D,CAAC;oCACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;oCACW,qBAAM,IAAI,CAAC,KAAK,CAAC,qCAAmC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAU,CAAC,EAAA;;8CAA5H,SAA4H;oCAC7J,sBAAO,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC;;;;iBAC/F;gBAED;;mBAEG;gBACG,2CAAe,GAArB,UAAsB,SAAiB;;;;;wCACd,qBAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,SAAS,CAAC,CAAC,EAAA;;mDAAxC,SAAwC;oCAC7D,sBAAO,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;iBAChE;gBAED;;mBAEG;gBACG,4CAAgB,GAAtB,UAAuB,UAAoB;;4BASjC,gBAAgB,EAChB,SAAS,EACT,UAAU,EACV,UAAU,EAIV,cAAc,EACd,aAAa,EACb,cAAc;;;;oCAjBpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,6CAA6C;oCAC7C,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;wCAClC,MAAM,gBAAC,EAAE,EAAC;uDAGW,UAAU,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,GAAG,GAAG,IAAI,GAAG,GAAG,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gDACrD,6DAA2D,gBAAgB,MAAG;iDAC9E,0JAAwJ,gBAAgB,MAAG;iDAC3K,kUAEiE,gBAAgB,+FACxB;qDACzD,6EAA2E,IAAI,CAAC,MAAM,6CAA0C;oDAChI,8EAA4E,IAAI,CAAC,MAAM,qCAAkC;qDACzH,qLAC8C,gBAAgB,4HACuB;oCACF,qBAAM,OAAO,CAAC,GAAG,CAAC;4CACxH,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;4CACrB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;4CACtB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;4CACtB,8BAA8B;4CAC9B,6BAA6B;4CAC7B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;yCAC7B,CAAC,EAAA;;yCAPwG,SAOxG;oCAEF,yDAAyD;oCACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;wCACjB,MAAM,gBAAC,EAAE,EAAC;oCAEd,yCAAyC;oCACzC,sBAAO,QAAQ,CAAC,GAAG,CAAC,UAAA,OAAO;4CACvB,IAAM,WAAW,GAAG,IAAI,yBAAW,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;4CAE3D,gDAAgD;4CAChD,WAAW,CAAC,OAAO,GAAG,SAAS;iDAC1B,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,EAA3C,CAA2C,CAAC;iDAC/D,GAAG,CAAC,UAAA,QAAQ;gDACT,IAAM,SAAS,GAAG,CAAC,CAAC,WAAW;qDAC1B,IAAI,CAAC,UAAA,UAAU;oDACZ,MAAM,CAAE,UAAU,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;wDAC7C,UAAU,CAAC,iBAAiB,CAAC,KAAK,GAAG;wDACrC,UAAU,CAAC,aAAa,CAAC,KAAK,QAAQ,CAAC,aAAa,CAAC,CAAC;gDAClE,CAAC,CAAC,CAAC;gDAEP,IAAI,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;gDACrD,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,KAAK,UAAU,IAAI,QAAQ,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;oDACzF,UAAU,IAAI,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,GAAG,CAAC;gDACtD,CAAC;gDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI,IAAI,QAAQ,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;oDAChF,UAAU,IAAI,GAAG,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC;gDACxF,CAAC;gDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;oDACzC,UAAU,IAAI,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC;gDACvD,CAAC;gDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;oDAC7C,UAAU,IAAI,GAAG,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,GAAG,CAAC;gDACzD,CAAC;gDAED,IAAM,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;gDACxC,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;gDAC5C,YAAY,CAAC,IAAI,GAAG,UAAU,CAAC;gDAC/B,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI,IAAI,QAAQ,CAAC,gBAAgB,CAAC,KAAK,SAAS,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,SAAS,CAAC;gDAChJ,YAAY,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC;gDACvD,YAAY,CAAC,SAAS,GAAG,SAAS,CAAC;gDACnC,YAAY,CAAC,WAAW,GAAG,QAAQ,CAAC,iBAAiB,CAAC,KAAK,KAAK,CAAC,CAAC,OAAO;gDACzE,YAAY,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC,OAAO;gDAClC,MAAM,CAAC,YAAY,CAAC;4CACxB,CAAC,CAAC,CAAC;4CAEP,4BAA4B;4CAC5B,WAAW,CAAC,WAAW,GAAG,WAAW;iDAChC,MAAM,CAAC,UAAA,UAAU;gDACd,OAAA,UAAU,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,IAAI,UAAU,CAAC,iBAAiB,CAAC,KAAK,GAAG;4CAAtF,CAAsF,CACzF;iDACA,GAAG,CAAC,UAAA,UAAU;gDACX,OAAA,IAAI,mCAAgB,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE,UAAU,CAAC,aAAa,CAAC,CAAC;4CAA9E,CAA8E,CACjF,CAAC;4CAEN,qDAAqD;4CACrD,WAAW,CAAC,WAAW,GAAG,WAAW;iDAChC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI,IAAI,UAAU,CAAC,iBAAiB,CAAC,KAAK,GAAG,EAAtF,CAAsF,CAAC;iDAC5G,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,IAAI,mCAAgB,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAnE,CAAmE,CAAC,CAAC,CAAC,2BAA2B;4CAExH,+CAA+C;4CAC/C,WAAW,CAAC,OAAO,GAAG,SAAS;iDAC1B,MAAM,CAAC,UAAA,OAAO;gDACX,MAAM,CAAE,OAAO,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,IAAI;oDAC9C,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,EAAzC,CAAyC,CAAC,CAAC;oDACxF,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,EAAzC,CAAyC,CAAC,CAAC,CAAC;4CACjG,CAAC,CAAC;iDACD,GAAG,CAAC,UAAA,OAAO;gDACR,MAAM,CAAC,IAAI,yBAAW,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;4CAC5I,CAAC,CAAC,CAAC;4CAEP,MAAM,CAAC,WAAW,CAAC;wCACvB,CAAC,CAAC,EAAC;;;;iBACN;gBAED;;mBAEG;gBACG,oCAAQ,GAAd,UAAe,SAAiB;;4BACtB,GAAG;;;;0CAAG,4DAA0D,SAAS,MAAG;oCACnE,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;6CAArB,SAAqB;oCACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;iBACvC;gBAED;;mBAEG;gBACG,uCAAW,GAAjB,UAAkB,KAAkB;;;4BAI1B,iBAAiB,EACnB,GAAG,EACD,iBAAiB;;;;oCALvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wDAEtB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAjC,CAAiC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;0CACzF,oBAAiB,KAAK,CAAC,IAAI,YAAM,iBAAmB;wDACpC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,EAAhB,CAAgB,CAAC;oCAC1E,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;wCAC7B,GAAG,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC;oCAC9F,GAAG,IAAI,GAAG,CAAC;oCACX,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,SAAiB;;4BACzB,GAAG;;;;0CAAG,kBAAe,SAAS,OAAG;oCACrC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,SAAiB,EAAE,UAAkB;;4BAC3C,GAAG;;;;0CAAG,8DAA4D,SAAS,6BAAwB,UAAU,MAAG;oCACvG,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;6CAArB,SAAqB;oCACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;iBACvC;gBAYD;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,iBAAqC,EAAE,MAAoB;;4BAIjE,SAAS,EACT,GAAG;;4BAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;kCAC3F,mBAAgB,SAAS,eAAS,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAG;4BACjF,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,sCAAU,GAAhB,UAAiB,iBAAqC,EAAE,OAAuB;;;4BAIrE,OAAO;;;;oCAHb,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;8CAEhC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,iBAAwB,EAAE,MAAM,CAAC,EAAhD,CAAgD,CAAC;oCACvF,qBAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAA;;oCAA1B,SAA0B,CAAC;;;;;iBAC9B;gBAYD;;mBAEG;gBACG,wCAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,qBAA0C;;4BAExI,WAAW,EAUX,SAAS,EAUT,SAAS;;;;kDApB4B,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;gDAEpE,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;wCAC9B,SAAS,CAAC,IAAI,GAAG,qBAAqB,CAAC;oCAC3C,CAAC;oCAED,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,EAAC;;;;iBAC/D;gBAYD;;mBAEG;gBACG,wCAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,SAAuB;;4BAIrH,WAAW,EAUX,SAAS,EAeK,cAAc,EAKlB,OAAO,EAGP,SAAS,EAIT,GAAG,EAOP,GAAG,EAIH,GAAG;;;;oCAnDb,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;kDAEP,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;yCAExG,CAAA,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,WAAW,CAAA,EAA/C,yBAA+C;yCAE3C,SAAS,CAAC,WAAW,EAArB,wBAAqB;yCACjB,CAAA,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,SAAS,CAAA,EAAzD,wBAAyD;qDAElC,mBAAgB,WAAW,CAAC,IAAI,6BAAsB,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,OAAG;oCAC/G,qBAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,EAAA;;oCAAhC,SAAgC,CAAC;;;8CAIrB,mBAAgB,WAAW,CAAC,IAAI,yBAAkB,SAAS,CAAC,IAAI,OAAG;oCACnF,qBAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAA;;oCAAzB,SAAyB,CAAC;gDAER,mBAAgB,WAAW,CAAC,IAAI,eAAS,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAG;oCACjG,qBAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;0CAGhB,mBAAgB,WAAW,CAAC,IAAI,oBAAa,SAAS,CAAC,IAAI,qBAAiB;oCACxF,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;yCAK1B,CAAA,SAAS,CAAC,UAAU,KAAK,SAAS,CAAC,UAAU,CAAA,EAA7C,yBAA6C;0CACjC,mBAAgB,WAAW,CAAC,IAAI,oBAAa,SAAS,CAAC,IAAI,WAAK,SAAS,CAAC,IAAI,UAAI,SAAS,CAAC,UAAU,GAAG,MAAM,GAAG,UAAU,CAAE;oCAC1I,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;yCAEf,CAAA,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAA,EAAjC,yBAAiC;0CAC5B,mBAAgB,WAAW,CAAC,IAAI,oBAAa,SAAS,CAAC,IAAI,WAAK,SAAS,CAAC,IAAM;oCAC5F,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;;iBAE7B;gBAED;;mBAEG;gBACG,yCAAa,GAAnB,UAAoB,WAAwB,EAAE,cAAsE;;;4BAI1G,cAAc;;;;oCAHpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;qDAEzB,cAAc,CAAC,GAAG,CAAC,UAAM,aAAa;;4CACzD,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,EAAC;;yCAC3F,CAAC;oCACF,qBAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAYD;;mBAEG;gBACG,sCAAU,GAAhB,UAAiB,iBAAqC,EAAE,kBAAuC;;4BACrF,SAAS,EACT,UAAU;;wCADE,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;yCACpF,kBAAkB,YAAY,2BAAY,GAAG,kBAAkB,CAAC,IAAI,GAAG,kBAAkB;4BAC5G,sBAAO,IAAI,CAAC,KAAK,CAAC,mBAAgB,SAAS,yBAAkB,UAAU,OAAG,CAAC,EAAC;;;iBAC/E;gBAYD;;mBAEG;gBACG,uCAAW,GAAjB,UAAkB,iBAAqC,EAAE,oBAA6C;;;4BAI5F,YAAY;;;;oCAHlB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mDAE1B,oBAA8B,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,iBAAwB,EAAE,MAAa,CAAC,EAAxD,CAAwD,CAAC;oCAC5H,qBAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAA;;oCAA/B,SAA+B,CAAC;;;;;iBACnC;gBAED;;mBAEG;gBACG,6CAAiB,GAAvB,UAAwB,OAAoB;;4BAIlC,kBAAkB;;;;oCAHxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;yDAErB,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,IAAI,GAAG,UAAU,CAAC,UAAU,GAAG,IAAI,EAAnC,CAAmC,CAAC;yCAEjG,CAAA,OAAO,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA,EAA7D,wBAA6D;oCAC7D,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,OAAO,CAAC,IAAI,6BAAsB,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,OAAG,CAAC,EAAA;;oCAAlG,SAAkG,CAAC;;;yCACnG,CAAA,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA7B,wBAA6B;oCAC7B,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAgB,OAAO,CAAC,IAAI,4BAAsB,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,EAAA;;oCAApG,SAAoG,CAAC;;;;;;iBAC5G;gBAYD;;mBAEG;gBACG,4CAAgB,GAAtB,UAAuB,iBAAqC,EAAE,UAA4B;;4BAIhF,SAAS,EACT,WAAW,EACX,qBAAqB,EACvB,GAAG;;4BANP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;0CACnF,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,IAAI,GAAG,MAAM,GAAG,IAAI,EAApB,CAAoB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;oDAC3D,UAAU,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,IAAI,GAAG,MAAM,GAAG,IAAI,EAApB,CAAoB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;kCAClG,mBAAgB,SAAS,4BAAqB,UAAU,CAAC,IAAI,QAAI;iCACvE,kBAAgB,WAAW,OAAI,CAAA;iCAC/B,kBAAe,UAAU,CAAC,mBAAmB,WAAK,qBAAqB,MAAG,CAAA;4BAC9E,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;gCAAC,GAAG,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC;4BACpE,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,6CAAiB,GAAvB,UAAwB,iBAAqC,EAAE,WAA+B;;;4BAIpF,QAAQ;;;;oCAHd,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;+CAE/B,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,iBAAwB,EAAE,UAAU,CAAC,EAA3D,CAA2D,CAAC;oCAC3G,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAYD;;mBAEG;gBACG,0CAAc,GAApB,UAAqB,iBAAqC,EAAE,UAA4B;;4BAI9E,SAAS,EACT,GAAG;;4BAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wCAE9B,iBAAiB,YAAY,yBAAW,GAAG,iBAAiB,CAAC,IAAI,GAAG,iBAAiB;kCAC3F,mBAAgB,SAAS,6BAAsB,UAAU,CAAC,IAAI,OAAG;4BAC7E,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;;;iBAC1B;gBAYD;;mBAEG;gBACG,2CAAe,GAArB,UAAsB,iBAAqC,EAAE,WAA+B;;;4BAIlF,QAAQ;;;;oCAHd,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;+CAE/B,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,iBAAwB,EAAE,UAAU,CAAC,EAAzD,CAAyD,CAAC;oCACzG,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED;;mBAEG;gBACG,uCAAW,GAAjB,UAAkB,SAAiB,EAAE,KAAkB;;4BAI7C,OAAO,EACP,GAAG;;;;oCAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;8CAEhC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,IAAI,GAAG,UAAU,GAAG,IAAI,EAAxB,CAAwB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;0CAC5E,aAAU,KAAK,CAAC,QAAQ,GAAG,QAAQ,GAAG,EAAE,kBAAW,KAAK,CAAC,IAAI,gBAAS,SAAS,WAAK,OAAO,MAAG;oCAC1G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,SAAiB,EAAE,SAAiB;;4BAI1C,GAAG;;;;oCAHT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEpC,mBAAgB,SAAS,wBAAiB,SAAS,OAAG;oCAClE,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACH,yCAAa,GAAb,UAAc,WAAwI;oBAClJ,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;wBACvB,KAAK,QAAQ;4BACT,EAAE,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gCAC1B,MAAM,CAAC,OAAO,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;4BAC3E,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,WAAW,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;4BAC/E,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,SAAS;4BACV,MAAM,CAAC,WAAW,CAAC;wBACvB,KAAK,SAAS,CAAC;wBACf,KAAK,KAAK;4BACN,0BAA0B;4BAC1B,2BAA2B;4BAC3B,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC;gCAC3C,MAAM,CAAC,YAAU,WAAW,CAAC,SAAS,SAAI,WAAW,CAAC,KAAK,MAAG,CAAC;4BACnE,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC;gCACtB,MAAM,CAAC,YAAU,WAAW,CAAC,SAAS,QAAK,CAAC;4BAChD,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC;gCAClB,MAAM,CAAC,cAAY,WAAW,CAAC,KAAK,MAAG,CAAC;4BAE5C,MAAM,CAAC,cAAc,CAAC;wBAC1B,KAAK,UAAU;4BACX,MAAM,CAAC,WAAW,CAAC;wBACvB,KAAK,QAAQ;4BACT,MAAM,CAAC,YAAY,CAAC;wBACxB,KAAK,OAAO;4BACR,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC;gCAC3C,MAAM,CAAC,WAAS,WAAW,CAAC,SAAS,SAAI,WAAW,CAAC,KAAK,MAAG,CAAC;4BAClE,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC;gCACtB,MAAM,CAAC,WAAS,WAAW,CAAC,SAAS,QAAK,CAAC;4BAC/C,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC;gCAClB,MAAM,CAAC,aAAW,WAAW,CAAC,KAAK,MAAG,CAAC;4BAE3C,MAAM,CAAC,YAAY,CAAC;wBACxB,KAAK,QAAQ,CAAC;wBACd,KAAK,QAAQ;4BACT,MAAM,CAAC,YAAY,CAAC;wBACxB,KAAK,SAAS;4BACV,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gCAC7C,MAAM,CAAC,aAAW,WAAW,CAAC,SAAS,SAAI,WAAW,CAAC,KAAK,MAAG,CAAC;4BAEpE,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gCAC3B,MAAM,CAAC,eAAa,WAAW,CAAC,KAAK,MAAG,CAAC;4BAE7C,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,aAAW,WAAW,CAAC,SAAS,MAAG,CAAC;4BAE/C,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,SAAS,CAAC;4BACrB,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,UAAU;4BACX,MAAM,CAAC,cAAc,CAAC;wBAC1B,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,cAAc;4BACf,MAAM,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;oBACpF,CAAC;oBAED,MAAM,IAAI,qEAAiC,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBAC5E,CAAC;gBAED;;mBAEG;gBACH,gDAAoB,GAApB,UAAqB,mBAAwB,EAAE,aAAkB;oBAE7D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,QAAQ,CAAC;wBACxC,MAAM,CAAC,mBAAmB,KAAK,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAC3D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,SAAS,CAAC;wBACzC,MAAM,CAAC,mBAAmB,KAAK,CAAC,CAAC,CAAC,aAAa,IAAI,aAAa,KAAK,OAAO,CAAC,CAAC;oBAClF,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,UAAU,CAAC;wBAC1C,MAAM,CAAC,mBAAmB,EAAE,KAAK,aAAa,CAAC;oBAEnD,MAAM,CAAC,mBAAmB,KAAK,aAAa,CAAC;gBACjD,CAAC;gBAED;;mBAEG;gBACG,oCAAQ,GAAd,UAAe,SAAiB;;;;wCAC5B,qBAAM,IAAI,CAAC,KAAK,CAAC,oBAAkB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAG,CAAC,EAAA;;oCAA5E,SAA4E,CAAC;;;;;iBAChF;gBASD,sBAAc,qCAAM;oBAPpB,4EAA4E;oBAC5E,oBAAoB;oBACpB,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAoB,CAAC;oBACpD,CAAC;;;mBAAA;gBAED;;mBAEG;gBACO,uCAAW,GAArB,UAAsB,aAA4B;oBAAlD,iBAEC;oBADG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG,EAA9C,CAA8C,CAAC,CAAC;gBACjG,CAAC;gBAED;;mBAEG;gBACO,gDAAoB,GAA9B,UAA+B,MAAoB;oBAC/C,IAAI,CAAC,GAAG,OAAI,MAAM,CAAC,IAAI,QAAI,GAAG,MAAM,CAAC,IAAI,CAAC;oBAC1C,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;wBAClD,CAAC,IAAI,WAAW,CAAC;oBACrB,+CAA+C;oBAC/C,2BAA2B;oBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC;wBAC5B,CAAC,IAAI,2CAA2C,CAAC;oBACrD,2DAA2D;oBAC3D,gDAAgD;oBAChD,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;wBAC1D,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BACrC,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC7C,CAAC,IAAI,WAAW,GAAG,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI,GAAG,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;wBACzE,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;4BAC9C,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC5C,CAAC,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;oBACL,CAAC;oBAED,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBAGL,wBAAC;YAAD,CAp2BA,AAo2BC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCz2BF;;;;eAIG;YACH;gBA6CI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,sBAAY,OAAsB,EAAE,MAAc,EAAE,MAAY;oBAdhE;;uBAEG;oBACO,2BAAsB,GAAyB,EAAE,CAAC;oBAaxD,IAAI,CAAC,OAAO,GAAG,yBAAW,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;oBACzE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBAErB,kDAAkD;oBAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;wBACnB,MAAM,IAAI,iDAAuB,CAAC,MAAM,CAAC,CAAC;oBAC9C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACvB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;oBAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;wBAClB,MAAM,IAAI,iDAAuB,CAAC,KAAK,CAAC,CAAC;oBAE7C,wEAAwE;oBACxE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wBACR,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBAE5B,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;gBAC/C,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;;mBAIG;gBACH,8BAAO,GAAP;oBAAA,iBAqCC;oBAnCG,0CAA0C;oBAC1C,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;wBAC9B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC3B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;wBAC/B,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG;qBACtF,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;oBAE7B,6DAA6D;oBAC7D,+DAA+D;oBAC/D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;wBACtE,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;4BAC9B,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,UAAC,GAAQ,EAAE,IAAS;gCAChD,EAAE,CAAC,CAAC,GAAG,CAAC;oCACJ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gCAErB,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gCACjB,EAAE,EAAE,CAAC;4BACT,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBAEP,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;4BAC9B,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,UAAC,GAAQ,EAAE,UAAe;gCACzD,EAAE,CAAC,CAAC,GAAG,CAAC;oCACJ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gCAErB,KAAI,CAAC,kBAAkB,GAAG;oCACtB,EAAE,EAAE,CAAC;oCACL,UAAU,EAAE,UAAU;oCACtB,mBAAmB,EAAE,KAAK;iCAC7B,CAAC;gCACF,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,GAAQ,IAAK,OAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,EAAtB,CAAsB,CAAC,CAAC;4BACrF,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACH,iCAAU,GAAV;oBAAA,iBAoBC;oBAnBG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wBACvC,MAAM,IAAI,iDAAuB,CAAC,QAAQ,CAAC,CAAC;oBAEhD,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;wBAC9B,IAAM,OAAO,GAAG,UAAC,GAAQ,IAAK,OAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,EAAtB,CAAsB,CAAC;wBAErD,8CAA8C;wBAC9C,EAAE,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;4BACZ,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;4BACzB,KAAI,CAAC,IAAI,GAAG,SAAS,CAAC;4BACtB,KAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;wBACrC,CAAC;wBAED,gDAAgD;wBAChD,EAAE,CAAC,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;4BAC1B,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;4BAClD,KAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;wBACxC,CAAC;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,wCAAiB,GAAvB;;;;;;oCACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;wCACvC,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,IAAI,iDAAuB,CAAC,QAAQ,CAAC,CAAC,EAAC;oCAEtC,qBAAM,IAAI,CAAC,0BAA0B,EAAE,EAAA;;yDAAvC,SAAuC;oCAClE,sBAAO,IAAI,qCAAiB,CAAC,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAC;;;;iBACvE;gBAED;;mBAEG;gBACH,sCAAe,GAAf;oBACI,MAAM,CAAC;wBACH,MAAM,EAAE,IAAI,CAAC,MAAM;wBACnB,UAAU,EAAE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,GAAG,SAAS;wBACpF,IAAI,EAAE,IAAI,CAAC,IAAI;qBAClB,CAAC;gBACN,CAAC;gBAED;;;mBAGG;gBACH,gDAAyB,GAAzB,UAA0B,GAAW,EAAE,UAAyB;oBAC5D,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;wBAC/C,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBACrB,IAAM,iBAAiB,GAAU,EAAE,CAAC;oBACpC,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,GAAG,SAAS,GAAG,MAAM,EAAzB,CAAyB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC3F,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,UAAC,GAAW;wBACjD,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAClD,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC,CAAC,CAAC,CAAC,kEAAkE;oBACtE,MAAM,CAAC,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;gBACpC,CAAC;gBAED;;mBAEG;gBACH,uCAAgB,GAAhB,UAAiB,UAAkB;oBAC/B,MAAM,CAAC,OAAI,UAAU,OAAG,CAAC,CAAC,0BAA0B;gBACxD,CAAC;gBAED;;mBAEG;gBACH,sCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,OAAI,SAAS,OAAG,CAAC;gBAC5B,CAAC;gBAED;;mBAEG;gBACH,sCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,OAAI,SAAS,OAAG,CAAC;gBAC5B,CAAC;gBAED;;mBAEG;gBACH,6CAAsB,GAAtB,UAAuB,KAAU,EAAE,cAA8B;oBAC7D,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;wBACtC,MAAM,CAAC,IAAI,CAAC;oBAEhB,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;wBAElC,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,QAAQ;4BACrB,EAAE,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,iDAAuB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;4BACpE,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,iDAAuB,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;4BACvE,CAAC;wBAEL,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;wBAEjC,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACH,2CAAoB,GAApB,UAAqB,KAAU,EAAE,cAA8B;oBAC3D,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;wBAEhC,KAAK,yBAAW,CAAC,QAAQ;4BACrB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,EAAE,cAAc,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC;wBAEvG,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;wBAE5D,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAE7B,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;;;mBAIG;gBACO,iDAA0B,GAApC;oBAAA,iBAuCC;oBArCG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBACZ,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,EAAE,EAAE,IAAI;4BACxB,KAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAC,GAAQ,EAAE,UAAe;gCAC9C,EAAE,CAAC,CAAC,GAAG,CAAC;oCACJ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gCAErB,IAAI,YAAY,GAAG,KAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,UAAU,KAAK,UAAU,EAAtC,CAAsC,CAAC,CAAC;gCAC5G,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oCAChB,YAAY,GAAG;wCACX,EAAE,EAAE,KAAI,CAAC,sBAAsB,CAAC,MAAM;wCACtC,UAAU,EAAE,UAAU;wCACtB,mBAAmB,EAAE,KAAK;qCAC7B,CAAC;oCACF,YAAY,CAAC,eAAe,GAAG;wCAC3B,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;4CAC9B,UAAU,CAAC,KAAK,CAAC,UAAC,GAAQ;gDACtB,EAAE,CAAC,CAAC,GAAG,CAAC;oDACJ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gDAErB,EAAE,CAAC,CAAC,KAAI,CAAC,IAAI,IAAI,YAAY,CAAC,CAAC,CAAC;oDAC5B,KAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,KAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;gDAC7F,CAAC;gDACD,EAAE,EAAE,CAAC;4CACT,CAAC,CAAC,CAAC;wCACP,CAAC,CAAC,CAAC;oCACP,CAAC,CAAC;oCACF,KAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gCACnD,CAAC;gCACD,EAAE,CAAC,YAAY,CAAC,CAAC;4BACrB,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;wBACxB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBAEpD,MAAM,IAAI,iDAAuB,CAAC,QAAQ,CAAC,CAAC;gBAChD,CAAC;gBAED;;mBAEG;gBACO,uCAAgB,GAA1B;oBACI,IAAI,CAAC;wBACD,IAAI,CAAC,MAAM,GAAG,6BAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAEjD,CAAC;oBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,MAAM,IAAI,+DAA8B,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;oBACnE,CAAC;gBACL,CAAC;gBAEL,mBAAC;YAAD,CAlUA,AAkUC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YC3RF,gEAAgE;YAChE,oEAAoE;YACpE,yDAAyD;YACzD,mCAAmC;YACnC,8BAA8B;YAC9B,wCAAwC;YACxC,yBAAyB;YAEzB;;eAEG;YACH;gBAmCI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,sBAAsB,UAAsB,EACtB,mBAAyC;oBADzC,eAAU,GAAV,UAAU,CAAY;oBACtB,wBAAmB,GAAnB,mBAAmB,CAAsB;oBAjCrD,SAAI,GAA+B,QAAQ,CAAC;oBAC5C,YAAO,GAAa,EAAE,CAAC;oBAKvB,UAAK,GAAW,EAAE,CAAC;oBACnB,oBAAe,GAAqB,EAAE,CAAC;oBACvC,uBAAkB,GAAwB,EAAE,CAAC;oBAC7C,aAAQ,GAAa,EAAE,CAAC;oBACxB,WAAM,GAAuD,EAAE,CAAC;oBAChE,YAAO,GAAuD,EAAE,CAAC;oBACjE,aAAQ,GAAqB,EAAE,CAAC;oBAChC,eAAU,GAAkB,EAAE,CAAC;oBAO/B,kBAAa,GAAY,IAAI,CAAC;oBAC9B,4BAAuB,GAAY,KAAK,CAAC;oBAEnD;;uBAEG;oBACO,2BAAsB,GAAY,KAAK,CAAC;oBAQ9C,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,UAAU,CAAC,CAAC;gBAC7C,CAAC;gBASD,sBAAI,+BAAK;oBAPT,4EAA4E;oBAC5E,YAAY;oBACZ,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;oBACxC,CAAC;;;mBAAA;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,qCAAc,GAAd;oBACI,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;oBAC3B,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,6BAAM,GAAN;oBACI,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;oBACrB,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAiBD;;mBAEG;gBACH,6BAAM,GAAN,UAAO,4BAA4D,EAAE,cAA8B;oBAC/F,IAAM,SAAS,GAAG,cAAc,GAAG,cAAc,GAAmB,4BAA4B,CAAC;oBAEjG,EAAE,CAAC,CAAC,4BAA4B,YAAY,QAAQ,CAAC,CAAC,CAAC;wBACnD,IAAM,SAAS,GAAU,4BAA6B,CAAC,IAAI,CAAC;wBAC5D,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,SAAS,CAAC,CAAC;wBACtC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;wBAC9E,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;wBACrC,IAAI,CAAC,UAAU,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;oBAE1C,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,4BAA4B,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC1D,IAAI,CAAC,aAAa,GAAY,4BAA4B,CAAC;oBAC/D,CAAC;oBAED,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;oBACrB,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;oBAChC,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBA0BD;;;mBAGG;gBACH,6BAAM,GAAN,UAAO,SAA2B;oBAC9B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;oBACrB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACZ,EAAE,CAAC,CAAC,SAAS,YAAY,KAAK,CAAC,CAAC,CAAC;4BAC7B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;wBAC7B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,IAAI,CAAC,OAAO,GAAG,CAAC,SAAS,CAAC,CAAC;wBAC/B,CAAC;oBACL,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAiBD;;mBAEG;gBACH,gCAAS,GAAT,UAAU,SAA0B;oBAChC,EAAE,CAAC,CAAC,SAAS,YAAY,KAAK,CAAC;wBAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAClD,IAAI;wBACA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAEjC,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAiBD;;mBAEG;gBACH,8BAAO,GAAP,UAAQ,QAA6D,EAAE,WAAyB;oBAC5F,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;oBAC/B,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;mBAGG;gBACH,2BAAI,GAAJ,UAAK,YAA6B,EAAE,KAAa;oBAC7C,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC;oBAClC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;oBAC9D,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;oBACrC,IAAI,CAAC,UAAU,GAAG,EAAC,KAAK,EAAE,QAAQ,EAAC,CAAC;oBACpC,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;mBAGG;gBACH,gCAAS,GAAT,UAAU,SAAiB,EAAE,KAAa;oBACtC,IAAI,CAAC,aAAa,GAAY,SAAS,CAAC;oBACxC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBAC5B,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAwBD;;;;mBAIG;gBACH,gCAAS,GAAT,UAAU,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;oBAA7C,0BAAA,EAAA,cAAsB;oBAC9E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC3E,CAAC;gBAwBD;;;;mBAIG;gBACH,+BAAQ,GAAR,UAAS,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;oBAA7C,0BAAA,EAAA,cAAsB;oBAC7E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC1E,CAAC;gBAwBD;;;;mBAIG;gBACH,yCAAkB,GAAlB,UAAmB,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;oBAA7C,0BAAA,EAAA,cAAsB;oBACvF,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC3E,CAAC;gBAwBD;;;;mBAIG;gBACH,wCAAiB,GAAjB,UAAkB,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;oBAA7C,0BAAA,EAAA,cAAsB;oBACtF,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC1E,CAAC;gBA8BD;;;;;;mBAMG;gBACH,0CAAmB,GAAnB,UAAoB,aAAqB,EAAE,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;oBAA7C,0BAAA,EAAA,cAAsB;oBAC/G,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;gBAChG,CAAC;gBA8BD;;;;;;mBAMG;gBACH,yCAAkB,GAAlB,UAAmB,aAAqB,EAAE,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;oBAA7C,0BAAA,EAAA,cAAsB;oBAC9G,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;gBACjG,CAAC;gBA8BD;;;;;;mBAMG;gBACH,yCAAkB,GAAlB,UAAmB,aAAqB,EAAE,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;oBAA7C,0BAAA,EAAA,cAAsB;oBAC9G,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;gBAC/F,CAAC;gBA8BD;;;;;;mBAMG;gBACH,wCAAiB,GAAjB,UAAkB,aAAqB,EAAE,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB;oBAA7C,0BAAA,EAAA,cAAsB;oBAC7G,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;gBAChG,CAAC;gBAED;;;;;mBAKG;gBACH,yCAAkB,GAAlB,UAAmB,QAAgB,EAAE,SAAkB;oBACnD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;gBACvE,CAAC;gBAED;;;;;mBAKG;gBACH,0CAAmB,GAAnB,UAAoB,QAAgB,EAAE,SAAkB;oBACpD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;gBACxE,CAAC;gBAED;;;;;mBAKG;gBACH,+CAAwB,GAAxB,UAAyB,aAAqB,EAAE,QAAgB,EAAE,SAAsB;oBAAtB,0BAAA,EAAA,cAAsB;oBACpF,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;gBAC5E,CAAC;gBAED;;;;;mBAKG;gBACH,gDAAyB,GAAzB,UAA0B,aAAqB,EAAE,QAAgB,EAAE,SAAsB;oBAAtB,0BAAA,EAAA,cAAsB;oBACrF,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;gBAC5E,CAAC;gBAED;;;;;mBAKG;gBACH,oCAAa,GAAb,UAAc,QAAgB,EAAE,SAAsB;oBAAtB,0BAAA,EAAA,cAAsB;oBAE5C,IAAA,wBAA2D,EAA1D,uBAAe,EAAE,0BAAkB,CAAwB;oBAClE,IAAM,KAAK,GAAG,eAAe,GAAG,GAAG,GAAG,kBAAkB,GAAG,iBAAiB,CAAC;oBAE7E,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC;oBAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBACjC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;oBAC3C,QAAQ,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;oBAEjD,IAAM,iBAAiB,GAAsB;wBACzC,SAAS,EAAE,SAAS;wBACpB,KAAK,EAAE,QAAQ;wBACf,QAAQ,EAAE,EAAE;qBACf,CAAC;oBACF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAChD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;;;mBAKG;gBACH,0CAAmB,GAAnB,UAAoB,WAAmB,EAAE,QAAgB,EAAE,SAAsB;oBAAtB,0BAAA,EAAA,cAAsB;oBAEvE,IAAA,wBAA2D,EAA1D,uBAAe,EAAE,0BAAkB,CAAwB;oBAClE,IAAM,KAAK,GAAG,eAAe,GAAG,GAAG,GAAG,kBAAkB,GAAG,iBAAiB,CAAC;oBAC7E,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC;oBAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBACjC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;oBAC3C,QAAQ,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;oBAEjD,IAAM,iBAAiB,GAAsB;wBACzC,aAAa,EAAE,WAAW;wBAC1B,SAAS,EAAE,SAAS;wBACpB,KAAK,EAAE,QAAQ;wBACf,QAAQ,EAAE,EAAE;qBACf,CAAC;oBACF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAChD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;;;mBAKG;gBACH,4BAAK,GAAL,UAAM,KAAa,EAAE,UAA0B;oBAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;oBACvD,EAAE,CAAC,CAAC,UAAU,CAAC;wBAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC/C,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;mBAGG;gBACH,+BAAQ,GAAR,UAAS,KAAa,EAAE,UAA0B;oBAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;oBACpD,EAAE,CAAC,CAAC,UAAU,CAAC;wBAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC/C,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;;mBAIG;gBACH,oCAAa,GAAb,UAAc,GAAU;oBACd,IAAA,uCAAkE,EAAjE,uBAAe,EAAE,kBAAU,CAAuC;oBACzE,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;oBAC3C,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;mBAGG;gBACH,8BAAO,GAAP,UAAQ,KAAa,EAAE,UAA0B;oBAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;oBACnD,EAAE,CAAC,CAAC,UAAU,CAAC;wBAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC/C,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;;mBAIG;gBACH,mCAAY,GAAZ,UAAa,GAAU;oBACb,IAAA,uCAAkE,EAAjE,uBAAe,EAAE,kBAAU,CAAuC;oBACzE,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;oBAC1C,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;;;mBAKG;gBACH,6BAAM,GAAN,UAAO,MAAc,EAAE,UAA0B;oBAC7C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;oBACzD,EAAE,CAAC,CAAC,UAAU,CAAC;wBAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC/C,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;mBAGG;gBACH,gCAAS,GAAT,UAAU,MAAc,EAAE,UAA0B;oBAChD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;oBACtD,EAAE,CAAC,CAAC,UAAU,CAAC;wBAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC/C,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;mBAGG;gBACH,+BAAQ,GAAR,UAAS,MAAc,EAAE,UAA0B;oBAC/C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;oBACrD,EAAE,CAAC,CAAC,UAAU,CAAC;wBAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC/C,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;;mBAIG;gBACH,8BAAO,GAAP,UAAQ,OAAe;oBACnB,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,CAAC,CAAC;oBAC1B,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,iCAAU,GAAV,UAAW,OAAe;oBACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC5B,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;;mBAIG;gBACH,8BAAO,GAAP,UAAQ,IAAY,EAAE,KAA2B;oBAA3B,sBAAA,EAAA,aAA2B;oBAC7C,IAAI,CAAC,QAAQ,aAAK,GAAC,IAAI,IAAG,KAAK,KAAE,CAAC;oBAClC,MAAM,CAAC,IAAI,CAAC;;gBAChB,CAAC;gBAED;;mBAEG;gBACH,iCAAU,GAAV,UAAW,IAAY,EAAE,KAA2B;oBAA3B,sBAAA,EAAA,aAA2B;oBAChD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;oBAC5B,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;;;mBAKG;gBACH,+BAAQ,GAAR,UAAS,KAAa;oBAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;;;mBAKG;gBACH,gCAAS,GAAT,UAAU,MAAc;oBACpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,2BAAI,GAAJ,UAAK,IAAY;oBACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,2BAAI,GAAJ,UAAK,IAAY;oBACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,mCAAY,GAAZ,UAAa,GAAW,EAAE,KAAU;oBAChC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;oBAC7B,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;mBAGG;gBACH,oCAAa,GAAb,UAAc,UAAyB;oBAAvC,iBAKC;oBAJG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;wBAC/B,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;;;;mBAKG;gBACH,oCAAa,GAAb,UAAc,UAAyB;oBAAvC,iBAKC;oBAJG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;wBAC/B,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,oCAAa,GAAb;oBACI,IAAM,UAAU,GAAkB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;oBAErE,iDAAiD;oBACjD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBACtB,IAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;wBACjF,EAAE,CAAC,CAAC,YAAY,CAAC,sBAAsB,CAAC;4BACpC,UAAU,CAAC,0BAA0B,CAAC,GAAG,YAAY,CAAC,kBAAkB,CAAC;oBACjF,CAAC;oBAED,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAED;;;mBAGG;gBACH,6BAAM,GAAN;oBACI,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBACxC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBACnC,GAAG,IAAI,IAAI,CAAC,+BAA+B,EAAE,CAAC;oBAC9C,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBACpC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBACtC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBACrC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBACtC,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBACpC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBACrC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAClC,+EAAG,CAA2E;oBAC/E,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;gBACtB,CAAC;gBAED;;;;mBAIG;gBACH,wCAAiB,GAAjB;oBACI,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBACxC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBACnC,GAAG,IAAI,IAAI,CAAC,+BAA+B,EAAE,CAAC;oBAC9C,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBACpC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBACtC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBACrC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBACtC,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBACpC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBACrC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBACnC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;gBACtB,CAAC;gBAED;;;;mBAIG;gBACH,2CAAoB,GAApB,UAAqB,OAAmC;oBACpD,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBACxC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBACnC,GAAG,IAAI,IAAI,CAAC,+BAA+B,EAAE,CAAC;oBAC9C,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBACpC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBACtC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBACrC,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;wBACjC,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBAC1C,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBACpC,GAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBACrC,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBACnC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,yBAAyB,CAAC,GAAG,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;gBACvF,CAAC;gBAED;;mBAEG;gBACG,8BAAO,GAAb;;6CAGW,GAAG,EAAE,UAAU;;;wCAFF,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;kDAA3B,SAA2B;yCAErB,IAAI,CAAC,oBAAoB,EAAE;;;;oCAE1C,qBAAM,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;wCAA/C,sBAAO,SAAwC,EAAC,CAAE,oDAAoD;;yCAGlG,IAAI,CAAC,iBAAiB,EAAE,EAAxB,wBAAwB;oCACxB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;oCAA3B,SAA2B,CAAC;;;;;;;iBAEvC;gBAED;;mBAEG;gBACG,+CAAwB,GAA9B;;;yCAWkB,QAAQ,EAKZ,eAAa,EACf,YAAU,MAIH,GAAG,EAAE,UAAU,MACf,OAAO,EAAE,QAAQ,EAElB,eAAa,EACb,UAAQ,EACV,QAAQ,MAoGL,GAAG,EAAE,UAAU;;;wCA7HV,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;kDAA3B,SAA2B;;;;oCAG3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;wCAC5B,MAAM,IAAI,KAAK,CAAC,uGAAuG,CAAC,CAAC;oCAE7H,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,kBAAkB,IAAI,IAAI,CAAC,QAAQ,KAAK,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC;wCACtH,MAAM,IAAI,iFAAuC,EAAE,CAAC;oCAExD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC,CAAC,CAAC;mDAChB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;wCAC5E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC;4CAC5D,MAAM,IAAI,mEAAgC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oCAClE,CAAC;sDAEqB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI;yCAExF,CAAA,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAA,EAAlC,wBAAkC;yCAGR,IAAI,CAAC,oBAAoB,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;yCAC9C,IAAI,CAAC,yCAAyC,CAAC,eAAe,CAAC;sDAErE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;iDACtC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC;+CAC3D,SAAS;oCACxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,2BAAY,CAAC,CAAC,CAAC;wCACjD,QAAQ,IAAI,YAAY,CAAC;oCAC7B,CAAC;oCACD,QAAQ,IAAI,UAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,UAAC,aAAa,EAAE,KAAK;wCACzD,IAAM,YAAY,GAAG,KAAI,CAAC,WAAW,CAAC,eAAa,GAAG,GAAG,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;wCACpF,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;4CACd,MAAM,CAAC,cAAY,eAAa,SAAI,YAAY,iBAAY,aAAa,CAAC,QAAU,CAAC;wCACzF,CAAC;wCAAC,IAAI,CAAC,CAAC;4CACJ,MAAM,CAAI,eAAa,SAAI,YAAY,iBAAY,aAAa,CAAC,QAAU,CAAC;wCAChF,CAAC;oCACL,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oCACd,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;wCACnB,QAAQ,IAAI,IAAI,GAAG,OAAO,CAAC;oCAE/B,QAAQ,IAAI,YAAU,GAAG,UAAK,eAAe,CAAC,CAAC,uDAAuD;oCAEtG,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wCACtB,QAAQ,IAAI,YAAY,GAAG,QAAQ,CAAC;oCACxC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,QAAQ,IAAI,qBAAkB,UAAQ,CAAC,kBAAkB,CAAC,QAAQ,OAAG,CAAC,CAAC,8FAA8F;oCACzK,CAAC;oCAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,iCAAe,CAAC,CAAC,CAAC;wCAEpD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;4CACrC,QAAQ,IAAI,cAAW,IAAI,CAAC,UAAU,IAAI,CAAC,WAAO,CAAC;4CACnD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gDAChB,QAAQ,IAAI,cAAc,GAAG,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC;wCACpE,CAAC;oCACL,CAAC;oCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,2BAAY,CAAC,CAAC,CAAC;wCACxD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;4CACrC,QAAQ,GAAG,oBAAkB,QAAQ,uBAAiB,IAAI,CAAC,UAAU,IAAI,CAAC,CAAE,CAAC;4CAC7E,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gDAChB,QAAQ,IAAI,iBAAc,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAE,CAAC;wCACtE,CAAC;oCACL,CAAC;oCAAC,IAAI,CAAC,CAAC;wCAEJ,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;4CAChB,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;wCAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;4CAChB,QAAQ,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;oCACjD,CAAC;oCAEM,qBAAM,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC;6CAC/C,IAAI,CAAC,UAAC,OAAc;4CACjB,YAAU,GAAG,OAAO,CAAC;4CACrB,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;gDACrB,MAAM,CAAC,EAAE,CAAC;4CAEd,IAAI,SAAS,GAAG,EAAE,CAAC;4CACnB,IAAM,UAAU,GAAkB,EAAE,CAAC;4CACrC,EAAE,CAAC,CAAC,UAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAC;gDAClC,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;oDAC1B,MAAM,CAAC,UAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,UAAA,aAAa;wDAC5C,UAAU,CAAC,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;wDAC9F,MAAM,CAAC,eAAa,GAAG,GAAG,GAAG,aAAa,CAAC,YAAY,GAAG,QAAQ,GAAG,aAAa,CAAC,YAAY,CAAC;oDACpG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gDACrB,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;4CACpB,CAAC;4CAAC,IAAI,CAAC,CAAC;gDACJ,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,GAAG,UAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAAzD,CAAyD,CAAC,CAAC;gDAC7F,IAAM,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,UAAC,EAAO,IAAK,OAAA,OAAO,EAAE,KAAK,QAAQ,EAAtB,CAAsB,CAAC,CAAC;gDACnE,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oDAChB,8EAA8E;oDAC9E,SAAS,GAAM,eAAa,SAAI,UAAQ,CAAC,kBAAkB,CAAC,YAAY,aAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC;gDACtG,CAAC;gDAAC,IAAI,CAAC,CAAC;oDACJ,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;oDACxB,SAAS,GAAG,eAAa,GAAG,GAAG,GAAG,UAAQ,CAAC,kBAAkB,CAAC,YAAY,GAAG,YAAY,CAAC;gDAC9F,CAAC;4CACL,CAAC;4CACK,IAAA;;uEAEqB,EAFpB,uBAAe,EAAE,8BAAsB,CAElB;4CAC5B,MAAM,CAAE,WAA2B,CAAC,KAAK,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAAC;wCACvF,CAAC,CAAC;6CACD,IAAI,CAAC,UAAA,OAAO;4CACT,MAAM,CAAC,KAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;wCAC9C,CAAC,CAAC;6CACD,IAAI,CAAC,UAAA,OAAO;4CAET,MAAM,CAAC,KAAI,CAAC,kBAAkB,CAAC,WAA0B,EAAE,OAAO,CAAC;iDAC9D,IAAI,CAAC,UAAA,MAAM;gDACR,MAAM,CAAC,OAAO,CAAC;4CACnB,CAAC,CAAC,CAAC;wCACX,CAAC,CAAC;6CACD,IAAI,CAAC,UAAA,OAAO;4CACT,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC;gDACpB,MAAM,CAAC,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,yBAAyB,CAAC,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,EAAP,CAAO,CAAC,CAAC;4CAE9H,MAAM,CAAC,OAAO,CAAC;wCACnB,CAAC,CAAC;6CACD,IAAI,CAAC,UAAA,OAAO;4CACT,MAAM,CAAC;gDACH,QAAQ,EAAE,OAAO;gDACjB,UAAU,EAAE,YAAU;6CACzB,CAAC;wCACN,CAAC,CAAC,EAAA;wCApDN,sBAAO,SAoDD,EAAC;;yCAImB,IAAI,CAAC,oBAAoB,EAAE;oCAE9C,qBAAM,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC;6CAC1C,IAAI,CAAC,UAAA,OAAO;4CACT,YAAU,GAAG,OAAO,CAAC;4CACrB,MAAM,CAAC,KAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;wCAC9C,CAAC,CAAC;6CACD,IAAI,CAAC,UAAA,OAAO;4CAET,MAAM,CAAC,KAAI,CAAC,kBAAkB,CAAC,WAA0B,EAAE,OAAO,CAAC;iDAC9D,IAAI,CAAC,UAAA,MAAM;gDACR,MAAM,CAAC,OAAO,CAAC;4CACnB,CAAC,CAAC,CAAC;wCACX,CAAC,CAAC;6CACD,IAAI,CAAC,UAAA,OAAO;4CACT,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gDACtB,MAAM,CAAC,KAAI,CAAC,UAAU,CAAC,WAAW;qDAC7B,yBAAyB,CAAC,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC;qDAClE,IAAI,CAAC,cAAM,OAAA,OAAO,EAAP,CAAO,CAAC,CAAC;4CAC7B,CAAC;4CACD,MAAM,CAAC,OAAO,CAAC;wCACnB,CAAC,CAAC;6CACD,IAAI,CAAC,UAAA,OAAO;4CACT,MAAM,CAAC;gDACH,QAAQ,EAAE,OAAO;gDACjB,UAAU,EAAE,YAAU;6CACzB,CAAC;wCACN,CAAC,CAAC,EAAA;wCAzBN,sBAAO,SAyBD,EAAC;;;yCAIP,IAAI,CAAC,iBAAiB,EAAE,EAAxB,wBAAwB;oCACxB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;oCAA3B,SAA2B,CAAC;;;;;;;iBAEvC;gBAED;;;mBAGG;gBACG,+BAAQ,GAAd;;;yCAMU,SAAS,EACT,QAAQ,EAER,aAAa,EACf,QAAQ,EASN,UAAU,MAUT,aAAa,EAAE,oBAAoB;;;;oCA5B1C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;wCAC/B,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;kDAA3B,SAA2B;gDAE7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI;+CACvE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC;oDAEpD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;+CAClC,QAAQ,GAAG,QAAQ,CAAC,iCAAiC,CAAC,GAAG,CAAC,UAAC,aAAa,EAAE,KAAK;wCACtF,IAAM,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;wCAC/D,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;4CACd,MAAM,CAAC,cAAY,aAAa,SAAI,YAAY,MAAG,CAAC;wCACxD,CAAC;wCAAC,IAAI,CAAC,CAAC;4CACJ,MAAM,CAAI,aAAa,SAAI,YAAY,MAAG,CAAC;wCAC/C,CAAC;oCACL,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU;iDAEX,IAAI;yCAClB,KAAK,CAAC;wCACH,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;wCAC7C,YAAY,EAAE,IAAI;wCAClB,uBAAuB,EAAE,IAAI;wCAC7B,SAAS,EAAE,IAAI;wCACf,UAAU,EAAE,IAAI;qCACnB,CAAC;yCACD,MAAM,CAAC,QAAQ,CAAC;yCAEyB,UAAU,CAAC,oBAAoB,EAAE;;;;oCAG3D,qBAAM,WAAW,CAAC,KAAK,CAAC,aAAa,EAAE,oBAAoB,CAAC,EAAA;;8CAA5D,SAA4D;oCAC5E,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wCACtE,MAAM,gBAAC,CAAC,EAAC;oCAEb,sBAAO,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAC;;yCAGvE,IAAI,CAAC,iBAAiB,EAAE,EAAxB,wBAAwB;oCACxB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;oCAA3B,SAA2B,CAAC;;;;;;;iBAEvC;gBAED;;mBAEG;gBACG,iCAAU,GAAhB;;;4BACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;gCAC/B,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,sBAAO,IAAI,CAAC,OAAO,EAAE,EAAC;;;iBACzB;gBAED;;mBAEG;gBACG,gCAAS,GAAf;;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;wCAC/B,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhC,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;8CAApB,SAAoB;oCACpC,sBAAO,OAAO,CAAC,CAAC,CAAC,EAAC;;;;iBAErB;gBAED;;mBAEG;gBACG,sCAAe,GAArB;;;4BACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;gCAC/B,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,8CAA8C;4BAC9C,sBAAO,OAAO,CAAC,GAAG,CAAC;oCACf,IAAI,CAAC,OAAO,EAAE;oCACd,IAAI,CAAC,QAAQ,EAAE;iCAClB,CAAC,EAAC;;;iBACN;gBAED;;mBAEG;gBACG,8BAAO,GAAb;;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC;wCAC/B,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhC,qBAAM,IAAI,CAAC,wBAAwB,EAAE,EAAA;;8CAArC,SAAqC;oCACrD,sBAAO,OAAO,CAAC,QAAQ,EAAC;;;;iBAC3B;gBAED,mBAAmB;gBACnB,kCAAkC;gBAClC,mBAAmB;gBACnB,IAAI;gBAEJ;;mBAEG;gBACG,6BAAM,GAAZ;;qCAEU,MAAM,EAGF,QAAQ,EAGJ,aAAa,EAMb,aAAa;;;wCAbX,qBAAM,IAAI,CAAC,wBAAwB,EAAE,EAAA;;8CAArC,SAAqC;6CACtC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAQ;oCAEzC,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,YAAY,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;mDAC9C,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC;wCAE1E,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,YAAY,IAAI,CAAC,CAAC,CAAC;4DACb,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAC;4CACpE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;4CACpC,EAAE,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;gDACvD,MAAM,IAAI,uEAAkC,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;wCAErG,CAAC;wCAAC,IAAI,CAAC,CAAC;4DACkB,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC;4CACjE,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,CAAC,WAAW,CAAC;gDACnC,MAAM,IAAI,uEAAkC,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;wCACrG,CAAC;oCACL,CAAC;oCAED,sBAAO,MAAM,EAAC;;;;iBACjB;gBAED;;mBAEG;gBACH,4BAAK,GAAL,UAAM,OAA6J;oBAAnK,iBA6EC;oBA5EG,IAAM,EAAE,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,GAAG,OAAO,CAAC,mBAAmB,GAAG,SAAS,CAAC,CAAC;oBAChG,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,uBAAuB,CAAC;wBAC3C,EAAE,CAAC,uBAAuB,GAAG,OAAO,CAAC,uBAAuB,CAAC;oBAEjE,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBAChB,KAAK,QAAQ;4BACT,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BACxB,KAAK,CAAC;wBACV,KAAK,QAAQ;4BACT,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;4BAC/B,KAAK,CAAC;wBACV,KAAK,QAAQ;4BACT,EAAE,CAAC,MAAM,EAAE,CAAC;4BACZ,KAAK,CAAC;oBACd,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC3E,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAEtE,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBAC5B,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;oBAC1D,CAAC;oBAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;wBACnB,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;wBACnD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;4BAC9D,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;wBAChF,CAAC;wBACD,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC3H,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAtB,CAAsB,CAAC,CAAC;oBAEzD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;wBACrB,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;4BACjB,KAAK,QAAQ;gCACT,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gCAC1B,KAAK,CAAC;4BACV,KAAK,KAAK;gCACN,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gCAC7B,KAAK,CAAC;4BACV,KAAK,IAAI;gCACL,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gCAC5B,KAAK,CAAC;wBACd,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;wBACvB,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;4BAClB,KAAK,QAAQ;gCACT,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gCAC5B,KAAK,CAAC;4BACV,KAAK,KAAK;gCACN,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gCAC/B,KAAK,CAAC;4BACV,KAAK,IAAI;gCACL,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gCAC9B,KAAK,CAAC;wBACd,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;wBAClC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,UAAU,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAApD,CAAoD,CAAC,CAAC;oBAE3G,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAA1C,CAA0C,CAAC,CAAC;oBAExF,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;wBAC/B,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAE5B,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;wBAChC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAE9B,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;yBACnB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAE3B,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAED,kCAAW,GAAX,UAAY,IAAY;oBACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;wBACpB,MAAM,CAAC,IAAI,CAAC;oBAChB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBACxD,CAAC;gBAED,mCAAY,GAAZ,UAAa,IAAY;oBACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;wBACpB,MAAM,CAAC,IAAI,CAAC;oBAChB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACzD,CAAC;gBAED,kCAAW,GAAX,UAAY,IAAY;oBACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;wBACpB,MAAM,CAAC,IAAI,CAAC;oBAChB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBACxD,CAAC;gBAED;;mBAEG;gBACH,mCAAY,GAAZ,UAAa,MAA4B;oBACrC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACb,KAAK,oBAAoB;4BACrB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;oBAC3C,CAAC;oBAED,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAElE,yCAAkB,GAA5B,UAA6B,WAAwB,EAAE,OAAiB;oBAAxE,iBAmGC;oBAjGG,IAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAA,iBAAiB;wBAC1D,IAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC,eAAe,CAAC;wBAC5D,IAAM,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;wBAC9D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;4BACZ,MAAM,IAAI,KAAK,CAAC,aAAU,WAAW,qBAAiB,CAAC,CAAC;wBAE5D,IAAM,cAAc,GAAG,KAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;wBAC1E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;4BAChB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;wBAEzF,IAAM,QAAQ,GAAG,cAAc,CAAC,4BAA4B,CAAC,iBAAiB,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;wBAEzG,IAAM,YAAY,GAAG,IAAI,YAAY,CAAC,KAAI,CAAC,UAAU,EAAE,KAAI,CAAC,mBAAmB,CAAC,CAAC;wBACjF,IAAI,SAAS,GAAG,EAAE,CAAC;wBAEnB,IAAM,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;wBACjF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;4BACV,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBAEtG,IAAI,aAAa,GAAW,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;wBAEhD,IAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAsB,CAAC;wBACzD,IAAM,iBAAiB,GAAG,iBAAiB,CAAC,SAAS,GAAG,OAAO,GAAG,KAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;wBAE9H;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA2BI;wBAEJ,mCAAmC;wBACnC,gDAAgD;wBAChD,kCAAkC;wBAClC,iCAAiC;wBAEjC,IAAM,GAAG,GAAG,iBAAiB,CAAC,QAAQ;6BACjC,GAAG,CAAC,UAAA,kBAAkB,IAAI,OAAA,kBAAkB,CAAC,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAArE,CAAqE,CAAC;6BAChG,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,KAAK,SAAS,EAAnB,CAAmB,CAAC;6BACpC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAM,CAAC,cAAc,CAAC,aAAa,CAAC,YAAY,CAAC,EAAjD,CAAiD,CAAC,CAAC;wBACrE,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;4BACpB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,+DAA+D;wBAE7F,MAAM,CAAC,YAAY;6BACd,MAAM,CAAI,cAAc,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC,aAAa,CAAC,YAAY,WAAQ,CAAC;6BACxF,SAAS,CAAC,YAAU,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,qBAAqB,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAW,CAAC;6BACxJ,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,IAAI,CAAC;6BAChD,QAAQ,CAAC,cAAc,CAAC,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,YAAY,EAAE,iBAAiB,CAAC,SAAS,CAAC;6BAC/G,aAAa,CAAC,KAAI,CAAC,UAAU,CAAC;6BAC9B,KAAK,CAAI,cAAc,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC,aAAa,CAAC,YAAY,4BAAyB,EAAE,EAAC,gBAAgB,EAAE,GAAG,EAAC,CAAC;6BACjI,OAAO,CAAC,cAAc,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC,aAAa,CAAC,YAAY,CAAC;6BAC9E,UAAU,EAAE;6BACZ,IAAI,CAAC,UAAC,OAAgC;4BACnC,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,kBAAkB;gCACjD,IAAM,QAAQ,GAAG,kBAAkB,CAAC,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;gCACnG,IAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM;oCACpC,MAAM,CAAC,QAAQ,KAAK,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,EAAE,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;gCAC1H,CAAC,CAAC,CAAC;gCACH,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oCAEf,EAAE,CAAC,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC;wCAC5B,IAAA,+CAAmF,EAAlF,kBAAU,EAAE,oBAAY,CAA2D;wCAC1F,oFAAoF;wCACpF,uEAAuE;wCACvE,kBAAkB,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;oCAEzE,CAAC;oCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;wCAC7B,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;oCAChF,CAAC;gCACL,CAAC;4BACL,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACX,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACjC,CAAC;gBAES,2CAAoB,GAA9B,UAA+B,OAAc;oBACzC,IAAM,WAAW,GAAG,IAAI,mEAAgC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;oBAClL,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAC1C,CAAC;gBAES,sDAA+B,GAAzC,UAA0C,KAAY;oBAAtD,iBAWC;oBAVG,IAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,KAAK,CAAC,IAAI,EAArB,CAAqB,CAAC,CAAC;oBAExE,IAAM,OAAO,GAAqB,YAAY,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;wBAC1G,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,YAAY,EAAjD,CAAiD,CAAC,CAAC;oBAC1F,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM;wBACrB,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC;4BAC1E,MAAM,GAAG,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;oBACtE,CAAC,CAAC,CAAC;gBACP,CAAC;gBAAA,CAAC;gBAEQ,8CAAuB,GAAjC,UAAkC,KAAY;oBAC1C,IAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,KAAK,CAAC,IAAI,EAArB,CAAqB,CAAC,CAAC;oBACrE,EAAE,CAAC,CAAC,SAAS,CAAC;wBACV,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC;oBAEvB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;wBAC7B,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,YAAY,EAAjD,CAAiD,CAAC,CAAC;oBACpG,CAAC,CAAC,CAAC;gBACP,CAAC;gBAAA,CAAC;gBAEQ,6CAAsB,GAAhC;oBACI,qDAAqD;oBADzD,iBA4HC;oBAzHG,IAAI,KAAK,GAAW,EAAE,EAAE,SAAiB,CAAC;oBAC1C,IAAM,UAAU,GAAa,EAAE,CAAC;oBAChC,IAAM,eAAe,GAAa,EAAE,CAAC;oBAErC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBACrB,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;wBAC/B,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC;oBAEhC,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;wBACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC;4BAChC,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBACpG,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;wBACtD,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;wBAEnC,UAAU,CAAC,IAAI,OAAf,UAAU,EAAS,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;wBAClF,eAAe,CAAC,IAAI,OAApB,eAAe,EAAS,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;oBACnF,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;oBACrC,CAAC;oBAED,yBAAyB;oBACzB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;wBACnB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACtB,UAAU,CAAC,IAAI,OAAf,UAAU,EAAS,KAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;4BACrE,eAAe,CAAC,IAAI,OAApB,eAAe,EAAS,KAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;wBACtE,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,IAAM,YAAY,GAAG,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,EAA1B,CAA0B,CAAC,CAAC;4BAC7E,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACf,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;gCAC1D,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BAC1C,CAAC;wBACL,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBACvD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,oBAAoB,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;4BAC5G,IAAM,OAAK,GAAG,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BACrH,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;gCACxE,gCAAgC;gCAChC,UAAU,CAAC,IAAI,CAAC,OAAK,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,GAAG,OAAK,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACjI,CAAC,CAAC,CAAC;wBACP,CAAC;oBACL,CAAC;oBAED,qCAAqC;oBACrC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,IAAI;wBAC7B,2EAA2E;wBAE3E,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;wBAC/C,IAAM,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;wBAC9D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;4BACZ,MAAM,IAAI,KAAK,CAAC,aAAU,WAAW,qBAAiB,CAAC,CAAC;wBAE5D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;4BACrB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;wBACzF,IAAM,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;wBACjG,IAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAsB,CAAC;wBACzD,qDAAqD;wBAErD,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;4BACnC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACvK,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBAEH;;;;;;;;;;;;;;;;uBAgBG;oBAEH,wBAAwB;oBACxB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAtC,CAAsC,CAAC;yBAChE,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,EAAlD,CAAkD,CAAC,CAAC;oBAE3E,6DAA6D;oBAC7D,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC;wBACxB,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAEzB,IAAI,IAAI,GAAW,EAAE,CAAC;oBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,iCAAe,CAAC,CAAC,CAAC;wBACpD,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACpB,KAAK,kBAAkB;gCACnB,IAAI,GAAG,2BAA2B,CAAC;gCACnC,KAAK,CAAC;4BACV,KAAK,mBAAmB;gCACpB,IAAI,GAAG,0BAA0B,CAAC;gCAClC,KAAK,CAAC;wBACd,CAAC;oBACL,CAAC;oBAED,2BAA2B;oBAC3B,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBAChB,KAAK,QAAQ;4BACT,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;wBAC7H,KAAK,QAAQ;4BACT,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;wBACpD,uUAAuU;wBAC3U,KAAK,QAAQ;4BACT,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,GAAG,mBAAmB,GAAG,GAAG,EAA/B,CAA+B,CAAC,CAAC;4BAC/F,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,GAAG;gCAC/D,qCAAqC;gCAC9B,MAAO,CAAC,iBAAiB,GAAG,GAAG,CAAC,GAAU,KAAI,CAAC,cAAe,CAAC,GAAG,CAAC,CAAC;gCAC3E,MAAM,CAAC,MAAM,CAAC;4BAClB,CAAC,EAAE,EAAE,CAAC,CAAC;4BACP,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;4BAC3B,MAAM,CAAC,SAAS,GAAG,SAAS,GAAG,GAAG,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO,GAAG,SAAS,CAAC;oBAC1G,CAAC;oBAED,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;gBAC3D,CAAC;gBAES,6CAAsB,GAAhC;oBAAA,iBAeC;oBAdG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,EAAE,CAAC;oBACrD,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK;wBAC1C,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;4BAClB,KAAK,KAAK;gCACN,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;4BACnF,KAAK,IAAI;gCACL,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC,GAAG,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;4BAClF;gCACI,MAAM,CAAC,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;wBAC3D,CAAC;oBACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAEjB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,EAAE,CAAC;oBAClC,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;gBACnC,CAAC;gBAES,4CAAqB,GAA/B;oBAAA,iBAqBC;oBAnBG,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,KAAK;wBAC5C,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;4BACjB,KAAK,KAAK;gCACN,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,KAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;4BAClF,KAAK,IAAI;gCACL,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC,GAAG,KAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;4BACjF;gCACI,MAAM,CAAC,KAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;wBAC1D,CAAC;oBACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAEb,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBACtB,IAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;wBACjF,EAAE,CAAC,CAAC,YAAY,CAAC,sBAAsB,CAAC;4BACpC,MAAM,CAAC,aAAW,UAAU,CAAC,MAAM,GAAG,GAAG,GAAG,UAAU,GAAG,OAAO,GAAG,EAAE,UAAK,YAAY,CAAC,mBAAmB,CAAC,QAAQ,+BAA4B,CAAC;oBACxJ,CAAC;oBAED,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,EAAE,CAAC;oBAClC,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC;gBAClC,CAAC;gBAED;;mBAEG;gBACK,2CAAoB,GAA5B,UAA6B,SAAiB;oBAA9C,iBAoBC;oBAnBG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK;wBAC/B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;4BAAC,MAAM,CAAC;wBAC5B,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;4BACrC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;gCAC3B,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,GAAG,KAAK,GAAG,QAAQ,CAAC,YAAY,GAAG,KAAK,GAAG,MAAM,CAAC,YAAY,GAAG,cAAc,CAAC;gCAC7G,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;4BAChJ,CAAC,CAAC,CAAC;4BACH,4CAA4C;wBAChD,CAAC,CAAC,CAAC;wBACH,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,MAAM,CAAC,YAAY,EAApB,CAAoB,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM;4BACxE,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,GAAG,KAAK,GAAG,MAAM,CAAC,YAAY,GAAG,cAAc,CAAC;4BAC7E,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;wBAChJ,CAAC,CAAC,CAAC;wBACH,KAAK,CAAC,QAAQ,CAAC,wBAAwB,CAAA,+CAA+C,CAAC,OAAO,CAAC,UAAA,QAAQ;4BACnG,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,GAAG,KAAK,GAAG,QAAQ,CAAC,YAAY,GAAG,cAAc,CAAC;4BAC/E,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;wBAC9I,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAES,sDAA+B,GAAzC;oBAAA,iBA+BC;oBA9BG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,IAAI;wBAChC,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;wBAC/C,IAAM,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;wBAC9D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;4BACZ,MAAM,IAAI,KAAK,CAAC,aAAU,WAAW,qBAAiB,CAAC,CAAC;wBAE5D,IAAM,cAAc,GAAG,KAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;wBAC1E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;4BAChB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;wBAEzF,IAAM,QAAQ,GAAG,cAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;wBAC5F,IAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAsB,CAAC;wBACzD,IAAM,aAAa,GAAG,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC;wBAClD,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;wBACtC,IAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,8BAA8B;wBAC7H,IAAM,eAAe,GAAG,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,8BAA8B;wBAE3F,IAAI,UAAU,GAAG,EAAE,CAAC;wBACpB,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACpB,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;4BAC9L,uHAAuH;wBAC3H,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;4BAC9L,uHAAuH;wBAC3H,CAAC;wBAED,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,QAAQ,GAAG,aAAa,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,MAAM,GAAG,UAAU,CAAC;wBAChH,iIAAiI;wBACjI,yJAAyJ;oBAC7J,CAAC,CAAC,CAAC;gBACP,CAAC;gBAES,2CAAoB,GAA9B;oBAAA,iBA4GC;oBA3GG,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI;wBAC3B,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,kCAAkC;wBAC9D,IAAI,aAAa,GAAW,IAAI,CAAC,SAAS,CAAC;wBAC3C,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;4BAEjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;gCACrB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BAEzF,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;wBACnD,CAAC;wBAED,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;wBAC/C,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;4BACf,MAAM,CAAC,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,CAAE,KAAK,GAAG,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAE,GAAG,EAAE,CAAC,CAAC;wBACvM,CAAC;wBAED,IAAM,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;wBAC9D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;4BACZ,MAAM,IAAI,KAAK,CAAC,aAAU,WAAW,qBAAiB,CAAC,CAAC;wBAE5D,IAAM,cAAc,GAAG,KAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;wBAC1E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;4BAChB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;wBAEzF,IAAM,QAAQ,GAAG,cAAc,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;wBAC5F,IAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAsB,CAAC;wBACzD,IAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,GAAG,OAAO,GAAG,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;wBAEpG,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;4BACxB,IAAM,aAAa,GAAG,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC;4BAClD,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;4BACzE,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;4BAClC,IAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC;4BAC9F,IAAM,eAAe,GAAG,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC,gBAAgB,CAAC,QAAQ,GAAG,SAAS,CAAC,uBAAuB,CAAC,QAAQ,CAAC;4BAC7H,IAAM,qBAAqB,GAAG,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC,uBAAuB,CAAC,QAAQ,GAAG,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC;4BAEnI,IAAI,UAAU,GAAG,EAAE,EAAE,UAAU,GAAG,EAAE,CAAC;4BACrC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACpB,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;gCAC9L,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;4BACtM,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;gCAC9L,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;4BACtM,CAAC;4BAED,MAAM,CAAC,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,MAAM,GAAG,UAAU;gCACzH,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,MAAM,GAAG,UAAU,GAAG,iBAAiB,CAAC;wBAErJ,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;4BAC5E,IAAM,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC;4BACtE,IAAM,SAAS,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;4BAC9K,MAAM,CAAC,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,SAAS,GAAG,iBAAiB,CAAC;wBAE1J,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,QAAQ,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;4BAC7E,IAAM,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC;4BACtF,IAAM,SAAS,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;4BAC9L,MAAM,CAAC,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,SAAS,GAAG,iBAAiB,CAAC;wBAE1J,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC,8BAA8B;wBAC/E,CAAC;oBACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAEb,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBACvD,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;wBAC7E,EAAE,CAAC,CAAC,QAAQ,CAAC,oBAAoB,IAAI,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;4BAC5D,IAAM,OAAK,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,GAAG,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BAC7F,KAAK,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC;kCACxE,GAAG,GAAG,OAAK,GAAG,MAAM,CAAC;4BAC3B,KAAK,IAAI,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,cAAc;gCAChD,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC,QAAQ,GAAG,GAAG,GAAG,OAAK,GAAG,GAAG,GAAG,cAAc,CAAC,YAAY,CAAC;4BAC1H,CAAC,CAAC,CAAC;wBACP,CAAC;oBACL,CAAC;oBAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBA6BG;oBAEH,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAES,8CAAuB,GAAjC;oBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,EAAE,CAAC;oBACvD,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC9E,CAAC;gBAES,gEAAyC,GAAnD,UAAoD,WAAmB;oBAAvE,iBAwBC;oBAtBG,6CAA6C;oBAC7C,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC7B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBACvD,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;wBAC7E,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;oBAC5C,CAAC;oBAED,IAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;yBACrC,GAAG,CAAC,UAAA,UAAU;wBACL,IAAA,0BAA8D,EAA7D,aAAK,EAAE,cAAM,EAAE,gCAAqB,CAA0B;wBACrE,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,KAAK,GAAG,GAAG,GAAG,MAAM,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;oBACxH,CAAC,CAAC;yBACD,IAAI,CAAC,IAAI,CAAC,CAAC;oBAEhB,IAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;yBACtC,GAAG,CAAC,UAAA,UAAU;wBACL,IAAA,0BAA8D,EAA7D,aAAK,EAAE,cAAM,EAAE,gCAAqB,CAA0B;wBACrE,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,YAAY,CAAC,KAAK,GAAG,GAAG,GAAG,MAAM,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;oBAC1J,CAAC,CAAC;yBACD,IAAI,CAAC,IAAI,CAAC,CAAC;oBAEhB,MAAM,CAAC,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;gBACzC,CAAC;gBAES,8CAAuB,GAAjC;oBAAA,iBAmBC;oBAjBG,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAE7B,6CAA6C;oBAC7C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBACvD,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;wBAC7E,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;oBAC5C,CAAC;oBAED,iDAAiD;oBACjD,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;wBACjC,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;6BAClC,GAAG,CAAC,UAAA,UAAU;4BACX,MAAM,CAAC,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;wBACnF,CAAC,CAAC;6BACD,IAAI,CAAC,IAAI,CAAC,CAAC;oBAExB,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAES,4CAAqB,GAA/B;oBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;wBAAC,MAAM,CAAC,EAAE,CAAC;oBAC3B,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;gBAClC,CAAC;gBAES,6CAAsB,GAAhC;oBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;wBAAC,MAAM,CAAC,EAAE,CAAC;oBAC5B,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;gBACpC,CAAC;gBAES,2CAAoB,GAA9B;oBACI,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACpB,KAAK,kBAAkB;4BACnB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,CAAC,CAAC,CAAC;gCAChD,MAAM,CAAC,qBAAqB,CAAC;4BAEjC,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,+BAAc,CAAC,CAAC,CAAC;gCAC1D,MAAM,CAAC,YAAY,CAAC;4BAExB,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,iCAAe,CAAC,CAAC,CAAC;gCAC3D,MAAM,CAAC,EAAE,CAAC;4BAEd,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,IAAI,uEAAkC,EAAE,CAAC;4BACnD,CAAC;wBACL,KAAK,mBAAmB;4BACpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,+BAAc,CAAC,CAAC,CAAC;gCACpG,MAAM,CAAC,aAAa,CAAC;4BAEzB,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,iCAAe,CAAC,CAAC,CAAC;gCAC3D,MAAM,CAAC,EAAE,CAAC;4BAEd,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,IAAI,uEAAkC,EAAE,CAAC;4BACnD,CAAC;wBACL;4BACI,MAAM,CAAC,EAAE,CAAC;oBAClB,CAAC;gBACL,CAAC;gBAEO,0CAAmB,GAA3B;oBACI,IAAM,QAAQ,GAAkB,EAAE,CAAC;oBACnC,IAAI,CAAC,KAAK;yBACL,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,aAAa,EAApB,CAAoB,CAAC;yBACpC,OAAO,CAAC,UAAA,IAAI;wBACH,IAAA,kCAAsE,EAArE,kBAAU,EAAE,oBAAY,CAA8C;wBAC7E,QAAQ,CAAC,IAAI,CAAC;4BACV,IAAI,EAAE,MAAM;4BACZ,KAAK,EAAE,IAAI,CAAC,KAAK;4BACjB,UAAU,EAAE,UAAU;4BACtB,YAAY,EAAE,YAAY;4BAC1B,MAAM,EAAE,IAAI,CAAC,aAAa;yBACd,CAAC,CAAC;oBACtB,CAAC,CAAC,CAAC;oBAEP,IAAI,CAAC,eAAe;yBACf,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,aAAa,EAApB,CAAoB,CAAC;yBACpC,OAAO,CAAC,UAAA,IAAI;wBACH,IAAA,kCAAsE,EAArE,kBAAU,EAAE,oBAAY,CAA8C;wBAC7E,QAAQ,CAAC,IAAI,CAAC;4BACV,IAAI,EAAE,YAAY;4BAClB,KAAK,EAAE,IAAI,CAAC,KAAK;4BACjB,UAAU,EAAE,UAAU;4BACtB,YAAY,EAAE,YAAY;4BAC1B,MAAM,EAAE,KAAK;yBAChB,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBAEP,MAAM,CAAC,QAAQ,CAAC;gBACpB,CAAC;gBAKS,2BAAI,GAAd,UAAe,QAAwB,EAAE,gBAAiC,EAAE,KAAa,EAAE,SAAsB,EAAE,OAAqB,EAAE,aAAsB,EAAE,aAA8B;oBAE5L,uEAAuE;oBACvE,kFAAkF;oBAHK,0BAAA,EAAA,cAAsB;oBAAiD,8BAAA,EAAA,qBAA8B;oBAK5L,IAAI,SAAS,GAAG,EAAE,CAAC;oBACnB,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC;oBAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBACjC,EAAE,CAAC,CAAC,gBAAgB,YAAY,QAAQ,CAAC,CAAC,CAAC;wBACvC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;oBAEtE,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;wBAChD,gCAAqF,EAApF,gCAAwB,EAAE,mCAA2B,CAAgC;wBAEtF,IAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;wBAC5E,iDAAiD;wBACjD,0DAA0D;wBAC1D,iDAAiD;wBACjD,+CAA+C;wBAC/C,IAAM,QAAQ,GAAG,WAAY,CAAC,QAAQ,CAAC,4BAA4B,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;wBACjG,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,qBAAqB,CAAC;oBAEvD,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,gBAAgB,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAE9C,8EAA8E;wBAC9E,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,EAAxC,CAAwC,CAAC,CAAC;wBAC5G,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACX,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;wBACjC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,SAAS,GAAG,gBAAgB,CAAC;wBACjC,CAAC;wBAED,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC;4BACf,aAAa,GAAG,gBAAgB,CAAC;oBACzC,CAAC;oBAED,IAAM,IAAI,GAAS;wBACf,IAAI,EAAE,QAAQ;wBACd,KAAK,EAAE,QAAQ;wBACf,SAAS,EAAE,SAAS;wBACpB,SAAS,EAAE,SAAS;wBACpB,OAAO,EAAE,OAAO;wBAChB,aAAa,EAAE,aAAa;wBAC5B,aAAa,EAAE,aAAa;qBAC/B,CAAC;oBACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAC;;gBAChB,CAAC;gBAES,qCAAc,GAAxB,UAAyB,QAAwB,EAAE,aAA+B,EAAE,QAAgB,EAAE,SAAkB;oBAEpH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;wBAChC,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC,CAAC,wDAAwD;oBAEhJ,IAAA,wBAA2D,EAA1D,uBAAe,EAAE,0BAAkB,CAAwB;oBAClE,IAAM,KAAK,GAAG,eAAe,GAAG,GAAG,GAAG,kBAAkB,GAAG,cAAc,CAAC;oBAE1E,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAC;oBAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBACjC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;oBAC3C,QAAQ,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;oBAEjD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;wBACtB,IAAI,EAAE,QAAQ;wBACd,aAAa,EAAE,aAAa;wBAC5B,KAAK,EAAE,QAAQ;wBACf,SAAS,EAAE,SAAS;qBACvB,CAAC,CAAC;oBAEH,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAEO,sCAAe,GAAvB,UAAwB,GAAQ;oBAC5B,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC;wBAC3B,MAAM,CAAC,KAAK,CAAC;oBACjB,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;wBACxB,MAAM,CAAC,KAAK,CAAC;oBAEjB,IAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpC,IAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEvC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,YAAY,CAAC;wBAC5B,MAAM,CAAC,KAAK,CAAC;oBAEjB,IAAM,eAAe,GAAG,kBAAkB,CAAC;oBAC3C,IAAM,kBAAkB,GAAG,eAAe,CAAC;oBAC3C,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBAC3E,MAAM,CAAC,KAAK,CAAC;oBAEjB,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACO,+CAAwB,GAAlC,UAAmC,GAAU;oBAA7C,iBAmCC;oBAlCG,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBAE7E,0CAA0C;oBAC1C,IAAM,WAAW,GAAG,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAvB,CAAuB,CAAC;oBAC/D,IAAM,YAAY,GAAG,UAAC,MAAc,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAzB,CAAyB,CAAC;oBAEnE,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;oBAC3C,IAAM,UAAU,GAAkB,EAAE,CAAC;oBACrC,IAAM,YAAY,GAAG,GAAG,CAAC,GAAG,CAAC,UAAC,EAAE,EAAE,KAAK;wBACnC,IAAM,eAAe,GAAa,EAAE,CAAC;wBACrC,EAAE,CAAC,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAC;4BAClC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,UAAC,aAAa,EAAE,WAAW;gCACvD,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,OAAO,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,CAAC,CAAC;gCAC5H,UAAU,CAAC,KAAK,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;4BAC/E,CAAC,CAAC,CAAC;4BACH,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,aAAa,EAAE,WAAW;gCACxD,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,GAAG,aAAa,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,CAAC,CAAC;gCACtI,UAAU,CAAC,WAAW,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;4BACzF,CAAC,CAAC,CAAC;wBACP,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gCACrC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,OAAO,GAAG,KAAK,CAAC,CAAC;gCACtH,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;4BAEnC,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gCAC7C,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,aAAa,GAAG,KAAK,CAAC,CAAC;gCAC5H,UAAU,CAAC,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;4BACzC,CAAC;wBACL,CAAC;wBACD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACzC,CAAC,CAAC,CAAC;oBAEH,IAAM,WAAW,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;oBACtG,MAAM,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;gBACrC,CAAC;gBAEe,qCAAc,GAA9B;;;4BAEI,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,YAAY,yCAAmB,CAAC,CAAC,CAAC;gCAC1D,MAAM,gBAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAC;4BAE9C,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,gBAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAC;4BACtD,CAAC;;;;iBACJ;gBAES,wCAAiB,GAA3B;oBACI,MAAM,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;gBACrC,CAAC;gBAEL,mBAAC;YAAD,CAz+DA,AAy+DC,IAAA;;QACD,CAAC;;;;;;;;;;;;;;YC9iED;;eAEG;YACH;gBAEI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,8BAAoB,UAAsB;oBAAtB,eAAU,GAAV,UAAU,CAAY;gBAC1C,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E,mCAAI,GAAJ,UAAK,MAAc,EAAE,QAA0B;oBAC3C,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;oBACnC,IAAM,KAAK,GAAG,IAAI,GAAG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC;oBAClD,IAAM,YAAY,GAAG,aAAa,GAAG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC;oBAClE,IAAM,YAAY,GAAG,SAAS,GAAG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC;oBAE9D,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,YAAY,EAAE;wBACjD,GAAG,EAAE;4BAAA,iBAyFJ;4BAxFG,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC;gCAC5B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;4BACxC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gCACnB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;4BAE9B,0CAA0C;4BAC1C,IAAM,WAAW,GAAG,UAAC,KAAa,IAAK,OAAA,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,EAAxC,CAAwC,CAAC;4BAChF,IAAM,YAAY,GAAG,UAAC,MAAc,IAAK,OAAA,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAA1C,CAA0C,CAAC;4BAEpF,IAAM,EAAE,GAAG,IAAI,2BAAY,CAAC,UAAU,CAAC,CAAC;4BACxC,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;gCAExB,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;oCAC7B,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC;yCAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,YAAY,CAAC;yCAC1C,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAC1F,WAAW,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,CAAC,SAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,UAAK,QAAQ,CAAC,YAAY,YAAS;yCAC7I,WAAW,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,CAAC,SAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,qBAAqB,CAAC,SAAI,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC,YAAY,CAAG,CAAA,CAAC;yCAClO,YAAY,CAAC,QAAQ,CAAC,YAAY,GAAG,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC;gCAElG,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACJ,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC;yCAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,YAAY,CAAC;yCAC1C,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAC1F,WAAW,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,CAAC,SAAI,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,qBAAqB,CAAC,UAAK,QAAQ,CAAC,YAAY,YAAS;yCACpK,WAAW,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,CAAC,SAAI,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,cAAc,CAAC,SAAI,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAI,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC,YAAY,CAAG,CAAA,CAAC;yCAC3P,YAAY,CAAC,QAAQ,CAAC,YAAY,GAAG,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC;gCAClH,CAAC;gCAED,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO;oCAC1C,KAAI,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;oCACtB,KAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;oCAC1B,OAAO,KAAI,CAAC,YAAY,CAAC,CAAC;oCAC1B,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;gCACvB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;oCACR,MAAM,GAAG,CAAC;gCACd,CAAC,CAAC,CAAC;gCACH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;4BAE9B,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;gCAE9B,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC;qCAC3B,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,YAAY,CAAC;qCAC3E,SAAS,CAAI,QAAQ,CAAC,YAAY,SAAI,QAAQ,CAAC,eAAe,CAAC,YAAc,EAAE,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC;qCAClH,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,GAAG,GAAG,GAAG,QAAQ,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,YAAY,GAAG,MAAM,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gCAE1L,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO;oCAC1C,KAAI,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;oCACtB,KAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;oCAC1B,OAAO,KAAI,CAAC,YAAY,CAAC,CAAC;oCAC1B,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;gCAEvB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;oCACR,MAAM,GAAG,CAAC;gCACd,CAAC,CAAC,CAAC;gCACH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;4BAE9B,CAAC;4BAAC,IAAI,CAAC,CAAC;gCAEJ,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;oCAC1B,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC;yCAC3B,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,YAAY,CAAC;yCAC3E,SAAS,CAAI,QAAQ,CAAC,YAAY,SAAI,QAAQ,CAAC,eAAe,CAAC,YAAc,EAAE,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC;yCAClH,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,GAAG,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,GAAG,MAAM,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,8CAA8C;gCAE5N,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACJ,qCAAqC;oCACrC,6BAA6B;oCAC7B,oGAAoG;oCACpG,iFAAiF;oCACjF,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,WAAW;yCACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC,qBAAqB;yCAChE,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAkB,EAAE,QAAQ,CAAC,cAAc,CAAC,IAAI,EAC5E,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,SAAI,YAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAI,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAI,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAG,CAAC;yCACvL,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,GAAG,MAAM,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,8CAA8C;gCACtN,CAAC;gCAED,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;oCACxC,KAAI,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;oCACrB,KAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;oCAC1B,OAAO,KAAI,CAAC,YAAY,CAAC,CAAC;oCAC1B,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;gCAEvB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;oCACR,MAAM,GAAG,CAAC;gCACd,CAAC,CAAC,CAAC;gCACH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;4BAC9B,CAAC;wBACL,CAAC;wBACD,GAAG,EAAE,UAAS,OAAqB;4BAA9B,iBAUJ;4BATG,EAAE,CAAC,CAAC,OAAO,YAAY,OAAO,CAAC,CAAC,CAAC;gCAC7B,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM;oCACf,KAAI,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;oCACrB,KAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;gCAC9B,CAAC,CAAC,CAAC;4BACP,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;gCACtB,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;4BAC9B,CAAC;wBACL,CAAC;wBACD,YAAY,EAAE,IAAI;qBACrB,CAAC,CAAC;gBACP,CAAC;gBAEL,2BAAC;YAAD,CA7HA,AA6HC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;YCxHF,uKAAuK;YAEvK;;eAEG;YACH;gBAuFI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,wBAAY,IAAwB,EAChB,oBAA0C;oBAD9D,iBA6BC;oBA5BmB,yBAAoB,GAApB,oBAAoB,CAAsB;oBAzC9D;;uBAEG;oBACM,gBAAW,GAAyB,EAAE,CAAC;oBAuC5C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC9B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBACtC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;oBAC1C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;oBAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,IAAI,EAAE,CAAC;oBAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,IAAI,EAAE,CAAC;oBAC9C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,IAAI,EAAE,CAAC;oBACzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mBAAmB,IAAI,EAAE,CAAC;oBAClD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,IAAI,EAAE,CAAC;oBAC9C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;oBAClD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;oBAE5C,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;oBACjC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,cAAc,GAAG,KAAI,EAA5B,CAA4B,CAAC,CAAC;oBAC9D,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,cAAc,GAAG,KAAI,EAA9B,CAA8B,CAAC,CAAC;oBACnE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,cAAc,GAAG,KAAI,EAAhC,CAAgC,CAAC,CAAC;oBACzE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,cAAc,GAAG,KAAI,EAA3B,CAA2B,CAAC,CAAC;oBAE3D,IAAM,oCAAoC,GAAG,UAAC,SAA6B;wBACvE,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;4BACtB,QAAQ,CAAC,cAAc,GAAG,KAAI,CAAC;4BAC/B,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,cAAc,GAAG,KAAI,EAA5B,CAA4B,CAAC,CAAC;4BACjE,oCAAoC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;wBAC7D,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC;oBACF,oCAAoC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACzD,CAAC;gBASD,sBAAI,gCAAI;oBAPR,4EAA4E;oBAC5E,YAAY;oBACZ,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;4BACZ,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;wBAEnE,MAAM,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;oBAC/D,CAAC;;;mBAAA;gBAMD,sBAAI,mCAAO;oBAJX;;;uBAGG;yBACH;wBACI,IAAI,UAAU,GAAsB,EAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAClF,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;4BAC3B,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;wBACrD,CAAC,CAAC,CAAC;wBACH,MAAM,CAAC,UAAU,CAAC;oBACtB,CAAC;;;mBAAA;gBAKD,sBAAI,mDAAuB;oBAH3B;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACzB,CAAC;;;mBAAA;gBAMD,sBAAI,sCAAU;oBAJd;;;uBAGG;yBACH;wBACI,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;wBAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC;4BAC1B,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;wBAEhE,MAAM,CAAC,OAAO,CAAC;oBACnB,CAAC;;;mBAAA;gBAKD,sBAAI,wCAAY;oBAHhB;;uBAEG;yBACH;wBACI,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;wBAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC;4BAC1B,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;wBAEtE,MAAM,CAAC,SAAS,CAAC;oBACrB,CAAC;;;mBAAA;gBAKD,sBAAI,sCAAU;oBAHd;;uBAEG;yBACH;wBACI,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC;4BAChC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;wBAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,YAAY,QAAQ,CAAC;4BAChC,MAAM,CAAQ,IAAI,CAAC,MAAO,CAAC,IAAI,CAAC;wBAEpC,MAAM,CAAC,EAAE,CAAC;oBACd,CAAC;;;mBAAA;gBAKD,sBAAI,kDAAsB;oBAH1B;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC1C,CAAC;;;mBAAA;gBAOD,sBAAI,yCAAa;oBALjB;;;;uBAIG;yBACH;wBACI,IAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;wBAC1C,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;4BACZ,MAAM,IAAI,KAAK,CAAC,oCAAkC,IAAI,CAAC,IAAI,aAAU,CAAC,CAAC;wBAE3E,MAAM,CAAC,UAAU,CAAC;oBACtB,CAAC;;;mBAAA;gBAKD,sBAAI,8CAAkB;oBAHtB;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC;oBACzC,CAAC;;;mBAAA;gBAKD,sBAAI,2CAAe;oBAHnB;;uBAEG;yBACH;wBACI,IAAM,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC;wBACpD,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC;4BACjB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;wBAEtD,MAAM,CAAC,eAAe,CAAC;oBAC3B,CAAC;;;mBAAA;gBAKD,sBAAI,kDAAsB;oBAH1B;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,WAAW,EAAlB,CAAkB,CAAC,CAAC;oBAC5D,CAAC;;;mBAAA;gBAMD,sBAAI,8CAAkB;oBAJtB;;;uBAGG;yBACH;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC;4BAC5B,MAAM,IAAI,KAAK,CAAC,YAAU,IAAI,CAAC,IAAI,uGAAoG,CAAC,CAAC;wBAE7I,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;oBAClC,CAAC;;;mBAAA;gBAKD,sBAAI,0CAAc;oBAHlB;;uBAEG;yBACH;wBACI,mFAAmF;wBACnF,0FAA0F;wBAC1F,oEAAoE;wBACpE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,EAAhB,CAAgB,CAAC,CAAC;wBACxD,mFAAmF;wBACnF,gHAAgH;wBAChH,oEAAoE;oBACxE,CAAC;;;mBAAA;gBAED,sBAAI,6DAAiC;yBAArC;wBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;oBAC5D,CAAC;;;mBAAA;gBAKD,sBAAI,6CAAiB;oBAHrB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;oBACjE,CAAC;;;mBAAA;gBAMD,sBAAI,gDAAoB;oBAJxB;;;uBAGG;yBACH;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC;4BAC1B,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC;wBAEpD,MAAM,CAAC,EAAE,CAAC;oBACd,CAAC;;;mBAAA;gBAKD,sBAAI,4CAAgB;oBAHpB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,EAAhB,CAAgB,CAAC,CAAC;oBAC5D,CAAC;;;mBAAA;gBAKD,sBAAI,+CAAmB;oBAHvB;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,YAAY,EAA5B,CAA4B,CAAC,CAAC;oBACxE,CAAC;;;mBAAA;gBAKD,sBAAI,4CAAgB;oBAHpB;;uBAEG;yBACH;wBACI,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,YAAY,EAA5B,CAA4B,CAAC,CAAC;wBAC1E,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,8CAA4C,IAAI,CAAC,IAAM,CAAC,CAAC;wBAE7E,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC;;;mBAAA;gBAKD,sBAAI,+CAAmB;oBAHvB;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,YAAY,EAA5B,CAA4B,CAAC,CAAC;oBACxE,CAAC;;;mBAAA;gBAKD,sBAAI,4CAAgB;oBAHpB;;uBAEG;yBACH;wBACI,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,YAAY,EAA5B,CAA4B,CAAC,CAAC;wBAC1E,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,8CAA4C,IAAI,CAAC,IAAM,CAAC,CAAC;wBAE7E,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC;;;mBAAA;gBAKD,sBAAI,4CAAgB;oBAHpB;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,SAAS,EAAzB,CAAyB,CAAC,CAAC;oBACrE,CAAC;;;mBAAA;gBAKD,sBAAI,yCAAa;oBAHjB;;uBAEG;yBACH;wBACI,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,SAAS,EAAzB,CAAyB,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,2CAAyC,IAAI,CAAC,IAAM,CAAC,CAAC;wBAE1E,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC;;;mBAAA;gBAKD,sBAAI,kDAAsB;oBAH1B;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,eAAe,EAA/B,CAA+B,CAAC,CAAC;oBAC3E,CAAC;;;mBAAA;gBAKD,sBAAI,+CAAmB;oBAHvB;;uBAEG;yBACH;wBACI,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,eAAe,EAA/B,CAA+B,CAAC,CAAC;wBAC7E,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,iDAA+C,IAAI,CAAC,IAAM,CAAC,CAAC;wBAEhF,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC;;;mBAAA;gBAKD,sBAAI,8CAAkB;oBAHtB;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,WAAW,EAA3B,CAA2B,CAAC,CAAC;oBACvE,CAAC;;;mBAAA;gBAED,sBAAI,2CAAe;yBAAnB;wBACI,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,WAAW,EAA3B,CAA2B,CAAC,CAAC;wBACzE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,6CAA2C,IAAI,CAAC,IAAM,CAAC,CAAC;wBAE5E,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC;;;mBAAA;gBAKD,sBAAI,6CAAiB;oBAHrB;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,UAAU,EAA1B,CAA0B,CAAC,CAAC;oBACtE,CAAC;;;mBAAA;gBAED,sBAAI,0CAAc;yBAAlB;wBACI,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,UAAU,EAA1B,CAA0B,CAAC,CAAC;wBACxE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,8CAA4C,IAAI,CAAC,IAAM,CAAC,CAAC;wBAE7E,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC;;;mBAAA;gBAED,sBAAI,2CAAe;yBAAnB;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,UAAU,EAA1B,CAA0B,CAAC,CAAC;oBACtE,CAAC;;;mBAAA;gBAKD,sBAAI,6CAAiB;oBAHrB;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,UAAU,EAA1B,CAA0B,CAAC,CAAC;oBACtE,CAAC;;;mBAAA;gBAKD,sBAAI,0CAAc;oBAHlB;;uBAEG;yBACH;wBACI,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,UAAU,EAA1B,CAA0B,CAAC,CAAC;wBACxE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,KAAK,CAAC,sCAAoC,IAAI,CAAC,IAAM,CAAC,CAAC;wBAErE,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC;;;mBAAA;gBAKD,sBAAI,gDAAoB;oBAHxB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ;4BACjC,MAAM,CAAC,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,UAAU,IAAI,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,WAAW,CAAC;wBACrH,CAAC,CAAC,CAAC;oBACP,CAAC;;;mBAAA;gBAKD,sBAAI,+CAAmB;oBAHvB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ;4BACjC,MAAM,CAAC,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,UAAU,IAAI,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,WAAW,CAAC;wBACrH,CAAC,CAAC,CAAC;oBACP,CAAC;;;mBAAA;gBAKD,sBAAI,6CAAiB;oBAHrB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,UAAU,EAAlD,CAAkD,CAAC,CAAC;oBACjG,CAAC;;;mBAAA;gBAKD,sBAAI,kDAAsB;oBAH1B;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,UAAU,IAAI,QAAQ,CAAC,QAAQ,EAAvE,CAAuE,CAAC,CAAC;oBACtH,CAAC;;;mBAAA;gBAKD,sBAAI,8CAAkB;oBAHtB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,WAAW,EAAnD,CAAmD,CAAC,CAAC;oBAClG,CAAC;;;mBAAA;gBAKD,sBAAI,8CAAkB;oBAHtB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,WAAW,EAAnD,CAAmD,CAAC,CAAC;oBAClG,CAAC;;;mBAAA;gBAKD,sBAAI,+CAAmB;oBAHvB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,YAAY,EAApD,CAAoD,CAAC,CAAC;oBACnG,CAAC;;;mBAAA;gBAKD,sBAAI,oDAAwB;oBAH5B;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,YAAY,IAAI,QAAQ,CAAC,QAAQ,EAAzE,CAAyE,CAAC,CAAC;oBACxH,CAAC;;;mBAAA;gBAKD,sBAAI,oDAAwB;oBAH5B;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBACvE,CAAC;;;mBAAA;gBAKD,sBAAI,iDAAqB;oBAHzB;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,EAArB,CAAqB,CAAC,CAAC;oBACpE,CAAC;;;mBAAA;gBAKD,sBAAI,8CAAkB;oBAHtB;;uBAEG;yBACH;wBACI,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,EAArB,CAAqB,CAAC,CAAC;wBACxE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;4BACV,MAAM,IAAI,KAAK,CAAC,iDAA+C,IAAI,CAAC,IAAM,CAAC,CAAC;wBAEhF,MAAM,CAAC,QAAQ,CAAC;oBACpB,CAAC;;;mBAAA;gBAKD,sBAAI,mDAAuB;oBAH3B;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,cAAc,EAAvB,CAAuB,CAAC,CAAC;oBACtE,CAAC;;;mBAAA;gBAKD,sBAAI,gDAAoB;oBAHxB;;uBAEG;yBACH;wBACI,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,cAAc,EAAvB,CAAuB,CAAC,CAAC;wBAC1E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;4BACV,MAAM,IAAI,KAAK,CAAC,iDAA+C,IAAI,CAAC,IAAM,CAAC,CAAC;wBAEhF,MAAM,CAAC,QAAQ,CAAC;oBACpB,CAAC;;;mBAAA;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,+BAAM,GAAN;oBAAA,iBAaC;oBAXG,iFAAiF;oBACjF,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,YAAY,QAAQ,CAAC;wBAChC,MAAM,CAAC,IAAW,IAAI,CAAC,MAAO,EAAE,CAAC;oBAErC,6CAA6C;oBAC7C,IAAM,SAAS,GAAG,EAAE,CAAC;oBACrB,IAAI,CAAC,SAAS;yBACT,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,MAAM,EAAf,CAAe,CAAC;yBACnC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAnD,CAAmD,CAAC,CAAC;oBAE9E,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAED;;mBAEG;gBACH,4CAAmB,GAAnB;oBACI,IAAM,MAAM,GAAmC,EAAE,CAAC;oBAClD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,YAAY,EAAjD,CAAiD,CAAC,CAAC;oBACnF,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,YAAY,EAArD,CAAqD,CAAC,CAAC;oBAC1F,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC;gBAED;;mBAEG;gBACH,4CAAmB,GAAnB,UAAoB,QAAqC;oBACrD,MAAM,CAAC,OAAO,QAAQ,KAAK,QAAQ,GAAG,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;gBAC1F,CAAC;gBAED;;mBAEG;gBACH,uCAAc,GAAd,UAAe,MAAW;oBAA1B,iBA0CC;oBAzCG,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wBACR,MAAM,CAAC,SAAS,CAAC;oBAErB,IAAM,GAAG,GAAkB,EAAE,CAAC;oBAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBAC5B,IAAI,CAAC,iCAAiC,CAAC,OAAO,CAAC,UAAA,MAAM;4BACjD,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;4BAChD,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,CAAC;gCAClD,MAAM,CAAC;4BAEX,gFAAgF;4BAChF,IAAM,cAAc,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,MAAM,CAAC,YAAY,EAA7C,CAA6C,CAAC,CAAC;4BAEtG,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;gCAC9C,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4BACpG,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;gCACrE,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4BACpH,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC;4BAC3C,CAAC;wBACL,CAAC,CAAC,CAAC;oBAEP,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,MAAM;4BAC9B,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;4BAChD,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,CAAC;gCAClD,MAAM,CAAC;4BAEX,gFAAgF;4BAChF,IAAM,cAAc,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,MAAM,CAAC,YAAY,EAA7C,CAA6C,CAAC,CAAC;4BAEtG,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;gCAC9C,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4BACpG,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;gCACrE,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4BACpH,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC;4BAC3C,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC;oBACD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,SAAS,CAAC;gBACzD,CAAC;gBAED;;mBAEG;gBACH,+CAAsB,GAAtB,UAAuB,MAAqB;oBAA5C,iBA0CC;oBAzCG,IAAM,GAAG,GAAkB,EAAE,CAAC;oBAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBAC5B,IAAI,CAAC,iCAAiC,CAAC,OAAO,CAAC,UAAA,MAAM;4BACjD,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;4BAChD,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,CAAC;gCAClD,MAAM,CAAC;4BAEX,gFAAgF;4BAChF,IAAM,cAAc,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,MAAM,CAAC,YAAY,EAA7C,CAA6C,CAAC,CAAC;4BAEtG,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;gCAC9C,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4BAChG,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;gCACrE,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4BAChH,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC;4BACvC,CAAC;wBACL,CAAC,CAAC,CAAC;oBAEP,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,MAAM;4BAC9B,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;4BAChD,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,CAAC;gCAClD,MAAM,CAAC;4BAEX,gFAAgF;4BAChF,IAAM,cAAc,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,MAAM,CAAC,YAAY,EAA7C,CAA6C,CAAC,CAAC;4BAEtG,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;gCAC9C,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4BAChG,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;gCACrE,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4BAChH,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC;4BACvC,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC;oBACD,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;wBACxC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;oBACvD,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,SAAS,GAAG,GAAG,GAAG,SAAS,CAAC;gBACvC,CAAC;gBAED;;;;;;;;;;;;;;;oBAeI;gBAEJ;;;;;;;;;;;;;;;;mBAgBG;gBAEH;;;mBAGG;gBACH,4CAAmB,GAAnB,UAAoB,MAAW;oBAC3B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wBACR,MAAM,CAAC,SAAS,CAAC;oBAErB,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;oBAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;wBAC9B,MAAM,CAAC,KAAK,CAAC;oBAEjB,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACf,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,0CAA0C;oBAClG,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACH,6CAAoB,GAApB,UAAqB,MAAW;oBAC5B,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzE,CAAC;gBAED,oDAA2B,GAA3B,UAA4B,KAA8B;oBAA1D,iBAYC;oBAXG,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACT,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC;oBACD,IAAM,GAAG,GAAkB,EAAE,CAAC;oBAC9B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,YAAY;wBACnC,IAAM,MAAM,GAAG,KAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;wBAC1D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACT,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC;wBAC/C,CAAC;oBACL,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,GAAG,CAAC;gBACf,CAAC;gBAED,gDAAuB,GAAvB,UAAwB,YAAoB;oBACxC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,KAAK,YAAY,EAApC,CAAoC,CAAC,CAAC;gBAC9E,CAAC;gBAED;;mBAEG;gBACH,kDAAyB,GAAzB,UAA0B,YAAoB;oBAC1C,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,KAAK,YAAY,EAApC,CAAoC,CAAC,CAAC;gBAChF,CAAC;gBAED;;mBAEG;gBACH,4CAAmB,GAAnB,UAAoB,IAAY;oBAC5B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,KAAK,IAAI,EAAxB,CAAwB,CAAC,CAAC;gBACpE,CAAC;gBAED;;mBAEG;gBACH,oDAA2B,GAA3B,UAA4B,YAAoB;oBAC5C,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,YAAY,EAAtC,CAAsC,CAAC,CAAC;gBACrF,CAAC;gBAED;;mBAEG;gBACH,qDAA4B,GAA5B,UAA6B,YAAoB;oBAC7C,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,YAAY,EAAtC,CAAsC,CAAC,CAAC;oBACzF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;wBACV,MAAM,IAAI,KAAK,CAAC,iCAA+B,YAAY,YAAO,IAAI,CAAC,IAAI,2BAAwB,CAAC,CAAC;oBAEzG,MAAM,CAAC,QAAQ,CAAC;gBACpB,CAAC;gBAED;;mBAEG;gBACH,8CAAqB,GAArB,UAAsB,MAAc;oBAChC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,MAAM,EAAxB,CAAwB,CAAC,CAAC;gBACtF,CAAC;gBAED;;mBAEG;gBACH,+CAAsB,GAAtB,UAAuB,IAAY;oBAC/B,IAAM,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,IAAI,EAAtB,CAAsB,CAAC,CAAC;oBACxF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;wBACV,MAAM,IAAI,KAAK,CAAC,wBAAsB,IAAI,YAAO,IAAI,CAAC,IAAI,2BAAwB,CAAC,CAAC;oBAExF,MAAM,CAAC,QAAQ,CAAC;gBACpB,CAAC;gBAED,kCAAS,GAAT,UAAU,MAAsB;oBAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC3B,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC;gBACjC,CAAC;gBAED,+CAAsB,GAAtB,UAAuB,MAAqB;oBACxC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAA7B,CAA6B,CAAC,CAAC;gBACxE,CAAC;gBAED,4DAAmC,GAAnC,UAAoC,MAAqB;oBACrD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ;wBACjC,MAAM,CAAC,CAAC,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,UAAU,IAAI,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,WAAW,CAAC;+BAC3G,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,2DAAkC,GAAlC,UAAmC,MAAqB;oBACpD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ;wBACjC,MAAM,CAAC,CAAC,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,YAAY,IAAI,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,WAAW,CAAC;+BAC7G,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,yDAAgC,GAAhC,UAAiC,MAAqB;oBAClD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ;wBACjC,MAAM,CAAC,CAAC,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,UAAU,IAAI,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,WAAW,CAAC;+BAC3G,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;oBACxD,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,wDAA+B,GAA/B,UAAgC,MAAqB;oBACjD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,QAAQ;wBACjC,MAAM,CAAC,CAAC,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,YAAY,IAAI,QAAQ,CAAC,YAAY,KAAK,6BAAa,CAAC,WAAW,CAAC;+BAC7G,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;oBACxD,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,4DAAmC,GAAnC,UAAoC,MAAqB;oBACrD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,UAAA,aAAa;wBAC1C,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;oBAC7D,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,wCAAe,GAAf,UAAgB,WAAgB,EAAE,YAAiB;oBAC/C,IAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;oBACxD,IAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;oBAC1D,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;gBAC5D,CAAC;gBAED,mCAAU,GAAV,UAAW,OAAgC,EAAE,QAAiC;oBAC1E,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,CAAC;wBACzF,MAAM,CAAC,KAAK,CAAC;oBAEjB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;wBACjC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,MAAM,IAAI,QAAQ,CAAC,GAAG,CAAC,YAAY,MAAM,CAAC;4BAClE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;wBAE9C,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;;mBAGG;gBACH,8CAAqB,GAArB,UAAsB,OAAY,EAAE,QAAa;oBAC7C,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,CAAC;wBACzF,MAAM,CAAC,KAAK,CAAC;oBAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;wBAC9B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;4BACjC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAC1C,CAAC,CAAC,CAAC;oBACP,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC;oBAChC,CAAC;gBACL,CAAC;gBAED;;;mBAGG;gBACH,wDAA+B,GAA/B,UAAgC,MAAqB,EAAE,SAA6B;oBAChF,IAAM,kBAAkB,GAA8C,EAAE,CAAC;oBACzE,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;wBACtB,IAAM,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;wBAC9C,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;4BACzB,KAAK,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,kBAAkB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,qBAAqB,CAAC,CAAC,EAA7E,CAA6E,CAAC,CAAC;wBAC7G,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,kBAAkB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC;wBAC/E,CAAC;oBACL,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,kBAAkB,CAAC;gBAC9B,CAAC;gBAED;;mBAEG;gBACH,8BAAK,GAAL,UAAM,MAAqB;oBAEvB,4CAA4C;oBAC5C,0FAA0F;oBAC1F,0DAA0D;oBAC1D,6BAA6B;oBAC7B,mDAAmD;oBACnD,6CAA6C;oBAC7C,kDAAkD;oBAClD,yCAAyC;oBACzC,UAAU;oBAEV,WAAW;oBACX,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,UAAA,aAAa;wBAC1C,IAAM,UAAU,GAAG,aAAa,CAAC,YAAY,CAAC;wBAC9C,MAAM,CAAC,CAAC,CAAC,MAAM;4BACX,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC;4BACjC,MAAM,CAAC,UAAU,CAAC,KAAK,IAAI;4BAC3B,MAAM,CAAC,UAAU,CAAC,KAAK,SAAS;4BAChC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;oBAClC,CAAC,CAAC,CAAC;oBACH,IAAI;gBACR,CAAC;gBAKD,sBAAI,iDAAqB;oBAHzB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAC,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,SAAS,EAA1C,CAA0C,CAAC,CAAC;wBAClG,oGAAoG;oBACxG,CAAC;;;mBAAA;gBAEL,qBAAC;YAAD,CA54BA,AA44BC,IAAA;;QAAA,CAAC;;;;;;;;;;YC/4BF;;eAEG;YACH;gBA8HI,wEAAwE;gBACxE,cAAc;gBACd,wEAAwE;gBAExE,wBAAY,IAAwB;oBAhFpC;;uBAEG;oBACM,WAAM,GAAW,EAAE,CAAC;oBAE7B;;uBAEG;oBACM,cAAS,GAAY,KAAK,CAAC;oBAEpC;;uBAEG;oBACM,gBAAW,GAAY,KAAK,CAAC;oBAEtC;;uBAEG;oBACM,aAAQ,GAAY,KAAK,CAAC;oBAEnC;;uBAEG;oBACM,eAAU,GAAY,KAAK,CAAC;oBAErC;;uBAEG;oBACM,YAAO,GAAW,EAAE,CAAC;oBAqD1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBAEtC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;wBACV,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBAC1B,yBAAyB;oBACzB,2DAA2D;oBAC3D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;wBAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;oBACnC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;wBAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;oBAElC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;wBACpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;wBACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;wBACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;oBAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;wBACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;oBACxC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;wBACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBACxC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC;wBACpE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBACxC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;wBACnB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;oBACpC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;wBACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;oBAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;wBAC3B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;oBACpD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;wBACzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;gBACpD,CAAC;gBAYD,sBAAI,wCAAY;oBAVhB,wEAAwE;oBACxE,YAAY;oBACZ,wEAAwE;oBAExE;;;;;uBAKG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;oBACtC,CAAC;;;mBAAA;gBAOD,sBAAI,gCAAI;oBALR;;;;uBAIG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;oBACxF,CAAC;;;mBAAA;gBAOD,sBAAI,oCAAQ;oBALZ;;;;uBAIG;yBACH;wBAEI,kEAAkE;wBAClE,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;4BAExB,sGAAsG;4BACtG,IAAM,UAAQ,GAAa,EAAE,CAAC;4BAC9B,IAAM,wBAAsB,GAAG,UAAC,gBAAkC;gCAC9D,EAAE,CAAC,CAAC,gBAAgB,CAAC,sBAAsB,CAAC;oCACxC,wBAAsB,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;gCAEpE,UAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;4BAC3C,CAAC,CAAC;4BACF,wBAAsB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;4BAE9C,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,kBAAkB,CAAC,UAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC1G,CAAC;wBAED,qFAAqF;wBACrF,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;4BACpB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;wBAExF,MAAM,IAAI,KAAK,CAAC,aAAU,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,EAAE,gDAA4C,CAAC,CAAC;oBAC9G,CAAC;;;mBAAA;gBAKD,sBAAI,wCAAY;oBAHhB;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;oBACnC,CAAC;;;mBAAA;gBAKD,sBAAI,qCAAS;oBAHb;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;oBACnC,CAAC;;;mBAAA;gBAQD,sBAAI,mCAAO;oBANX;;;;;uBAKG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;oBACjC,CAAC;;;mBAAA;gBAKD,sBAAI,sCAAU;oBAHd;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC;oBACpC,CAAC;;;mBAAA;gBAKD,sBAAI,2CAAe;oBAHnB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,eAAe,CAAC;oBACzC,CAAC;;;mBAAA;gBAKD,sBAAI,wCAAY;oBAHhB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,YAAY,CAAC;oBACtC,CAAC;;;mBAAA;gBAKD,sBAAI,wCAAY;oBAHhB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,YAAY,CAAC;oBACtC,CAAC;;;mBAAA;gBAKD,sBAAI,qCAAS;oBAHb;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;oBACnC,CAAC;;;mBAAA;gBAKD,sBAAI,sCAAU;oBAHd;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC;oBACpC,CAAC;;;mBAAA;gBAKD,sBAAI,4CAAgB;oBAHpB;;uBAEG;yBACH;wBAAA,iBAOC;wBANG,IAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,EAAvC,CAAuC,CAAC,CAAC;wBAC/G,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;4BACb,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;wBAC3C,CAAC;wBAED,MAAM,CAAC,SAAS,CAAC;oBACrB,CAAC;;;mBAAA;gBAKD,sBAAI,4CAAgB;oBAHpB;;uBAEG;yBACH;wBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;4BACvB,MAAM,IAAI,KAAK,CAAC,iBAAe,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,EAAE,iCAA8B,CAAC,CAAC;wBAErG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;oBAC9C,CAAC;;;mBAAA;gBAED,wEAAwE;gBACxE,iBAAiB;gBACjB,wEAAwE;gBAExE,uCAAc,GAAd,UAAe,MAAW;oBACtB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wBACR,MAAM,CAAC,KAAK,CAAC;oBAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;wBACpB,MAAM,CAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,SAAS;4BAC3C,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,IAAI;4BACtC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,SAAS;4BAC9D,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC;oBAEtE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,SAAS;4BACvC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC;oBAC/C,CAAC;gBACL,CAAC;gBAED,uCAAc,GAAd,UAAe,MAAW;oBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;wBACpB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,SAAS;4BAC3C,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,IAAI,CAAC;4BACvC,MAAM,CAAC,SAAS,CAAC;wBAErB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBAC5D,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACrC,CAAC;gBACL,CAAC;gBAEL,qBAAC;YAAD,CAtVA,AAsVC,IAAA;;QAAA,CAAC;;;;;;;;;;YCrWF;;eAEG;YACH;gBA8CI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,sBAAY,OASX;oBAtCD;;uBAEG;oBACH,eAAU,GAAY,KAAK,CAAC;oBAE5B;;uBAEG;oBACH,gBAAW,GAAY,KAAK,CAAC;oBAE7B;;uBAEG;oBACH,cAAS,GAAY,KAAK,CAAC;oBAE3B;;uBAEG;oBACH,aAAQ,GAAY,KAAK,CAAC;oBAqBtB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACV,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC;wBAC/B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC;wBAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;wBAC/B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,KAAK,CAAC;wBAC9C,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,KAAK,CAAC;wBAChD,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,KAAK,CAAC;wBAC5C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,KAAK,CAAC;wBAC1C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;oBACnC,CAAC;gBACL,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,4BAAK,GAAL;oBACI,IAAM,eAAe,GAAG,IAAI,YAAY,EAAE,CAAC;oBAC3C,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACjC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACjC,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBACvC,eAAe,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;oBAC7C,eAAe,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBAC/C,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC3C,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACzC,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBACvC,MAAM,CAAC,eAAe,CAAC;gBAC3B,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACI,mBAAM,GAAb,UAAc,cAA8B,EAAE,cAAsB;oBAChE,IAAM,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;oBACxC,YAAY,CAAC,IAAI,GAAG,cAAc,CAAC,QAAQ,CAAC;oBAC5C,YAAY,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC;oBAC9C,YAAY,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC;oBAC9C,YAAY,CAAC,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;oBACtD,YAAY,CAAC,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;oBACpD,YAAY,CAAC,IAAI,GAAG,cAAc,CAAC;oBACnC,YAAY,CAAC,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC;oBAClD,YAAY,CAAC,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC;oBAChD,MAAM,CAAC,YAAY,CAAC;gBACxB,CAAC;gBAEL,mBAAC;YAAD,CAhHA,AAgHC,IAAA;;QAAA,CAAC;;;;;;;;;QCgID,CAAC;;;;;;;;;QCtJD,CAAC;;;;;;;;;;YC5FF;;;eAGG;YACH;gBAAA;gBAoEA,CAAC;gBAlEG,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E,qDAAS,GAAT,UAAa,SAAY,EAAE,MAAqB,EAAE,QAAwB;oBACtE,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;oBACpD,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAED,4EAA4E;gBAC5E,kBAAkB;gBAClB,4EAA4E;gBAE5E;;;mBAGG;gBACK,6DAAiB,GAAzB,UAA0B,MAAW,EAAE,MAAqB,EAAE,QAAwB;oBAAtF,iBA+CC;oBA7CG,uDAAuD;oBACvD,QAAQ,CAAC,UAAU;yBACd,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,EAA1C,CAA0C,CAAC;yBAC5D,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAAzD,CAAyD,CAAC,CAAC,CAAC,kDAAkD;oBAErI,iFAAiF;oBACjF,QAAQ,CAAC,YAAY;yBAChB,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,EAA5C,CAA4C,CAAC;yBAChE,OAAO,CAAC,UAAA,QAAQ;wBACb,IAAM,gBAAgB,GAAG,QAAQ,CAAC,qBAAqB,CAAC;wBACxD,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;4BAClB,MAAM,IAAI,KAAK,CAAC,qCAAqC,GAAG,QAAQ,CAAC,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY,GAAG,aAAa,CAAC,CAAC;wBAEzH,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,IAAI,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;4BAChD,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC;gCACjD,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,UAAC,SAAc;oCAC7E,IAAI,SAAS,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC;oCAC1C,2CAA2C;oCAC3C,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC;wCACjD,IAAM,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAC,SAAc;4CACpE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,SAAS,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;wCACjG,CAAC,CAAC,CAAC;wCACH,EAAE,CAAC,CAAC,aAAa,CAAC;4CACd,KAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;oCAC3E,CAAC;oCAED,KAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,SAAS,EAAE,gBAAgB,CAAC,CAAC;oCAC/D,MAAM,CAAC,SAAS,CAAC;gCACrB,CAAC,CAAC,CAAC;4BACP,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;4BAClE,CAAC;wBACL,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gCAChC,IAAM,SAAS,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC;gCAC5C,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;oCAC9B,KAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,gBAAgB,CAAC,CAAC;gCAEvF,KAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,gBAAgB,CAAC,CAAC;gCACnF,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC;4BAC9C,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;4BAClE,CAAC;wBACL,CAAC;oBACL,CAAC,CAAC,CAAC;gBACX,CAAC;gBAEL,wCAAC;YAAD,CApEA,AAoEC,IAAA;;QAAA,CAAC;;;;;;;;;QCtDF,CAAC;;;;;;;;;QCHD,CAAC;;;;;;;;;QCdD,CAAC;;;;;;;;;;;;;;YCDD;;;;eAIG;YACH;gBAA4C,kCAAkB;gBAA9D;;gBA+KA,CAAC;gBA7KG,yBAAyB;gBACzB,2BAA2B;gBAE3B,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACG,kCAAS,GAAf;;;;;;wCACkB,qBAAM,IAAI,CAAC,SAAS,EAAE,EAAA;;4CAAtB,SAAsB;oCACpC,qBAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAM,IAAI;;;4DAClC,qBAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAA;;wDAApC,SAAoC,CAAC;;;;6CACxC,CAAC,CAAC,EAAA;;oCAFH,SAEG,CAAC;oCAEJ,sBAAO,KAAK,EAAC;;;;iBAChB;gBAED;;mBAEG;gBACH,kCAAS,GAAT;oBAEI,IAAM,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC;oBACzE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC;yBACvC,KAAK,CAAC,gBAAc,kBAAkB,aAAU,CAAC;yBACjD,OAAO,EAAE,CAAC;gBACnB,CAAC;gBAED;;mBAEG;gBACH,sDAA6B,GAA7B,UAA8B,KAAa,EAAE,iBAAyB,EAAE,MAAc;oBAAtF,iBAUC;oBARG,0CAA0C;oBAC1C,IAAM,WAAW,GAAG,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,EAA7C,CAA6C,CAAC;oBACrF,IAAM,YAAY,GAAG,UAAC,MAAc,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAA/C,CAA+C,CAAC;oBAEzF,IAAM,aAAa,GAAM,WAAW,CAAC,KAAK,CAAC,SAAI,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,SAAI,WAAW,CAAC,iBAAiB,CAAC,SAAI,YAAY,CAAC,YAAY,CAAG,CAAC;oBACzK,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;yBAChC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAiB,EAAE,aAAa,CAAC;yBAC1F,KAAK,CAAI,WAAW,CAAC,iBAAiB,CAAC,SAAI,YAAY,CAAC,UAAU,CAAC,SAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAG,CAAC,CAAC;gBACxK,CAAC;gBAED;;mBAEG;gBACH,wCAAe,GAAf,UAAgB,MAAc;oBAC1B,MAAM,CAAC,IAAI;yBACN,6BAA6B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;yBAClE,OAAO,EAAE,CAAC;gBACnB,CAAC;gBAED;;mBAEG;gBACH,4CAAmB,GAAnB,UAAoB,MAAc;oBAAlC,iBAUC;oBATG,gEAAgE;oBAChE,MAAM,CAAC,IAAI;yBACN,6BAA6B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;yBAClE,wBAAwB,EAAE;yBAC1B,IAAI,CAAC,UAAA,kBAAkB;wBACpB,IAAM,YAAY,GAAG,KAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,kBAAkB,CAAC,UAAU,CAAC,CAAC;wBAC1F,KAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,kBAAkB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;wBAChF,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC,CAAC,CAAC;gBACX,CAAC;gBAED;;mBAEG;gBACH,yCAAgB,GAAhB,UAAiB,MAAc;oBAC3B,MAAM,CAAC,IAAI;yBACN,6BAA6B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;yBAClE,QAAQ,EAAE,CAAC;gBACpB,CAAC;gBAED;;mBAEG;gBACH,oDAA2B,GAA3B,UAA4B,KAAa,EAAE,iBAAyB,EAAE,MAAc;oBAApF,iBAUC;oBARG,0CAA0C;oBAC1C,IAAM,WAAW,GAAG,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,EAA7C,CAA6C,CAAC;oBACrF,IAAM,YAAY,GAAG,UAAC,MAAc,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAA/C,CAA+C,CAAC;oBAEzF,IAAM,aAAa,GAAM,WAAW,CAAC,KAAK,CAAC,SAAI,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,SAAI,WAAW,CAAC,iBAAiB,CAAC,SAAI,YAAY,CAAC,UAAU,CAAG,CAAC;oBACvK,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;yBAChC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAiB,EAAE,aAAa,CAAC;yBAC1F,KAAK,CAAI,WAAW,CAAC,iBAAiB,CAAC,SAAI,YAAY,CAAC,YAAY,CAAC,SAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAG,CAAC,CAAC;gBAC1K,CAAC;gBAED;;mBAEG;gBACH,sCAAa,GAAb,UAAc,MAAc;oBACxB,MAAM,CAAC,IAAI;yBACN,2BAA2B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;yBAChE,OAAO,EAAE,CAAC;gBACnB,CAAC;gBAED;;mBAEG;gBACH,0CAAiB,GAAjB,UAAkB,MAAc;oBAAhC,iBAUC;oBATG,gEAAgE;oBAChE,MAAM,CAAC,IAAI;yBACN,2BAA2B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;yBAChE,wBAAwB,EAAE;yBAC1B,IAAI,CAAC,UAAA,kBAAkB;wBACpB,IAAM,YAAY,GAAG,KAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,kBAAkB,CAAC,UAAU,CAAC,CAAC;wBAC1F,KAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,kBAAkB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;wBAC9E,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC,CAAC,CAAC;gBACX,CAAC;gBAED;;mBAEG;gBACH,uCAAc,GAAd,UAAe,MAAc;oBACzB,MAAM,CAAC,IAAI;yBACN,2BAA2B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;yBAChE,QAAQ,EAAE,CAAC;gBACpB,CAAC;gBAED;;;;;oBAKI;gBAEJ,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAElE,2CAAkB,GAA5B,UAA6B,KAAa,EAAE,UAAiB;oBAA7D,iBAOC;oBANG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS;wBAC3B,MAAM,CAAC;4BACH,EAAE,EAAE,SAAS,CAAC,KAAK,GAAG,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC;4BACtE,QAAQ,EAAE,SAAS,CAAC,KAAK,GAAG,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC;yBAC3E,CAAC;oBACN,CAAC,CAAC,CAAC;gBACP,CAAC;gBAES,gDAAuB,GAAjC,UAAkC,MAAW,EAAE,QAAe,EAAE,YAA0C;oBAA1G,iBASC;oBARG,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,YAAY,CAAC;oBACtE,IAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;oBAC7E,IAAM,iBAAiB,GAAG,YAAY,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,QAAQ,KAAK,cAAc,EAAvC,CAAuC,CAAC,CAAC;oBACtG,IAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,EAAE,EAAd,CAAc,CAAC,CAAC;oBACtE,MAAM,CAAC,aAAa,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC,EAA9E,CAA8E,CAAC,CAAC;oBAClI,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,WAAgB;wBAC3C,KAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;oBACtE,CAAC,CAAC,CAAC;gBACP,CAAC;gBAES,8CAAqB,GAA/B,UAAgC,MAAW,EAAE,QAAe,EAAE,YAA0C;oBAAxG,iBAcC;oBAbG,IAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC;oBACrE,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;oBACvE,IAAM,iBAAiB,GAAG,YAAY,CAAC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,EAAE,KAAK,QAAQ,EAA3B,CAA2B,CAAC,CAAC;oBACxF,IAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM;wBACrC,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC;4BACnB,MAAM,CAAC,KAAK,CAAC;wBAEjB,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC,KAAK,iBAAiB,CAAC,QAAQ,CAAC;oBAChG,CAAC,CAAC,CAAC;oBACH,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBACf,MAAM,CAAC,cAAc,CAAC,GAAG,YAAY,CAAC;wBACtC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;oBAC/E,CAAC;gBACL,CAAC;gBAEL,qBAAC;YAAD,CA/KA,AA+KC,CA/K2C,uBAAU,GA+KrD;;QAAA,CAAC;;;;;;;;;;;;;;;;;YChIF;;;;;;;;;eASG;YACH;gBAoGI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,iBAAY,QAAwB,EAAE,MAAsB,EAAE,cAA8B;oBA/E5F;;uBAEG;oBACM,SAAI,GAAS,IAAI,IAAI,EAAE,CAAC;oBAEjC,4EAA4E;oBAC5E,oBAAoB;oBACpB,4EAA4E;oBAE5E;;;uBAGG;oBACH,kBAAa,GAAY,KAAK,CAAC;oBAE/B;;;uBAGG;oBACH,iBAAY,GAAY,KAAK,CAAC;oBAE9B;;;uBAGG;oBACH,kBAAa,GAAY,KAAK,CAAC;oBAE/B;;uBAEG;oBACH,gBAAW,GAAqB,EAAE,CAAC;oBAEnC;;uBAEG;oBACH,kBAAa,GAAuB,EAAE,CAAC;oBAEvC;;;uBAGG;oBACH,oBAAe,GAAqB,EAAE,CAAC;oBAEvC;;uBAEG;oBACH,oBAAe,GAAqB,EAAE,CAAC;oBAEvC;;uBAEG;oBACH,oBAAe,GAAqB,EAAE,CAAC;oBA6BnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;oBAC7B,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;gBAC1C,CAAC;gBAUD,sBAAI,2BAAM;oBARV,4EAA4E;oBAC5E,YAAY;oBACZ,4EAA4E;oBAE5E;;;uBAGG;yBACH;wBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;4BACrB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;wBAE5E,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;oBAC/B,CAAC;;;mBAAA;gBAKD,sBAAI,8BAAS;oBAHb;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;oBACjC,CAAC;;;mBAAA;gBAMD,sBAAI,mCAAc;oBAJlB;;;uBAGG;yBACH;wBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;4BACtB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;wBAEzE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;oBAChC,CAAC;oBASD;;;;uBAIG;yBACH,UAAmB,cAA6B;wBAC5C,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;wBACtC,IAAI,CAAC,SAAS,EAAE,CAAC;oBACrB,CAAC;;;mBAjBA;gBAKD,sBAAI,sCAAiB;oBAHrB;;uBAEG;yBACH;wBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;oBAClC,CAAC;;;mBAAA;gBAeD,sBAAI,iCAAY;oBAHhB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAChC,CAAC;;;mBAAA;gBAOD,sBAAI,mCAAc;oBALlB;;;;uBAIG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;oBACzD,CAAC;;;mBAAA;gBAOD,sBAAI,kCAAa;oBALjB;;;;uBAIG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBAC/F,CAAC;;;mBAAA;gBAKD,sBAAI,uCAAkB;oBAHtB;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC3C,CAAC;;;mBAAA;gBAED;;;;;;;;;;;;;;;;;;mBAkBG;gBAEH,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;mBAGG;gBACH,0BAAQ,GAAR;oBAEI,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,aAAa,CAAC;wBAC1C,MAAM,IAAI,KAAK,CAAC,oBAAkB,IAAI,CAAC,QAAQ,CAAC,IAAI,wGAAqG,CAAC,CAAC;oBAE/J,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC;wBACzC,MAAM,IAAI,KAAK,CAAC,sBAAmB,IAAI,CAAC,QAAQ,CAAC,IAAI,gDAA4C;4BAC7F,6HAA6H,CAAC,CAAC;oBAEvI,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,aAAa,CAAC;wBAC1C,MAAM,IAAI,KAAK,CAAC,qBAAmB,IAAI,CAAC,QAAQ,CAAC,IAAI,yGAAsG,CAAC,CAAC;gBAErK,CAAC;gBAED;;mBAEG;gBACH,2BAAS,GAAT;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;wBACzC,IAAI,CAAC,kBAAkB,EAAE,CAAC;wBAC1B,IAAI,CAAC,4BAA4B,EAAE,CAAC;oBACxC,CAAC;gBACL,CAAC;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;mBAEG;gBACO,oCAAkB,GAA5B;oBAAA,iBA+DC;oBA9DG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,UAAA,MAAM;wBAErD,8DAA8D;wBAC9D,IAAI,WAAW,GAAG,MAAM,CAAC,cAAc,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;wBACrD,IAAI,aAAa,GAAG,MAAM,CAAC,cAAc,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;wBAE/D,sDAAsD;wBACtD,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;4BACpD,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,yBAAW,CAAC,IAAI,CAAC,CAAC,CAAC;gCACnC,WAAW,GAAG,iDAAuB,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;4BAE7E,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,yBAAW,CAAC,IAAI,CAAC,CAAC,CAAC;gCAC1C,WAAW,GAAG,iDAAuB,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;4BAE7E,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,yBAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gCAC9C,oCAAoC;gCACpC,oFAAoF;gCACpF,wFAAwF;gCACxF,WAAW;gCACP,WAAW,GAAG,iDAAuB,CAAC,4BAA4B,CAAC,WAAW,CAAC,CAAC;gCAChF,aAAa,GAAG,iDAAuB,CAAC,4BAA4B,CAAC,aAAa,CAAC,CAAC;gCACxF,IAAI;4BAER,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,yBAAW,CAAC,IAAI,CAAC,CAAC,CAAC;gCAC1C,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;gCAC1C,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC;oCACtD,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;4BAEtD,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,yBAAW,CAAC,YAAY,CAAC,CAAC,CAAC;gCAClD,WAAW,GAAG,iDAAuB,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;gCACvE,aAAa,GAAG,iDAAuB,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;4BAC/E,CAAC;wBACL,CAAC;wBACD,oEAAoE;wBAEpE,oDAAoD;wBACpD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,IAAI,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC;4BACvE,MAAM,CAAC,KAAK,CAAC;wBAEjB,uEAAuE;wBACvE,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,SAAS,IAAI,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC,CAAC;4BACvJ,MAAM,CAAC,KAAK,CAAC;wBAEjB,oEAAoE;wBACpE,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS;4BAChB,MAAM,CAAC,UAAU;4BACjB,MAAM,CAAC,eAAe;4BACtB,MAAM,CAAC,YAAY;4BACnB,MAAM,CAAC,SAAS;4BAChB,MAAM,CAAC,YAAY;4BACnB,WAAW,KAAK,aAAa,CAAC;4BAC9B,MAAM,CAAC,KAAK,CAAC;wBAEjB,2FAA2F;wBAC3F,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,IAAI,KAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;4BACnF,IAAM,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,0BAA0B;4BACtG,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC;gCAChG,MAAM,CAAC,KAAK,CAAC;wBACrB,CAAC;wBAED,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACO,8CAA4B,GAAtC;oBAAA,iBAsCC;oBArCG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,UAAA,QAAQ;wBAC3D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC;4BACrE,MAAM,CAAC,KAAK,CAAC;wBAEjB,+BAA+B;wBAC/B,+DAA+D;wBAC/D,4EAA4E;wBAC5E,2EAA2E;wBAC3E,IAAM,uBAAuB,GACzB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,MAAM;4BAChD,QAAQ,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;8BACpF,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;wBAG7C,wGAAwG;wBACxG,6CAA6C;wBAC7C,wFAAwF;wBACxF,iHAAiH;wBACjH,+EAA+E;wBAC/E,IAAM,kBAAkB,GAAG,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAE9D,2HAA2H;wBAC3H,6HAA6H;wBAC7H,0BAA0B;wBAE1B,uDAAuD;wBACvD,EAAE,CAAC,CAAC,uBAAuB,KAAK,SAAS,CAAC;4BACtC,MAAM,CAAC,KAAK,CAAC;wBAEjB,mDAAmD;wBACnD,EAAE,CAAC,CAAC,CAAC,uBAAuB,KAAK,SAAS,IAAI,uBAAuB,KAAK,IAAI,CAAC;4BAC3E,CAAC,kBAAkB,KAAK,SAAS,IAAI,kBAAkB,KAAK,IAAI,CAAC,CAAC;4BAClE,MAAM,CAAC,KAAK,CAAC;wBAEjB,2DAA2D;wBAC3D,MAAM,CAAC,uBAAuB,KAAK,kBAAkB,CAAC;oBAC1D,CAAC,CAAC,CAAC;gBACP,CAAC;gBAEL,cAAC;YAAD,CAvWA,AAuWC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;YC/ZF;;eAEG;YACH;gBAEI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,4BAAsB,UAAsB,EACtB,QAAwB,EACxB,mBAAyC;oBAFzC,eAAU,GAAV,UAAU,CAAY;oBACtB,aAAQ,GAAR,QAAQ,CAAgB;oBACxB,wBAAmB,GAAnB,mBAAmB,CAAsB;gBAC/D,CAAC;gBAoBD;;;;mBAIG;gBACG,wCAAW,GAAjB,UAAkB,YAAgD,EAAE,QAAa,EAAE,eAAoB;;4BAC7F,YAAY,EAIZ,QAAQ,EAMV,KAAK,EAAU,MAAM,EAAY,UAAU,EAYzC,mBAAmB;;;;mDAtBJ,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,YAAY,CAAC;oCACpE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;wCACzD,MAAM,IAAI,KAAK,CAAC,cAAY,YAAY,8BAAyB,IAAI,CAAC,QAAQ,CAAC,IAAI,aAAU,CAAC,CAAC;+CAElF,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,YAAY,CAAC;oCACzE,oFAAoF;oCACpF,6LAA6L;oCAC7L,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC;wCACtB,MAAM,IAAI,KAAK,CAAC,kHAAkH,CAAC,CAAC;6CAEvG,EAAE,eAAoB,EAAE;oCACzD,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;wCACpB,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC;wCAC3C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC;wCACxC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;oCACzE,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,KAAK,GAAG,QAAQ,CAAC,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC;wCAClD,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC;wCACxD,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;oCACzF,CAAC;0DAG2B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;oCAC7G,qBAAM,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAnC,SAAmC;oCACvD,qBAAM,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,UAAU,CAAC,EAAA;;oCAAnD,SAAmD,CAAC;yCAChD,CAAC,IAAI,CAAC,mBAAmB,EAAzB,wBAAyB;oCACzB,qBAAM,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;;;;;;iBACtD;gBAgBD;;;;mBAIG;gBACG,+CAAkB,GAAxB,UAAyB,YAAgD,EAAE,eAAoB,EAAE,QAAa;;4BACpG,YAAY,EAIZ,QAAQ,EAMV,KAAK,EAAU,MAAM,EAAY,UAAU,EAWzC,mBAAmB;;;;mDArBJ,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,YAAY,CAAC;oCACpE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;wCACzD,MAAM,IAAI,KAAK,CAAC,cAAY,YAAY,8BAAyB,IAAI,CAAC,QAAQ,CAAC,IAAI,aAAU,CAAC,CAAC;+CAElF,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,YAAY,CAAC;oCACzE,oFAAoF;oCACpF,6LAA6L;oCAC7L,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC;wCACtB,MAAM,IAAI,KAAK,CAAC,kHAAkH,CAAC,CAAC;6CAEvG,EAAE,eAAoB,EAAE;oCACzD,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;wCACpB,KAAK,GAAG,QAAQ,CAAC,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC;wCAClD,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC;wCACxD,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;oCACzF,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC;wCAC3C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC;wCACxC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;oCACzE,CAAC;0DAE2B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;oCAC7G,qBAAM,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAnC,SAAmC;oCACvD,qBAAM,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,UAAU,CAAC,EAAA;;oCAAnD,SAAmD,CAAC;yCAChD,CAAC,IAAI,CAAC,mBAAmB,EAAzB,wBAAyB;oCACzB,qBAAM,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;;;;;;iBACtD;gBAgBD;;;;mBAIG;gBACG,0CAAa,GAAnB,UAAoB,YAAgD,EAAE,QAAa,EAAE,gBAAuB;;4BAClG,YAAY,EAIZ,QAAQ,EAIR,mBAAmB,eAEnB,cAAc;;;;mDAVC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,YAAY,CAAC;oCACpE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;wCACzD,MAAM,IAAI,KAAK,CAAC,cAAY,YAAY,8BAAyB,IAAI,CAAC,QAAQ,CAAC,IAAI,aAAU,CAAC,CAAC;+CAElF,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,YAAY,CAAC;oCACzE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC;wCACvB,MAAM,IAAI,KAAK,CAAC,sEAAoE,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAI,YAAY,0BAAqB,QAAQ,CAAC,YAAc,CAAC,CAAC;0DAE5I,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;oCAC7G,qBAAM,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAnC,SAAmC;qDAChC,gBAAgB,CAAC,GAAG,CAAC,UAAA,eAAe;wCACvD,IAAM,MAAM,GAAQ,EAAE,CAAC;wCACvB,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;4CACpB,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;4CACvE,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;wCAClF,CAAC;wCAAC,IAAI,CAAC,CAAC;4CACJ,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;4CACvE,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;wCAClF,CAAC;wCAED,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oCAClF,CAAC,CAAC;oCACF,qBAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;yCAE9B,CAAC,IAAI,CAAC,mBAAmB,EAAzB,wBAAyB;oCACzB,qBAAM,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;;;;;;iBACtD;gBAgBD;;;;mBAIG;gBACG,iDAAoB,GAA1B,UAA2B,YAAgD,EAAE,eAAoB,EAAE,SAAgB;;4BACzG,YAAY,EAIZ,QAAQ,EAKR,mBAAmB,eAGf,cAAc;;;;mDAZH,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,YAAY,CAAC;oCACpE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;wCACzD,MAAM,IAAI,KAAK,CAAC,cAAY,YAAY,8BAAyB,IAAI,CAAC,QAAQ,CAAC,IAAI,aAAU,CAAC,CAAC;+CAElF,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,YAAY,CAAC;oCACzE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC;wCACvB,MAAM,IAAI,KAAK,CAAC,sEAAoE,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAI,YAAY,0BAAqB,QAAQ,CAAC,YAAc,CAAC,CAAC;0DAG5I,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;oCAC7G,qBAAM,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAnC,SAAmC;;;;qDAE5B,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ;wCACzC,IAAM,MAAM,GAAQ,EAAE,CAAC;wCACvB,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;4CACpB,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;4CACvE,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;wCAClF,CAAC;wCAAC,IAAI,CAAC,CAAC;4CACJ,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;4CACvE,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;wCAClF,CAAC;wCAED,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oCAClF,CAAC,CAAC;oCACF,qBAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;yCAG9B,CAAC,IAAI,CAAC,mBAAmB,EAAzB,wBAAyB;oCACzB,qBAAM,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;;;;;;;iBAE1D;gBAgBD;;;;mBAIG;gBACG,+CAAkB,GAAxB,UAAyB,YAAgD,EAAE,QAAa,EAAE,gBAAuB;;4BACvG,YAAY,EAIZ,QAAQ,EAQR,EAAE,EAIF,eAAe,EACf,gBAAgB;;;;mDAjBD,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,YAAY,CAAC;oCACpE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;wCACzD,MAAM,IAAI,KAAK,CAAC,cAAY,YAAY,8BAAyB,IAAI,CAAC,QAAQ,CAAC,IAAI,aAAU,CAAC,CAAC;+CAElF,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,YAAY,CAAC;oCACzE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC;wCACvB,MAAM,IAAI,KAAK,CAAC,sEAAoE,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAI,YAAY,0BAAqB,QAAQ,CAAC,YAAc,CAAC,CAAC;oCAExK,kHAAkH;oCAClH,EAAE,CAAC,CAAC,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;wCAC9C,MAAM,gBAAC,OAAO,CAAC,OAAO,EAAE,EAAC;yCAElB,IAAI,2BAAY,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC;yCACjE,MAAM,EAAE;yCACR,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAAE,gBAAgB,CAAC;sDAEpD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;uDACrK,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;oCAE/L,gBAAgB,CAAC,OAAO,CAAC,UAAC,eAAe,EAAE,KAAK;wCAC5C,EAAE,CAAC,OAAO,CAAC,MAAI,eAAe,uBAAkB,gBAAgB,wBAAmB,KAAK,MAAG,CAAC;6CACvF,YAAY,CAAC,gBAAgB,GAAG,KAAK,EAAE,eAAe,CAAC,CAAC;oCACjE,CAAC,CAAC,CAAC;oCAEH,qBAAM,EAAE;6CACH,YAAY,CAAC,UAAU,EAAE,QAAQ,CAAC;6CAClC,OAAO,EAAE,EAAA;;oCAFd,SAEc,CAAC;;;;;iBAClB;gBAgBD;;;;mBAIG;gBACG,sDAAyB,GAA/B,UAAgC,YAAgD,EAAE,eAAoB,EAAE,SAAgB;;4BAC9G,YAAY,EAIZ,QAAQ,EAQR,EAAE,EAIF,eAAe,EACf,gBAAgB;;;;mDAjBD,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,YAAY,CAAC;oCACpE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;wCACzD,MAAM,IAAI,KAAK,CAAC,cAAY,YAAY,8BAAyB,IAAI,CAAC,QAAQ,CAAC,IAAI,aAAU,CAAC,CAAC;+CAElF,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,YAAY,CAAC;oCACzE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC;wCACvB,MAAM,IAAI,KAAK,CAAC,sEAAoE,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAI,YAAY,0BAAqB,QAAQ,CAAC,YAAc,CAAC,CAAC;oCAExK,yGAAyG;oCACzG,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;wCAChC,MAAM,gBAAC,OAAO,CAAC,OAAO,EAAE,EAAC;yCAElB,IAAI,2BAAY,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC;yCACjE,MAAM,EAAE;yCACR,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAAE,gBAAgB,CAAC;sDAE/C,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ;uDAC5H,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ;oCAEtJ,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ,EAAE,KAAK;wCAC9B,EAAE,CAAC,OAAO,CAAC,MAAI,eAAe,8BAAyB,gBAAgB,iBAAY,KAAK,MAAG,CAAC;6CACzF,YAAY,CAAC,SAAS,GAAG,KAAK,EAAE,QAAQ,CAAC,CAAC;oCACjD,CAAC,CAAC,CAAC;oCAEH,qBAAM,EAAE,CAAC,YAAY,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC,OAAO,EAAE,EAAA;;oCAAnE,SAAmE,CAAC;;;;;iBACvE;gBAgBD;;;;mBAIG;gBACG,qDAAwB,GAA9B,UAA+B,QAA4C,EAAE,QAAa,EAAE,mBAA0B,EAAE,sBAA6B;;;;wCACjJ,qBAAM,OAAO,CAAC,GAAG,CAAC;wCACd,IAAI,CAAC,aAAa,CAAC,QAAe,EAAE,QAAQ,EAAE,mBAAmB,CAAC;wCAClE,IAAI,CAAC,kBAAkB,CAAC,QAAe,EAAE,QAAQ,EAAE,sBAAsB,CAAC;qCAC7E,CAAC,EAAA;;oCAHF,SAGE,CAAC;;;;;iBACN;gBAgBD;;;;mBAIG;gBACG,4DAA+B,GAArC,UAAsC,QAA4C,EAAE,eAAoB,EAAE,YAAmB,EAAE,eAAsB;;;;wCACjJ,qBAAM,OAAO,CAAC,GAAG,CAAC;wCACd,IAAI,CAAC,oBAAoB,CAAC,QAAe,EAAE,eAAe,EAAE,YAAY,CAAC;wCACzE,IAAI,CAAC,yBAAyB,CAAC,QAAe,EAAE,eAAe,EAAE,eAAe,CAAC;qCACpF,CAAC,EAAA;;oCAHF,SAGE,CAAC;;;;;iBACN;gBAED;;;mBAGG;gBACG,uCAAU,GAAhB,UAAiB,EAAO;;4BACd,KAAK,EACL,UAAU,EACZ,SAAS;;;;4CAFC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI;iDACJ,EAAE;gDACpB,EAAE;oCAElB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAC;wCACvC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,UAAA,aAAa;4CACtD,UAAU,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;4CACxE,MAAM,CAAC,KAAK,GAAG,GAAG,GAAG,aAAa,CAAC,YAAY,GAAG,IAAI,GAAG,aAAa,CAAC,YAAY,CAAC;wCACxF,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oCAErB,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,GAAG,MAAM,CAAC;wCACjF,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;oCAC1B,CAAC;oCAED,qBAAM,IAAI,2BAAY,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC;6CAC5D,MAAM,EAAE;6CACR,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC;6CACjC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC;6CAC5B,OAAO,EAAE,EAAA;;oCAJd,SAIc,CAAC;;;;;iBAClB;gBAED;;;mBAGG;gBACG,wCAAW,GAAjB,UAAkB,GAAU;;;4BAClB,KAAK,EACL,UAAU,EACZ,SAAS;;;;4CAFC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI;iDACJ,EAAE;gDACpB,EAAE;oCAElB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAC;wCACvC,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,UAAC,EAAE,EAAE,OAAO;4CAC5B,KAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,UAAA,aAAa;gDAC1C,UAAU,CAAC,aAAa,CAAC,YAAY,GAAG,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;gDACxF,MAAM,CAAC,KAAK,GAAG,GAAG,GAAG,aAAa,CAAC,YAAY,GAAG,IAAI,GAAG,aAAa,CAAC,YAAY,GAAG,GAAG,GAAG,OAAO,CAAC;4CACxG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wCACrB,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oCACpB,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,GAAG,YAAY,CAAC;wCACvF,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;oCAC5B,CAAC;oCAED,qBAAM,IAAI,2BAAY,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC;6CAC5D,MAAM,EAAE;6CACR,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC;6CACjC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC;6CAC5B,OAAO,EAAE,EAAA;;oCAJd,SAIc,CAAC;;;;;iBAClB;gBAED;;mBAEG;gBACG,4CAAe,GAArB,UAAsB,cAAiE,EAAE,gBAA2C,EAAE,KAAa,EAAE,QAAgB;;;4BAE3J,QAAQ,EAGR,sBAAsB,EACtB,iBAAiB,EACjB,mBAAmB,EAErB,SAAS,EAWP,WAAW,EACX,YAAY,EAEZ,GAAG,EACH,QAAQ;;;;+CAtBG,IAAI,CAAC,8BAA8B,CAAC,cAAc,CAAC;oCACpE,EAAE,CAAC,CAAC,CAAC,CAAC,gBAAgB,YAAY,KAAK,CAAC,CAAC;wCAAC,gBAAgB,GAAG,CAAC,gBAAgB,CAAC,CAAC;6DAEjD,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,gBAAgB,GAAG,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,uBAAuB;wDACzH,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC;0DACzG,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC;gDAEvH,IAAI,CAAC,gCAAgC,CAAC,sBAAsB,EAAE,gBAAgB,CAAC;oCAC/F,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,YAAY,KAAK,CAAC,CAAC;wCAAC,SAAS,GAAG,CAAC,SAAS,CAAC,CAAC;oCAE3D,8BAA8B;oCAC9B,SAAS,GAAI,SAAmB,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,EAA3C,CAA2C,CAAC,CAAC;oCAEjG,mEAAmE;oCACnE,EAAE,CAAC,CAAE,SAAmB,CAAC,MAAM,KAAK,CAAC,CAAC;wCAClC,MAAM,gBAAC,EAAE,EAAC;kDAGM,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,EAA7C,CAA6C;mDAC/D,UAAC,MAAc,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAA/C,CAA+C;0CAErE,EAAE;+CACH,SAAmB,CAAC,GAAG,CAAC,UAAC,QAAa;wCACpD,IAAM,EAAE,GAAG,IAAI,2BAAY,CAAC,KAAI,CAAC,UAAU,EAAE,KAAI,CAAC,mBAAmB,CAAC;6CACjE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;6CAChH,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC;6CACjE,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,YAAY,EAAE,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;wCAE7H,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;4CAC1B,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,cAAc,EAAE,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;wCAE7H,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;4CAChC,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,qBAAqB,EAAE,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;wCAE1I,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE;6CACjB,IAAI,CAAC,UAAC,OAAsB;4CACzB,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAnB,CAAmB,CAAC,CAAC,CAAC,wBAAwB;wCAC5E,CAAC,CAAC,CAAC;oCACX,CAAC,CAAC;oCAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;oCAC5B,sBAAO,GAAG,EAAC;;;;iBACd;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;mBAEG;gBACO,6DAAgC,GAA1C,UAA2C,MAAsB,EAAE,gBAA2C;oBAA9G,iBAWC;oBAVG,EAAE,CAAC,CAAC,gBAAgB,YAAY,KAAK,CAAC,CAAC,CAAC;wBACpC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,gCAAgC,CAAC,MAAM,EAAE,MAAM,CAAC,EAArD,CAAqD,CAAC,CAAC;oBAEjG,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,EAAE,CAAC,CAAC,gBAAgB,YAAY,MAAM,CAAC,CAAC,CAAC;4BACrC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;wBACjD,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,MAAM,CAAC,gBAAgB,CAAC;wBAC5B,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACO,2DAA8B,GAAxC,UAAyC,cAAiE;oBACtG,EAAE,CAAC,CAAC,cAAc,YAAY,mCAAgB,CAAC;wBAC3C,MAAM,CAAC,cAAc,CAAC;oBAE1B,IAAM,YAAY,GAAG,cAAc,YAAY,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,GAAG,cAAc,CAAC;oBAC/H,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,YAAY,CAAC,CAAC;gBACpE,CAAC;gBAED;;mBAEG;gBACO,+CAAkB,GAA5B,UAA6B,MAAW,EAAE,QAAwB,EAAE,aAA6B;oBAAjG,iBA2BC;oBA3BmE,8BAAA,EAAA,kBAA6B;oBAC7F,IAAM,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ;wBAC5C,IAAM,WAAW,GAAG,QAAQ,CAAC,qBAAqB,CAAC;wBAEnD,IAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;wBAC5G,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;4BACP,MAAM,CAAC,SAAS,CAAC;wBAErB,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;4BACzB,IAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,SAAc;gCACzC,MAAM,CAAC,KAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;4BAC1E,CAAC,CAAC,CAAC;4BACH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;wBAEpC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,MAAM,CAAC,KAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;wBACtE,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAM,QAAQ,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;wBAC9D,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,MAAM,KAAK,MAAM,EAA9B,CAA8B,CAAC,CAAC,CAAC,CAAC;4BACtE,IAAM,YAAY,GAAG,IAAI,iBAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;4BACnD,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBACrC,CAAC;wBAED,MAAM,CAAC,aAAa,CAAC;oBACzB,CAAC,CAAC,CAAC;gBACP,CAAC;gBAEL,yBAAC;YAAD,CA/gBA,AA+gBC,IAAA;;QAAA,CAAC;;;;;;;;;;YChfF;;eAEG;YACH;gBAEI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,0BAAsB,kBAAsC,EACtC,MAAmB,EACnB,MAAc;oBAFd,uBAAkB,GAAlB,kBAAkB,CAAoB;oBACtC,WAAM,GAAN,MAAM,CAAa;oBACnB,WAAM,GAAN,MAAM,CAAQ;gBACpC,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,iCAAM,GAAN,UAAO,cAAsB,EAAE,KAAqB;oBAChD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;gBAChE,CAAC;gBAED;;mBAEG;gBACH,oCAAS,GAAT,UAAU,cAAsB,EAAE,QAAyB,EAAE,OAAsC;oBAC/F,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBAC3E,CAAC;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,UAA2B,EAAE,OAAqC;;;;wCAC/F,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,EAAA;wCAA9E,sBAAO,SAAuE,EAAC;;;;iBAClF;gBAED;;mBAEG;gBACG,gCAAK,GAAX,UAAY,cAAsB,EAAE,KAAqB,EAAE,OAA+B;;;;wCAC/E,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,EAAE,OAAO,CAAC,EAAA;wCAA3E,sBAAO,SAAoE,EAAC;;;;iBAC/E;gBAED;;mBAEG;gBACG,gDAAqB,GAA3B,UAA4B,cAAsB,EAAE,WAAuB,EAAE,OAAsB;;;;wCACxF,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,EAAA;wCAAjF,sBAAO,SAA0E,EAAC;;;;iBACrF;gBAED;;;mBAGG;gBACG,kDAAuB,GAA7B,UAA8B,cAAsB,EAAE,UAA2B;;;;wCACtE,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,EAAA;wCAAzE,sBAAO,SAAkE,EAAC;;;;iBAC7E;gBAED;;mBAEG;gBACG,qCAAU,GAAhB,UAAiB,cAAsB,EAAE,KAAoB,EAAE,OAA2B;;;;wCAC/E,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,EAAA;wCAA1E,sBAAO,SAAmE,EAAC;;;;iBAC9E;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,KAAoB,EAAE,OAA2B;;;;wCAC9E,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,EAAA;wCAAzE,sBAAO,SAAkE,EAAC;;;;iBAC7E;gBAED;;mBAEG;gBACG,mCAAQ,GAAd,UAAe,cAAsB,EAAE,GAAW,EAAE,KAAoB,EAAE,OAAoD;;;;wCACnH,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,EAAA;wCAA7E,sBAAO,SAAsE,EAAC;;;;iBACjF;gBAED;;mBAEG;gBACG,8CAAmB,GAAzB,UAA0B,cAAsB,EAAE,SAAiB,EAAE,OAA2B;;;;wCACrF,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,EAAA;wCAA7E,sBAAO,SAAsE,EAAC;;;;iBACjF;gBAED;;mBAEG;gBACG,gDAAqB,GAA3B,UAA4B,cAAsB;;;;wCACvC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,EAAA;wCAA7D,sBAAO,SAAsD,EAAC;;;;iBACjE;gBAED;;mBAEG;gBACG,2CAAgB,GAAtB,UAAuB,cAAsB,EAAE,KAAoB,EAAE,OAAoE;;;;wCAC9H,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,EAAA;wCAAhF,sBAAO,SAAyE,EAAC;;;;iBACpF;gBAED;;mBAEG;gBACG,4CAAiB,GAAvB,UAAwB,cAAsB,EAAE,KAAoB,EAAE,WAAmB,EAAE,OAAiC;;;;wCACjH,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,iBAAiB,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO,CAAC,EAAA;wCAA9F,sBAAO,SAAuF,EAAC;;;;iBAClG;gBAED;;mBAEG;gBACG,2CAAgB,GAAtB,UAAuB,cAAsB,EAAE,KAAoB,EAAE,MAAc,EAAE,OAAiC;;;;wCAC3G,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;wCAAxF,sBAAO,SAAiF,EAAC;;;;iBAC5F;gBAED;;mBAEG;gBACG,4CAAiB,GAAvB,UAAwB,cAAsB,EAAE,CAAS,EAAE,CAAS,EAAE,OAAkC;;;;wCAC7F,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,EAAA;wCAAhF,sBAAO,SAAyE,EAAC;;;;iBACpF;gBAED;;mBAEG;gBACG,kCAAO,GAAb,UAAc,cAAsB,EAAE,CAAS,EAAE,CAAS,EAAE,OAAwB;;;;wCACzE,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,EAAA;wCAAtE,sBAAO,SAA+D,EAAC;;;;iBAC1E;gBAED;;mBAEG;gBACG,gCAAK,GAAX,UAAY,cAAsB,EAAE,IAAqC,EAAE,SAAiB,EAAE,OAAe,EAAE,MAAqB,EAAE,QAAuB,EAAE,OAAgB,EAAE,OAAsD;;;;wCAC5N,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,EAAA;wCAAnH,sBAAO,SAA4G,EAAC;;;;iBACvH;gBAED;;mBAEG;gBACG,4CAAiB,GAAvB,UAAwB,cAAsB;;;;wCACnC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,EAAA;wCAAzD,sBAAO,SAAkD,EAAC;;;;iBAC7D;gBAED;;mBAEG;gBACG,gDAAqB,GAA3B,UAA4B,cAAsB,EAAE,OAAwB;;;;wCACjE,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,EAAA;wCAApE,sBAAO,SAA6D,EAAC;;;;iBACxE;gBAED;;mBAEG;gBACG,qDAA0B,GAAhC,UAAiC,cAAsB,EAAE,OAA2B;;;;wCACzE,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAA;wCAAzE,sBAAO,SAAkE,EAAC;;;;iBAC7E;gBAED;;mBAEG;gBACH,kDAAuB,GAAvB,UAAwB,cAAsB,EAAE,OAA2B;oBACvE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;gBAC/E,CAAC;gBAED;;mBAEG;gBACH,oDAAyB,GAAzB,UAA0B,cAAsB,EAAE,OAA2B;oBACzE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;gBACjF,CAAC;gBAED;;mBAEG;gBACG,qCAAU,GAAhB,UAAiB,cAAsB,EAAE,IAAqB,EAAE,OAAqC;;;;wCAC1F,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;wCAAzE,sBAAO,SAAkE,EAAC;;;;iBAC7E;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,GAAkB,EAAE,OAAoC;;;;wCACrF,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,EAAA;wCAAvE,sBAAO,SAAgE,EAAC;;;;iBAC3E;gBAED;;mBAEG;gBACG,mCAAQ,GAAd,UAAe,cAAsB;;;;wCAC1B,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,EAAA;wCAA1D,sBAAO,SAAmD,EAAC;;;;iBAC9D;gBAED;;mBAEG;gBACH,gDAAqB,GAArB,UAAsB,cAAsB,EAAE,OAAwE;oBAClH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBACnE,CAAC;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,GAAoB,EAAE,MAAuB,EAAE,OAA0B;;;;wCACtG,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;wCAA/E,sBAAO,SAAwE,EAAC;;;;iBACnF;gBAED;;;mBAGG;gBACG,iDAAsB,GAA5B,UAA6B,cAAsB,EAAE,OAAuC;;;;wCACjF,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAA;wCAA/E,sBAAO,SAAwE,EAAC;;;;iBACnF;gBAED;;mBAEG;gBACG,kCAAO,GAAb,UAAc,cAAsB;;;;wCACzB,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,EAAA;wCAAzD,sBAAO,SAAkD,EAAC;;;;iBAC7D;gBAED;;mBAEG;gBACG,iCAAM,GAAZ,UAAa,cAAsB,EAAE,OAAe,EAAE,OAAkC;;;;wCAC7E,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,EAAA;wCAAxE,sBAAO,SAAiE,EAAC;;;;iBAC5E;gBAED;;mBAEG;gBACG,qCAAU,GAAhB,UAAiB,cAAsB,EAAE,KAAoB,EAAE,GAAkB,EAAE,OAA2B;;;;wCACnG,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,EAAA;wCAA/E,sBAAO,SAAwE,EAAC;;;;iBACnF;gBAED;;mBAEG;gBACG,gCAAK,GAAX,UAAY,cAAsB,EAAE,OAA2B;;;;wCACpD,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,EAAA;wCAA9D,sBAAO,SAAuD,EAAC;;;;iBAClE;gBAED;;mBAEG;gBACG,qCAAU,GAAhB,UAAiB,cAAsB,EAAE,KAAoB,EAAE,MAAqB,EAAE,OAAuE;;;;wCAClJ,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;wCAAlF,sBAAO,SAA2E,EAAC;;;;iBACtF;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,KAAoB,EAAE,MAAqB,EAAE,OAA2B;;;;wCACrG,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;wCAAjF,sBAAO,SAA0E,EAAC;;;;iBACrF;gBAED,4EAA4E;gBAC5E,gDAAgD;gBAChD,4EAA4E;gBAE5E;;mBAEG;gBACG,kCAAO,GAAb;;;;;;iBAEC;gBAED;;;;mBAIG;gBACG,wCAAa,GAAnB;;;;wCACI,qBAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,YAAY,EAAE,EAAA;;oCAAvD,SAAuD,CAAC;;;;;iBAC3D;gBAED;;mBAEG;gBACG,2CAAgB,GAAtB;;;;;;iBAEC;gBAED;;mBAEG;gBACG,4CAAiB,GAAvB;;;;;;iBAEC;gBAED;;mBAEG;gBACG,8CAAmB,GAAzB;;;;;;iBAEC;gBAED;;mBAEG;gBACH,8CAAmB,GAAnB;oBACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gBACvD,CAAC;gBAED;;mBAEG;gBACH,gCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;oBACnC,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;gBAC/E,CAAC;gBAED;;mBAEG;gBACG,iCAAM,GAAZ,UAAa,cAAsB,EAAE,SAAwB,EAAE,eAAgC;;;;;wCAC3E,qBAAM,IAAI,CAAC,kBAAkB;yCACxC,UAAU;yCACV,UAAU,CAAC,cAAc,CAAC;yCAC1B,SAAS,CAAC,SAAS,CAAC,EAAA;;8CAHT,SAGS;oCAEzB,sBAAO,OAAO,CAAC,UAAU,EAAC;;;;iBAC7B;gBAED;;mBAEG;gBACG,iCAAM,GAAZ,UAAa,cAAsB,EAAE,SAAwB,EAAE,UAAyB;;;;wCACpF,qBAAM,IAAI,CAAC,kBAAkB;yCACxB,UAAU;yCACV,UAAU,CAAC,cAAc,CAAC;yCAC1B,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,EAAA;;oCAHrC,SAGqC,CAAC;;;;;iBACzC;gBAYD;;mBAEG;gBACG,iCAAM,GAAZ,UAAa,cAAsB,EAAE,UAAgC,EAAE,eAAuB;;;;;oCAC1F,EAAE,CAAC,CAAC,OAAO,UAAU,KAAK,QAAQ,CAAC;wCAC/B,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;oCAE5E,qBAAM,IAAI,CAAC,kBAAkB;6CACxB,UAAU;6CACV,UAAU,CAAC,cAAc,CAAC;6CAC1B,SAAS,CAAC,UAAU,CAAC,EAAA;;oCAH1B,SAG0B,CAAC;;;;;iBAC9B;gBAED;;mBAEG;gBACG,iDAAsB,GAA5B,UAA6B,cAAsB,EAAE,WAAgB,EAAE,QAAa,EAAE,QAAiB;;;4BACnG,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAED;;mBAEG;gBACG,0CAAe,GAArB,UAAsB,cAAsB;;;4BACxC,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAED;;mBAEG;gBACG,2CAAgB,GAAtB,UAAuB,eAAyB;;;4BAC5C,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBAEjF;gBAED;;mBAEG;gBACG,mCAAQ,GAAd,UAAe,cAAsB;;;4BACjC,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAED;;mBAEG;gBACG,sCAAW,GAAjB,UAAkB,KAAkB;;;4BAChC,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,SAAiB;;;4BAC7B,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,UAAkB;;;4BACtD,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAYD;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,iBAAqC,EAAE,MAAoB;;;4BACvE,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAYD;;mBAEG;gBACG,qCAAU,GAAhB,UAAiB,iBAAqC,EAAE,OAAuB;;;4BAC3E,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAYD;;mBAEG;gBACG,uCAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,qBAA0C;;;4BAC5I,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAYD;;mBAEG;gBACG,uCAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,SAAuB;;;4BACzH,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAED;;mBAEG;gBACG,wCAAa,GAAnB,UAAoB,WAAwB,EAAE,cAAsE;;;4BAChH,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAYD;;mBAEG;gBACG,qCAAU,GAAhB,UAAiB,iBAAqC,EAAE,kBAAuC;;;4BAC3F,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAYD;;mBAEG;gBACG,sCAAW,GAAjB,UAAkB,iBAAqC,EAAE,oBAA6C;;;4BAClG,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAED;;mBAEG;gBACG,4CAAiB,GAAvB,UAAwB,WAAwB;;;4BAC5C,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAYD;;mBAEG;gBACG,2CAAgB,GAAtB,UAAuB,iBAAqC,EAAE,UAA4B;;;4BACtF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAYD;;mBAEG;gBACG,4CAAiB,GAAvB,UAAwB,iBAAqC,EAAE,WAA+B;;;4BAC1F,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAYD;;mBAEG;gBACG,yCAAc,GAApB,UAAqB,iBAAqC,EAAE,UAA4B;;;4BACpF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAYD;;mBAEG;gBACG,0CAAe,GAArB,UAAsB,iBAAqC,EAAE,WAA+B;;;4BACxF,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAED;;mBAEG;gBACG,sCAAW,GAAjB,UAAkB,cAAsB,EAAE,KAAkB;;;4BACxD,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAED;;mBAEG;gBACG,oCAAS,GAAf,UAAgB,cAAsB,EAAE,SAAiB;;;4BACrD,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;;;iBACjF;gBAED;;mBAEG;gBACH,wCAAa,GAAb,UAAc,WAAwI;oBAClJ,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;gBAClF,CAAC;gBAED;;mBAEG;gBACH,+CAAoB,GAApB,UAAqB,mBAAwB,EAAE,aAAkB;oBAC7D,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;gBAClF,CAAC;gBAED;;mBAEG;gBACG,mCAAQ,GAAd,UAAe,cAAsB;;;;wCACjC,qBAAM,IAAI,CAAC,kBAAkB;yCACxB,UAAU;yCACV,cAAc,CAAC,cAAc,CAAC,EAAA;;oCAFnC,SAEmC,CAAC;;;;;iBACvC;gBASD,sBAAc,oCAAM;oBAPpB,4EAA4E;oBAC5E,oBAAoB;oBACpB,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAkB,CAAC;oBAClD,CAAC;;;mBAAA;gBAED;;mBAEG;gBACO,wCAAa,GAAvB,UAAwB,cAAsB;oBAC1C,MAAM,CAAE,IAAI,CAAC,kBAAkB,CAAC,UAAiB,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;gBACjF,CAAC;gBAEL,uBAAC;YAAD,CApoBA,AAooBC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;YCnqBF;;eAEG;YACH;gBAyCI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,qBAAY,OAAsB,EAAE,MAAc,EAAE,OAAa;oBAE7D,sGAAsG;oBACtG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;oBAE9B,yEAAyE;oBACzE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;wBACT,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBAEtC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;oBACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBAC3B,CAAC;gBAED,4EAA4E;gBAC5E,4BAA4B;gBAC5B,4EAA4E;gBAE5E;;mBAEG;gBACH,6BAAO,GAAP;oBAAA,iBAeC;oBAdG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;wBAC9B,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,KAAI,CAAC,kBAAkB,EAAE,EAAE,KAAI,CAAC,OAAO,CAAC,KAAK,EAAE,UAAC,GAAQ,EAAE,QAAa;4BACpG,EAAE,CAAC,CAAC,GAAG,CAAC;gCAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BAE1B,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;4BACrB,IAAM,kBAAkB,GAAuB;gCAC3C,EAAE,EAAE,CAAC;gCACL,UAAU,EAAE,KAAI,CAAC,IAAI;gCACrB,mBAAmB,EAAE,KAAK;6BAC7B,CAAC;4BACF,KAAI,CAAC,WAAW,GAAG,IAAI,mCAAgB,CAAC,kBAAkB,EAAE,KAAI,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;4BAC/E,EAAE,EAAE,CAAC;wBACT,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,gCAAU,GAAhB;;;;4BACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gCACX,MAAM,IAAI,iDAAuB,CAAC,SAAS,CAAC,CAAC;4BAEjD,sBAAO,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;oCAC9B,IAAM,OAAO,GAAG,UAAC,GAAQ,IAAK,OAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,EAAtB,CAAsB,CAAC;oCACrD,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oCACzB,KAAI,CAAC,IAAI,GAAG,SAAS,CAAC;gCAC1B,CAAC,CAAC,EAAC;;;iBACN;gBAED;;mBAEG;gBACG,uCAAiB,GAAvB;;;4BACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gCACX,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,IAAI,iDAAuB,CAAC,SAAS,CAAC,CAAC,EAAC;4BAElE,sBAAO,IAAI,CAAC,WAAW,EAAC;;;iBAC3B;gBAED;;mBAEG;gBACH,qCAAe,GAAf;oBACI,MAAM,CAAC;wBACH,MAAM,EAAE,IAAI,CAAC,OAAO;wBACpB,UAAU,EAAE,IAAI,CAAC,IAAI;qBACxB,CAAC;gBACN,CAAC;gBAED;;;mBAGG;gBACH,+CAAyB,GAAzB,UAA0B,GAAW,EAAE,UAAyB;oBAC5D,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;gBAC1E,CAAC;gBAED;;mBAEG;gBACH,sCAAgB,GAAhB,UAAiB,UAAkB;oBAC/B,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAED;;mBAEG;gBACH,qCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAED;;mBAEG;gBACH,qCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAED;;mBAEG;gBACH,4CAAsB,GAAtB,UAAuB,KAAU,EAAE,cAA8B;oBAC7D,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;wBACtC,MAAM,CAAC,IAAI,CAAC;oBAEhB,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;oBAsB9B,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACH,0CAAoB,GAApB,UAAqB,KAAU,EAAE,cAA8B;oBAC3D,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;oBAS9B,CAAC;oBAED,iCAAiC;oBACjC,kCAAkC;oBAElC,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,gCAAgC;gBAC1B,gCAAU,GAAhB,UAAiB,eAAiC;;yCAExC,QAAQ;;;wCADM,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;kDAA9B,SAAkD;+CACrC,EAAE;oCACnC,qBAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,QAAQ;4CAC1C,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK;gDAC1B,IAAM,OAAO,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gDAC3C,IAAM,OAAO,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC;gDACrC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;4CAC5F,CAAC,CAAC,CAAC;wCACP,CAAC,CAAC,CAAC,EAAA;;oCANH,SAMG,CAAC;oCACJ,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;mBAEG;gBACO,qCAAe,GAAzB,UAA0B,OAAsB;oBAC5C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;wBACf,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;4BAClB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;oBACtD,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACO,sCAAgB,GAA1B;oBACI,IAAI,CAAC;wBACD,MAAM,CAAC,6BAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAE,wCAAwC;oBAEnF,CAAC;oBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,MAAM,IAAI,+DAA8B,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;oBACnE,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACO,wCAAkB,GAA5B;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;wBACjB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;oBAE5B,MAAM,CAAC,gBAAa,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,WAAW,WAAI,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,UAAI,IAAI,CAAC,OAAO,CAAC,QAAU,CAAC;gBACpH,CAAC;gBAEL,kBAAC;YAAD,CA3PA,AA2PC,IAAA;;QAAA,CAAC;;;;;;;;;;YCvQF;;;eAGG;YACH;gBAEI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,qCAAY,8BAA8B;oBAC9B,uCAAuC;oBACvC,mDAAmD;oBAC3C,sBAAuC;oBAAvC,uCAAA,EAAA,8BAAuC;oBAAvC,2BAAsB,GAAtB,sBAAsB,CAAiB;gBAE3D,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E,kDAAY,GAAZ,UAAa,SAA0B,EAAE,QAAwB;oBAAjE,iBAEC;oBADG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAlC,CAAkC,CAAC,CAAC;gBACzE,CAAC;gBAED,+CAAS,GAAT,UAAU,QAAa,EAAE,QAAwB;oBAC7C,IAAM,MAAM,GAAQ,QAAQ,CAAC,MAAM,EAAE,CAAC;oBACtC,IAAI,OAAO,GAAG,KAAK,CAAC;oBAEpB,sCAAsC;oBACtC,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,IAAI,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACvE,0CAA0C;wBAC1C,sKAAsK;wBACtK,qJAAqJ;wBACrJ,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;wBACtF,OAAO,GAAG,IAAI,CAAC;oBACnB,CAAC;oBAED,iDAAiD;oBACjD,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;wBAC9B,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,CAAC,MAAM,CAAC,gBAAgB,EAAzB,CAAyB,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM;4BACvE,IAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;4BAC5C,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;gCAC/E,0CAA0C;gCAC1C,yEAAyE;gCACzE,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC;gCAC5C,OAAO,GAAG,IAAI,CAAC;4BACnB,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC;oBAED;;;;;;;;;;;6BAWS;oBAET,6DAA6D;oBAC7D,QAAQ,CAAC,uBAAuB,CAAC,OAAO,CAAC,UAAA,MAAM;wBAC3C,IAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAC5C,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS;4BAC3B,aAAa,KAAK,IAAI;4BACtB,MAAM,CAAC,YAAY;4BACnB,CAAC,MAAM,CAAC,SAAS;4BACjB,CAAC,MAAM,CAAC,UAAU;4BAClB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;4BAC1B,yEAAyE;4BAEzE,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC;4BAC5C,OAAO,GAAG,IAAI,CAAC;wBACnB,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,IAAM,4BAA4B,GAAG,UAAC,MAAW,EAAE,QAAa,EAAE,SAA6B;wBAC3F,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;4BACtB,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gCAC3B,MAAM,CAAC;4BAEX,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gCACnB,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAW,CAAC,GAAG,CAAC,UAAA,QAAQ;oCAC7E,IAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;oCAClC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;wCAC3B,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oCACzD,CAAC,CAAC,CAAC;oCACH,MAAM,CAAC,OAAO,CAAC;gCACnB,CAAC,CAAC,CAAC;4BAEP,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;oCAC3B,IAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oCACrD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;wCAAC,MAAM,CAAC;oCAEnB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;wCAC/B,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;oCAEtD,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;gCAC/D,CAAC,CAAC,CAAC;4BACP,CAAC;4BACD,4BAA4B,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;wBAC/G,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC;oBAEF,4BAA4B,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;oBAEnE,iFAAiF;oBACjF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAgEK;oBAEL,MAAM,CAAC,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC;gBACnC,CAAC;gBAEL,kCAAC;YAAD,CAjLA,AAiLC,IAAA;;QAAA,CAAC;;;;;;;;;;YCtLF;;eAEG;YACH;gBAAA;gBA+IA,CAAC;gBA7IG;;mBAEG;gBACI,iCAAgB,GAAvB,UAAwB,MAAW;oBAC/B,IAAM,eAAe,GAAwB,MAAM,CAAC;oBACpD,MAAM,CAAC,eAAe;wBACd,CACI,eAAe,CAAC,KAAK,YAAY,MAAM;4BACvC,eAAe,CAAC,IAAI,YAAY,MAAM;4BACtC,eAAe,CAAC,KAAK,YAAY,MAAM,CAC1C,CAAC;gBACd,CAAC;gBAED;;mBAEG;gBACI,kCAAiB,GAAxB,UAAyB,MAAW;oBAChC,IAAM,eAAe,GAAyB,MAAM,CAAC;oBACrD,MAAM,CAAC,eAAe;wBACd,CACI,eAAe,CAAC,KAAK,YAAY,MAAM;4BACvC,eAAe,CAAC,IAAI,YAAY,MAAM;4BACtC,eAAe,CAAC,KAAK,YAAY,MAAM;4BACvC,OAAO,eAAe,CAAC,IAAI,KAAK,QAAQ;4BACxC,OAAO,eAAe,CAAC,IAAI,KAAK,QAAQ,CAC3C,CAAC;gBACd,CAAC;gBAED;;mBAEG;gBACI,2CAA0B,GAAjC,UAAkC,MAAW;oBACzC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC;wBAC7C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;oBAE7B,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAED;;mBAEG;gBACI,4CAA2B,GAAlC,UAAmC,MAAW;oBAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC;wBAC9C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;oBAE7B,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAED;;mBAEG;gBACI,8DAA6C,GAApD,UAAwD,EAAmB,EAAE,OAA+C;oBACxH,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;wBAC/B,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;oBAExD,EAAE,CAAC,CAAC,OAAO,CAAC;wBACR,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;oBAE7C,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAED;;mBAEG;gBACI,+DAA8C,GAArD,UAAyD,EAAmB,EAAE,OAAgD;oBAC1H,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;wBAChC,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;oBAExD,EAAE,CAAC,CAAC,OAAO,CAAC;wBACR,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;oBAE7C,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAED;;mBAEG;gBACI,2CAA0B,GAAjC,UAAqC,EAAmB,EAAE,OAAuD;oBAE7G,iGAAiG;oBACjG,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;wBAC5C,MAAM,CAAC,EAAE,CAAC;oBAEd,qCAAqC;oBACrC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;wBACd,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;oBAE5C,EAAE,CAAC,CAAE,OAA8B,CAAC,IAAI,CAAC;wBACrC,EAAE,CAAC,IAAI,CAAE,OAA8B,CAAC,IAAK,CAAC,CAAC;oBAEnD,EAAE,CAAC,CAAE,OAA8B,CAAC,IAAI,CAAC;wBACrC,EAAE,CAAC,IAAI,CAAE,OAA8B,CAAC,IAAK,CAAC,CAAC;oBAEnD,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;wBACd,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;4BAClC,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,EAAG,OAA6B,CAAC,KAAM,CAAC,GAAU,CAAC,CAAC,CAAC;wBAC3F,CAAC,CAAC,CAAC;oBAEP,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;wBACf,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;4BACtB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gCAC1C,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAK,CAAC,QAAS,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;4BACnD,CAAC,CAAC,CAAC;wBAEP,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC;4BACvB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gCAC3C,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,IAAK,CAAC,SAAU,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;4BACrD,CAAC,CAAC,CAAC;wBAEP,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC;4BAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gCACnD,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAK,CAAC,iBAAkB,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;4BACrE,CAAC,CAAC,CAAC;wBAEP,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC;4BAChC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gCACpD,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAK,CAAC,kBAAmB,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;4BACvE,CAAC,CAAC,CAAC;oBACX,CAAC;oBAED,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAED;;mBAEG;gBACI,gCAAe,GAAtB,UAA0B,EAAmB,EAAE,UAAyB;oBACpE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;wBACvC,EAAE,CAAC,CAAC,UAAW,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;4BAC5B,EAAE,CAAC,QAAQ,CAAI,EAAE,CAAC,KAAK,SAAI,GAAG,aAAU,CAAC,CAAC;wBAE9C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,IAAM,aAAa,GAAG,QAAQ,GAAG,KAAK,CAAC;4BACvC,EAAE,CAAC,QAAQ,CAAI,EAAE,CAAC,KAAK,SAAI,GAAG,UAAK,aAAe,CAAC;iCAC9C,YAAY,CAAC,aAAa,EAAE,UAAW,CAAC,GAAG,CAAC,CAAC,CAAC;wBACvD,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAEL,uBAAC;YAAD,CA/IA,AA+IC,IAAA;;QAAA,CAAC;;;;;;;;;QCjJF,CAAC;;;;;;;;;;;;;;;;;;;;;;;YCoCD;;eAEG;YACH;gBAAmE,mCAAkB;gBAArF;;gBA4bA,CAAC;gBA1bG,6CAA6C;gBAE7C,4EAA4E;gBAC5E,qBAAqB;gBACrB,4EAA4E;gBAE5E;;;mBAGG;gBACH,+BAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;oBACnC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;gBAC5D,CAAC;gBAED;;;mBAGG;gBACH,qCAAW,GAAX,UAAY,gBAAsE;oBAC9E,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;gBACjE,CAAC;gBAED;;;mBAGG;gBACH,4CAAkB,GAAlB,UAAmB,KAAa,EAAE,mBAAyC;oBACvE,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;gBAClE,CAAC;gBAED;;mBAEG;gBACG,8BAAI,GAAV,UAAW,mBAA6D;;4BAC9D,KAAK;;;;4CAAG,IAAI,CAAC,gDAAgD,CAAC,mBAAmB,CAAC;oCACzE,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAA;;6CAApC,SAAoC;oCACnD,EAAE,CAAC,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;wCAC1D,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;4CACzB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;wCAC1C,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;4CACzB,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;wCAC3C,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;4CAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;oCAC5F,CAAC;oCACD,sBAAO,MAAM,CAAC,OAAO,EAAE,EAAC;;;;iBAC3B;gBAED;;;;mBAIG;gBACG,sCAAY,GAAlB,UAAmB,mBAA6D;;4BACtE,KAAK;;;;4CAAG,IAAI,CAAC,gDAAgD,CAAC,mBAAmB,CAAC;oCACzE,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAA;;6CAApC,SAAoC;oCACnD,EAAE,CAAC,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;wCAC1D,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;4CACzB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;wCAC1C,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;4CACzB,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;wCAC3C,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;4CAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;oCAC5F,CAAC;oCACwB,qBAAM,OAAO,CAAC,GAAG,CAAM;4CAC5C,MAAM,CAAC,OAAO,EAAE;4CAChB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC;yCAC1D,CAAC,EAAA;;yCAHuB,SAGvB;oCACF,sBAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAC;;;;iBACrC;gBAED;;;mBAGG;gBACG,mCAAS,GAAf,UAAgB,GAAU,EAAE,mBAA6D;;4BAC/E,KAAK;;;;4CAAG,IAAI,CAAC,gDAAgD,CAAC,mBAAmB,CAAC,IAAI,EAAE;oCAC9F,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;oCAEb,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAA;;6CAApC,SAAoC;oCACnD,EAAE,CAAC,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;wCAC1D,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;4CACzB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;wCAC1C,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;4CACzB,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;wCAC3C,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;4CAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;oCAC5F,CAAC;oCACM,qBAAM,MAAM,CAAC,OAAO,EAAE,EAAA;wCAA7B,sBAAO,SAAsB,EAAC;;;;iBACjC;gBAED;;mBAEG;gBACG,iCAAO,GAAb,UAAc,mBAA4D;;4BAChE,KAAK;;;;4CAAG,IAAI,CAAC,+CAA+C,CAAC,mBAAmB,CAAC;oCACxE,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAA;;6CAApC,SAAoC;oCACnD,EAAE,CAAC,CAAC,mCAAgB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;wCACzD,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;4CAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;oCAC5F,CAAC;oCAGc,qBAAM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAA;;6CAA/B,SAA+B;oCAC9C,sBAAO,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;iBACpD;gBAED;;;mBAGG;gBACG,qCAAW,GAAjB,UAAkB,EAAO,EAAE,mBAA4D;;4BAC7E,KAAK;;;;4CAAG,IAAI,CAAC,+CAA+C,CAAC,mBAAmB,CAAC,IAAI,EAAE;oCAC7F,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;oCACH,qBAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAA;;6CAApC,SAAoC;oCACnD,EAAE,CAAC,CAAC,mCAAgB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;wCACzD,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;4CAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;oCAC5F,CAAC;oCAGc,qBAAM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAA;;6CAA/B,SAA+B;oCAC9C,sBAAO,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;iBACpD;gBAED;;mBAEG;gBACH,sCAAY,GAAZ,UAAa,KAAqB;oBAC9B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBACpE,CAAC;gBAED;;;mBAGG;gBACH,4CAAkB,GAAlB,UAAmB,KAAqB;oBACpC,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBACxC,IAAM,UAAU,GAAG,IAAI,CAAC;oBACxB,MAAM,CAAC,OAAO,GAAG,UAAU,QAAkC;wBACzD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACX,gBAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,KAAiB,EAAE,OAAiB;gCACrE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oCACR,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;oCACzB,MAAM,CAAC;gCACX,CAAC;gCAED,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;gCACtD,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,YAAY,CAAC,OAAO,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACnF,CAAC,CAAC,CAAC;wBACP,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,MAAM,CAAC,gBAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,OAAiB;gCAC9D,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;gCACtD,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,OAAO,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;4BAClE,CAAC,CAAC,CAAC;wBACP,CAAC;oBACL,CAAC,CAAC;oBACF,MAAM,CAAC,IAAI,GAAG,UAAU,QAAsC;wBAC1D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACX,gBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,KAAiB,EAAE,MAAoB;gCACrE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oCACnB,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;oCACxB,MAAM,CAAC;gCACX,CAAC;gCAED,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;gCACtD,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;4BAC/E,CAAC,CAAC,CAAC;wBACP,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,MAAM,CAAC,gBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAc;gCACxD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;oCAAC,MAAM,CAAC,MAAM,CAAC;gCAC3B,IAAM,WAAW,GAAG,IAAI,yDAA2B,EAAE,CAAC;gCACtD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;4BAC9D,CAAC,CAAC,CAAC;wBACP,CAAC;oBACL,CAAC,CAAC;oBACF,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC;gBAED;;mBAEG;gBACH,mCAAS,GAAT,UAAU,QAAyB,EAAE,OAAsC;oBACvE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;gBACnF,CAAC;gBAED;;mBAEG;gBACG,mCAAS,GAAf,UAAgB,UAA2B,EAAE,OAAqC;;;;wCACvE,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,EAAA;wCAAtF,sBAAO,SAA+E,EAAC;;;;iBAC1F;gBAED;;mBAEG;gBACG,+BAAK,GAAX,UAAY,KAAqB,EAAE,OAA+B;;;;wCACvD,qBAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE,EAAE,OAAO,CAAC,EAAA;wCAAnF,sBAAO,SAA4E,EAAC;;;;iBACvF;gBAED;;mBAEG;gBACG,+CAAqB,GAA3B,UAA4B,WAAuB,EAAE,OAAsB;;;;wCAChE,qBAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,EAAE,OAAO,CAAC,EAAA;wCAAnG,sBAAO,SAA4F,EAAC;;;;iBACvG;gBAED;;;;mBAIG;gBACG,iDAAuB,GAA7B,UAA8B,UAA2B;;;;wCAC9C,qBAAM,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,EAAA;wCAA3F,sBAAO,SAAoF,EAAC;;;;iBAC/F;gBAED;;mBAEG;gBACG,oCAAU,GAAhB,UAAiB,KAAoB,EAAE,OAA2B;;;;wCACvD,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EAAA;wCAAlF,sBAAO,SAA2E,EAAC;;;;iBACtF;gBAED;;mBAEG;gBACG,mCAAS,GAAf,UAAgB,KAAoB,EAAE,OAA2B;;;;wCACtD,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EAAA;wCAAjF,sBAAO,SAA0E,EAAC;;;;iBACrF;gBAED;;mBAEG;gBACG,kCAAQ,GAAd,UAAe,GAAW,EAAE,KAAoB,EAAE,OAAoD;;;;wCAC3F,qBAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,EAAA;wCAArF,sBAAO,SAA8E,EAAC;;;;iBACzF;gBAED;;mBAEG;gBACG,6CAAmB,GAAzB,UAA0B,SAAiB,EAAE,OAA2B;;;;wCAC7D,qBAAM,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,EAAA;wCAA/F,sBAAO,SAAwF,EAAC;;;;iBACnG;gBAED;;mBAEG;gBACG,+CAAqB,GAA3B;;;;wCACW,qBAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;wCAA7E,sBAAO,SAAsE,EAAC;;;;iBACjF;gBAED;;mBAEG;gBACG,0CAAgB,GAAtB,UAAuB,KAAoB,EAAE,OAAoE;;;;wCACtG,qBAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EAAA;wCAAxF,sBAAO,SAAiF,EAAC;;;;iBAC5F;gBAED;;mBAEG;gBACG,2CAAiB,GAAvB,UAAwB,KAAoB,EAAE,WAAmB,EAAE,OAAiC;;;;wCACzF,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,CAAC,EAAA;wCAAtG,sBAAO,SAA+F,EAAC;;;;iBAC1G;gBAED;;mBAEG;gBACG,0CAAgB,GAAtB,UAAuB,KAAoB,EAAE,MAAc,EAAE,OAAiC;;;;wCACnF,qBAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;wCAAhG,sBAAO,SAAyF,EAAC;;;;iBACpG;gBAED;;mBAEG;gBACG,2CAAiB,GAAvB,UAAwB,CAAS,EAAE,CAAS,EAAE,OAAkC;;;;wCACrE,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,EAAA;wCAAxF,sBAAO,SAAiF,EAAC;;;;iBAC5F;gBAED;;mBAEG;gBACG,iCAAO,GAAb,UAAc,CAAS,EAAE,CAAS,EAAE,OAAwB;;;;wCACjD,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,EAAA;wCAA9E,sBAAO,SAAuE,EAAC;;;;iBAClF;gBAED;;mBAEG;gBACG,+BAAK,GAAX,UAAY,IAAqC,EAAE,SAAiB,EAAE,OAAe,EAAE,MAAqB,EAAE,QAAuB,EAAE,OAAgB,EAAE,OAAsD;;;;wCACpM,qBAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,EAAA;wCAA3H,sBAAO,SAAoH,EAAC;;;;iBAC/H;gBAED;;mBAEG;gBACG,2CAAiB,GAAvB;;;;wCACW,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;wCAAzE,sBAAO,SAAkE,EAAC;;;;iBAC7E;gBAED;;mBAEG;gBACG,+CAAqB,GAA3B,UAA4B,OAAwB;;;;wCACzC,qBAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;wCAAtF,sBAAO,SAA+E,EAAC;;;;iBAC1F;gBAED;;mBAEG;gBACG,oDAA0B,GAAhC,UAAiC,OAA2B;;;;wCACjD,qBAAM,IAAI,CAAC,WAAW,CAAC,0BAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;wCAA3F,sBAAO,SAAoF,EAAC;;;;iBAC/F;gBAED;;mBAEG;gBACH,iDAAuB,GAAvB,UAAwB,OAA2B;oBAC/C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACvF,CAAC;gBAED;;mBAEG;gBACH,mDAAyB,GAAzB,UAA0B,OAA2B;oBACjD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACzF,CAAC;gBAED;;mBAEG;gBACG,oCAAU,GAAhB,UAAiB,IAAqB,EAAE,OAAqC;;;;wCAClE,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,EAAA;wCAAjF,sBAAO,SAA0E,EAAC;;;;iBACrF;gBAED;;mBAEG;gBACG,mCAAS,GAAf,UAAgB,GAAkB,EAAE,OAAoC;;;;wCAC7D,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,EAAA;wCAA/E,sBAAO,SAAwE,EAAC;;;;iBACnF;gBAED;;mBAEG;gBACG,kCAAQ,GAAd;;;;wCACW,qBAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;wCAAhE,sBAAO,SAAyD,EAAC;;;;iBACpE;gBAED;;mBAEG;gBACH,+CAAqB,GAArB,UAAsB,OAAwE;oBAC1F,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACrF,CAAC;gBAED;;mBAEG;gBACG,mCAAS,GAAf,UAAgB,GAAoB,EAAE,MAAuB,EAAE,OAA0B;;;;wCAC9E,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;wCAAvF,sBAAO,SAAgF,EAAC;;;;iBAC3F;gBAED;;;mBAGG;gBACG,gDAAsB,GAA5B,UAA6B,OAAuC;;;;wCACzD,qBAAM,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;wCAAvF,sBAAO,SAAgF,EAAC;;;;iBAC3F;gBAED;;mBAEG;gBACG,iCAAO,GAAb;;;;wCACW,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;wCAA/D,sBAAO,SAAwD,EAAC;;;;iBACnE;gBAED;;mBAEG;gBACG,gCAAM,GAAZ,UAAa,OAAe,EAAE,OAAkC;;;;wCACrD,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,EAAA;wCAAhF,sBAAO,SAAyE,EAAC;;;;iBACpF;gBAED;;mBAEG;gBACG,oCAAU,GAAhB,UAAiB,KAAoB,EAAE,GAAkB,EAAE,OAA2B;;;;wCAC3E,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,EAAA;wCAAvF,sBAAO,SAAgF,EAAC;;;;iBAC3F;gBAED;;mBAEG;gBACG,+BAAK,GAAX,UAAY,OAA2B;;;;wCAC5B,qBAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;wCAAtE,sBAAO,SAA+D,EAAC;;;;iBAC1E;gBAED;;mBAEG;gBACG,oCAAU,GAAhB,UAAiB,KAAoB,EAAE,MAAqB,EAAE,OAAuE;;;;wCAC1H,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;wCAA1F,sBAAO,SAAmF,EAAC;;;;iBAC9F;gBAED;;mBAEG;gBACG,mCAAS,GAAf,UAAgB,KAAoB,EAAE,MAAqB,EAAE,OAA2B;;;;wCAC7E,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;wCAAzF,sBAAO,SAAkF,EAAC;;;;iBAC7F;gBAQD,sBAAc,wCAAW;oBANzB,4EAA4E;oBAC5E,oBAAoB;oBACpB,4EAA4E;oBAE5E,gDAAgD;yBAEhD;wBACI,MAAM,CAAE,IAAI,CAAC,UAAU,CAAC,MAAsB,CAAC,WAAW,CAAC;oBAC/D,CAAC;;;mBAAA;gBAES,0EAAgD,GAA1D,UAA2D,mBAAqE;oBAC5H,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC;wBACrB,MAAM,CAAC,SAAS,CAAC;oBAErB,MAAM,CAAC,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,mBAAmB,CAAC,KAAK,GAAG,mBAAmB,CAAC;gBACrH,CAAC;gBAES,yEAA+C,GAAzD,UAA0D,mBAAqE;oBAC3H,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC;wBACrB,MAAM,CAAC,SAAS,CAAC;oBAErB,MAAM,CAAC,mCAAgB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,GAAG,mBAAmB,CAAC,KAAK,GAAG,mBAAmB,CAAC;gBACpH,CAAC;gBAES,gEAAsC,GAAhD,UAAoD,KAA6C;oBAC7F,IAAM,aAAa,GAAkB,EAAE,CAAC;oBACxC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAE,CAAC,WAAW,EAAE,CAAC,EAArD,CAAqD,CAAC,CAAC;oBACzF,MAAM,CAAC,aAAa,CAAC;gBACzB,CAAC;gBAEL,sBAAC;YAAD,CA5bA,AA4bC,CA5bkE,uBAAU,GA4b5E;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;YCheF;;eAEG;YACH;gBAAA;gBA8CA,CAAC;gBA5CG,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,4CAAgB,GAAhB,UAAiB,UAAsB,EAAE,QAAwB,EAAE,mBAAyC;oBAExG,4HAA4H;oBAC5H,kEAAkE;oBAClE,IAAI,UAA2B,CAAC;oBAChC,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,CAAC,CAAC,CAAC;wBAC3C,UAAU,GAAG,IAAI,iCAAe,EAAE,CAAC;oBACvC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,UAAU,GAAG,IAAI,uBAAU,EAAO,CAAC;oBACvC,CAAC;oBACA,UAAkB,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;oBAC9C,UAAkB,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;oBAC1C,UAAkB,CAAC,qBAAqB,CAAC,GAAG,mBAAmB,CAAC;oBACjE,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAED;;mBAEG;gBACH,gDAAoB,GAApB,UAAqB,UAAsB,EAAE,QAAwB,EAAE,mBAAyC;oBAE5G,4HAA4H;oBAC5H,kEAAkE;oBAClE,IAAM,UAAU,GAAG,IAAI,+BAAc,EAAO,CAAC;oBAC5C,UAAkB,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;oBAC9C,UAAkB,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;oBAC1C,UAAkB,CAAC,qBAAqB,CAAC,GAAG,mBAAmB,CAAC;oBACjE,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAED;;mBAEG;gBACH,oDAAwB,GAAxB,UAAyB,UAAsB,EAAE,QAAwB,EAAE,mBAAyC;oBAChH,MAAM,CAAC,IAAI,uCAAkB,CAAC,UAAU,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;gBAC7E,CAAC;gBAEL,wBAAC;YAAD,CA9CA,AA8CC,IAAA;;QAAA,CAAC;;;;;;ICpBF;;OAEG;IACH,sBAA6B,YAA0C,EAAE,OAA6B;QAClG,aAAa,GAAG,YAAY,CAAC;QAC7B,oBAAoB,GAAG,OAAO,CAAC;IACnC,CAAC;;IAED;;OAEG;IACH,0BAAoC,SAA+C;QAC/E,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC;gBACD,IAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAC9C,EAAE,CAAC,CAAC,QAAQ,CAAC;oBACT,MAAM,CAAC,QAAQ,CAAC;gBAEpB,EAAE,CAAC,CAAC,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC;oBACxD,MAAM,CAAC,QAAQ,CAAC;YAExB,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,EAAE,CAAC,CAAC,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC;oBAChE,MAAM,KAAK,CAAC;YACpB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAI,SAAS,CAAC,CAAC;IAC9C,CAAC;;;;;;YAhDD;;;eAGG;YACH,+BAAa,gBAAgB,GAAmE,IAAI;gBAAC;oBACzF,cAAS,GAAsC,EAAE,CAAC;gBAW9D,CAAC;gBATG,qBAAG,GAAH,UAAO,SAAsC;oBACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,SAAS,EAA3B,CAA2B,CAAC,CAAC;oBAC5E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACZ,QAAQ,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,SAAS,EAAE,EAAE,CAAC;wBACxD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAClC,CAAC;oBAED,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC3B,CAAC;gBACL,cAAC;YAAD,CAZqG,AAYpG,IAAC,EAAE,EAAC;QAgCJ,CAAC;;;;;;;;;;;;;;;;;YCxDF;;eAEG;YACH;gBA0BI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,8BAAY,UAAsB,EAAE,QAAwB,EAAE,mBAAyC;oBACnG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBAEzB,IAAM,OAAO,GAAG,4BAAgB,CAAC,qCAAiB,CAAC,CAAC;oBAEpD,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;wBAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,oBAAoB,CAAC,UAAU,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;oBACpH,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;oBAC1F,CAAC;oBAED,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,wBAAwB,CAAC,UAAU,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;gBAC1G,CAAC;gBAEL,2BAAC;YAAD,CA5CA,AA4CC,IAAA;;QAAA,CAAC;;;;;;;;;;YCxDF;;eAEG;YACH;gBAA4C,0CAAK;gBAG7C,gCAAY,WAA4B;oBAAxC,YACI,iBAAO,SAIV;oBAPD,UAAI,GAAG,wBAAwB,CAAC;oBAI5B,IAAM,UAAU,GAAG,OAAO,WAAW,KAAK,UAAU,IAAW,WAAY,CAAC,IAAI,GAAU,WAAY,CAAC,IAAI,GAAG,WAAW,CAAC;oBAC1H,KAAI,CAAC,OAAO,GAAG,yBAAsB,UAAU,4FAAwF,CAAC;oBACxI,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,6BAAC;YAAD,CAVA,AAUC,CAV2C,KAAK,GAUhD;;QAAA,CAAC;;;;;;;;;;YCbF;;eAEG;YACH;gBAAuD,qDAAK;gBAGxD;oBAAA,YACI,iBAAO,SAKV;oBARD,UAAI,GAAG,mCAAmC,CAAC;oBAIvC,KAAI,CAAC,OAAO,GAAG,iFAAiF;wBAC5F,6FAA6F;wBAC7F,wEAAwE,CAAC;oBAC7E,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,wCAAC;YAAD,CAXA,AAWC,CAXsD,KAAK,GAW3D;;QAAA,CAAC;;;;;;;;;;YCdF;;eAEG;YACH;gBAA6D,2DAAK;gBAG9D;oBAAA,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,yCAAyC,CAAC;oBAI7C,KAAI,CAAC,OAAO,GAAG,2HAA2H,CAAC;oBAC3I,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,8CAAC;YAAD,CATA,AASC,CAT4D,KAAK,GASjE;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;YCGF;;eAEG;YACH;gBAYI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E;;;mBAGG;gBACH,2BAAsB,UAAsB,EACtB,mBAAyC;oBADzC,eAAU,GAAV,UAAU,CAAY;oBACtB,wBAAmB,GAAnB,mBAAmB,CAAsB;oBAnB/D,4EAA4E;oBAC5E,qBAAqB;oBACrB,4EAA4E;oBAE5E;;;uBAGG;oBACc,0BAAqB,GAA2B,EAAE,CAAC;gBAYpE,CAAC;gBAsBD;;;;;mBAKG;gBACH,yCAAa,GAAb,UAAsB,iBAA4C;oBAE9D,0FAA0F;oBAC1F,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;wBACzB,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,iBAAwB,CAAC,CAAC,UAAU,CAAC;oBAEhF,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAS,iBAAwB,CAAC,CAAC;gBAC3E,CAAC;gBAkBD;;;;;mBAKG;gBACH,6CAAiB,GAAjB,UAA0B,iBAA4C;oBAElE,0FAA0F;oBAC1F,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;wBAC3B,IAAM,cAAc,GAAG,IAAI,CAAC,0BAA0B,CAAC,iBAAiB,CAAC,CAAC,cAAc,CAAC;wBACzF,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;4BAChB,MAAM,IAAI,+CAAsB,CAAC,iBAAiB,CAAC,CAAC;wBAExD,MAAM,CAAC,cAAc,CAAC;oBAC1B,CAAC;oBAED,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAS,iBAAwB,CAAC,CAAC;gBAC/E,CAAC;gBAYD;;mBAEG;gBACH,8CAAkB,GAAlB,UAA2B,iBAA4C;oBAEnE,0FAA0F;oBAC1F,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;wBACzB,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,iBAAwB,CAAC,CAAC,UAAqC,CAAC;oBAE3G,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAS,iBAAwB,CAAC,CAAC;gBAChF,CAAC;gBAkBD;;;;;mBAKG;gBACH,iDAAqB,GAArB,UAA8B,iBAA4C;oBAEtE,0FAA0F;oBAC1F,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;wBACzB,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,iBAAiB,CAAC,CAAC,kBAAkB,CAAC;oBAEjF,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAS,iBAAwB,CAAC,CAAC;gBACnF,CAAC;gBAED;;mBAEG;gBACH,+CAAmB,GAAnB,UAAuB,gBAA+B;oBAClD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAI,gBAAgB,CAAC,CAAC;gBACpE,CAAC;gBAYD;;mBAEG;gBACH,iCAAK,GAAL,UAAM,cAA0B,EAAE,WAAiB;oBAC/C,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC;oBACpF,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,WAAW,GAAG,cAAc,CAAC;oBACrE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAa,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC3D,CAAC;gBAYD;;mBAEG;gBACH,iCAAK,GAAL,UAAM,cAA0B,EAAE,WAAiB;oBAC/C,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC;oBACpF,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,WAAW,GAAG,cAAc,CAAC;oBACrE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAa,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC3D,CAAC;gBAED;;mBAEG;gBACH,8CAAkB,GAAlB,UAA2B,WAA+C,EAAE,KAAa;oBACrF,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAkB,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBAC5E,CAAC;gBAmBD;;;mBAGG;gBACH,kCAAM,GAAN,UAAe,WAA+B,EAAE,oBAAgE;oBAC5G,EAAE,CAAC,CAAC,oBAAoB,YAAY,KAAK,CAAC,CAAC,CAAC;wBACxC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;oBAExE,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBAC9B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;oBAExE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC;oBACpD,CAAC;gBACL,CAAC;gBAED;;;;;mBAKG;gBACH,mCAAO,GAAP,UAAgB,WAA+B,EAAE,MAA2B;oBACxE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAC3D,CAAC;gBAED;;mBAEG;gBACH,iCAAK,GAAL,UAAc,WAA+B,EAAE,eAAuB;oBAAE,iBAAiC;yBAAjC,UAAiC,EAAjC,qBAAiC,EAAjC,IAAiC;wBAAjC,gCAAiC;;oBACrG,MAAM,CAAU,CAAA,KAAA,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA,CAAC,KAAK,YAAC,eAAe,SAAK,OAAO,EAAC,CAAC;;gBACvF,CAAC;gBAED;;;;mBAIG;gBACG,mCAAO,GAAb;;;4BACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;gCAC1B,MAAM,IAAI,qEAAiC,EAAE,CAAC;4BAElD,sBAAO,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE,EAAC;;;iBACnD;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;mBAEG;gBACO,sDAA0B,GAApC,UAA6C,iBAA4C;oBACrF,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;wBAChE,MAAM,IAAI,iFAAuC,EAAE,CAAC;oBAExD,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;oBAChE,IAAI,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAA,mBAAmB,IAAI,OAAA,mBAAmB,CAAC,QAAQ,KAAK,QAAQ,EAAzC,CAAyC,CAAC,CAAC;oBAC7H,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBACxB,oBAAoB,GAAG,IAAI,2CAAoB,CAC3C,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAwB,CAAC,EACrD,IAAI,CAAC,mBAAmB,CAC3B,CAAC;wBACF,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,qCAAqC;oBAChG,CAAC;oBAED,MAAM,CAAC,oBAAoB,CAAC;gBAChC,CAAC;gBAEL,wBAAC;YAAD,CA/RA,AA+RC,IAAA;;QAAA,CAAC;;;;;;;;;QCtSD,CAAC;;;;;;;;;QCAD,CAAC;;;;;;;;;;;;;;;;;;;;YCCF;;;eAGG;YACH;gBAAmC,iCAAiB;gBAYhD,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,uBAAY,UAAsB,EAAE,mBAAyC;oBAA7E,YACI,kBAAM,UAAU,EAAE,mBAAmB,CAAC,SACzC;oBAhBD,4EAA4E;oBAC5E,qBAAqB;oBACrB,4EAA4E;oBAE5E;;;uBAGG;oBACK,UAAI,GAAkB,EAAE,CAAC;;gBAQjC,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,+BAAO,GAAP,UAAQ,GAAW;oBACf,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC1B,CAAC;gBAED;;mBAEG;gBACH,+BAAO,GAAP,UAAQ,GAAW,EAAE,KAAU;oBAC3B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAC3B,CAAC;gBAsCD;;mBAEG;gBACH,+BAAO,GAAP,UAAgB,cAAiD,EAAE,WAA6B,EAAE,OAAwB;oBAA1H,iBAoBC;oBAnBG,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,WAA8B,GAAG,cAAiC,CAAC;oBAC3G,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,WAA8B,GAAG,cAAiC,CAAC;oBAC3G,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;wBAC1B,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC7B,MAAM,CAAC,KAAI,CAAC,aAAa,CAAkB,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;wBAChF,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,4DAA4D;4BAC5D,EAAE,CAAC,CAAC,MAAM,YAAY,KAAK,CAAC,CAAC,CAAC;gCAC1B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;oCACpB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gCAEnC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC;oCAC/B,MAAM,CAAC,KAAI,CAAC,aAAa,CAAS,CAAC,CAAC,WAAW,CAAC,CAAC,OAAO,CAAE,MAAmB,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;gCAC/F,CAAC,CAAC,CAAC,CAAC;4BACR,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,KAAI,CAAC,aAAa,CAAS,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,MAAgB,EAAE,OAAO,CAAC,CAAC;4BAC7F,CAAC;wBACL,CAAC;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC;gBAYD;;mBAEG;gBACG,8BAAM,GAAZ,UAAqB,MAAuB,EAAE,uBAA+D,EAAE,aAAkC,EAAE,OAAwB;;;4BACvK,sBAAO,IAAI,CAAC,aAAa,CAAkB,MAAa,CAAC;qCACpD,MAAM,CAAC,uBAA8B,EAAE,aAAa,EAAE,OAAO,CAAC,EAAC;;;iBACvE;gBAED;;mBAEG;gBACG,kCAAU,GAAhB,UAAyB,MAAuB,EAAE,EAAO,EAAE,aAAkC,EAAE,OAAwB;;;4BACnH,sBAAO,IAAI,CAAC,aAAa,CAAkB,MAAa,CAAC;qCACpD,UAAU,CAAC,EAAE,EAAE,aAAa,EAAE,OAAO,CAAC,EAAC;;;iBAC/C;gBAgCD;;mBAEG;gBACH,8BAAM,GAAN,UAAe,cAAiD,EAAE,WAA6B,EAAE,OAAuB;oBAAxH,iBAeC;oBAdG,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,WAA8B,GAAG,cAAiC,CAAC;oBAC3G,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,WAA8B,GAAG,cAAiC,CAAC;oBAC3G,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;wBAC7B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAkB,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;oBAC/E,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,4DAA4D;wBAC5D,EAAE,CAAC,CAAC,MAAM,YAAY,KAAK,CAAC,CAAC,CAAC;4BAC1B,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC;gCAC/B,MAAM,CAAC,KAAI,CAAC,aAAa,CAAS,CAAC,CAAC,WAAW,CAAC,CAAC,MAAM,CAAE,MAAmB,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;4BAC9F,CAAC,CAAC,CAAC,CAAC;wBACR,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,MAAM,CAAC,IAAI,CAAC,aAAa,CAAS,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,MAAgB,EAAE,OAAO,CAAC,CAAC;wBAC5F,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACG,kCAAU,GAAhB,UAAiB,cAA+B,EAAE,EAAO,EAAE,OAAuB;;;4BAC9E,sBAAO,IAAI,CAAC,aAAa,CAAC,cAAqB,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,EAAC;;;iBAC5E;gBAYD;;mBAEG;gBACH,6BAAK,GAAL,UAAc,WAA+B,EAAE,mBAA6D;oBACxG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,mBAAoC,CAAC,CAAC;gBACvF,CAAC;gBAYD;;mBAEG;gBACH,4BAAI,GAAJ,UAAa,WAA+B,EAAE,mBAA6D;oBACvG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,mBAAoC,CAAC,CAAC;gBACtF,CAAC;gBAgBD;;;;mBAIG;gBACH,oCAAY,GAAZ,UAAqB,WAA+B,EAAE,mBAA6D;oBAC/G,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,mBAAoC,CAAC,CAAC;gBAC9F,CAAC;gBAYD;;mBAEG;gBACH,+BAAO,GAAP,UAAgB,WAA+B,EAAE,mBAA4D;oBACzG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,mBAAoC,CAAC,CAAC;gBACzF,CAAC;gBAcD;;;mBAGG;gBACH,iCAAS,GAAT,UAAkB,WAA+B,EAAE,GAAU,EAAE,mBAA6D;oBACxH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,mBAAoC,CAAC,CAAC;gBAChG,CAAC;gBAcD;;;mBAGG;gBACH,mCAAW,GAAX,UAAoB,WAA+B,EAAE,EAAO,EAAE,mBAA4D;oBACtH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,EAAE,EAAE,mBAAoC,CAAC,CAAC;gBACjG,CAAC;gBAED;;mBAEG;gBACG,6BAAK,GAAX,UAAY,KAAa,EAAE,UAAkB;;4BAInC,mBAAmB;;;;oCAHzB,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;wCAChE,MAAM,IAAI,iFAAuC,EAAE,CAAC;0DAE5B,IAAI,CAAC,mBAAmB,IAAI,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;oCACnF,qBAAM,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAnC,SAAmC;;;;oCAG5C,qBAAM,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,EAAA;wCAAjD,sBAAO,SAA0C,EAAC,CAAE,oDAAoD;wCAGxG,qBAAM,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;;;;;;iBAEtD;gBAED;;;mBAGG;gBACG,mCAAW,GAAjB,UAAkB,gBAA+D;;4BAIvE,mBAAmB,eAEnB,wBAAwB;;;;oCAL9B,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;wCAChE,MAAM,IAAI,iFAAuC,EAAE,CAAC;0DAE5B,IAAI,CAAC,mBAAmB,IAAI,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC;oCACzF,qBAAM,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAnC,SAAmC;+DACtB,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,mBAAmB,CAAC;;;;oCAGpF,qBAAM,WAAW,CAAC,gBAAgB,EAAE,EAAA;;oCAApC,SAAoC,CAAC;oCACtB,qBAAM,gBAAgB,CAAC,wBAAwB,CAAC,EAAA;;6CAAhD,SAAgD;oCAC/D,qBAAM,WAAW,CAAC,iBAAiB,EAAE,EAAA;;oCAArC,SAAqC,CAAC;oCACtC,sBAAO,MAAM,EAAC;;;oCAGd,qBAAM,WAAW,CAAC,mBAAmB,EAAE,EAAA;;oCAAvC,SAAuC,CAAC;oCACxC,MAAM,KAAG,CAAC;wCAGV,qBAAM,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;yCAC3C,CAAC,IAAI,CAAC,mBAAmB,EAAzB,yBAAyB;oCACzB,qBAAM,mBAAmB,CAAC,aAAa,EAAE,EAAA;;oCAAzC,SAAyC,CAAC;;;;;;;iBAErD;gBAED;;mBAEG;gBACH,6BAAK,GAAL,UAAc,WAA+B;oBACzC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,KAAK,EAAE,CAAC;gBACnD,CAAC;gBAEL,oBAAC;YAAD,CA9VA,AA8VC,CA9VkC,qCAAiB,GA8VnD;;QAAA,CAAC;;;;;;;;;;YCzWF;eACG;YACH;gBAQI,qBAAY,WAA0B,EAC1B,QAAwB,EACxB,iBAA+B,EAC/B,QAA2B;oBACnC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;oBAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;oBAC3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC7B,CAAC;gBAED,sBAAI,+BAAM;yBAAV;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAChC,CAAC;;;mBAAA;gBAED,sBAAI,2BAAE;yBAAN;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC/D,CAAC;;;mBAAA;gBAED,qCAAe,GAAf,UAAgB,OAAY,EAAE,OAAY;oBACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAC3D,CAAC;gBAEL,kBAAC;YAAD,CA9BA,AA8BC,IAAA;YAED;gBAAA;oBAEI,iBAAY,GAAkB,EAAE,CAAC;gBAoCrC,CAAC;gBAlCG,sBAAI,oCAAe;yBAAnB;wBACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAzC,CAAyC,CAAC,CAAC;oBACrF,CAAC;;;mBAAA;gBAED,4BAAU,GAAV,UAAW,UAAuB;oBAC9B,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,EAAE,KAAK,UAAU,CAAC,EAAE,EAA9D,CAA8D,CAAC,CAAC;oBAC5G,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;wBACN,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC3C,CAAC;gBAED,8BAAY,GAAZ,UAAa,MAAuB,EAAE,QAAe;oBAArD,iBAQC;oBAPG,QAAQ,CAAC,OAAO,CAAC,UAAA,MAAM;wBACnB,IAAM,IAAI,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,WAAW;4BAC3C,MAAM,CAAC,WAAW,CAAC,MAAM,KAAK,MAAM,IAAI,WAAW,CAAC,eAAe,CAAC,MAAM,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;wBACzG,CAAC,CAAC,CAAC;wBACH,EAAE,CAAC,CAAC,IAAI,CAAC;4BACL,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBAC7B,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,kCAAgB,GAAhB;oBACI,IAAM,MAAM,GAA8C,EAAE,CAAC;oBAC7D,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;wBACjC,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAnC,CAAmC,CAAC,CAAC;wBACtE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACT,KAAK,GAAG,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;4BAChD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACvB,CAAC;wBAED,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;oBACnC,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC;gBAEL,cAAC;YAAD,CAtCA,AAsCC,IAAA;YAED;;;eAGG;YACH;gBAEI,gDAAoB,aAA4B;oBAA5B,kBAAa,GAAb,aAAa,CAAe;gBAChD,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAEtE,0DAAS,GAAf,UAAgB,WAA0B,EAAE,QAAwB;;;4BAO1D,OAAO,EACP,WAAW;;;;oCANjB,+DAA+D;oCAC/D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,mCAAmC,CAAC,WAAW,CAAC,CAAC;wCAC3D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,sFAAsF,CAAC,EAAC;8CAGlG,IAAI,OAAO,EAAE;kDACT,UAAC,MAAqB,EAAE,cAA8B,EAAE,iBAA+B,EAAE,QAA2B;wCACpI,IAAM,IAAI,GAAG,IAAI,WAAW,CAAC,MAAM,EAAE,cAAc,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC;wCAClF,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wCAEzB,cAAc;6CACT,+BAA+B,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;6CAC3D,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAArC,CAAqC,CAAC;6CACtD,OAAO,CAAC,UAAC,EAAwC;gDAAvC,gBAAQ,EAAE,aAAK,EAAE,6BAAqB;4CAAM,OAAA,WAAW,CAAC,KAAK,EAAE,qBAAqB,EAAE,IAAI,EAAE,QAAQ,CAAC;wCAAzD,CAAyD,CAAC,CAAC;oCAC1H,CAAC;oCACD,WAAW,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;oCAEnC,mDAAmD;oCACnD,qBAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,UAAA,aAAa;4CAC1D,MAAM,CAAC,KAAI,CAAC,aAAa;iDACpB,SAAS,CAAgB,aAAa,CAAC,MAAa,EAAE,aAAa,CAAC,GAAG,CAAC;iDACxE,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,EAApD,CAAoD,CAAC,CAAC;wCAChF,CAAC,CAAC,CAAC,EAAA;;oCALH,mDAAmD;oCACnD,SAIG,CAAC;oCAEJ,2GAA2G;oCAC3G,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;wCACpC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ;4CACrB,CAAC,WAAW,CAAC,MAAM;4CACnB,CAAC,WAAW,CAAC,iBAAiB;4CAC9B,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC;4CACtC,MAAM,CAAC;wCAEX,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,IAAI,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;4CACxE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;gDACzE,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;4CACjF,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;wCAErG,CAAC;wCAAC,IAAI,CAAC,CAAC;4CACJ,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC;wCACjG,CAAC;oCACL,CAAC,CAAC,CAAC;oCAEH,sBAAO,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC,MAAM,GAAG,SAAS,EAAC;;;;iBAC/E;gBAEL,6CAAC;YAAD,CAxDA,AAwDC,IAAA;;QAAA,CAAC;;;;;;;;;;YC3IF;;eAEG;YACH;gBAAA;gBAmBA,CAAC;gBAjBG;;;mBAGG;gBACI,0BAAa,GAApB,UAA2B,UAAe,EAAE,QAAiC;oBACzE,IAAM,OAAO,GAAQ,EAAE,CAAC;oBACxB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,IAAI;wBACnC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;4BAChB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAC1B,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;4BACV,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACzB,CAAC,CAAC,CAAC;oBACP,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC;wBACvB,MAAM,CAAC,OAAO,CAAC;oBACnB,CAAC,CAAC,CAAC;gBACP,CAAC;gBAEL,mBAAC;YAAD,CAnBA,AAmBC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;YCVF;;;eAGG;YACH;gBAoCI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,kCAAsB,UAAsB,EACtB,wBAAuC,EACvC,mBAAwC;oBAFxC,eAAU,GAAV,UAAU,CAAY;oBACtB,6BAAwB,GAAxB,wBAAwB,CAAe;oBACvC,wBAAmB,GAAnB,mBAAmB,CAAqB;gBAC9D,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;mBAGG;gBACG,0CAAO,GAAb,UAAc,QAAmB;;4BA+BzB,4BAA4B;;;;oCA7BhC;;;;;yCAKK;oCAEL,8BAA8B;oCAC9B,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,QAAQ,EAAE,EAAlB,CAAkB,CAAC,CAAC;oCAEhD,oCAAoC;oCACpC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;oCAC5B,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,cAAc,EAAtB,CAAsB,CAAC,CAAC;oCACzE,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,aAAa,EAArB,CAAqB,CAAC,CAAC;oCACxE,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,aAAa,EAArB,CAAqB,CAAC,CAAC;oCACxE,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,kBAAkB,EAA1B,CAA0B,CAAC,CAAC;oCAErF,wGAAwG;oCACxG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM;wCAC3B,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM;wCAC3B,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM;wCAC3B,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM;wCACnC,QAAQ,CAAC,KAAK,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAA/B,CAA+B,CAAC;wCAC1D,QAAQ,CAAC,KAAK,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAA/B,CAA+B,CAAC,CAAC;wCAC3D,MAAM,gBAAC;mEAKwB,KAAK;;;;oCAGpC,KAAA,IAAI,CAAA;oCAAe,qBAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAA;;oCAA3D,GAAK,WAAW,GAAG,SAAwC,CAAC;yCAGxD,CAAC,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,EAAvC,wBAAuC;oCACvC,4BAA4B,GAAG,IAAI,CAAC;oCACpC,qBAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,EAAA;;oCAAzC,SAAyC,CAAC;;;gCAG9C,qDAAqD;gCACrD,qBAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,2BAA2B,CAAC,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,EAAA;;oCAD3J,qDAAqD;oCACrD,SAA2J,CAAC;oCAE5J,mIAAmI;oCACnI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,SAAS,EAAE,EAAnB,CAAmB,CAAC,CAAC;oCAE5D,qBAAM,IAAI,CAAC,uBAAuB,EAAE,EAAA;;oCAApC,SAAoC,CAAC;oCACrC,qBAAM,IAAI,CAAC,mCAAmC,EAAE,EAAA;;oCAAhD,SAAgD,CAAC;oCACjD,qBAAM,IAAI,CAAC,gCAAgC,EAAE,EAAA;;oCAA7C,SAA6C,CAAC;oCAC9C,qBAAM,IAAI,CAAC,gCAAgC,EAAE,EAAA;;oCAA7C,SAA6C,CAAC;oCAC9C,qBAAM,IAAI,CAAC,uBAAuB,EAAE,EAAA;;oCAApC,SAAoC,CAAC;oCACrC,qBAAM,IAAI,CAAC,sBAAsB,EAAE,EAAA;;oCAAnC,SAAmC,CAAC;oCACpC,qBAAM,IAAI,CAAC,uBAAuB,EAAE,EAAA;;oCAApC,SAAoC,CAAC;yCAGjC,CAAA,4BAA4B,KAAK,IAAI,CAAA,EAArC,yBAAqC;oCACrC,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,EAAA;;oCAA1C,SAA0C,CAAC;;;gCAE/C,6GAA6G;gCAC7G,qBAAM,IAAI,CAAC,uCAAuC,EAAE,EAAA;;oCADpD,6GAA6G;oCAC7G,SAAoD,CAAC;oCAErD,mCAAmC;oCACnC,2IAA2I;oCAC3I,qBAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,0BAA0B,CAAC,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,EAAA;;oCAF1J,mCAAmC;oCACnC,2IAA2I;oCAC3I,SAA0J,CAAC;;;;yCAKvJ,4BAA4B,EAA5B,yBAA4B;;;;oCAExB,qBAAM,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,EAAA;;oCAA5C,SAA4C,CAAC;;;;;yCAMrD,MAAM,OAAK,CAAC;;;;;iBAGnB;gBAED,4EAA4E;gBAC5E,6BAA6B;gBAC7B,4EAA4E;gBAE5E;;;;;;;;;;;;;;;;;mBAiBG;gBACW,0DAAuB,GAArC;;;4BAQU,mBAAmB,EAKnB,oBAAoB,EAcpB,cAAc;;;;0DAnBQ,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,QAAQ,CAAC,qBAAqB,EAAvC,CAAuC,CAAC;2DAK7E,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,QAAQ,CAAC,qBAAqB,EAAtC,CAAsC,CAAC;oCAE1G,yEAAyE;oCACzE,oEAAoE;oCACpE,qBAAM,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC,EAAA;;oCAF/E,yEAAyE;oCACzE,oEAAoE;oCACpE,SAA+E,CAAC;oCAChF,qBAAM,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,OAAO,EAAE,mBAAmB,CAAC,EAAzC,CAAyC,CAAC,CAAC,EAAA;;oCAAjG,SAAiG,CAAC;qDAS3D,EAAE;oCACzC,mBAAmB,CAAC,OAAO,CAAC,UAAA,OAAO;wCAE/B,wFAAwF;wCACxF,IAAM,aAAa,GAAkB,EAAE,CAAC;wCACxC,OAAO,CAAC,QAAQ,CAAC,wBAAwB,CAAC,OAAO,CAAC,UAAA,QAAQ;4CACtD,IAAM,gBAAgB,GAAG,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC;4CAC9D,IAAM,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;4CAE9D,uDAAuD;4CACvD,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC;gDACf,MAAM,CAAC;4CAEX,mDAAmD;4CACnD,IAAI,UAAe,CAAC;4CACpB,IAAM,cAAc,GAAG,QAAQ,CAAC,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,YAAY,KAAK,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,EAAtE,CAAsE,CAAC,CAAC;4CACpJ,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gDACjB,IAAM,aAAa,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAA,eAAe,IAAI,OAAA,eAAe,CAAC,MAAM,KAAK,aAAa,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAvE,CAAuE,CAAC,CAAC;gDAE3I,qCAAqC;gDACrC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oDAEhB,4CAA4C;oDAC5C,UAAU,GAAG,aAAa,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;oDACvF,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wDAEd,uDAAuD;wDACvD,EAAE,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;4DAC/B,UAAU,GAAG,aAAa,CAAC,gBAAgB,CAAC;wDAEhD,CAAC;wDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;4DACrC,UAAU,GAAG,aAAa,CAAC,iBAAiB,CAAC;wDAEjD,CAAC;wDACD,uCAAuC;oDAC3C,CAAC;gDACL,CAAC;4CAEL,CAAC;4CAAC,IAAI,CAAC,CAAC;gDACJ,IAAM,aAAa,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAA,eAAe,IAAI,OAAA,eAAe,CAAC,MAAM,KAAK,aAAa,EAAxC,CAAwC,CAAC,CAAC;gDAE5G,qCAAqC;gDACrC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oDAEhB,4CAA4C;oDAC5C,UAAU,GAAG,aAAa,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;oDAC1D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wDAEd,uDAAuD;wDACvD,EAAE,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;4DAC/B,UAAU,GAAG,aAAa,CAAC,gBAAgB,CAAC;wDAEhD,CAAC;wDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;4DACrC,UAAU,GAAG,aAAa,CAAC,iBAAiB,CAAC;wDACjD,CAAC;wDACD,uCAAuC;oDAC3C,CAAC;gDACL,CAAC;4CAEL,CAAC;4CAED,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gDACb,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC;4CAC9C,CAAC;wCAEL,CAAC,CAAC,CAAC;wCAEH,+DAA+D;wCAC/D,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;4CACjE,8FAA8F;4CAE9F,IAAM,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC,oBAAoB,GAAG,OAAO,CAAC,QAAQ,CAAC,iCAAiC,GAAG,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC;4CAC7I,IAAM,YAAU,GAAkB,EAAE,CAAC;4CAErC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;gDAClB,IAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;gDAExD,gFAAgF;gDAChF,IAAM,cAAc,GAAG,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,MAAM,CAAC,YAAY,EAA7C,CAA6C,CAAC,CAAC;gDAElH,EAAE,CAAC,CAAC,WAAW,IAAI,cAAc,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;oDAC7D,IAAI,uBAAuB,GAAG,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;oDACnG,EAAE,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;wDAC3B,IAAM,wBAAwB,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,KAAK,WAAW,EAA9B,CAA8B,CAAC,CAAC;wDACrG,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;4DAC3B,EAAE,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;gEACzD,uBAAuB,GAAG,wBAAwB,CAAC,gBAAgB,CAAC;4DAExE,CAAC;4DAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;gEAC/D,uBAAuB,GAAG,wBAAwB,CAAC,iBAAiB,CAAC;4DAEzE,CAAC;wDACL,CAAC;oDACL,CAAC;oDACD,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;wDAC1B,YAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,uBAAuB,CAAC;oDAC1D,CAAC;gDAEL,CAAC;gDAAC,IAAI,CAAC,CAAC;oDACJ,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wDACd,YAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC;oDAC9C,CAAC;oDAAC,IAAI,CAAC,CAAC;wDACJ,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;4DAC3B,YAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,gBAAgB,CAAC;wDAE3D,CAAC;wDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;4DACnC,YAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,iBAAiB,CAAC;wDAC5D,CAAC;oDACL,CAAC;gDACL,CAAC;4CACL,CAAC,CAAC,CAAC;4CACH,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,YAAU,CAAC,CAAC,MAAM,CAAC;gDAChC,MAAM,CAAC;4CAEX,IAAM,aAAa,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,aAAa,EAAE,YAAU,CAAC,CAAC;4CACtG,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;wCACvC,CAAC;wCAED,sHAAsH;wCACtH,0HAA0H;wCAC1H,IAAM,qCAAqC,GAAG,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAC,QAAQ,CAAC,QAAQ,EAAlB,CAAkB,CAAC,CAAC,CAAC;wCACpK,OAAO,CAAC,QAAQ,CAAC,+BAA+B,CAAC,OAAO,CAAC,MAAM,EAAE,qCAAqC,CAAC;6CAClG,OAAO,CAAC,UAAC,EAAmD;gDAAlD,gBAAQ,EAAE,wBAAgB,EAAE,6BAAqB;4CACxD,IAAM,gBAAgB,GAAG,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC;4CAC9E,IAAM,OAAO,GAAG,qBAAqB,CAAC,oBAAoB,GAAG,qBAAqB,CAAC,iCAAiC,GAAG,qBAAqB,CAAC,cAAc,CAAC;4CAC5J,IAAM,UAAU,GAAkB,EAAE,CAAC;4CAErC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;gDAClB,IAAM,WAAW,GAAG,gBAAgB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;gDAE1D,gFAAgF;gDAChF,IAAM,cAAc,GAAG,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,YAAY,KAAK,MAAM,CAAC,YAAY,EAA7C,CAA6C,CAAC,CAAC;gDAEvH,EAAE,CAAC,CAAC,WAAW,IAAI,cAAc,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;oDAC7D,IAAI,uBAAuB,GAAG,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;oDACnG,EAAE,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;wDAC3B,IAAM,wBAAwB,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,KAAK,WAAW,EAA9B,CAA8B,CAAC,CAAC;wDACrG,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;4DAC3B,EAAE,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;gEACzD,uBAAuB,GAAG,wBAAwB,CAAC,gBAAgB,CAAC;4DAExE,CAAC;4DAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;gEAC/D,uBAAuB,GAAG,wBAAwB,CAAC,iBAAiB,CAAC;4DACzE,CAAC;wDACL,CAAC;oDACL,CAAC;oDACD,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;wDAC1B,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,uBAAuB,CAAC;oDAC1D,CAAC;gDAEL,CAAC;gDAAC,IAAI,CAAC,CAAC;oDACJ,IAAM,wBAAwB,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,KAAK,gBAAgB,EAAnC,CAAmC,CAAC,CAAC;oDAC1G,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wDACd,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC;oDAC9C,CAAC;oDAAC,IAAI,CAAC,CAAC;wDACJ,EAAE,CAAC,CAAC,wBAAwB,IAAI,wBAAwB,CAAC,gBAAgB,CAAC,CAAC,CAAC;4DACxE,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,wBAAwB,CAAC,gBAAgB,CAAC;wDAE5E,CAAC;wDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,wBAAwB,IAAI,wBAAwB,CAAC,iBAAiB,CAAC,CAAC,CAAC;4DAChF,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,wBAAwB,CAAC,iBAAiB,CAAC;wDAE7E,CAAC;oDACL,CAAC;gDACL,CAAC;4CACL,CAAC,CAAC,CAAC;4CACH,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;gDAChC,MAAM,CAAC;4CAEX,IAAM,aAAa,GAAkB,EAAE,CAAC;4CACxC,IAAM,cAAc,GAAG,QAAQ,CAAC,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,YAAY,KAAK,gBAAgB,CAAC,YAAY,EAAlD,CAAkD,CAAC,CAAC;4CAChI,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gDACjB,IAAI,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;gDACpF,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oDACN,IAAM,aAAa,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAhE,CAAgE,CAAC,CAAC;oDAC5H,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;wDAChB,EAAE,CAAC,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC;4DACjC,EAAE,GAAG,aAAa,CAAC,gBAAgB,CAAC;wDAExC,CAAC;wDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC;4DACzC,EAAE,GAAG,aAAa,CAAC,iBAAiB,CAAC;wDACzC,CAAC;oDACL,CAAC;gDACL,CAAC;gDACD,aAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;4CACjE,CAAC;4CAAC,IAAI,CAAC,CAAC;gDACJ,aAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,iBAAiB,CAAC;4CAC9K,CAAC;4CAED,IAAM,aAAa,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,CAAC,IAAI,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;4CACpH,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;wCACvC,CAAC,CAAC,CAAC;oCAEX,CAAC,CAAC,CAAC;oCAEH,qBAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBAGrC;gBAED;;;;mBAIG;gBACW,yCAAM,GAApB,UAAqB,OAAgB,EAAE,uBAAkC;;4BAE/D,oBAAoB,EACpB,QAAQ,EACR,MAAM,EACR,gBAAgB,EAAO,iBAAiB,EAMlC,eAAe,EAIf,cAAc,qBAMd,SAAS;;;;2DAnBU,OAAO,CAAC,QAAQ,CAAC,oBAAoB;+CACjD,OAAO,CAAC,QAAQ;6CAClB,OAAO,CAAC,MAAM;yCAIzB,QAAQ,CAAC,KAAK,CAAC,iBAAiB,EAAhC,wBAAgC;sDAGR,IAAI,CAAC,uBAAuB,CAAC,oBAAoB,EAAE,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,kBAAkB,EAAE,uBAAuB,CAAC;oCAC1H,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,EAAE,eAAe,EAAE,oBAAoB,CAAC,sBAAsB,CAAC,EAAA;;oCAAnK,gBAAgB,GAAG,iBAAiB,GAAG,SAA4H,CAAC;qDAG7I,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,uBAAuB,CAAC;oCAC/G,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,cAAc,EAAE,QAAQ,CAAC,sBAAsB,CAAC,EAAA;;wDAAnG,SAAmG;oCAC7H,EAAE,CAAC,CAAC,CAAC,gBAAgB,IAAI,iBAAiB,CAAC;wCAAC,gBAAgB,GAAG,iBAAiB,CAAC;;;gDAI/D,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,uBAAuB,CAAC;oCAC1G,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,sBAAsB,CAAC,EAAA;;oCAAjH,gBAAgB,GAAG,SAA8F,CAAC;;;oCAGtH,EAAE,CAAC,CAAC,iBAAiB,CAAC;wCAClB,OAAO,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;oCAElD,2FAA2F;oCAC3F,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;wCACnB,EAAE,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;4CAC9B,OAAO,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;wCAEhD,CAAC;wCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;4CACpC,OAAO,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;wCAEjD,CAAC;oCACL,CAAC;;;;;iBACJ;gBAED;;mBAEG;gBACK,0DAAuB,GAA/B,UAAgC,QAAwB,EAAE,MAAqB,EAAE,IAAU,EAAE,mBAAwB,EAAE,kBAAuB,EAAE,uBAAkC;oBAAlL,iBAqKC;oBAnKG,IAAM,WAAW,GAAa,EAAE,CAAC;oBACjC,IAAM,YAAY,GAAU,EAAE,CAAC;oBAC/B,IAAM,mBAAmB,GAAkB,EAAE,CAAC;oBAE9C,QAAQ,CAAC,uBAAuB;yBAC3B,MAAM,CAAC,UAAA,MAAM;wBACV,MAAM,CAAC,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;oBAC/G,CAAC,CAAC;yBACD,OAAO,CAAC,UAAA,MAAM;wBACX,IAAM,KAAK,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC;wBACjG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBAClC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACzB,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;oBAC7C,CAAC,CAAC,CAAC;oBAEP,IAAM,oBAAoB,GAAG,UAAC,MAAW,EAAE,gBAA+B,EAAE,SAA6B;wBACrG,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;4BACtB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;gCAC/B,MAAM,CAAC;4BAEX,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gCACnB,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAI,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAW,CAAC,GAAG,CAAC,UAAA,QAAQ;oCAC3F,IAAM,OAAO,GAAkB,EAAE,CAAC;oCAClC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;wCAC3B,IAAM,KAAK,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC;wCACnG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,6GAA6G;wCAChJ,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wCACzB,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;oCACzC,CAAC,CAAC,CAAC;oCACH,MAAM,CAAC,OAAO,CAAC;gCACnB,CAAC,CAAC,CAAC;4BAEP,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;gCAC7C,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;oCAC3B,IAAM,KAAK,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC;oCACxH,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oCAClC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oCACzB,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;gCACzE,CAAC,CAAC,CAAC;4BACP,CAAC;4BACD,oBAAoB,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;wBACrH,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC;oBACF,oBAAoB,CAAC,MAAM,EAAE,mBAAmB,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;oBAEtE,QAAQ,CAAC,wBAAwB,CAAC,OAAO,CAAC,UAAA,QAAQ;wBAE9C,IAAI,aAAkB,CAAC;wBACvB,IAAM,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;wBAE9C,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACR,0EAA0E;4BAC1E,IAAM,UAAU,GAAG,QAAQ,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB;4BAChF,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gCACb,aAAa,GAAG,UAAU,CAAC;4BAC/B,CAAC;4BAED,qEAAqE;4BACrE,IAAM,sBAAsB,GAAG,uBAAuB,CAAC,IAAI,CAAC,UAAA,eAAe;gCACvE,MAAM,CAAC,eAAe,CAAC,MAAM,KAAK,KAAK,CAAC;4BAC5C,CAAC,CAAC,CAAC;4BACH,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;gCACzB,IAAM,gBAAgB,GAAG,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC;gCAC9D,gHAAgH;gCAChH,EAAE,CAAC,CAAC,gBAAgB,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;oCACrF,EAAE,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;wCAC9B,aAAa,GAAG,sBAAsB,CAAC,iBAAiB,CAAC;oCAC7D,CAAC;oCACD,mDAAmD;oCACnD,sEAAsE;gCAC1E,CAAC;gCAED,EAAE,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC;oCAC7B,aAAa,GAAG,sBAAsB,CAAC,gBAAgB,CAAC;gCAC5D,EAAE,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC;oCAC5B,aAAa,GAAG,sBAAsB,CAAC,iBAAiB,CAAC;gCAC7D,oDAAoD;gCACpD,EAAE,CAAC,CAAC,gBAAgB,CAAC,YAAY,IAAI,gBAAgB,CAAC,YAAY,CAAC;oCAC/D,aAAa,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;gCACjH,qCAAqC;gCACrC,EAAE,CAAC,CAAC,gBAAgB,CAAC,SAAS,CAAC;oCAC3B,aAAa,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;4BAC3F,CAAC;wBACL,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;4BACjC,IAAM,cAAc,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,OAAO;gCAChD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,YAAY,KAAK,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC;oCAC/E,MAAM,CAAC,KAAK,CAAC;gCAEjB,IAAM,oBAAoB,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;gCACnF,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;oCACvB,EAAE,CAAC,CAAC,oBAAoB,YAAY,KAAK,CAAC,CAAC,CAAC;wCACxC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,KAAK,QAAQ,EAArB,CAAqB,CAAC,CAAC;oCACxE,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,MAAM,CAAC,oBAAoB,KAAK,MAAM,CAAC;oCAC3C,CAAC;gCACL,CAAC;4BACL,CAAC,CAAC,CAAC;4BACH,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gCAC7F,aAAa,GAAG,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4BAC7F,CAAC;wBACL,CAAC;wBAED,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;4BAChB,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;4BAChC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;4BACjC,mBAAmB,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBACvE,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,kDAAkD;oBAClD,EAAE,CAAC,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC;wBAC/B,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,IAAI,EAAE,QAAQ,CAAC,gBAAgB,CAAC,CAAC;wBAC7F,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;wBACrD,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACzB,mBAAmB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBACpE,CAAC;oBAED,kDAAkD;oBAClD,EAAE,CAAC,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC;wBAC/B,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,IAAI,EAAE,QAAQ,CAAC,gBAAgB,CAAC,CAAC;wBAC7F,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;wBACrD,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACzB,mBAAmB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBACpE,CAAC;oBAED,gDAAgD;oBAChD,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBAC5B,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;wBACvF,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;wBAClD,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACzB,mBAAmB,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBACjE,CAAC;oBAED,0FAA0F;oBAC1F,EAAE,CAAC,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAC;wBAClC,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,kBAAkB,IAAI,QAAQ,CAAC,kBAAkB,EAAE,QAAQ,CAAC,mBAAmB,CAAC,CAAC;wBAC7I,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;wBACxD,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACzB,mBAAmB,CAAC,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBACvE,CAAC;oBAED,oFAAoF;oBACpF,EAAE,CAAC,CAAC,QAAQ,CAAC,kBAAkB,IAAI,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC;wBAChE,IAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;wBACtE,IAAM,WAAW,GAAG,YAAY,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;wBAElG,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;wBACpD,YAAY,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;oBACvC,CAAC;oBAED,uFAAuF;oBACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,oBAAoB,IAAI,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9D,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,wCAAwC;wBAC5F,YAAY,CAAC,IAAI,CAAC,mBAAmB,IAAI,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,wCAAwC;oBAC7J,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,CAAC,CAAC,CAAC;wBAChD,MAAM,CAAC,mBAAmB,CAAC;oBAE/B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,mBAAQ,CAAC,SAAS,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;oBACzD,CAAC;gBACL,CAAC;gBAED,4EAA4E;gBAC5E,iDAAiD;gBACjD,4EAA4E;gBAE5E;;mBAEG;gBACK,sEAAmC,GAA3C;oBAAA,iBASC;oBARG,IAAM,QAAQ,GAAG,IAAI,CAAC,cAAc;yBAC/B,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,EAAhC,CAAgC,CAAC;yBACnD,GAAG,CAAC,UAAM,OAAO;;;;gCACd,oHAAoH;gCACpH,sFAAsF;gCACtF,qBAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,EAAA;;oCAF5C,oHAAoH;oCACpH,sFAAsF;oCACtF,SAA4C,CAAC;;;;yBAChD,CAAC,CAAC;oBACP,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACjC,CAAC;gBAED;;mBAEG;gBACW,2DAAwB,GAAtC,UAAuC,OAAgB;;4BAG7C,SAAS,EACT,gBAAgB,EAElB,WAAW,EAMT,YAAY,EACd,cAAc,EAIJ,qBAAqB,EAQzB,aAAa,MAoBb,MAAM;;;;gDA1CE,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI;uDACzC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,UAAU,CAAC,gBAAgB;kDAEtE,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC;oCAC/D,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;wCAC/C,WAAW,GAAG,OAAO,CAAC,gBAAgB,CAAC;wCACvC,kGAAkG;oCACtG,CAAC,CAAC,iDAAiD;mDAE9B,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC;qDAC3D,CAAC;oCAC3B,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wCACf,cAAc,GAAG,YAAY,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;wCAC7D,EAAE,CAAC,CAAC,CAAC,cAAc,IAAI,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;oEACpB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,KAAK,YAAY,EAA/B,CAA+B,CAAC;4CAClG,4DAA4D;4CAC5D,cAAc,GAAG,qBAAsB,CAAC,gBAAgB,CAAC;wCAC7D,CAAC,CAAC,iDAAiD;oCACvD,CAAC;oCAED,yFAAyF;oCACzF,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;wDACI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU;4CAClD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,uBAAuB,CAAC;gDAC9G,MAAM,CAAC,KAAK,CAAC;4CAEjB,IAAM,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;4CACvF,MAAM,CAAC,QAAQ,YAAY,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC;wCACvF,CAAC,CAAC;wCAEF,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;4CAChB,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4CACrE,EAAE,CAAC,CAAC,CAAC,cAAc,IAAI,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC;gDACpD,cAAc,GAAG,aAAa,CAAC,gBAAgB,CAAC;4CACpD,CAAC;wCACL,CAAC;oCACL,CAAC;oCAED,kEAAkE;oCAClE,KAAA,OAAO,CAAA;oCAAa,qBAAM,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,SAAS,EAAE,WAAW,EAAE,cAAc,EAAE,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAA;;oCAD9I,kEAAkE;oCAClE,GAAQ,SAAS,GAAG,SAA0H,CAAC;yCAE3I,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EAAnC,wBAAmC;uDAClB,GAAC,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,IAAG,OAAO,CAAC,SAAS;oCAC/E,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,YAAI,GAAC,gBAAgB,CAAC,QAAQ,IAAG,WAAW,MAAG,EAAA;;oCAAhH,SAAgH,CAAC;;;;;;iBAExH;gBAED,4EAA4E;gBAC5E,0BAA0B;gBAC1B,4EAA4E;gBAE5E;;mBAEG;gBACW,0DAAuB,GAArC;;;;;wCACI,qBAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAApB,CAAoB,CAAC,CAAC,EAAA;;oCAA3E,SAA2E,CAAC;;;;;iBAC/E;gBAED;;mBAEG;gBACW,yCAAM,GAApB,UAAqB,OAAgB;;;4BAC3B,MAAM,EAGF,KAAK,EAKL,8BAA4B,EAyB5B,OAAK,EAqBT,SAAS,EA+BP,QAAQ,EAUR,QAAQ,EAWJ,QAAQ,EAcR,QAAQ;;;;6CAxHL,OAAO,CAAC,MAAM;oCAE7B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,CAAC,CAAC,CAAC;gDAClC,OAAO,CAAC,QAAQ,CAAC,sBAAsB,CAAC,MAAM,CAAC;wCAC7D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;4CACP,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;yEAGxC,UAAC,MAAW,EAAE,KAAU,EAAE,SAA6B;4CACxF,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;gDACtB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;oDAC/B,MAAM,CAAC;gDACX,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;oDACnB,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAI,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAW,CAAC,GAAG,CAAC,UAAA,QAAQ;wDAC1E,IAAM,OAAO,GAAkB,EAAE,CAAC;wDAClC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;4DAC3B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;wDACzD,CAAC,CAAC,CAAC;wDACH,MAAM,CAAC,OAAO,CAAC;oDACnB,CAAC,CAAC,CAAC;gDAEP,CAAC;gDAAC,IAAI,CAAC,CAAC;oDACJ,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;wDAC3B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;4DACxB,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;wDAEhC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;oDAC7F,CAAC,CAAC,CAAC;gDACP,CAAC;gDACD,8BAA4B,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;4CAC5G,CAAC,CAAC,CAAC;wCACP,CAAC;kDAE4B,EAAE;wCAC/B,OAAO,CAAC,QAAQ,CAAC,uBAAuB,CAAC,OAAO,CAAC,UAAA,MAAM;4CACnD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,SAAS,CAAC;gDAC1C,OAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;wCAC7D,CAAC,CAAC,CAAC;wCACH,8BAA4B,CAAC,MAAM,EAAE,OAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;wCAExE,sFAAsF;wCACtF,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAK,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;4CAChC,MAAM,gBAAC;wCAEX,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC;4CACrC,OAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;wCAErJ,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC;4CAClC,OAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;wCAE5L,MAAM,gBAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAK,EAAE,KAAK,CAAC,EAAC;oCAC9E,CAAC;gDAG2F,EAAE;oCAE9F,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,MAAM;wCAC9B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC;4CAAC,MAAM,CAAC,CAAC,kCAAkC;wCACpE,IAAM,QAAQ,GAAG,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;wCAClE,IAAI,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,SAAS,KAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,EAA1C,CAA0C,CAAC,CAAC;wCACtF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4CACZ,QAAQ,GAAG,EAAE,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;4CAC9E,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wCAC7B,CAAC;wCAED,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;oCAC5H,CAAC,CAAC,CAAC;oCAEH,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,QAAQ;wCAClC,IAAM,QAAQ,GAAG,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;wCACpE,IAAI,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,SAAS,KAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,EAA1C,CAA0C,CAAC,CAAC;wCACtF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4CACZ,QAAQ,GAAG,EAAE,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;4CAC9E,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wCAC7B,CAAC;wCAED,IAAM,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;wCAC9C,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,CAAC,6FAA6F;oCACxP,CAAC,CAAC,CAAC;oCAEH,sFAAsF;oCACtF,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;wCACpC,MAAM,gBAAC;oCAEX,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC;mDACxB,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,SAAS,KAAK,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAlD,CAAkD,CAAC;wCAC7F,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4CACZ,QAAQ,GAAG,EAAE,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;4CAC9F,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wCAC7B,CAAC;wCAED,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;oCAC/J,CAAC;oCAED,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;mDACrB,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,SAAS,KAAK,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAlD,CAAkD,CAAC;wCAC7F,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4CACZ,QAAQ,GAAG,EAAE,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;4CAC9F,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wCAC7B,CAAC;wCAED,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;oCACtM,CAAC;oCAED,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;wCACxC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,CAAC,CAAC;uDAC7C,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,SAAS,KAAK,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,EAAvE,CAAuE,CAAC;4CAClH,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gDACZ,QAAQ,GAAG;oDACP,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI;oDAC3D,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,oBAAoB;oDAC/C,MAAM,EAAE,EAAE;iDACb,CAAC;gDACF,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4CAC7B,CAAC;4CAED,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;wCACzM,CAAC;wCAED,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC,CAAC;uDAC1C,SAAS,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,SAAS,KAAK,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,EAAvE,CAAuE,CAAC;4CAClH,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gDACZ,QAAQ,GAAG;oDACP,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI;oDAC3D,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,oBAAoB;oDAC/C,MAAM,EAAE,EAAE;iDACb,CAAC;gDACF,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4CAC7B,CAAC;4CAED,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;wCACrQ,CAAC;oCACL,CAAC;oCAED,qBAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ;4CACpC,IAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;4CAC/D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;gDACP,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;4CAE7E,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;wCAC/E,CAAC,CAAC,CAAC,EAAA;;oCANH,SAMG,CAAC;;;;;iBACP;gBAED,4EAA4E;gBAC5E,yCAAyC;gBACzC,4EAA4E;gBAE5E;;mBAEG;gBACK,yDAAsB,GAA9B;oBAAA,iBAEC;oBADG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAA7B,CAA6B,CAAC,CAAC,CAAC;gBAClG,CAAC;gBAED;;mBAEG;gBACW,kDAAe,GAA7B,UAA8B,OAAgB;;4BACpC,MAAM,EAMN,KAAK;;qCANmB,EAAE;4BAChC,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,WAAW;gCACvC,IAAM,KAAK,GAAG,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;gCAC1H,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,mCAAmC;4BAClF,CAAC,CAAC,CAAC;oCAEW,OAAO,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,cAAc,CAAC;4BAC7E,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;gCACP,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;4BAE7E,sBAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,EAAC;;;iBAC9E;gBAED,4EAA4E;gBAC5E,0BAA0B;gBAC1B,4EAA4E;gBAE5E;;mBAEG;gBACW,0DAAuB,GAArC;;;;;wCACI,qBAAM,2BAAY,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,EAAE,UAAM,OAAO;;oDAAI,qBAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAA;oDAA1B,sBAAA,SAA0B,EAAA;;6CAAA,CAAC,EAAA;;oCAAlG,SAAkG,CAAC;;;;;iBACtG;gBAED;;mBAEG;gBACW,yCAAM,GAApB,UAAqB,OAAgB;;4BAEvB,kBAAgB,EAMhB,iBAAe;;;;yCAPrB,OAAO,CAAC,QAAQ,CAAC,oBAAoB,EAArC,wBAAqC;yDACG,EAAE;oCAC1C,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,UAAA,MAAM;wCAChD,kBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;oCACpF,CAAC,CAAC,CAAC;oCACH,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,EAAE,kBAAgB,CAAC,EAAA;;oCAAjG,SAAiG,CAAC;wDAE3D,EAAE;oCACzC,OAAO,CAAC,QAAQ,CAAC,iCAAiC,CAAC,OAAO,CAAC,UAAA,MAAM;wCAC7D,iBAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;oCACnF,CAAC,CAAC,CAAC;oCACH,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAe,CAAC,EAAA;;oCAA3E,SAA2E,CAAC;;wCAE5E,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,cAAc,CAAE,CAAC,EAAA;;oCAA1H,SAA0H,CAAC;;;;;;iBAElI;gBAED,4EAA4E;gBAC5E,kDAAkD;gBAClD,4EAA4E;gBAE5E;;mBAEG;gBACW,mEAAgC,GAA9C;;;4BACU,QAAQ;;;;+CAAmB,EAAE;oCACnC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,OAAO;wCAC5B,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc;4CAC1C,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC,CAAC;wCACjE,CAAC,CAAC,CAAC;oCACP,CAAC,CAAC,CAAC;oCAEH,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED;;mBAEG;gBACW,kDAAe,GAA7B,UAA8B,OAAgB,EAAE,cAA8B;;;4BAGpE,QAAQ,EACR,SAAS,EACT,WAAW,EACX,YAAY,EAEd,KAAK,EAeH,QAAQ;;;;+CApBG,cAAc,CAAC,QAAQ;gDACtB,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,eAAe,CAAC,SAAS;kDACzE,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC,gBAAgB,GAAG,SAAS,CAAC,uBAAuB;mDACjF,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC,uBAAuB,GAAG,SAAS,CAAC,gBAAgB;4CAE3F,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,MAAM,CAAC;oCAC3D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wCACT,EAAE,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;4CAC1B,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC;wCAErC,CAAC;wCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;4CAChC,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC;wCAEtC,CAAC;wCACD,wHAAwH;oCAC5H,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;wCACP,MAAM,IAAI,KAAK,CAAC,6BAA2B,OAAO,CAAC,YAAY,sFAAmF,CAAC,CAAC,CAAC,6BAA6B;+CAErK,cAAc,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAA,aAAa;wCAE9D,6CAA6C;wCAC7C,IAAI,UAAe,CAAC;wCACpB,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;4CAC7B,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;wCAExF,CAAC;wCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;4CACvC,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;wCACjG,CAAC;wCAED,4FAA4F;wCAC5F,+CAA+C;wCAC/C,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;4CACd,IAAM,aAAa,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,KAAK,aAAa,EAAhC,CAAgC,CAAC,CAAC;4CAC5F,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gDAChB,EAAE,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;oDAC3B,UAAU,GAAG,aAAa,CAAC,gBAAgB,CAAC;gDAEhD,CAAC;gDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;oDACjC,UAAU,GAAG,aAAa,CAAC,iBAAiB,CAAC;gDAEjD,CAAC;gDACD,2CAA2C;4CAC/C,CAAC;wCACL,CAAC;wCAED,0DAA0D;wCAC1D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;4CACZ,MAAM,IAAI,KAAK,CAAC,6BAA4B,aAAa,CAAC,WAAmB,CAAC,IAAI,sFAAmF,CAAC,CAAC,CAAC,6BAA6B;wCAEzM,IAAM,OAAO,GAAG,QAAQ,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC,CAAC;wCACvG,IAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;wCAE7E,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAAE,mBAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;oCACpH,CAAC,CAAC;oCAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED,4EAA4E;gBAC5E,+CAA+C;gBAC/C,4EAA4E;gBAE5E;;mBAEG;gBACW,mEAAgC,GAA9C;;;4BACU,QAAQ;;;;+CAAmB,EAAE;oCACnC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,OAAO;wCAC5B,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc;4CAC1C,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC,CAAC;wCACjE,CAAC,CAAC,CAAC;oCACP,CAAC,CAAC,CAAC;oCAEH,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED;;mBAEG;gBACW,kDAAe,GAA7B,UAA8B,OAAgB,EAAE,cAA8B;;;4BACpE,gBAAgB,EAChB,MAAM,EACN,KAAK,EACL,SAAS,EACT,YAAY,EACZ,cAAc;;;;uDALK,cAAc,CAAC,QAAQ,CAAC,sBAAsB;6CACxD,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc;4CAC5D,cAAc,CAAC,QAAQ,CAAC,sBAAsB,CAAC,MAAM,CAAC;gDAClD,cAAc,CAAC,QAAQ,CAAC,QAAQ,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;mDACzF,cAAc,CAAC,QAAQ,CAAC,QAAQ,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;qDAC1F,cAAc,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAA,UAAU;wCACpE,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI;4CACtD,GAAC,SAAS,CAAC,QAAQ,IAAG,KAAK;4CAC3B,GAAC,YAAY,CAAC,QAAQ,IAAG,UAAU;gDACrC,CAAC;;oCACP,CAAC,CAAC;oCAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAED,4EAA4E;gBAC5E,2DAA2D;gBAC3D,4EAA4E;gBAE5E;;mBAEG;gBACK,0EAAuC,GAA/C;oBAEI,gEAAgE;oBAChE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,OAAO;wBAC/B,EAAE,CAAC,CAAC,OAAO,CAAC,iBAAiB,IAAI,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC;4BAChE,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,iBAAiB,CAAC;wBAE7F,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,aAAa;4BACjD,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC;gCACzB,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,gBAAgB,CAAC;wBAC9E,CAAC,CAAC,CAAC;wBACH,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,UAAA,aAAa;4BACvD,EAAE,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC;gCAC1B,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,iBAAiB,CAAC;wBAC/E,CAAC,CAAC,CAAC;wBAEH,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC;4BACrC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;wBAClF,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC;4BACrC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;wBAClF,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC;4BAClC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;wBACpE,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;4BACtC,yFAAyF;4BACzF,qGAAqG;4BACrG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC;wBACtF,CAAC;wBACD;;2BAEG;oBACP,CAAC,CAAC,CAAC;oBAEH,iEAAiE;oBACjE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,OAAO;wBAC/B,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC;4BACrC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;wBAClF,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC;4BAClC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC;oBACtE,CAAC,CAAC,CAAC;oBAEH,iDAAiD;oBACjD,IAAI,CAAC,cAAc;yBACd,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,SAAS,EAAjB,CAAiB,CAAC;yBACpC,OAAO,CAAC,UAAA,OAAO;wBACZ,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,aAAa;4BACjD,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC;wBAC3D,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACX,CAAC;gBAEL,+BAAC;YAAD,CA1iCA,AA0iCC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;YCljCF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAoDG;YACH;gBAaI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,wBAAsB,UAAsB,EACtB,mBAAwC;oBADxC,eAAU,GAAV,UAAU,CAAY;oBACtB,wBAAmB,GAAnB,mBAAmB,CAAqB;oBAhB9D,4EAA4E;oBAC5E,uBAAuB;oBACvB,4EAA4E;oBAE5E;;;;uBAIG;oBACH,oBAAe,GAAc,EAAE,CAAC;gBAQhC,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACG,gCAAO,GAAb,UAAc,MAAc,EAAE,QAAwB;;;4BAG5C,oBAAoB,EAgBpB,mCAAmC;;;;2DAhBZ,IAAI,iBAAO,CAAC,QAAQ,EAAE,MAAM,CAAC;oCAC1D,oBAAoB,CAAC,aAAa,GAAG,IAAI,CAAC;oCAC1C,oBAAoB,CAAC,YAAY,GAAG,IAAI,CAAC;oCACzC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;oCAEhD,2DAA2D;oCAC3D,oGAAoG;oCACpG,IAAI,CAAC,0CAA0C,CAAC,oBAAoB,CAAC,CAAC;oCAEtE,iEAAiE;oCACjE,qBAAM,IAAI,CAAC,mCAAmC,EAAE,EAAA;;oCADhD,iEAAiE;oCACjE,SAAgD,CAAC;0EAML,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,iBAAiB,EAAzB,CAAyB,CAAC;oCAC7G,qBAAM,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,GAAG,CAAC,UAAA,OAAO;4CAC7D,MAAM,CAAC,KAAI,CAAC,mDAAmD,CAAC,OAAO,CAAC,CAAC;wCAC7E,CAAC,CAAC,CAAC,EAAA;;oCAFH,SAEG,CAAC;oCAEJ,iGAAiG;oCACjG,qBAAM,IAAI,CAAC,uBAAuB,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAA;;oCADlE,iGAAiG;oCACjG,SAAkE,CAAC;;;;;iBACtE;gBAED;;mBAEG;gBACG,+BAAM,GAAZ,UAAa,MAAc,EAAE,QAAwB;;;4BAG3C,kBAAkB,EAelB,mCAAmC;;;;yDAfd,IAAI,iBAAO,CAAC,QAAQ,EAAE,MAAM,CAAC;oCACxD,kBAAkB,CAAC,aAAa,GAAG,IAAI,CAAC;oCACxC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oCAE9C,2DAA2D;oCAC3D,wFAAwF;oCACxF,IAAI,CAAC,iCAAiC,CAAC,kBAAkB,CAAC,CAAC;oCAE3D,kEAAkE;oCAClE,qBAAM,IAAI,CAAC,mCAAmC,EAAE,EAAA;;oCADhD,kEAAkE;oCAClE,SAAgD,CAAC;0EAML,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,iBAAiB,EAAzB,CAAyB,CAAC;oCAC7G,qBAAM,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,GAAG,CAAC,UAAA,OAAO;4CAC7D,MAAM,CAAC,KAAI,CAAC,mDAAmD,CAAC,OAAO,CAAC,CAAC;wCAC7E,CAAC,CAAC,CAAC,EAAA;;oCAFH,SAEG,CAAC;oCAEJ,sFAAsF;oCACtF,qBAAM,IAAI,CAAC,uBAAuB,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAA;;oCADnE,sFAAsF;oCACtF,SAAmE,CAAC;;;;;iBACvE;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;;;;;;;;mBASG;gBACO,mEAA0C,GAApD,UAAqD,OAAgB;oBAArE,iBA8BC;oBA7BG,OAAO,CAAC,QAAQ;yBACX,+BAA+B,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC;yBAC3E,MAAM,CAAC,UAAC,EAAgC;4BAA/B,gBAAQ,EAAE,aAAK,EAAE,qBAAa;wBAEpC,0FAA0F;wBAC1F,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,IAAI,QAAQ,CAAC,eAAe,CAAC,CAAC;oBAC3G,CAAC,CAAC;yBACD,OAAO,CAAC,UAAC,EAAgC;4BAA/B,gBAAQ,EAAE,aAAK,EAAE,qBAAa;wBAErC,6FAA6F;wBAC7F,IAAM,wBAAwB,GAAG,KAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;wBACpF,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;4BAC3B,EAAE,CAAC,CAAC,wBAAwB,CAAC,aAAa,KAAK,KAAK,CAAC;gCACjD,wBAAwB,CAAC,aAAa,GAAG,QAAQ,CAAC,eAAe,KAAK,IAAI,CAAC;4BAC/E,EAAE,CAAC,CAAC,wBAAwB,CAAC,YAAY,KAAK,KAAK,CAAC;gCAChD,wBAAwB,CAAC,YAAY,GAAG,QAAQ,CAAC,eAAe,KAAK,IAAI,CAAC;4BAC9E,MAAM,CAAC;wBACX,CAAC;wBAED,2CAA2C;wBAC3C,yFAAyF;wBACzF,IAAM,YAAY,GAAG,IAAI,iBAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;wBACvD,YAAY,CAAC,aAAa,GAAG,QAAQ,CAAC,eAAe,KAAK,IAAI,CAAC;wBAC/D,YAAY,CAAC,YAAY,GAAG,QAAQ,CAAC,eAAe,KAAK,IAAI,CAAC;wBAC9D,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBAExC,iEAAiE;wBACjE,KAAI,CAAC,0CAA0C,CAAC,YAAY,CAAC,CAAC;oBAClE,CAAC,CAAC,CAAC;gBACX,CAAC;gBAED;;mBAEG;gBACO,0DAAiC,GAA3C,UAA4C,OAAgB;oBAA5D,iBAyBC;oBAxBG,OAAO,CAAC,QAAQ;yBACX,+BAA+B,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC;yBAC3E,MAAM,CAAC,UAAC,EAAgC;4BAA/B,gBAAQ,EAAE,aAAK,EAAE,qBAAa;wBAEpC,gFAAgF;wBAChF,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,QAAQ,CAAC,eAAe,CAAC;oBAC7E,CAAC,CAAC;yBACD,OAAO,CAAC,UAAC,EAAgC;4BAA/B,gBAAQ,EAAE,aAAK,EAAE,qBAAa;wBAErC,6FAA6F;wBAC7F,IAAM,wBAAwB,GAAG,KAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;wBACpF,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;4BAC3B,wBAAwB,CAAC,aAAa,GAAG,IAAI,CAAC;4BAC9C,MAAM,CAAC;wBACX,CAAC;wBAED,qFAAqF;wBACrF,IAAM,YAAY,GAAG,IAAI,iBAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;wBACvD,YAAY,CAAC,aAAa,GAAG,IAAI,CAAC;wBAClC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBAExC,4FAA4F;wBAC5F,KAAI,CAAC,iCAAiC,CAAC,YAAY,CAAC,CAAC;oBACzD,CAAC,CAAC,CAAC;gBACX,CAAC;gBAED;;;;;mBAKG;gBACa,4DAAmC,GAAnD;;;4BAIU,QAAQ;;;;+CAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC,GAAG,CAAC,UAAM,YAAY;;4CAGzD,MAAM,EAkBR,QAAQ;;;;6DAlBG,YAAY,CAAC,QAAQ;yDAC/B,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,iBAAiB,EAA1B,CAA0B,CAAC,CAAC,gEAAgE;yDAC9G,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAM,CAAC,EAApD,CAAoD,CAAC,CAAC,yBAAyB;yDAC9F,MAAM,CAAC,UAAA,OAAO;wDACX,EAAE,CAAC,CAAC,OAAO,YAAY,MAAM,CAAC;4DAC1B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAA1E,CAA0E,CAAC,CAAC;wDAEzH,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,EAAE,CAAC;oDACvE,CAAC,CAAC;oDAEN,+GAA+G;oDAC/G,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;wDACf,MAAM,gBAAC;yDAOP,CAAA,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,yBAAW,CAAA,EAA7C,wBAA6C;oDAClC,qBAAM,IAAI,CAAC,UAAU;6DAC3B,kBAAkB,CAAgB,YAAY,CAAC,MAAM,CAAC;6DACtD,SAAS,CAAC,MAAM,CAAC,EAAA;;oDAFtB,QAAQ,GAAG,SAEW,CAAC;;wDAGZ,qBAAM,IAAI,CAAC,UAAU;yDAC3B,aAAa,CAAgB,YAAY,CAAC,MAAM,CAAC;yDACjD,kBAAkB,CAAC,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,CAAC;yDAC9D,aAAa,CAAC,MAAM,CAAC;yDACrB,YAAY,CAAC,oBAAoB,CAAC;yDAClC,OAAO,EAAE,EAAA;;oDALd,QAAQ,GAAG,SAKG,CAAC;;;oDAGnB,mEAAmE;oDACnE,mEAAmE;oDACnE,QAAQ,CAAC,OAAO,CAAC,UAAA,MAAM;wDACnB,IAAM,OAAO,GAAG,KAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;wDACnE,EAAE,CAAC,CAAC,OAAO,CAAC;4DACR,OAAO,CAAC,cAAc,GAAG,MAAM,CAAC;oDACxC,CAAC,CAAC,CAAC;;;;yCAEN,CAAC;oCAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED;;;;;;;;;;;;;;mBAcG;gBACa,4EAAmD,GAAnE,UAAoE,OAAgB;;;4BAG1E,QAAQ;;;;+CAAG,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,UAAM,QAAQ;;4CACpD,aAAa,EACb,OAAO,EAqCH,4BAA0B,EAO5B,sBAAsB,EAEhB,YAAY,EAWlB,mCAAmC,kBA8DnC,sBAAsB,EAEhB,YAAY,EAMhB,4BAA0B,EAO5B,mCAAmC,kBAsC7B,uBAAuB,EAwC7B,cAAY,EAUZ,kBAAgB,EAGd,WAAW,EACX,YAAY,EAKR,0BAA0B,EAmB1B,0BAA0B,EAmB1B,0BAA0B,EA8B1B,UAAQ,EA2CZ,UAAQ;;;;oEAvVI,QAAQ,CAAC,qBAAqB;8DACpC,aAAa,CAAC,KAAK,CAAC,IAAI;oDAExC,oHAAoH;oDACpH,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC;wDAAC,MAAM,gBAAC;yDAKnC,CAAA,QAAQ,CAAC,eAAe,IAAI,QAAQ,CAAC,WAAW,CAAA,EAAhD,wBAAgD;oDAEhD,yCAAyC;oDACzC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC;wDAAC,MAAM,gBAAC;mFA0BH,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC;oDAE3F,uFAAuF;oDACvF,EAAE,CAAC,CAAC,4BAA0B,KAAK,IAAI,IAAI,4BAA0B,KAAK,SAAS,CAAC;wDAChF,MAAM,gBAAC;6EAGuB,SAAS;oDAC3C,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;uEACC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC;wDAC5D,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,CAAC;4DAAC,sBAAsB,GAAG,IAAI,CAAC;wDACzD,EAAE,CAAC,CAAC,YAAY,CAAC;4DAAC,sBAAsB,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;wDAC3G,EAAE,CAAC,CAAC,sBAAsB,KAAK,SAAS,CAAC;4DAAC,MAAM,gBAAC,CAAC,4BAA4B;oDAClF,CAAC;oDAED,uFAAuF;oDACvF,EAAE,CAAC,CAAC,sBAAsB,KAAK,IAAI,IAAI,sBAAsB,KAAK,4BAA0B,CAAC;wDACzF,MAAM,gBAAC;0FAG+B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,cAAc;wDAE9E,0FAA0F;wDAC1F,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,iBAAiB,IAAI,cAAc,CAAC,YAAY,KAAK,aAAa,CAAC,MAAM,CAAC;4DAC1F,MAAM,CAAC,KAAK,CAAC;wDAEjB,4EAA4E;wDAC5E,4DAA4D;wDAC5D,iEAAiE;wDACjE,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,KAAK,4BAA0B,CAAC;oDAC3H,CAAC,CAAC;yDAGE,CAAC,mCAAmC,EAApC,wBAAoC;oDAGb,qBAAM,IAAI,CAAC,UAAU;6DACvC,aAAa,CAAgB,aAAa,CAAC,MAAM,CAAC;6DAClD,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,4FAA4F;6DAClJ,KAAK,CAAC,OAAO,GAAG,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,GAAG,MAAM,CAAC;6DACjF,YAAY,CAAC,IAAI,EAAE,4BAA0B,CAAC,CAAC,0CAA0C;6DACzF,YAAY,CAAC,oBAAoB,CAAC;6DAClC,MAAM,EAAE,EAAA;;qEANU,SAMV;oDAEb,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;wDACjB,mCAAmC,GAAG,IAAI,iBAAO,CAAC,aAAa,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;wDAC5F,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;oDACnE,CAAC;;;yDAGD,mCAAmC,EAAnC,wBAAmC;oDAEnC,gGAAgG;oDAChG,8CAA8C;oDAC9C,EAAE,CAAC,CAAC,mCAAmC,CAAC,aAAa,CAAC;wDAClD,MAAM,gBAAC;oDAEX,mCAAmC,CAAC,aAAa,GAAG,IAAI,CAAC;oDACzD,qBAAM,IAAI,CAAC,mDAAmD,CAAC,mCAAmC,CAAC,EAAA;;oDAAnG,SAAmG,CAAC;;;yDAMxG,QAAQ,CAAC,kBAAkB,EAA3B,wBAA2B;oDAE3B,yCAAyC;oDACzC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC;wDAAC,MAAM,gBAAC,CAAC,WAAW;6EAehB,SAAS;oDAC3C,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;uEACzB,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC;wDAC5D,EAAE,CAAC,CAAC,YAAY,CAAC;4DAAC,sBAAsB,GAAG,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;wDAC1G,EAAE,CAAC,CAAC,sBAAsB,KAAK,SAAS,CAAC;4DAAC,MAAM,gBAAC,CAAC,4BAA4B;oDAClF,CAAC;mFAGkC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC;oDAE5H,4FAA4F;oDAC5F,EAAE,CAAC,CAAC,4BAA0B,KAAK,IAAI,IAAI,4BAA0B,KAAK,SAAS,CAAC;wDAChF,MAAM,gBAAC;0FAG+B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,cAAc;wDAE9E,uFAAuF;wDACvF,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,iBAAiB,IAAI,cAAc,CAAC,YAAY,KAAK,aAAa,CAAC,MAAM,CAAC;4DAC1F,MAAM,CAAC,KAAK,CAAC;wDAEjB,yEAAyE;wDACzE,yDAAyD;wDACzD,iEAAiE;wDACjE,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,4BAA0B,CAAC;oDAC1H,CAAC,CAAC;yDAGE,CAAC,mCAAmC,EAApC,wBAAoC;oDAGb,qBAAM,IAAI,CAAC,UAAU;6DACvC,aAAa,CAAgB,aAAa,CAAC,MAAM,CAAC;6DAClD,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,4FAA4F;6DAClJ,KAAK,CAAC,OAAO,GAAG,GAAG,GAAG,QAAQ,CAAC,mBAAmB,GAAG,MAAM,CAAC;6DAC5D,YAAY,CAAC,IAAI,EAAE,4BAA0B,CAAC,CAAC,0EAA0E;6DACzH,YAAY,CAAC,oBAAoB,CAAC;6DAClC,MAAM,EAAE,EAAA;;qEANU,SAMV;oDAEb,qGAAqG;oDACrG,uEAAuE;oDACvE,4FAA4F;oDAC5F,mCAAmC,GAAG,IAAI,iBAAO,CAAC,aAAa,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;oDAC5F,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;;;yDAI/D,CAAA,mCAAmC,IAAI,mCAAmC,CAAC,iBAAiB,CAAA,EAA5F,wBAA4F;8EAM5D,mCAAmC,CAAC,cAAc,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC;oDACpI,EAAE,CAAC,CAAC,sBAAsB,IAAI,sBAAsB,KAAK,uBAAuB,CAAC;wDAC7E,MAAM,gBAAC;oDAEX,gGAAgG;oDAChG,8CAA8C;oDAC9C,EAAE,CAAC,CAAC,mCAAmC,CAAC,aAAa,CAAC;wDAClD,MAAM,gBAAC;oDAEX,mCAAmC,CAAC,aAAa,GAAG,IAAI,CAAC;oDACzD,qBAAM,IAAI,CAAC,mDAAmD,CAAC,mCAAmC,CAAC,EAAA;;oDAAnG,SAAmG,CAAC;;;yDAMxG,CAAA,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,YAAY,CAAA,EAA7C,yBAA6C;qEAwBrB,SAAS;oDACjC,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;wDACpB,cAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;wDACvD,EAAE,CAAC,CAAC,cAAY,KAAK,SAAS,CAAC;4DAAC,MAAM,gBAAC,CAAC,4BAA4B;oDACxE,CAAC;yEAMuC,EAAE;kEAGtB,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,EAA7C,CAA6C;mEAC/D,UAAC,MAAc,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAA/C,CAA+C;yDAEpF,QAAQ,CAAC,iBAAiB,EAA1B,yBAA0B;iFAGS,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC,YAAY,CAAC;oDAE3G,mEAAmE;oDACnE,iFAAiF;oDACjF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC;wDAAC,MAAM,gBAAC;oDAEnB,qBAAM,IAAI,CAAC,UAAU;6DACnC,aAAa,CAAgB,aAAa,CAAC,MAAM,CAAC;6DAClD,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,4FAA4F;6DAClJ,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAAE,2BAA2B,EAC9E,WAAW,CAAC,2BAA2B,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,qBAAqB,CAAC,GAAG,GAAG,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC,QAAQ,CAAC;4DAC9M,OAAO,GAAG,WAAW,CAAC,2BAA2B,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC;6DACvH,YAAY,CAAC,IAAI,EAAE,0BAA0B,CAAC;6DAC9C,YAAY,CAAC,oBAAoB,CAAC;6DAClC,OAAO,EAAE,EAAA;;oDARd,kBAAgB,GAAG,SAQL,CAAC;;;yDAER,QAAQ,CAAC,oBAAoB,EAA7B,yBAA6B;iFAGD,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,uBAAuB,CAAC,YAAY,CAAC;oDAElI,mEAAmE;oDACnE,iFAAiF;oDACjF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC;wDAAC,MAAM,gBAAC;oDAEnB,qBAAM,IAAI,CAAC,UAAU;6DACnC,aAAa,CAAgB,aAAa,CAAC,MAAM,CAAC;6DAClD,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,4FAA4F;6DAClJ,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,EAAE,2BAA2B,EAC9E,WAAW,CAAC,2BAA2B,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,GAAG,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC;4DAChM,OAAO,GAAG,WAAW,CAAC,2BAA2B,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,qBAAqB,CAAC,GAAG,MAAM,CAAC;6DAC9I,YAAY,CAAC,IAAI,EAAE,0BAA0B,CAAC;6DAC9C,YAAY,CAAC,oBAAoB,CAAC;6DAClC,OAAO,EAAE,EAAA;;oDARd,kBAAgB,GAAG,SAQL,CAAC;;;iFAKoB,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC;oDAMzG,qBAAM,IAAI,CAAC,UAAU;6DACnC,aAAa,CAAgB,aAAa,CAAC,MAAM,CAAC;6DAClD,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,4FAA4F;6DAClJ,KAAK,CAAC,OAAO,GAAG,GAAG,GAAG,QAAQ,CAAC,mBAAmB,GAAG,MAAM,CAAC;6DAC5D,YAAY,CAAC,IAAI,EAAE,0BAA0B,CAAC;6DAC9C,YAAY,CAAC,oBAAoB,CAAC;6DAClC,OAAO,EAAE,EAAA;;oDAVd,4EAA4E;oDAC5E,iFAAiF;oDACjF,0EAA0E;oDAE1E,kBAAgB,GAAG,SAML,CAAC;;;oDAGnB,6DAA6D;oDAC7D,kBAAgB,CAAC,OAAO,CAAC,UAAA,cAAc;wDACnC,IAAM,gBAAgB,GAAG,KAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;wDACrF,EAAE,CAAC,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC,CAAC;4DAC1D,gBAAgB,CAAC,cAAc,GAAG,cAAc,CAAC;wDAErD,CAAC;wDAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;4DAC3B,IAAM,SAAO,GAAG,IAAI,iBAAO,CAAC,aAAa,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;4DACtE,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAO,CAAC,CAAC;wDACvC,CAAC;oDACL,CAAC,CAAC,CAAC;yDAIC,CAAA,QAAQ,CAAC,WAAW,IAAI,cAAY,CAAA,EAApC,yBAAoC;iEAClB,cAAgC,CAAC,GAAG,CAAC,UAAM,YAAY;4DAG/D,8BAA8B,EAU5B,aAAa,EAEP,EAAE;;;;qGAZuB,kBAAgB,CAAC,IAAI,CAAC,UAAA,cAAc;wEACvE,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;oEACvE,CAAC,CAAC;yEAKE,CAAC,8BAA8B,EAA/B,wBAA+B;oFAGX,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,MAAM,EAAE,YAAY,CAAC;yEACjF,CAAC,aAAa,EAAd,wBAAc;yEACH,aAAa,CAAC,mBAAmB,CAAC,YAAY,CAAC;yEACtD,EAAE,EAAF,wBAAE;oEACqB,qBAAM,IAAI,CAAC,UAAU;6EACvC,aAAa,CAAgB,aAAa,CAAC,MAAM,CAAC;6EAClD,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,4FAA4F;6EAClJ,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;6EACnB,YAAY,CAAC,oBAAoB,CAAC;6EAClC,MAAM,EAAE,EAAA;;qFALU,SAKV;oEAEb,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;wEACjB,aAAa,GAAG,IAAI,iBAAO,CAAC,aAAa,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,4FAA4F;wEACnK,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oEAC7C,CAAC;;;oEAIT,EAAE,CAAC,CAAC,aAAa,CAAC;wEACd,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC;4EAC/B,QAAQ,EAAE,QAAQ,CAAC,eAAe;4EAClC,KAAK,EAAE,OAAO,CAAC,MAAM;yEACxB,CAAC,CAAC;;;;;yDAEd,CAAC;oDAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,UAAQ,CAAC,EAAA;;oDAA3B,SAA2B,CAAC;;;iEAIf,kBAAgB,CAAC,GAAG,CAAC,UAAM,cAAc;4DAGlD,oBAAoB,EAQpB,YAAY;;;;2FARW,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,MAAM,EAAE,cAAc,CAAC;oEAC9F,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC;wEAAC,MAAM,gBAAC,CAAC,wDAAwD;oEAE3F,gGAAgG;oEAChG,oDAAoD;oEACpD,EAAE,CAAC,CAAC,oBAAoB,CAAC,aAAa,CAAC;wEAAC,MAAM,gBAAC,CAAE,wDAAwD;mFAGrF,CAAC,cAAY,IAAI,EAAE,CAAqB,CAAC,IAAI,CAAC,UAAA,gBAAgB;wEAC9E,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,oBAAqB,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;oEACjG,CAAC,CAAC;yEAOE,CAAA,cAAY,KAAK,IAAI,IAAI,CAAC,YAAY,CAAA,EAAtC,wBAAsC;yEAGlC,QAAQ,CAAC,eAAe,EAAxB,wBAAwB;oEACxB,oBAAoB,CAAC,aAAa,GAAG,IAAI,CAAC;oEAE1C,kEAAkE;oEAClE,qBAAM,IAAI,CAAC,mDAAmD,CAAC,oBAAoB,CAAC,EAAA;;oEADpF,kEAAkE;oEAClE,SAAoF,CAAC;;;oEAKlF,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;wEAC1D,oBAAoB,CAAC,eAAe,CAAC,IAAI,CAAC;4EACtC,QAAQ,EAAE,QAAQ,CAAC,eAAe;4EAClC,KAAK,EAAE,IAAI;yEACd,CAAC,CAAC,CAAC,sCAAsC;oEAC9C,CAAC;;;;;yDAIR,CAAC;oDAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,UAAQ,CAAC,EAAA;;oDAA3B,SAA2B,CAAC;;;;;yCAEnC,CAAC;oCAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED;;;;mBAIG;gBACW,gDAAuB,GAArC,UAAsC,OAA6C;;;4BAEzE,QAAQ;;;;+CAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,SAAS,EAAjB,CAAiB,CAAC,CAAC,GAAG,CAAC,UAAA,OAAO;wCAClF,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAM,QAAQ;gDAO1D,kBAAkB,mCAqBtB,YAAY,EASd,6BAA6B,EAIvB,kBAAkB,EAMtB,+BAA+B,EAS/B,wBAAwB,EAOxB,mBAAmB;;;;6DA5DrB,CAAA,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,MAAM,CAAA,EAAvC,wBAAuC;6EAIZ,IAAI,uCAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC;wDACxE,qBAAM,kBAAkB;iEACzD,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,cAAc,CAAC,EAAA;;0FADhB,SACgB;wDAEtD,6FAA6F;wDAC7F,EAAE,CAAC,CAAC,+BAA6B,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4DAC3C,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC;gEACzB,QAAQ,EAAE,QAAQ;gEAClB,mBAAmB,EAAE,+BAA6B;6DACrD,CAAC,CAAC;wDACP,CAAC;wDAED,sBAAO;;wDAGX,gGAAgG;wDAChG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC;4DACnB,MAAM,gBAAC;uEAIU,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC;wDAC5D,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,YAAY,KAAK,CAAC,CAAC;4DACjC,MAAM,gBAAC;wFAOgC,EAAE;6DAGzC,OAAO,CAAC,iBAAiB,EAAzB,wBAAyB;6EACE,IAAI,uCAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC;wDAC9E,qBAAM,kBAAkB;iEACnD,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,cAAc,CAAC,EAAA;;wDADtD,6BAA6B,GAAG,SACsB,CAAC;;;0FAInB,YAAY;6DAC/C,GAAG,CAAC,UAAA,gBAAgB;4DACjB,MAAM,CAAC,QAAQ,CAAC,iBAAiB;kEAC3B,gBAAgB,CAAC,QAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC,YAAY,CAAC;kEACzE,gBAAgB,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;wDAC7F,CAAC,CAAC;6DACD,MAAM,CAAC,UAAA,gBAAgB,IAAI,OAAA,gBAAgB,KAAK,SAAS,IAAI,gBAAgB,KAAK,IAAI,EAA3D,CAA2D,CAAC;mFAG3D,6BAA6B,CAAC,MAAM,CAAC,UAAA,eAAe;4DACjF,MAAM,CAAC,CAAC,+BAA+B,CAAC,IAAI,CAAC,UAAA,iBAAiB;gEAC1D,MAAM,CAAC,iBAAiB,KAAK,eAAe,CAAC;4DACjD,CAAC,CAAC,CAAC;wDACP,CAAC,CAAC;8EAG0B,YAAY,CAAC,MAAM,CAAC,UAAA,eAAe;4DAC3D,IAAM,aAAa,GAAG,QAAQ,CAAC,iBAAiB;kEAC1C,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC,YAAY,CAAC;kEACxE,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4DACxF,MAAM,CAAC,CAAC,6BAA6B,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,aAAa,KAAK,UAAU,EAA5B,CAA4B,CAAC,CAAC;wDAC3F,CAAC,CAAC;wDAEF,6FAA6F;wDAC7F,EAAE,CAAC,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;4DACnD,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC;gEACzB,QAAQ,EAAE,QAAQ;gEAClB,gBAAgB,EAAE,mBAAmB;6DACxC,CAAC,CAAC;wDACP,CAAC;wDAED,6FAA6F;wDAC7F,EAAE,CAAC,CAAC,wBAAwB,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;4DACxD,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC;gEACzB,QAAQ,EAAE,QAAQ;gEAClB,mBAAmB,EAAE,wBAAwB;6DAChD,CAAC,CAAC;wDACP,CAAC;;;;6CACJ,CAAC,CAAC;wCAEH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oCACjC,CAAC,CAAC;oCAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAA;;oCAA3B,SAA2B,CAAC;;;;;iBAC/B;gBAED;;;mBAGG;gBACO,yCAAgB,GAA1B,UAA2B,YAA6B,EAAE,MAAqB;oBAC3E,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,OAAO;wBACpC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC;4BACnB,MAAM,CAAC,KAAK,CAAC;wBAEjB,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,MAAM,CAAC;4BAC1B,MAAM,CAAC,IAAI,CAAC;wBAEhB,MAAM,CAAC,OAAO,CAAC,YAAY,KAAK,YAAY,IAAI,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;oBAC7G,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;;mBAGG;gBACO,iDAAwB,GAAlC,UAAmC,YAA6B,EAAE,MAAqB;oBACnF,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,OAAO;wBACpC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC;4BAC3B,MAAM,CAAC,KAAK,CAAC;wBAEjB,MAAM,CAAC,OAAO,CAAC,YAAY,KAAK,YAAY,IAAI,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;oBACrH,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACO,6CAAoB,GAA9B;oBACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,cAAc;wBACtD,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,MAAM,KAAK,cAAc,CAAC,YAAY,EAA5C,CAA4C,CAAC,CAAC;wBAC/E,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACT,KAAK,GAAG,EAAE,MAAM,EAAE,cAAc,CAAC,YAAY,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;4BAC9D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACvB,CAAC;wBACD,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;wBACpC,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC,EAAE,EAAwD,CAAC,CAAC;gBACjE,CAAC;gBAEL,qBAAC;YAAD,CA1wBA,AA0wBC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCvzBF;;eAEG;YACH;gBAAA;gBAybA,CAAC;gBA3ZG,sBAAI,8BAAM;oBATV,4EAA4E;oBAC5E,iBAAiB;oBACjB,4EAA4E;oBAE5E;;;;uBAIG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAChC,CAAC;;;mBAAA;gBAED;;;mBAGG;gBACH,0BAAK,GAAL,UAAM,MAAc;oBAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACvC,CAAC;gBAED;;mBAEG;gBACH,0BAAK,GAAL,UAAM,MAAc;oBAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;gBACrD,CAAC;gBAED;;mBAEG;gBACH,uCAAkB,GAAlB,UAAmB,KAAa,EAAE,mBAAyC;oBACvE,MAAM,CAAC,IAAI,2BAAY,CAAC,IAAI,CAAC,UAAU,EAAE,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,CAAC;yBACpF,MAAM,CAAC,KAAK,CAAC;yBACb,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBAC3C,CAAC;gBAmBD;;;mBAGG;gBACH,2BAAM,GAAN,UAAO,iCAA6E;oBAApF,iBASC;oBAPG,EAAE,CAAC,CAAC,CAAC,iCAAiC,CAAC;wBACnC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;oBAElC,EAAE,CAAC,CAAC,iCAAiC,YAAY,KAAK,CAAC;wBACnD,MAAM,CAAC,iCAAiC,CAAC,GAAG,CAAC,UAAA,eAAe,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,eAAe,CAAC,EAA5B,CAA4B,CAAC,CAAC;oBAElG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,iCAAiC,CAAC,CAAC;gBACjF,CAAC;gBAED;;mBAEG;gBACH,0BAAK,GAAL,UAAM,eAAuB;oBAA7B,iBAIC;oBAJ8B,qBAAqC;yBAArC,UAAqC,EAArC,qBAAqC,EAArC,IAAqC;wBAArC,oCAAqC;;oBAChE,IAAM,8BAA8B,GAAG,IAAI,qEAAiC,EAAE,CAAC;oBAC/E,WAAW,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,8BAA8B,CAAC,SAAS,CAAC,eAAe,EAAE,MAAM,EAAE,KAAI,CAAC,QAAQ,CAAC,EAAhF,CAAgF,CAAC,CAAC;oBAChH,MAAM,CAAC,eAAe,CAAC;gBAC3B,CAAC;gBAED;;;;;;;;mBAQG;gBACG,4BAAO,GAAb,UAAc,UAA+B;;4BAEnC,sCAAsC;;;;6EAAG,IAAI,+EAAsC,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;oCAC9F,qBAAM,sCAAsC,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAA;;wDAAjF,SAAiF;oCAC3G,EAAE,CAAC,CAAC,iBAAiB,CAAC;wCAClB,MAAM,gBAAC,IAAI,CAAC,KAAK,CAAC,iBAA2B,EAAE,UAAU,CAAC,EAAC;oCAE/D,sBAAO,SAAS,EAAC;;;;iBACpB;gBAcD;;mBAEG;gBACG,4BAAO,GAAb,UAAc,gBAAiC,EAAE,OAAwB;;;4BAU/D,mBAAmB,EAEf,wBAAwB,EAGxB,oBAAoB,EAGpB,QAAQ;;;;oCAhBlB,mGAAmG;oCACnG,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;wCAClB,MAAM,gBAAC,gBAAgB,EAAC;oCAE5B,qEAAqE;oCACrE,EAAE,CAAC,CAAC,gBAAgB,YAAY,KAAK,CAAC;wCAClC,MAAM,gBAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAApB,CAAoB,CAAC,CAAC,EAAC;0DAEjD,IAAI,CAAC,mBAAmB,IAAI,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC;;;;+DAExE,IAAI,CAAC,UAAU,CAAC,+CAA+C,CAAC,mBAAmB,CAAC;2DAGxF,IAAI,+BAAc,CAAC,IAAI,CAAC,UAAU,EAAE,mBAAmB,CAAC;oCACrF,qBAAM,oBAAoB,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAA;;oCAAnE,SAAmE,CAAC;+CAEnD,IAAI,mDAAwB,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,EAAE,mBAAmB,CAAC;oCAC7G,qBAAM,QAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC,eAAe,CAAC,EAAA;;oCAA5D,SAA4D,CAAC;oCAE7D,sBAAO,gBAAgB,EAAC;;yCAGpB,CAAC,IAAI,CAAC,mBAAmB,EAAzB,wBAAyB;oCACzB,qBAAM,mBAAmB,CAAC,aAAa,EAAE,EAAA;;oCAAzC,SAAyC,CAAC;;;;;;;iBAErD;gBAYD;;mBAEG;gBACG,2BAAM,GAAZ,UAAa,uBAA+D,EAAE,aAAkC,EAAE,OAAwB;;;;;wCACvH,qBAAM,IAAI,CAAC,OAAO,CAAC,uBAA8B,CAAC,EAAA;;6CAAlD,SAAkD;oCACjE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wCACR,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;oCAExE,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;oCACrC,qBAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;oCAAnC,SAAmC,CAAC;;;;;iBACvC;gBAED;;mBAEG;gBACG,+BAAU,GAAhB,UAAiB,EAAO,EAAE,aAAkC,EAAE,OAAwB;;;;;wCACnE,qBAAM,IAAI,CAAC,WAAW,CAAC,EAAS,CAAC,EAAA;;6CAAjC,SAAiC;oCAChD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wCACR,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;oCAE5D,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;oCACrC,qBAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;oCAAnC,SAAmC,CAAC;;;;;iBACvC;gBAYD;;mBAEG;gBACG,2BAAM,GAAZ,UAAa,gBAAiC,EAAE,OAAuB;;;4BAU7D,mBAAmB,EAEf,wBAAwB,EAExB,oBAAoB,EAGpB,QAAQ;;;;oCAflB,mGAAmG;oCACnG,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;wCAClB,MAAM,gBAAC,gBAAgB,EAAC;oCAE5B,qEAAqE;oCACrE,EAAE,CAAC,CAAC,gBAAgB,YAAY,KAAK,CAAC;wCAClC,MAAM,gBAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAnB,CAAmB,CAAC,CAAC,EAAC;0DAEhD,IAAI,CAAC,mBAAmB,IAAI,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC;;;;+DAExE,IAAI,CAAC,UAAU,CAAC,+CAA+C,CAAC,mBAAmB,CAAC;2DAExF,IAAI,+BAAc,CAAC,IAAI,CAAC,UAAU,EAAE,mBAAmB,CAAC;oCACrF,qBAAM,oBAAoB,CAAC,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAA;;oCAAlE,SAAkE,CAAC;+CAElD,IAAI,mDAAwB,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,EAAE,mBAAmB,CAAC;oCAC7G,qBAAM,QAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC,eAAe,CAAC,EAAA;;oCAA5D,SAA4D,CAAC;oCAE7D,sBAAO,gBAAgB,EAAC;;yCAGpB,CAAC,IAAI,CAAC,mBAAmB,EAAzB,wBAAyB;oCACzB,qBAAM,mBAAmB,CAAC,aAAa,EAAE,EAAA;;oCAAzC,SAAyC,CAAC;;;;;;;iBAErD;gBAED;;mBAEG;gBACG,+BAAU,GAAhB,UAAiB,EAAO,EAAE,OAAuB;;;;;wCAC9B,qBAAM,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,EAAA;;6CAA1B,SAA0B;oCACzC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wCACR,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;oCAElE,qBAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;oCAAlC,SAAkC,CAAC;;;;;iBACtC;gBAYD;;mBAEG;gBACH,0BAAK,GAAL,UAAM,mBAAiE;oBACnE,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,mCAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAClI,MAAM,CAAC,mCAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAC/G,CAAC;gBAYD;;mBAEG;gBACH,yBAAI,GAAJ,UAAK,mBAAiE;oBAClE,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,mCAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAClI,MAAM,CAAC,mCAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,OAAO,EAAE,CAAC;gBAC9G,CAAC;gBAgBD;;;;mBAIG;gBACH,iCAAY,GAAZ,UAAa,mBAAiE;oBAC1E,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,mCAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAClI,MAAM,CAAC,mCAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,eAAe,EAAE,CAAC;gBACtH,CAAC;gBAcD;;;mBAGG;gBACH,8BAAS,GAAT,UAAU,GAAU,EAAE,mBAAiE;oBACnF,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,mCAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAClI,MAAM,CAAC,mCAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC;yBAC1F,aAAa,CAAC,GAAG,CAAC;yBAClB,OAAO,EAAE,CAAC;gBACnB,CAAC;gBAYD;;mBAEG;gBACH,4BAAO,GAAP,UAAQ,mBAAgE;oBACpE,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,mCAAgB,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACjI,MAAM,CAAC,mCAAgB,CAAC,6CAA6C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,MAAM,EAAE,CAAC;gBAC5G,CAAC;gBAcD;;;mBAGG;gBACH,gCAAW,GAAX,UAAY,EAAO,EAAE,mBAAgE;oBACjF,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,mCAAgB,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACjI,MAAM,CAAC,mCAAgB,CAAC,6CAA6C,CAAC,EAAE,EAAE,mBAAmB,CAAC;yBACzF,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;yBACnB,MAAM,EAAE,CAAC;gBAClB,CAAC;gBAED;;;mBAGG;gBACG,0BAAK,GAAX,UAAY,KAAa,EAAE,UAAkB;;4BACnC,mBAAmB;;;;0DAAG,IAAI,CAAC,mBAAmB,IAAI,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;oCACnF,qBAAM,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAnC,SAAmC;;;;oCAE5C,qBAAM,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,EAAA;wCAAjD,sBAAO,SAA0C,EAAC,CAAC,oDAAoD;wCAGvG,qBAAM,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;;;;;;iBAEtD;gBAED;;;;;;;;;;mBAUG;gBACG,gCAAW,GAAjB,UAAkB,gBAAsE;;4BAC9E,mBAAmB,eAKnB,qBAAqB;;;;0DALC,IAAI,CAAC,mBAAmB,IAAI,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC;oCACzF,qBAAM,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAnC,SAAmC;4DAIzB,IAAI,UAAU,EAAO;oCAClD,qBAA6B,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;oCAC9D,qBAA6B,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;oCAC1D,qBAA6B,CAAC,qBAAqB,CAAC,GAAG,mBAAmB,CAAC;;;;oCAIxE,qBAAM,WAAW,CAAC,gBAAgB,EAAE,EAAA;;oCAApC,SAAoC,CAAC;oCACtB,qBAAM,gBAAgB,CAAC,qBAAqB,CAAC,EAAA;;6CAA7C,SAA6C;oCAC5D,qBAAM,WAAW,CAAC,iBAAiB,EAAE,EAAA;;oCAArC,SAAqC,CAAC;oCACtC,sBAAO,MAAM,EAAC;;;oCAGd,qBAAM,WAAW,CAAC,mBAAmB,EAAE,EAAA;;oCAAvC,SAAuC,CAAC;oCACxC,MAAM,KAAG,CAAC;wCAGV,qBAAM,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;yCAC3C,CAAC,IAAI,CAAC,mBAAmB,EAAzB,yBAAyB;oCACzB,qBAAM,mBAAmB,CAAC,aAAa,EAAE,EAAA;;oCAAzC,SAAyC,CAAC;;;;;;;iBAErD;gBAED;;mBAEG;gBACG,0BAAK,GAAX;;4BACU,mBAAmB;;;;0DAAG,IAAI,CAAC,mBAAmB,IAAI,IAAI,yCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;oCACnF,qBAAM,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAnC,SAAmC;;;;oCAE5C,qBAAM,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;wCAA3D,sBAAO,SAAoD,EAAC,CAAC,oDAAoD;wCAGjH,qBAAM,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;;;;;;iBAEtD;gBAEL,iBAAC;YAAD,CAzbA,AAybC,IAAA;;QAAA,CAAC;;;;;;;;;QCtaD,CAAC;;;;;;;;;QCTD,CAAC;;;;;;;;;QCXD,CAAC;;;;;;;;;QCgCD,CAAC;;;;;;;;;;YClDF;;eAEG;YACH;gBAA6C,2CAAK;gBAG9C,iCAAY,cAAsB,EAAE,WAA4B;oBAAhE,YACI,iBAAO,SAKV;oBARD,UAAI,GAAG,yBAAyB,CAAC;oBAI7B,IAAM,UAAU,GAAG,OAAO,WAAW,KAAK,UAAU,IAAW,WAAY,CAAC,IAAI,GAAU,WAAY,CAAC,IAAI,GAAG,WAAW,CAAC;oBAC1H,KAAI,CAAC,OAAO,GAAG,yBAAsB,UAAU,+DAA2D;yBACtG,eAAY,cAAc,mBAAe,CAAA,CAAC;oBAC9C,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,8BAAC;YAAD,CAXA,AAWC,CAX4C,KAAK,GAWjD;;QAAA,CAAC;;;;;;;;;;YCTF;;eAEG;YACH;gBAAA;gBAQA,CAAC;gBAAD,yBAAC;YAAD,CARA,AAQC,IAAA;YAPU,6BAAU,GAAsB,YAAY,CAAC;YAC7C,gCAAa,GAAsB,eAAe,CAAC;YACnD,+BAAY,GAAsB,cAAc,CAAC;YACjD,gCAAa,GAAsB,eAAe,CAAC;YACnD,+BAAY,GAAsB,cAAc,CAAC;YACjD,gCAAa,GAAsB,eAAe,CAAC;YACnD,+BAAY,GAAsB,cAAc,CAAC;;QAC3D,CAAC;;;;;;;;;QCOF,CAAC;;;;;;;;;;YCpBD;;eAEG;YACH;gBAqBI,wEAAwE;gBACxE,cAAc;gBACd,wEAAwE;gBAExE,gCAAY,IAAgC;oBACxC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBAC1B,CAAC;gBAGL,6BAAC;YAAD,CAhCA,AAgCC,IAAA;;QAAA,CAAC;;;;;;ICpCF;;OAEG;IACH,sCAA6C,WAAqB,EAAE,OAAwB;QAAxB,wBAAA,EAAA,WAAW,KAAK,EAAE,KAAK,CAAC;QAExF,yBAAyB,QAAa,EAAE,SAAqB;YACzD,EAAE,CAAC,CAAC,QAAQ,YAAY,QAAQ,CAAC,CAAC,CAAC;gBAC/B,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE7B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,YAAY,MAAM,CAAC,CAAC,CAAC;gBACpC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,EAAzC,CAAyC,CAAC,CAAC;YAEpF,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,YAAY,KAAK,CAAC,CAAC,CAAC;gBACnC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAM,IAAK,OAAA,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC,EAA7B,CAA6B,CAAC,CAAC;YAChE,CAAC;YAED,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAED,IAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,GAAG;YAC7C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,6BAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,6BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7F,CAAC,EAAE,EAAc,CAAC,CAAC;QAEnB,IAAM,IAAI,GAAG,QAAQ;aAChB,MAAM,CAAC,UAAA,IAAI;YACR,IAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAClE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,6BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,YAAY,KAAK,OAAO,CAAC;QAC/F,CAAC,CAAC;aACD,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,6BAAa,CAAC,IAAI,CAAC,6BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAnD,CAAmD,CAAC,CAAC;QAEtE,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;;IAED;;OAEG;IACH,oCAA2C,WAAqB,EAAE,MAAgB;QAAhB,uBAAA,EAAA,gBAAgB;QAE9E,IAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,GAAG;YAC7C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,6BAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,6BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7F,CAAC,EAAE,EAAc,CAAC,CAAC;QAEnB,MAAM,CAAC,QAAQ;aACV,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,6BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,MAAM,EAA1C,CAA0C,CAAC;aAC1D,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,6BAAa,CAAC,IAAI,CAAC,6BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAnD,CAAmD,CAAC,CAAC;IAC1E,CAAC;;;;;;;;;;QAAA,CAAC;;;;;;;;;;YC5CF;eACG;YACH;gBAAqD,mDAAK;gBAGtD,yCAAY,cAA8B,EAAE,QAA0B;oBAAtE,YACI,iBAAO,SAIV;oBAPD,UAAI,GAAG,iCAAiC,CAAC;oBAIrC,KAAI,CAAC,OAAO,GAAG,wBAAsB,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,gBAAa;yBACvF,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,aAAQ,QAAQ,CAAC,YAAY,gBAAa,CAAA;wBACzF,+DAA+D,CAAC;;gBACxE,CAAC;gBAEL,sCAAC;YAAD,CAVA,AAUC,CAVoD,KAAK,GAUzD;;QAAA,CAAC;;;;;;;;;;YCZF;eACG;YACH;gBAA6D,2DAAK;gBAG9D,iDAAY,cAA8B,EAAE,QAA0B;oBAAtE,YACI,iBAAO,SAIV;oBAPD,UAAI,GAAG,yCAAyC,CAAC;oBAI7C,KAAI,CAAC,OAAO,GAAG,gFAAgF;yBAC3F,UAAQ,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,aAAQ,QAAQ,CAAC,qBAAqB,CAAC,IAAI,SAAI,QAAQ,CAAC,eAAe,CAAC,YAAY,MAAG,CAAA;wBAC3I,wFAAwF,CAAC;;gBACjG,CAAC;gBAEL,8CAAC;YAAD,CAVA,AAUC,CAV4D,KAAK,GAUjE;;QAAA,CAAC;;;;;;;;;;YCZF;eACG;YACH;gBAAsD,oDAAK;gBAGvD,0CAAY,cAA8B,EAAE,QAA0B;oBAAtE,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,kCAAkC,CAAC;oBAItC,KAAI,CAAC,OAAO,GAAG,yBAAuB,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,gBAAa;wBAC3F,sEAAsE,CAAC;;gBAC/E,CAAC;gBAEL,uCAAC;YAAD,CATA,AASC,CATqD,KAAK,GAS1D;;QAAA,CAAC;;;;;;;;;;YCXF;eACG;YACH;gBAA8D,4DAAK;gBAG/D,kDAAY,cAA8B,EAAE,QAA0B;oBAAtE,YACI,iBAAO,SAIV;oBAPD,UAAI,GAAG,0CAA0C,CAAC;oBAI9C,KAAI,CAAC,OAAO,GAAG,+EAA+E;yBAC1F,UAAQ,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,aAAQ,QAAQ,CAAC,qBAAqB,CAAC,IAAI,SAAI,QAAQ,CAAC,eAAe,CAAC,YAAY,MAAG,CAAA;wBAC3I,uFAAuF,CAAC;;gBAChG,CAAC;gBAEL,+CAAC;YAAD,CAVA,AAUC,CAV6D,KAAK,GAUlE;;QAAA,CAAC;;;;;;;;;;YCZF;eACG;YACH;gBAA4C,0CAAK;gBAG7C,gCAAY,cAA8B,EAAE,QAA0B;oBAAtE,YACI,iBAAO,SASV;oBAZD,UAAI,GAAG,wBAAwB,CAAC;oBAI5B,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;wBAC1B,KAAI,CAAC,OAAO,GAAG,4CAA0C,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,UAAO;6BACrG,QAAQ,CAAC,qBAAqB,CAAC,IAAI,SAAI,QAAQ,CAAC,eAAe,CAAC,YAAY,+BAA4B,CAAA;4BAC3G,2DAA2D,CAAC;oBACpE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,KAAI,CAAC,OAAO,GAAG,8BAA4B,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,+BAA4B;4BAC/G,6CAA6C,CAAC;oBACtD,CAAC;;gBACL,CAAC;gBAEL,6BAAC;YAAD,CAfA,AAeC,CAf2C,KAAK,GAehD;;QAAA,CAAC;;;;;;;;;;YCjBF;eACG;YACH;gBAA2C,yCAAK;gBAG5C,+BAAY,cAA8B,EAAE,QAA0B;oBAAtE,YACI,iBAAO,SAUV;oBAbD,UAAI,GAAG,uBAAuB,CAAC;oBAK3B,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;wBAC1B,KAAI,CAAC,OAAO,GAAG,2CAAyC,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,UAAO;6BACpG,QAAQ,CAAC,qBAAqB,CAAC,IAAI,SAAI,QAAQ,CAAC,eAAe,CAAC,YAAY,iCAA8B,CAAA;4BAC7G,0DAA0D,CAAC;oBACnE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,KAAI,CAAC,OAAO,GAAG,6BAA2B,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,iCAA8B;4BAChH,4CAA4C,CAAC;oBACrD,CAAC;;gBACL,CAAC;gBAEL,4BAAC;YAAD,CAhBA,AAgBC,CAhB0C,KAAK,GAgB/C;;QAAA,CAAC;;;;;;;;;;YCnBF;eACG;YACH;gBAA+C,6CAAK;gBAGhD,mCAAY,cAA8B;oBAA1C,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,2BAA2B,CAAC;oBAI/B,KAAI,CAAC,OAAO,GAAG,cAAW,cAAc,CAAC,IAAI,sEAAkE;wBAC3G,iGAAiG,CAAC;;gBAC1G,CAAC;gBAEL,gCAAC;YAAD,CATA,AASC,CAT8C,KAAK,GASnD;;QAAA,CAAC;;;;;;;;;;YCbF;;eAEG;YACH;gBAA4C,0CAAK;gBAG7C,gCAAY,IAAY;oBAAxB,YACI,kBAAM,kCAAgC,IAAI,oGAAiG,CAAC,SAC/I;oBAJD,UAAI,GAAG,wBAAwB,CAAC;;gBAIhC,CAAC;gBAEL,6BAAC;YAAD,CAPA,AAOC,CAP2C,KAAK,GAOhD;;QAAA,CAAC;;;ACVF;;;;GAIG;;;;IAEH;;OAEG;IAEH;;;;;;;;;OASG;IACH,mBAAmB,KAAU,EAAE,UAAe,EAAE,MAAW;QACvD,IAAI,WAAW,GAAU,EAAE,CAAC;QAC5B,IAAI,OAAO,GAAQ,EAAE,CAAC;QACtB,MAAM,CAAC,aAAa,WAAgB;YAChC,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;YAC5B,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC9B,KAAK,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAU,IAAS;gBAC1C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACjB,GAAG,CAAC,IAAI,CAAC,CAAC;gBACd,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACvB,MAAM,IAAI,KAAK,CAAC,6BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAG,CAAC,CAAC;gBAC3E,CAAC;YACL,CAAC,CAAC,CAAC;YACH,WAAW,CAAC,GAAG,EAAE,CAAC;YAClB,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzF,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC7B,CAAC;QACL,CAAC,CAAC;IACN,CAAC;;;;8BAvCD;;;;eAIG;YAsCH;gBAAA;oBACI,UAAK,GAAQ,EAAE,CAAC;oBAChB,kBAAa,GAAQ,EAAE,CAAC,CAAC,4BAA4B;oBACrD,kBAAa,GAAQ,EAAE,CAAC,CAAC,2BAA2B;gBA0LxD,CAAC;gBAxLG;;mBAEG;gBACH,0BAAO,GAAP,UAAQ,IAAS,EAAE,IAAU;oBACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACtB,kFAAkF;wBAClF,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;4BACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;wBAC5B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;wBAC5B,CAAC;wBACD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;wBAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;oBAClC,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACH,6BAAU,GAAV,UAAW,IAAS;oBAChB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBACxB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;wBAChC,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;wBAChC,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAU,QAAQ;4BAC/D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAU,GAAQ;gCAC5C,IAAI,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gCACtC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oCACX,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gCACjC,CAAC;4BACL,CAAC,EAAE,IAAI,CAAC,CAAC;wBACb,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACH,0BAAO,GAAP,UAAQ,IAAS;oBACb,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBAC3C,CAAC;gBAED;;mBAEG;gBACH,8BAAW,GAAX,UAAY,IAAS;oBACjB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAC5B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,IAAI,KAAK,CAAC,0BAAwB,IAAM,CAAC,CAAC;oBACpD,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACH,8BAAW,GAAX,UAAY,IAAS,EAAE,IAAS;oBAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;oBAC5B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,IAAI,KAAK,CAAC,0BAAwB,IAAM,CAAC,CAAC;oBACpD,CAAC;gBACL,CAAC;gBAED;;;mBAGG;gBACH,gCAAa,GAAb,UAAc,IAAS,EAAE,EAAO;oBAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACtB,MAAM,IAAI,KAAK,CAAC,0BAAwB,IAAM,CAAC,CAAC;oBACpD,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBACpB,MAAM,IAAI,KAAK,CAAC,0BAAwB,EAAI,CAAC,CAAC;oBAClD,CAAC;oBACD,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC9C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACtC,CAAC;oBACD,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC9C,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACtC,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,mCAAgB,GAAhB,UAAiB,IAAS,EAAE,EAAO;oBAC/B,IAAI,GAAQ,CAAC;oBACb,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrB,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;wBAC3C,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;4BACX,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;wBAC5C,CAAC;oBACL,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBACnB,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAC3C,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;4BACX,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;wBAC1C,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED;;;;;;;mBAOG;gBACH,iCAAc,GAAd,UAAe,IAAS,EAAE,UAAe;oBACrC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrB,IAAI,MAAM,GAAU,EAAE,CAAC;wBACvB,IAAI,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;wBAC5D,GAAG,CAAC,IAAI,CAAC,CAAC;wBACV,IAAI,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAC/B,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;4BACX,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;wBAC1B,CAAC;wBACD,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,MAAM,IAAI,KAAK,CAAC,0BAAwB,IAAM,CAAC,CAAC;oBACpD,CAAC;gBACL,CAAC;gBAED;;;;;;mBAMG;gBACH,+BAAY,GAAZ,UAAa,IAAS,EAAE,UAAe;oBACnC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrB,IAAI,MAAM,GAAU,EAAE,CAAC;wBACvB,IAAI,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;wBAC5D,GAAG,CAAC,IAAI,CAAC,CAAC;wBACV,IAAI,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAC/B,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;4BACX,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;wBAC1B,CAAC;wBACD,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,IAAI,KAAK,CAAC,0BAAwB,IAAM,CAAC,CAAC;oBACpD,CAAC;gBACL,CAAC;gBAED;;;;;;mBAMG;gBACH,+BAAY,GAAZ,UAAa,UAAgB;oBACzB,IAAI,IAAI,GAAG,IAAI,CAAC;oBAChB,IAAI,MAAM,GAAU,EAAE,CAAC;oBACvB,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACnC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc;oBACjC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,2EAA2E;wBAC3E,mEAAmE;wBACnE,IAAI,UAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;wBACxD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAM;4BACzB,UAAQ,CAAC,CAAC,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC;wBAEH,IAAI,KAAG,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;wBAC5D,+EAA+E;wBAC/E,sDAAsD;wBACtD,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI;4BACtB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;wBACjD,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;4BAClB,KAAG,CAAC,CAAC,CAAC,CAAC;wBACX,CAAC,CAAC,CAAC;wBAEH,MAAM,CAAC,MAAM,CAAC;oBAClB,CAAC;gBACL,CAAC;gBAEL,eAAC;YAAD,CA7LA,AA6LC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YC5NF,mEAAmE;YACnE,6FAA6F;YAE7F;;eAEG;YACH;gBAAA;gBA+HA,CAAC;gBA7HG,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,8CAAY,GAAZ,UAAa,eAAiC;oBAA9C,iBAGC;oBAFG,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,eAAe,CAAC,EAA9C,CAA8C,CAAC,CAAC;oBAC1F,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC;gBAC/C,CAAC;gBAED;;mBAEG;gBACH,0CAAQ,GAAR,UAAS,cAA8B,EAAE,kBAAoC;oBAEzE,oCAAoC;oBACpC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;wBAC7G,MAAM,IAAI,qDAAyB,CAAC,cAAc,CAAC,CAAC;oBAExD,gEAAgE;oBAChE,uEAAuE;oBACvE,EAAE,CAAC,CAAC,cAAc,CAAC,eAAe,KAAK,cAAc,CAAC,CAAC,CAAC;wBACpD,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,sBAAsB,CAAC;4BACvC,MAAM,IAAI,KAAK,CAAC,YAAU,cAAc,CAAC,IAAI,uIAAoI,CAAC,CAAC;wBAEvL,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;4BACxE,MAAM,IAAI,KAAK,CAAC,YAAU,cAAc,CAAC,IAAI,6EAA0E,CAAC,CAAC;wBAE7H,IAAM,oCAAoC,GAAG,kBAAkB,CAAC,IAAI,CAAC,UAAA,QAAQ;4BACzE,MAAM,CAAC,QAAQ,KAAK,cAAc,IAAI,QAAQ,CAAC,kBAAkB,KAAK,cAAc,CAAC,kBAAkB,CAAC;wBAC5G,CAAC,CAAC,CAAC;wBACH,EAAE,CAAC,CAAC,oCAAoC,CAAC;4BACrC,MAAM,IAAI,KAAK,CAAC,cAAY,cAAc,CAAC,IAAI,aAAQ,oCAAoC,CAAC,IAAI,4HAAyH,CAAC,CAAC;oBACnO,CAAC;oBAED,qBAAqB;oBACrB,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;wBAErC,qBAAqB;wBACrB,4EAA4E;wBAC5E,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;4BACrB,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC;gCACvB,MAAM,IAAI,iEAA+B,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;4BAExE,0FAA0F;4BAC1F,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC;gCAC9D,MAAM,IAAI,iFAAuC,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;wBACpF,CAAC;wBAED,sBAAsB;wBACtB,8GAA8G;wBAC9G,uDAAuD;wBACvD,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;4BAEtB,0EAA0E;4BAC1E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;gCAC9C,MAAM,IAAI,mEAAgC,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;4BAEzE,0FAA0F;4BAC1F,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,eAAe,CAAC,UAAU,IAAI,QAAQ,CAAC,UAAU,CAAC;gCACtF,MAAM,IAAI,mFAAwC,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;4BAEjF,oDAAoD;4BACpD,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC;gCAC7D,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;wBAE3E,CAAC;wBAED,uFAAuF;wBACvF,sEAAsE;wBACtE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,UAAU,IAAI,CAAC,CAAC,QAAQ,CAAC,cAAc,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;4BAClH,MAAM,IAAI,+CAAsB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;wBAE/D,wFAAwF;wBACxF,qEAAqE;wBACrE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,YAAY,IAAI,CAAC,CAAC,QAAQ,CAAC,cAAc,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;4BAClH,MAAM,IAAI,6CAAqB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;wBAG9D,mGAAmG;wBACnG,oGAAoG;wBACpG,oGAAoG;wBACpG,6IAA6I;wBAC7I,sLAAsL;wBACtL,wEAAwE;wBACxE,mIAAmI;wBACnI,8FAA8F;oBAElG,CAAC,CAAC,CAAC;oBAEH,0GAA0G;oBAC1G,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;wBACrC,IAAM,uBAAuB,GAAG,QAAQ,CAAC,eAAe,IAAI,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,eAAe,CAAC,eAAe,CAAC;wBAChI,EAAE,CAAC,CAAC,uBAAuB,CAAC;4BACxB,MAAM,IAAI,KAAK,CAAC,cAAY,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,aAAQ,QAAQ,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,eAAe,CAAC,YAAY,mCAAgC;gCACjM,8GAA8G,CAAC,CAAC;oBAC5H,CAAC,CAAC,CAAC,CAAC,qFAAqF;gBAC7F,CAAC;gBAED;;mBAEG;gBACO,sDAAoB,GAA9B,UAA+B,eAAiC;oBAE5D,IAAM,KAAK,GAAG,IAAI,mBAAQ,EAAE,CAAC;oBAC7B,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc;wBAClC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;oBACvC,CAAC,CAAC,CAAC;oBACH,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc;wBAClC,cAAc,CAAC,wBAAwB;6BAClC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAC,QAAQ,CAAC,UAAU,EAApB,CAAoB,CAAC;6BACxC,OAAO,CAAC,UAAA,QAAQ;4BACb,KAAK,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;wBAClF,CAAC,CAAC,CAAC;oBACX,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC;wBACD,KAAK,CAAC,YAAY,EAAE,CAAC;oBAEzB,CAAC;oBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACX,MAAM,IAAI,+CAAsB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,iCAAiC,EAAE,EAAE,CAAC,CAAC,CAAC;oBACpG,CAAC;gBACL,CAAC;gBAEL,8BAAC;YAAD,CA/HA,AA+HC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;YC3HF;;eAEG;YACH;gBAAA;gBAkEA,CAAC;gBAhEG,6CAAK,GAAL,UAAM,MAAc,EAAE,oBAA0C,EAAE,IAAuC;oBAErG,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC;oBAChD,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC;oBAEvD,IAAM,aAAa,GAAG,IAAI,6BAAa,CAAC;wBACpC,MAAM,EAAE,EAAE;wBACV,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI;wBACzB,IAAI,EAAE,UAAU;qBACnB,CAAC,CAAC;oBAEH,IAAM,eAAe,GAAG,IAAI,+BAAc,CAAC;wBACvC,MAAM,EAAE,aAAa;wBACrB,8BAA8B;wBAC9B,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc;wBAC3C,IAAI,EAAE,SAAS;wBACf,OAAO,EAAkB;4BACrB,MAAM,EAAE,OAAO,CAAC,MAAM;4BACtB,IAAI,EAAE,OAAO,CAAC,IAAI;4BAClB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc;4BACnC,QAAQ,EAAE,KAAK;4BACf,OAAO,EAAE,IAAI;yBAChB;qBACJ,CAAC,CAAC;oBACH,IAAM,eAAe,GAAG,IAAI,+BAAc,CAAC;wBACvC,MAAM,EAAE,aAAa;wBACrB,8BAA8B;wBAC9B,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,qBAAqB;wBAClD,IAAI,EAAE,SAAS;wBACf,OAAO,EAAkB;4BACrB,MAAM,EAAE,OAAO,CAAC,MAAM;4BACtB,IAAI,EAAE,OAAO,CAAC,IAAI;4BAClB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,qBAAqB;4BAC1C,QAAQ,EAAE,KAAK;4BACf,OAAO,EAAE,IAAI;yBAChB;qBACJ,CAAC,CAAC;oBAEH,IAAM,cAAc,GAAG,IAAI,+BAAc,CAAC;wBACtC,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,aAAa;wBACrB,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,YAAY;wBACzC,cAAc,EAAE,IAAI,CAAC,cAAc;wBACnC,aAAa,EAAE,aAAa;wBAC5B,eAAe,EAAE;4BACb,eAAe;4BACf,eAAe;yBAClB;wBACD,mBAAmB,EAAE;4BACjB,IAAI,uCAAkB,CAAC,CAAC,eAAe,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,CAAC;4BACrE,IAAI,uCAAkB,CAAC,CAAC,eAAe,CAAC,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,CAAC;yBACzE;wBACD,cAAc,EAAE;4BACZ,IAAI,6BAAa,CAAC,EAAE,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;4BAC9E,IAAI,6BAAa,CAAC,EAAE,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;yBACxF;qBACJ,EAAE,oBAAoB,CAAC,CAAC;oBAEzB,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,cAAc,GAAG,cAAc,CAAC;oBAC1D,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,cAAc,GAAG,cAAc,CAAC;oBAE1D,MAAM,CAAC,cAAc,CAAC;gBAC1B,CAAC;gBAEL,oCAAC;YAAD,CAlEA,AAkEC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;YCrEF;;eAEG;YACH;gBAAA;gBA8DA,CAAC;gBA5DG,oDAAK,GAAL,UAAM,MAAc,EAAE,oBAA0C,EAAE,IAA8C;oBAE5G,IAAM,OAAO,GAAG;wBACZ,IAAI,+BAAc,CAAsB;4BACpC,MAAM,EAAE,aAAa;4BACrB,YAAY,EAAE,aAAa;4BAC3B,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI;4BACrC,IAAI,EAAE,SAAS;4BACf,OAAO,EAAkB;gCACrB,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM;gCACjC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI;gCAC7B,IAAI,EAAE,UAAU;6BACnB;yBACJ,CAAC;wBACF,IAAI,+BAAc,CAAsB;4BACpC,MAAM,EAAE,aAAa;4BACrB,YAAY,EAAE,aAAa;4BAC3B,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI;4BACrC,IAAI,EAAE,SAAS;4BACf,OAAO,EAAkB;gCACrB,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM;gCACjC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI;gCAC7B,IAAI,EAAE,YAAY;6BACrB;yBACJ,CAAC;qBACL,CAAC;oBAEF,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBAC1B,OAAO,CAAC,IAAI,CAAC,IAAI,+BAAc,CAAsB;4BACjD,MAAM,EAAE,aAAa;4BACrB,YAAY,EAAE,aAAa;4BAC3B,YAAY,EAAE,yBAAW,CAAC,OAAO;4BACjC,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE;gCACL,IAAI,EAAE,yBAAW,CAAC,OAAO;gCACzB,IAAI,EAAE,OAAO;6BAChB;yBACJ,CAAC,CAAC,CAAC;oBACR,CAAC;oBAED,IAAM,4BAA4B,GAAG,IAAI,6BAAa,CAAC;wBACnD,MAAM,EAAE,aAAa;wBACrB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;wBACrB,IAAI,EAAE,kBAAkB;qBAC3B,CAAC,CAAC;oBAEH,MAAM,CAAC,IAAI,+BAAc,CAAC;wBACtB,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,aAAa;wBACrB,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,YAAY;wBACzC,cAAc,EAAE,IAAI,CAAC,cAAc;wBACnC,aAAa,EAAE,4BAA4B;wBAC3C,eAAe,EAAE,OAAO;wBACxB,mBAAmB,EAAE;4BACjB,IAAI,uCAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;4BACtE,IAAI,uCAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;yBACzE;qBACJ,EAAE,oBAAoB,CAAC,CAAC;gBAC7B,CAAC;gBAEL,2CAAC;YAAD,CA9DA,AA8DC,IAAA;;QAAA,CAAC;;;;;;;;;QCiLD,CAAC;;;;;;;;;;YCvQF;eACG;YACH;gBAAgD,8CAAK;gBAGjD,oCAAY,YAAoB,EAAE,WAAqB,EAAE,YAAqB;oBAA9E,YACI,iBAAO,SAIV;oBAPD,UAAI,GAAG,4BAA4B,CAAC;oBAIhC,KAAI,CAAC,OAAO,GAAG,YAAY,GAAG,qDAAqD,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;wBAC7G,CAAC,YAAY,GAAG,eAAe,GAAG,YAAY,GAAG,8DAA8D;4BAC/G,iGAAiG,CAAC,CAAC;;gBAC3G,CAAC;gBAEL,iCAAC;YAAD,CAVA,AAUC,CAV+C,KAAK,GAUpD;;QAAA,CAAC;;;;;;;;;;;;;;YCVF;gBAAA;oBAEI,4EAA4E;oBAC5E,uBAAuB;oBACvB,4EAA4E;oBAElE,UAAK,GAAQ,EAAE,CAAC;gBA4D9B,CAAC;gBAtDG,sBAAI,gDAAM;oBAJV,4EAA4E;oBAC5E,oBAAoB;oBACpB,4EAA4E;yBAE5E;wBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;oBAC7B,CAAC;;;mBAAA;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E,6CAAM,GAAN,UAAO,UAA4D,EAAE,OAAa;oBAC9E,IAAM,UAAU,GAAG,IAAW,IAAI,CAAC,WAAY,EAAE,CAAC;oBAClD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAxB,CAAwB,CAAC,CAAC;oBAC5E,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAED,qDAAc,GAAd,UAAe,GAAqB;oBAEhC,4DAA4D;oBAC5D,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;wBACL,MAAM,CAAC,IAAW,IAAI,CAAC,WAAY,EAAE,CAAC;oBAE1C,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACvC,CAAC;gBAED,sDAAe,GAAf,UAAgB,OAA+B;oBAC3C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,QAAQ;wBACvB,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;4BAAC,MAAM,CAAC,KAAK,CAAC;wBACnC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;oBACnD,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,0CAAG,GAAH,UAAI,QAAW,EAAE,wBAAgC;oBAAhC,yCAAA,EAAA,gCAAgC;oBAC7C,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;wBAC3B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,YAAY,QAAQ,CAAC,CAAC;4BAC3D,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;wBAEhE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;4BACpC,MAAM,IAAI,uDAA0B,CAAQ,QAAQ,CAAC,WAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACjG,CAAC;oBAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC9B,CAAC;gBAED,8CAAO,GAAP;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;gBACxC,CAAC;gBAED,4EAA4E;gBAC5E,kBAAkB;gBAClB,4EAA4E;gBAEpE,oDAAa,GAArB,UAAsB,WAAqB;oBACvC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,MAAM,KAAK,WAAW,EAA/B,CAA+B,CAAC,CAAC;gBAC1E,CAAC;gBAEL,mCAAC;YAAD,CAlEA,AAkEC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;YClEF;gBAAmH,kDAA+B;gBAAlJ;;gBAoBA,CAAC;gBAlBG,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E,gEAAuB,GAAvB,UAAwB,eAAoB;oBACxC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,QAAQ;wBACvB,MAAM,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,iBAAiB,IAAI,OAAA,iBAAiB,CAAC,YAAY,KAAK,QAAQ,CAAC,YAAY,EAAxD,CAAwD,CAAC,CAAC;oBAChH,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,uDAAc,GAAd,UAAe,YAAoB;oBAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,YAAY,KAAK,YAAY,EAAlC,CAAkC,CAAC,CAAC;gBACvE,CAAC;gBAED,wDAAe,GAAf,UAAgB,YAAoB;oBAChC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;gBAC/C,CAAC;gBAEL,qCAAC;YAAD,CApBA,AAoBC,CApBkH,2DAA4B,GAoB9I;;QAAA,CAAC;;;;;;;;;QCDF,CAAC;;;;;;;;;QCLD,CAAC;;;;;;;;;QCLD,CAAC;;;;;;;;;QCUD,CAAC;;;;;;;;;QCLD,CAAC;;;;;;;;;QCAD,CAAC;;;;;;;;;QCMD,CAAC;;;;;;;;;QCDD,CAAC;;;;;;;;;;;;;;;;;YCFD;;;eAGG;YACH;gBAAA;oBAEI,sEAAsE;oBACtE,mGAAmG;oBACnG,2GAA2G;oBAC3G,8EAA8E;oBAE9E,4EAA4E;oBAC5E,aAAa;oBACb,4EAA4E;oBAEnE,WAAM,GAAG,IAAI,2DAA4B,EAAqB,CAAC;oBAC/D,uBAAkB,GAAG,IAAI,2DAA4B,EAAgC,CAAC;oBACtF,8BAAyB,GAAG,IAAI,2DAA4B,EAAiC,CAAC;oBAC9F,qBAAgB,GAAG,IAAI,2DAA4B,EAA8B,CAAC;oBAClF,sBAAiB,GAAG,IAAI,2DAA4B,EAAgC,CAAC;oBACrF,YAAO,GAAG,IAAI,+DAA8B,EAAqB,CAAC;oBAClE,YAAO,GAAG,IAAI,+DAA8B,EAAsB,CAAC;oBACnE,cAAS,GAAG,IAAI,+DAA8B,EAAwB,CAAC;oBACvE,gBAAW,GAAG,IAAI,+DAA8B,EAA0B,CAAC;oBAC3E,eAAU,GAAG,IAAI,+DAA8B,EAAyB,CAAC;oBACzE,oBAAe,GAAG,IAAI,+DAA8B,EAA8B,CAAC;oBACnF,mBAAc,GAAG,IAAI,+DAA8B,EAA6B,CAAC;oBACjF,gBAAW,GAAG,IAAI,+DAA8B,EAA0B,CAAC;oBAC3E,cAAS,GAAG,IAAI,+DAA8B,EAAwB,CAAC;oBACvE,iBAAY,GAAG,IAAI,2DAA4B,EAA2B,CAAC;oBAC3E,wBAAmB,GAAG,IAAI,2DAA4B,EAAkC,CAAC;gBA+PtG,CAAC;gBA7PG,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,qDAAuB,GAAvB,UAAwB,OAAoB;oBAA5C,iBAOC;oBANG,IAAM,oBAAoB,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1F,IAAM,cAAc,GAAG,oBAAoB,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,SAAS,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAmB,EAA1F,CAA0F,CAAC,CAAC;oBAExJ,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,UAAA,aAAa;wBAC7C,MAAM,CAAC,KAAI,CAAC,iBAAiB,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;oBACvE,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACH,+DAAiC,GAAjC,UAAkC,OAAoB;oBAAtD,iBAOC;oBANG,IAAM,MAAM,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC5E,IAAM,wBAAwB,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,YAAY,EAA3B,CAA2B,CAAC,CAAC;oBAErF,MAAM,CAAC,wBAAwB,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,UAAA,uBAAuB;wBACjE,MAAM,CAAC,KAAI,CAAC,mBAAmB,CAAC,wBAAwB,EAAE,uBAAuB,CAAC,CAAC;oBACvF,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,4EAA4E;gBAC5E,kBAAkB;gBAClB,4EAA4E;gBAE5E;mBACG;gBACO,+CAAiB,GAA3B,UAA4B,iBAAkE,EAClE,KAAwB;oBADpD,iBA4KC;oBAzKG,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC1D,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC1D,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC9D,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClE,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAChE,IAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC1E,IAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACxE,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClE,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC9D,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACpE,IAAM,WAAW,GAAG,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;oBACtF,IAAM,mBAAmB,GAAqC,EAAE,CAAC;oBAEjE,iDAAiD;oBACjD,IAAI,MAAM,GAAgC,SAAS,CAAC;oBAEpD,sCAAsC;oBACtC,iBAAiB,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,UAAA,cAAc;wBAC9C,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,oBAAoB,CAAC;4BAAC,MAAM,CAAC;wBAChD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;4BAAC,MAAM,CAAC;wBACpD,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,YAAY,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,YAAY,QAAQ,CAAC,CAAC;4BAAC,MAAM,CAAC;wBAChG,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;4BAAC,MAAM,CAAC;wBAEnE,oIAAoI;wBACpI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,YAAY,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,IAAI,KAAK,aAAa,EAAlC,CAAkC,CAAC,CAAC,CAAC,CAAC;4BAC9H,MAAM,GAAG,cAAc,CAAC;4BACxB,MAAM,CAAC;wBACX,CAAC;wBAED,IAAM,qBAAqB,GAAG,KAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC;wBAExF,qBAAqB,CAAC,OAAO;6BACxB,OAAO,EAAE;6BACT,MAAM,CAAC,UAAA,KAAK;4BACT,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAA9B,CAA8B,CAAC,CAAC;wBAChG,CAAC,CAAC;6BACD,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;wBAE1C,qBAAqB,CAAC,OAAO;6BACxB,uBAAuB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;6BAC1C,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAArB,CAAqB,CAAC,CAAC;wBAEhD,qBAAqB,CAAC,SAAS;6BAC1B,uBAAuB,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;6BAC5C,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAvB,CAAuB,CAAC,CAAC;wBAElD,qBAAqB,CAAC,WAAW;6BAC5B,uBAAuB,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;6BAC9C,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAzB,CAAyB,CAAC,CAAC;wBAEpD,qBAAqB,CAAC,UAAU;6BAC3B,uBAAuB,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;6BAC7C,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAxB,CAAwB,CAAC,CAAC;wBAEnD,qBAAqB,CAAC,eAAe;6BAChC,uBAAuB,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;6BAClD,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAA7B,CAA6B,CAAC,CAAC;wBAExD,qBAAqB,CAAC,cAAc;6BAC/B,uBAAuB,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;6BACjD,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,EAA5B,CAA4B,CAAC,CAAC;wBAEvD,qBAAqB,CAAC,WAAW;6BAC5B,uBAAuB,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;6BAC9C,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAzB,CAAyB,CAAC,CAAC;wBAEpD,qBAAqB,CAAC,SAAS;6BAC1B,uBAAuB,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;6BAC5C,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAvB,CAAuB,CAAC,CAAC;oBAEtD,CAAC,CAAC,CAAC;oBAEH,gEAAgE;oBAChE,IAAM,QAAQ,GAAwB,EAAE,CAAC;oBAEzC,EAAE,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,IAAI,KAAK,cAAc,CAAC,CAAC,CAAC;wBACrD,iBAAiB,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,UAAA,UAAU;4BAC1C,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,KAAK,oBAAoB,CAAC;gCAAC,MAAM,CAAC;4BACrD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gCAAC,MAAM,CAAC;4BAChD,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,YAAY,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,YAAY,QAAQ,CAAC,CAAC;gCAAC,MAAM,CAAC;4BAC5F,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;gCAAC,MAAM,CAAC;4BAE/D,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;4BAC1B,KAAI,CAAC,mBAAmB;iCACnB,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC;iCACjC,OAAO,EAAE;iCACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAlC,CAAkC,CAAC,CAAC;4BAE7D,yFAAyF;4BACzF,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,KAAK,cAAc,CAAC,CAAC,CAAC;gCACtC,IAAM,qBAAqB,GAAG,KAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;gCAEpF,qBAAqB,CAAC,OAAO;qCACxB,OAAO,EAAE;qCACT,MAAM,CAAC,UAAA,KAAK;oCACT,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAA9B,CAA8B,CAAC,CAAC;gCACjF,CAAC,CAAC;qCACD,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;gCAE1C,qBAAqB,CAAC,OAAO;qCACxB,uBAAuB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;qCAC1C,OAAO,EAAE;qCACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAArB,CAAqB,CAAC,CAAC;gCAEhD,qBAAqB,CAAC,SAAS;qCAC1B,uBAAuB,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;qCAC5C,OAAO,EAAE;qCACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAvB,CAAuB,CAAC,CAAC;gCAElD,qBAAqB,CAAC,WAAW;qCAC5B,uBAAuB,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;qCAC9C,OAAO,EAAE;qCACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAzB,CAAyB,CAAC,CAAC;gCAEpD,qBAAqB,CAAC,UAAU;qCAC3B,uBAAuB,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;qCAC7C,OAAO,EAAE;qCACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAxB,CAAwB,CAAC,CAAC;gCAEnD,qBAAqB,CAAC,eAAe;qCAChC,uBAAuB,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;qCAClD,OAAO,EAAE;qCACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAA7B,CAA6B,CAAC,CAAC;gCAExD,qBAAqB,CAAC,cAAc;qCAC/B,uBAAuB,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;qCACjD,OAAO,EAAE;qCACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,EAA5B,CAA4B,CAAC,CAAC;gCAEvD,qBAAqB,CAAC,WAAW;qCAC5B,uBAAuB,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;qCAC9C,OAAO,EAAE;qCACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAzB,CAAyB,CAAC,CAAC;gCAEpD,qBAAqB,CAAC,SAAS;qCAC1B,uBAAuB,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;qCAC5C,OAAO,EAAE;qCACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAvB,CAAuB,CAAC,CAAC;gCAElD,qBAAqB,CAAC,QAAQ;qCACzB,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAvB,CAAuB,CAAC,CAAC;4BACtD,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC;oBAED,MAAM,CAAC;wBACH,KAAK,EAAE,KAAK;wBACZ,MAAM,EAAE,MAAM;wBACd,WAAW,EAAE,WAAW;wBACxB,QAAQ,EAAE,QAAQ;wBAClB,OAAO,EAAE,OAAO;wBAChB,OAAO,EAAE,OAAO;wBAChB,SAAS,EAAE,SAAS;wBACpB,WAAW,EAAE,WAAW;wBACxB,UAAU,EAAE,UAAU;wBACtB,eAAe,EAAE,eAAe;wBAChC,cAAc,EAAE,cAAc;wBAC9B,WAAW,EAAE,WAAW;wBACxB,SAAS,EAAE,SAAS;wBACpB,mBAAmB,EAAE,mBAAmB;qBAC3C,CAAC;gBACN,CAAC;gBAED;mBACG;gBACO,iDAAmB,GAA7B,UAA8B,iBAAkE,EAClE,aAAgC;oBAD9D,iBA+BC;oBA7BG,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBAClE,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBAEtE,iBAAiB;yBACZ,MAAM,CAAC,UAAA,QAAQ;wBACZ,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;4BAAC,MAAM,CAAC,KAAK,CAAC;wBAC5D,EAAE,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,YAAY,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,YAAY,QAAQ,CAAC,CAAC;4BAAC,MAAM,CAAC,KAAK,CAAC;wBACxG,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,iCAAiC;oBACrG,CAAC,CAAC;yBACD,OAAO,EAAE;yBACT,OAAO,CAAC,UAAA,cAAc;wBACnB,IAAM,oBAAoB,GAAG,KAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC;wBAEzF,oBAAoB,CAAC,OAAO;6BACvB,uBAAuB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;6BAC1C,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAArB,CAAqB,CAAC,CAAC;wBAEhD,oBAAoB,CAAC,SAAS;6BACzB,uBAAuB,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;6BAC5C,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAvB,CAAuB,CAAC,CAAC;oBACtD,CAAC,CAAC,CAAC;oBAEP,MAAM,CAAC;wBACH,KAAK,EAAE,aAAa;wBACpB,OAAO,EAAE,OAAO;wBAChB,SAAS,EAAE,SAAS;qBACvB,CAAC;gBACN,CAAC;gBAED;;mBAEG;gBACO,yCAAW,GAArB,UAAsB,OAAiB,EAAE,OAAiB;oBACtD,qGAAqG;oBACrG,yGAAyG;oBACzG,+DAA+D;oBAC/D,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,WAAW,KAAK,OAAO,CAAC;gBAC5E,CAAC;gBAEL,0BAAC;YAAD,CAzRA,AAyRC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCtRF;;eAEG;YACH;gBAAA;gBA4bA,CAAC;gBA1bG,sEAAsE;gBACtE,mGAAmG;gBACnG,2GAA2G;gBAC3G,6DAA6D;gBAC7D,uEAAuE;gBACvE,iFAAiF;gBAEjF,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E,gDAAgB,GAAhB,UAAiB,MAAc,EACd,oBAA0C,EAC1C,cAAuC,EACvC,OAAuB;oBACpC,IAAM,mBAAmB,GAAG,IAAI,yCAAmB,EAAE,CAAC;oBAEtD,+BAA+B;oBAC/B,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;wBAElB,0CAA0C;wBAC1C,IAAM,WAAW,GAAG,MAAM,CAAC,KAAK,IAAI,EAAS,CAAC;wBAC9C,IAAM,KAAK,GAAsB;4BAC7B,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI;4BACpC,IAAI,EAAE,WAAW,CAAC,IAAI;4BACtB,IAAI,EAAE,WAAW,CAAC,IAAI,IAAI,SAAS;4BACnC,yBAAyB;4BACzB,OAAO,EAAE,WAAW,CAAC,OAAO;yBAC/B,CAAC;wBACF,mBAAmB,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;wBAEtC,4CAA4C;wBAC5C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,UAAU;4BAC1C,IAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;4BAChD,IAAI,IAAI,GAAe,SAAS,CAAC;4BACjC,EAAE,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC;gCACxB,IAAI,GAAG,YAAY,CAAC;4BACxB,EAAE,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC;gCACxB,IAAI,GAAG,YAAY,CAAC;4BACxB,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC;gCACrB,IAAI,GAAG,SAAS,CAAC;4BACrB,EAAE,CAAC,CAAC,YAAY,CAAC,iBAAiB,CAAC;gCAC/B,IAAI,GAAG,mBAAmB,CAAC;4BAC/B,EAAE,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC;gCACvB,IAAI,GAAG,WAAW,CAAC;4BAEvB,IAAM,MAAM,GAAuB;gCAC/B,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI;gCACpC,IAAI,EAAE,IAAI;gCACV,YAAY,EAAE,UAAU;gCACxB,4CAA4C;gCAC5C,OAAO,EAAE;oCACL,IAAI,EAAE,YAAY,CAAC,IAAI;oCACvB,IAAI,EAAE,YAAY,CAAC,IAAI;oCACvB,MAAM,EAAE,YAAY,CAAC,MAAM;oCAC3B,OAAO,EAAE,YAAY,CAAC,OAAO;oCAC7B,SAAS,EAAE,YAAY,CAAC,SAAS;oCACjC,MAAM,EAAE,YAAY,CAAC,MAAM;oCAC3B,QAAQ,EAAE,YAAY,CAAC,QAAQ;oCAC/B,OAAO,EAAE,YAAY,CAAC,OAAO;oCAC7B,OAAO,EAAE,YAAY,CAAC,OAAO;oCAC7B,SAAS,EAAE,YAAY,CAAC,SAAS;oCACjC,KAAK,EAAE,YAAY,CAAC,KAAK;iCAC5B;6BACJ,CAAC;4BAEF,mBAAmB,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;wBAC5C,CAAC,CAAC,CAAC;wBAEH,6CAA6C;wBAC7C,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;4BACnB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,YAAY;gCAC9C,IAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;gCACtD,IAAM,QAAQ,GAAyB;oCACnC,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI;oCACpC,YAAY,EAAE,YAAY;oCAC1B,YAAY,EAAE,cAAc,CAAC,IAAI;oCACjC,MAAM,EAAE,cAAc,CAAC,MAAM,IAAI,KAAK;oCACtC,IAAI,EAAE,cAAc,CAAC,MAAM;oCAC3B,mBAAmB,EAAE,cAAc,CAAC,WAAW;oCAC/C,YAAY,EAAE,cAAc,CAAC,YAAY;oCACzC,cAAc,EAAE,cAAc,CAAC,cAAc;oCAC7C,OAAO,EAAE;wCACL,UAAU,EAAE,cAAc,CAAC,UAAU;wCACrC,aAAa,EAAE,cAAc,CAAC,aAAa;wCAC3C,aAAa,EAAE,cAAc,CAAC,aAAa;wCAC3C,aAAa,EAAE,cAAc,CAAC,aAAa;wCAC3C,QAAQ,EAAE,cAAc,CAAC,QAAQ;wCACjC,QAAQ,EAAE,cAAc,CAAC,QAAQ;qCACpC;iCACJ,CAAC;gCAEF,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gCAE5C,kBAAkB;gCAClB,EAAE,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;oCAC5B,EAAE,CAAC,CAAC,OAAO,cAAc,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;wCACjD,IAAM,UAAU,GAA2B;4CACvC,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI;4CACpC,YAAY,EAAE,YAAY;yCAC7B,CAAC;wCACF,mBAAmB,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oCACpD,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,IAAM,UAAU,GAA2B;4CACvC,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI;4CACpC,YAAY,EAAE,YAAY;4CAC1B,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC,IAAI;4CACpC,oBAAoB,EAAE,cAAc,CAAC,UAAU,CAAC,oBAAoB;yCACvE,CAAC;wCACF,mBAAmB,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oCACpD,CAAC;gCACL,CAAC;gCAED,iBAAiB;gCACjB,EAAE,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;oCAC3B,EAAE,CAAC,CAAC,OAAO,cAAc,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;wCAChD,IAAM,SAAS,GAA0B;4CACrC,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI;4CACpC,YAAY,EAAE,YAAY;yCAC7B,CAAC;wCACF,mBAAmB,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;oCAClD,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,IAAM,SAAS,GAA0B;4CACrC,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI;4CACpC,YAAY,EAAE,YAAY;4CAC1B,IAAI,EAAE,cAAc,CAAC,SAAS,CAAC,IAAI;4CACnC,UAAU,EAAE,cAAc,CAAC,SAAS,CAAC,UAAU;4CAC/C,iBAAiB,EAAE,cAAc,CAAC,SAAS,CAAC,iBAAiB;yCAChE,CAAC;wCACF,mBAAmB,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;oCAClD,CAAC;gCACL,CAAC;4BACL,CAAC,CAAC,CAAC;wBACP,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,cAAc,CAAC,CAAC;gBACzF,CAAC;gBAED;;mBAEG;gBACH,4DAA4B,GAA5B,UAA6B,MAAc,EACd,oBAA0C,EAC1C,cAAuC,EACvC,aAA0B;oBACnD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,oBAAoB,EAAE,8BAAsB,EAAE,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;gBAC7G,CAAC;gBAED,4EAA4E;gBAC5E,kBAAkB;gBAClB,4EAA4E;gBAEpE,qCAAK,GAAb,UAAc,MAAc,EACd,oBAA0C,EAC1C,mBAAwC,EACxC,cAAuC,EACvC,aAA0B;oBACpC,IAAM,oBAAoB,GAAG,mBAAmB,CAAC,iCAAiC,CAAC,aAAa,CAAC,CAAC;oBAClG,IAAM,eAAe,GAAqB,EAAE,CAAC;oBAC7C,IAAM,aAAa,GAAG,mBAAmB,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;oBACjF,aAAa,CAAC,OAAO,CAAC,UAAA,UAAU;wBAE5B,IAAM,MAAM,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;wBAC9D,MAAM,CAAC,OAAO,CAAC,UAAA,SAAS;4BAEpB,uGAAuG;4BACvG,IAAM,wBAAwB,GAAG,UAAC,YAAoC;gCAClE,IAAM,SAAS,GAAuB,EAAE,CAAC;gCACzC,YAAY,CAAC,OAAO,CAAC,UAAA,QAAQ;oCACzB,IAAM,eAAe,GAAG,oBAAoB,CAAC,IAAI,CAAC,UAAA,kBAAkB,IAAI,OAAA,kBAAkB,CAAC,KAAK,CAAC,MAAM,KAAK,QAAQ,CAAC,IAAI,EAAE,EAAnD,CAAmD,CAAC,CAAC;oCAC7H,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;wCAClB,IAAM,OAAK,GAAG,IAAI,6BAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;wCACvD,IAAM,SAAO,GAAG,eAAe,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,+BAAc,CAAC,IAAI,CAAC,EAAxB,CAAwB,CAAC,CAAC;wCACxF,IAAM,YAAY,GAAG,wBAAwB,CAAC,eAAe,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;wCACnF,SAAS,CAAC,IAAI,CAAC,IAAI,mCAAgB,CAAC,OAAK,EAAE,SAAO,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;oCACjF,CAAC;gCACL,CAAC,CAAC,CAAC;gCACH,MAAM,CAAC,SAAS,CAAC;4BACrB,CAAC,CAAC;4BACF,IAAM,SAAS,GAAG,wBAAwB,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;4BAE3E,6BAA6B;4BAC7B,IAAM,YAAY,GAAG,UAAU,CAAC,WAAW,IAAI,UAAU,CAAC,WAAW,CAAC,IAAI,KAAK,cAAc,GAAG,UAAU,CAAC,KAAK,GAAG,SAAS,CAAC;4BAE7H,IAAM,KAAK,GAAG,IAAI,6BAAa,CAAC,YAAY,CAAC,CAAC;4BAC9C,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,UAAA,IAAI;gCAEjD,wFAAwF;gCACxF,EAAE,CAAC,CAAC,UAAU,CAAC,WAAW;oCACtB,UAAU,CAAC,WAAW,CAAC,IAAI,KAAK,cAAc;oCAC9C,IAAI,CAAC,MAAM,KAAK,UAAU,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAjC,CAAiC,CAAC,CAAC,CAAC,CAAC;oCACzH,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;gCACjC,CAAC;gCACD,MAAM,CAAC,IAAI,+BAAc,CAAC,IAAI,CAAC,CAAC;4BACpC,CAAC,CAAC,CAAC;4BACH,IAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,mCAAgB,CAAC,IAAI,CAAC,EAA1B,CAA0B,CAAC,CAAC;4BACzF,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,6BAAa,CAAC,IAAI,CAAC,EAAvB,CAAuB,CAAC,CAAC;4BAClF,IAAM,sBAAsB,GAAG,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAA,sBAAsB;gCACrF,MAAM,CAAC,sBAAsB,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,CAAC;4BAC9D,CAAC,CAAC,CAAC;4BACH,+BAA+B;4BAC/B,IAAM,cAAc,GAAG,IAAI,+BAAc,CAAC;gCACtC,QAAQ,EAAE,KAAK;gCACf,MAAM,EAAE,SAAS,CAAC,MAAM;gCACxB,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,YAAY;gCACzC,cAAc,EAAE,cAAc;gCAC9B,aAAa,EAAE,KAAK;gCACpB,eAAe,EAAE,OAAO;gCACxB,iBAAiB,EAAE,SAAS;gCAC5B,cAAc,EAAE,OAAO;gCACvB,iBAAiB,EAAE,SAAS;gCAC5B,eAAe,EAAE,UAAU,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,GAAG,SAAS;gCACjF,kBAAkB,EAAE,sBAAsB,GAAG,sBAAsB,CAAC,KAAK,GAAI,SAAS,CAAC,MAAc,CAAC,IAAI,CAAC,wDAAwD;6BACtK,EAAE,oBAAoB,CAAC,CAAC;4BACzB,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;4BACrC,wCAAwC;4BACxC,cAAc,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAA,QAAQ;gCAC/C,IAAM,iBAAiB,GAAG,UAAU,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;gCACtF,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;oCACpB,IAAM,SAAS,GAAG,IAAI,qCAAiB,CAAC,iBAAiB,CAAC,CAAC;oCAC3D,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;oCAC/B,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;gCAClC,CAAC;4BACL,CAAC,CAAC,CAAC;4BAEH,yCAAyC;4BACzC,cAAc,CAAC,iBAAiB;iCAC3B,MAAM,CAAC,cAAc,CAAC,kBAAkB,CAAC;iCACzC,OAAO,CAAC,UAAA,QAAQ;gCAEb,uGAAuG;gCACvG,kFAAkF;gCAClF,IAAI,kBAAkB,GAAG,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;gCACtF,EAAE,CAAC,CAAC,CAAC,kBAAkB,IAAI,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;oCAC9C,kBAAkB,GAAG;wCACjB,MAAM,EAAE,QAAQ,CAAC,cAAc,CAAC,MAAM;wCACtC,YAAY,EAAE,QAAQ,CAAC,YAAY;qCACtC,CAAC;gCACN,CAAC;gCAED,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;oCACrB,IAAM,UAAU,GAAG,IAAI,uCAAkB,CAAC,kBAAkB,CAAC,CAAC;oCAC9D,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;oCACjC,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;gCACnC,CAAC;4BACL,CAAC,CAAC,CAAC;4BAEP,0BAA0B;4BAC1B,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;gCACrC,IAAM,kBAAkB,GAAG,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,UAAU;oCACvE,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,YAAY,QAAQ,CAAC;wCACxC,MAAM,CAAC,QAAQ,CAAC,YAAY,KAAK,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC;oCAE/F,MAAM,CAAC,QAAQ,CAAC,YAAY,KAAK,UAAU,CAAC,QAAQ,CAAC;gCACzD,CAAC,CAAC,CAAC;gCACH,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;oCACrB,EAAE,CAAC,CAAC,QAAQ,CAAC,kBAAkB,IAAI,QAAQ,CAAC,WAAW,CAAC;wCACpD,MAAM,IAAI,KAAK,CAAC,4FAA4F,CAAC,CAAC;oCAElH,QAAQ,CAAC,OAAO,GAAG,kBAAkB,CAAC,YAAY,CAAC;gCACvD,CAAC;4BACL,CAAC,CAAC,CAAC;4BAEH,+BAA+B;4BAC/B,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;gCACrC,IAAM,qBAAqB,GAAG,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,aAAa;oCAChF,EAAE,CAAC,CAAC,aAAa,CAAC,QAAQ,YAAY,QAAQ,CAAC;wCAC3C,MAAM,CAAC,QAAQ,CAAC,YAAY,KAAK,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC;oCAElG,MAAM,CAAC,QAAQ,CAAC,YAAY,KAAK,aAAa,CAAC,QAAQ,CAAC;gCAC5D,CAAC,CAAC,CAAC;gCAEH,EAAE,CAAC,CAAC,qBAAqB,CAAC;oCACtB,QAAQ,CAAC,UAAU,GAAG,qBAAqB,CAAC,YAAY,CAAC;4BACjE,CAAC,CAAC,CAAC;4BAEH,4CAA4C;4BAC5C,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,YAAY,QAAQ,CAAC,CAAC,CAAC;gCAC5C,cAAc,CAAC,SAAS;qCACnB,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,MAAM,EAAf,CAAe,CAAC;qCACnC,OAAO,CAAC,UAAA,QAAQ;oCACb,oBAAoB,CAAC,IAAI,CAAE,cAAc,CAAC,MAAmB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;gCACvF,CAAC,CAAC,CAAC;4BACX,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBAEH,wGAAwG;oBACxG,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc;wBAClC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;4BACrC,IAAM,qBAAqB,GAAG,eAAe,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,IAAI,IAAI,CAAC,OAAO,QAAQ,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,CAAC,UAAU,KAAK,QAAQ,CAAC,IAAI,CAAC,EAAnG,CAAmG,CAAC,CAAC;4BAC7J,EAAE,CAAC,CAAC,CAAC,qBAAqB,CAAC;gCACvB,MAAM,IAAI,KAAK,CAAC,sBAAsB,GAAG,cAAc,CAAC,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY,GAAG,iBAAiB,CAAC,CAAC;4BAEpH,QAAQ,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;wBAC3D,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBAEH,wFAAwF;oBACxF,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc;wBAClC,IAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,UAAA,UAAU;4BAC5C,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,CAAC;wBAC7D,CAAC,CAAC,CAAC;wBACH,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;4BAClC,IAAM,oBAAoB,GAAG,eAAe,CAAC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,KAAK,CAAC,MAAM,KAAM,UAAW,CAAC,MAAe,CAAC,MAAM,EAAnE,CAAmE,CAAC,CAAC,CAAC,iEAAiE;4BAC3M,EAAE,CAAC,CAAC,oBAAoB,CAAC;gCACrB,cAAc,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;wBACnE,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,yDAAyD;oBACzD,eAAe;yBACV,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,eAAe,KAAK,cAAc,IAAI,QAAQ,CAAC,sBAAsB,EAA9E,CAA8E,CAAC;yBAClG,OAAO,CAAC,UAAA,QAAQ;wBACb,IAAM,WAAW,GAAG,IAAI,6BAAa,CAAC;4BAClC,MAAM,EAAE,QAAQ,CAAC,MAAM;4BACvB,OAAO,EAAE,CAAC,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,CAAC;4BAChD,MAAM,EAAE,KAAK;yBAChB,CAAC,CAAC;wBACH,WAAW,CAAC,cAAc,GAAG,QAAQ,CAAC;wBACtC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAEnC,IAAM,sBAAsB,GAAG,IAAI,6BAAa,CAAC;4BAC7C,MAAM,EAAE,QAAQ,CAAC,MAAM;4BACvB,OAAO,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,EAAE,QAAQ,CAAC,mBAAmB,CAAC,YAAY,CAAC;4BAC9F,MAAM,EAAE,KAAK;yBAChB,CAAC,CAAC;wBACH,sBAAsB,CAAC,cAAc,GAAG,QAAQ,CAAC;wBACjD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;oBAClD,CAAC,CAAC,CAAC;oBAEP,uEAAuE;oBACvE,eAAe;yBACV,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAC,CAAC,QAAQ,CAAC,oBAAoB,EAA/B,CAA+B,CAAC;yBACnD,OAAO,CAAC,UAAA,QAAQ;wBACb,IAAM,iCAAiC,GAAG,QAAQ,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC,gEAAgE;wBAC5J,IAAM,UAAU,GAAG,cAAc,CAAC,qCAAqC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,EAAE,iCAAiC,CAAC,YAAY,CAAC,CAAC;wBAClK,IAAM,oBAAoB,GAAG,IAAI,+BAAc,CAAC;4BAC5C,MAAM,EAAE,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM;4BAClD,YAAY,EAAE,iCAAiC,CAAC,YAAY;4BAC5D,gEAAgE;4BAChE,IAAI,EAAE,UAAU;4BAChB,OAAO,EAAkB;gCACrB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,iCAAiC,CAAC,IAAI;gCAC5C,MAAM,EAAE,IAAI;gCACZ,QAAQ,EAAE,KAAK;gCACf,OAAO,EAAE,KAAK;6BACjB;yBACJ,CAAC,CAAC;wBAEH,aAAa;wBACb,QAAQ,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;wBAEzC,kBAAkB;wBAClB,IAAM,UAAU,GAAG,IAAI,uCAAkB,CACrC,CAAC,oBAAoB,CAAC,EACtB,QAAQ,CAAC,oBAAoB,CAAC,KAAK,EACnC,CAAC,iCAAiC,CAAC,EACnC,SAAS,CACZ,CAAC;wBACF,UAAU,CAAC,cAAc,GAAG,QAAQ,CAAC;wBACrC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC;oBAEP,8DAA8D;oBAC9D,eAAe,CAAC,OAAO,CAAC,UAAA,QAAQ;wBAC5B,QAAQ,CAAC,wBAAwB,CAAC,OAAO,CAAC,UAAA,QAAQ;4BAE9C,2DAA2D;4BAC3D,IAAM,iBAAiB,GAAG,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC;4BAC/D,IAAI,gBAAgB,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,KAAK,QAAQ,CAAC,IAAI,EAAjC,CAAiC,CAAC,CAAC;4BAC1F,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gCACpB,gBAAgB,GAAG,IAAI,+BAAc,CAAC;oCAClC,MAAM,EAAE,QAAQ,CAAC,MAAM;oCACvB,YAAY,EAAE,QAAQ,CAAC,IAAI;oCAC3B,gDAAgD;oCAChD,IAAI,EAAE,SAAS;oCACf,OAAO,EAAkB;wCACrB,IAAI,EAAE,iBAAiB,CAAC,IAAI;wCAC5B,QAAQ,EAAE,QAAQ,CAAC,UAAU;wCAC7B,OAAO,EAAE,QAAQ,CAAC,SAAS;qCAC9B;iCACJ,CAAC,CAAC;gCACH,gBAAgB,CAAC,gBAAgB,GAAG,QAAQ,CAAC;gCAC7C,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;4BACzC,CAAC;4BAED,6BAA6B;4BAC7B,IAAM,UAAU,GAAG,IAAI,uCAAkB,CACrC,CAAC,gBAAgB,CAAC,EAClB,QAAQ,CAAC,qBAAqB,CAAC,KAAK,EACpC,CAAC,iBAAiB,CAAC,EACnB,QAAQ,CAAC,QAAQ,CACpB,CAAC;4BACF,UAAU,CAAC,cAAc,GAAG,QAAQ,CAAC;4BACrC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBAC1C,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBAEH,kDAAkD;oBAClD,eAAe,CAAC,OAAO,CAAC,UAAA,QAAQ;wBAC5B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC;4BAC1B,MAAM,CAAC;wBAEX,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;4BACnC,MAAM,IAAI,KAAK,CAAC,6BAA2B,QAAQ,CAAC,IAAI,yIAAsI,CAAC,CAAC;wBAEpM,IAAM,6BAA6B,GAAG,wBAAgB,CAAC,2EAAoC,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,oBAAoB,EAAE;4BAC7H,cAAc,EAAE,cAAc;4BAC9B,KAAK,EAAE,QAAQ,CAAC,KAAK;4BACrB,aAAa,EAAE,QAAQ,CAAC,kBAAkB;4BAC1C,kBAAkB,EAAE,QAAQ,CAAC,kBAAkB;yBAClD,CAAC,CAAC;wBACH,QAAQ,CAAC,oBAAoB,GAAG,6BAA6B,CAAC;wBAC9D,eAAe,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;oBACxD,CAAC,CAAC,CAAC;oBAEH,uDAAuD;oBACvD,eAAe,CAAC,OAAO,CAAC,UAAA,QAAQ;wBAC5B,QAAQ,CAAC,wBAAwB,CAAC,OAAO,CAAC,UAAA,QAAQ;4BAC9C,IAAM,sBAAsB,GAAG,wBAAgB,CAAC,6DAA6B,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,oBAAoB,EAAE;gCAC/G,cAAc,EAAE,cAAc;gCAC9B,UAAU,EAAE,QAAQ,CAAC,KAAK;gCAC1B,WAAW,EAAE,QAAQ,CAAC,qBAAqB,CAAC,KAAK;gCACjD,SAAS,EAAE,QAAQ,CAAC,SAAS;6BAChC,CAAC,CAAC;4BACH,QAAQ,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;4BACzD,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC;gCACxB,QAAQ,CAAC,eAAe,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;4BAE7E,eAAe,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;wBACjD,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBAEH,qGAAqG;oBACrG,wBAAgB,CAAC,iDAAuB,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;oBAExE,MAAM,CAAC,eAAe,CAAC;gBAC3B,CAAC;gBAEL,4BAAC;YAAD,CA5bA,AA4bC,IAAA;;QAAA,CAAC;;;;;;;;;;YCzdF;gBAAA;gBAiJA,CAAC;gBA/IG;;;;;;;;;;;mBAWG;gBACI,oBAAI,GAAX,UAAY,GAAW;oBAEnB,IAAI,QAAQ,GAAG,UAAS,CAAM,EAAE,CAAM;wBAClC,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;wBACrC,MAAM,CAAC,EAAE,CAAC;oBACd,CAAC,CAAC;oBAEF,IAAI,OAAO,GAAG,UAAS,GAAQ;wBAC3B,IAAI,GAAG,GAAG,EAAE,CAAC;wBACb,IAAI,CAAC,CAAC;wBACN,IAAI,CAAC,CAAC;wBAEN,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;4BACtB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;4BAC7B,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;wBAC1B,CAAC;wBACD,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC,CAAC;oBAEF,IAAI,UAAU,CAAC;oBACf,IAAI,CAAC,EAAE,CAAC,CAAC;oBACT,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;oBACtB,IAAI,EAAE,GAAG,UAAU,CAAC;oBACpB,IAAI,EAAE,GAAG,UAAU,CAAC;oBACpB,IAAI,EAAE,GAAG,UAAU,CAAC;oBACpB,IAAI,EAAE,GAAG,UAAU,CAAC;oBACpB,IAAI,EAAE,GAAG,UAAU,CAAC;oBACpB,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;oBAClB,IAAI,IAAI,CAAC;oBAET,cAAc;oBACd,GAAG,GAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC5C,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;oBAExB,IAAI,SAAS,GAAG,EAAE,CAAC;oBACnB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;wBACjC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE;4BACvB,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE;4BAC3B,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BAC1B,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC1B,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACtB,CAAC;oBAED,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACjB,KAAK,CAAC;4BACF,CAAC,GAAG,WAAW,CAAC;4BAChB,KAAK,CAAC;wBACV,KAAK,CAAC;4BACF,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC;4BACjD,KAAK,CAAC;wBACV,KAAK,CAAC;4BACF,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,OAAO,CAAC;4BAClF,KAAK,CAAC;wBACV,KAAK,CAAC;4BACF,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE;gCAChC,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE;gCAChC,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;oCAC1B,CAAC,GAAG,IAAI,CAAC;4BACb,KAAK,CAAC;oBACd,CAAC;oBAED,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAElB,OAAO,CAAC,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC;wBACpC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACtB,CAAC;oBAED,SAAS,CAAC,IAAI,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC;oBAC9B,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC;oBAE5C,GAAG,CAAC,CAAC,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,SAAS,CAAC,MAAM,EAAE,UAAU,IAAI,EAAE,EAAE,CAAC;wBACnE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;4BACtB,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;wBACrC,CAAC;wBACD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;4BACxB,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;wBACpE,CAAC;wBAED,CAAC,GAAG,EAAE,CAAC;wBACP,CAAC,GAAG,EAAE,CAAC;wBACP,CAAC,GAAG,EAAE,CAAC;wBACP,CAAC,GAAG,EAAE,CAAC;wBACP,CAAC,GAAG,EAAE,CAAC;wBAEP,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;4BACvB,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,GAAG,WAAW,CAAC;4BACrF,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;4BACpB,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,IAAI,CAAC;wBACb,CAAC;wBAED,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;4BACxB,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,GAAG,WAAW,CAAC;4BAC5E,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;4BACpB,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,IAAI,CAAC;wBACb,CAAC;wBAED,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;4BACxB,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,GAAG,WAAW,CAAC;4BAC9F,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;4BACpB,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,IAAI,CAAC;wBACb,CAAC;wBAED,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;4BACxB,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,GAAG,WAAW,CAAC;4BAC5E,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;4BACpB,CAAC,GAAG,CAAC,CAAC;4BACN,CAAC,GAAG,IAAI,CAAC;wBACb,CAAC;wBAED,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;wBAC5B,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;wBAC5B,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;wBAC5B,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;wBAC5B,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;oBAChC,CAAC;oBAED,IAAI,GAAG,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;oBAC3E,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBAC9B,CAAC;gBAEL,sBAAC;YAAD,CAjJA,AAiJC,IAAA;;QAAA,CAAC;;;;;;ICjJF;;;;OAIG;IACH,mBAA0B,GAAW;QACjC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,sBAAsB,EAAE,UAAS,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM;YACrE,EAAE,CAAC,CAAC,EAAE,CAAC;gBAAC,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;YAChC,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;;IAED;;;;OAIG;IACH,mBAA0B,GAAW;QACjC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,mBAAmB,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,GAAG,GAAG,CAAC,CAAC,WAAW,EAAE,EAArB,CAAqB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAC/F,CAAC;;;;;QAAA,CAAC;;;;;;;;;;;;;;;;;YCfF;;eAEG;YACH;gBAAA;gBA6EA,CAAC;gBA3EG,yCAAS,GAAT,UAAU,SAAiB,EAAE,UAAkB;oBAC3C,MAAM,CAAC,UAAU,GAAG,UAAU,GAAG,uBAAS,CAAC,SAAS,CAAC,CAAC;gBAC1D,CAAC;gBAED,0CAAU,GAAV,UAAW,YAAoB,EAAE,UAAkB;oBAC/C,MAAM,CAAC,UAAU,GAAG,UAAU,GAAG,YAAY,CAAC;gBAClD,CAAC;gBAED,kDAAkB,GAAlB,UAAmB,QAAkB,EAAE,kBAA0B,EAAE,gBAAyB;oBACxF,uGAAuG;oBACvG,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,CAAC;oBAC/C,IAAM,oBAAoB,GAAG,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;oBAC7E,MAAM,CAAC,uBAAS,CAAC,oBAAoB,GAAG,CAAC,gBAAgB,GAAG,gBAAgB,GAAG,kBAAkB,CAAC,CAAC,CAAC;gBACxG,CAAC;gBAED,4CAAY,GAAZ,UAAa,YAAoB;oBAC7B,MAAM,CAAC,YAAY,CAAC;gBACxB,CAAC;gBAED,yCAAS,GAAT,UAAU,UAA4B,EAAE,SAAiB,EAAE,OAAiB;oBACxE,EAAE,CAAC,CAAC,UAAU,CAAC;wBACX,MAAM,CAAC,UAAU,CAAC;oBAEtB,IAAM,GAAG,GAAG,MAAM,GAAG,SAAS,GAAG,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACzD,MAAM,CAAC,MAAM,GAAG,iCAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC5D,CAAC;gBAED,yDAAyB,GAAzB,UAA0B,cAAsB,EAAE,YAAoB;oBAClE,EAAE,CAAC,CAAC,cAAc,CAAC;wBACf,MAAM,CAAC,cAAc,CAAC;oBAE1B,MAAM,CAAC,YAAY,CAAC;gBACxB,CAAC;gBAED,6CAAa,GAAb,UAAc,cAAsB,EACtB,eAAuB,EACvB,iBAAyB,EACzB,kBAA0B,EAC1B,eAAuB,EACvB,gBAAwB;oBAClC,MAAM,CAAC,uBAAS,CAAC,cAAc,GAAG,GAAG,GAAG,iBAAiB,GAAG,GAAG,GAAG,eAAe,GAAG,GAAG,GAAG,gBAAgB,CAAC,CAAC;gBAChH,CAAC;gBAED,mDAAmB,GAAnB,UAAoB,SAAiB,EAAE,UAAkB,EAAE,eAAuB,EAAE,gBAAwB;oBACxG,IAAM,OAAO,GAAG,uBAAS,CAAC,SAAS,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;oBACxD,IAAM,OAAO,GAAG,uBAAS,CAAC,eAAe,GAAG,GAAG,GAAG,gBAAgB,CAAC,CAAC;oBACpE,MAAM,CAAC,OAAO,KAAK,OAAO,GAAG,OAAO,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,qCAAqC;gBAChG,CAAC;gBAED,0DAA0B,GAA1B,UAA2B,SAAiB,EAAE,UAAkB,EAAE,eAAuB,EAAE,gBAAwB;oBAC/G,IAAM,OAAO,GAAG,uBAAS,CAAC,SAAS,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;oBACxD,IAAM,OAAO,GAAG,uBAAS,CAAC,eAAe,GAAG,GAAG,GAAG,gBAAgB,CAAC,CAAC;oBACpE,MAAM,CAAC,OAAO,KAAK,OAAO,GAAG,OAAO,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,qCAAqC;gBAChG,CAAC;gBAED,wDAAwB,GAAxB,UAAyB,SAAiB;oBACtC,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC;gBAClC,CAAC;gBAED,8CAAc,GAAd,UAAe,SAAiB,EAAE,WAAqB,EAAE,mBAA2B,EAAE,qBAA+B;oBACjH,IAAM,GAAG,GAAM,SAAS,SAAI,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,SAAI,mBAAmB,SAAI,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;oBAC9G,MAAM,CAAC,KAAK,GAAG,iCAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,4BAA4B;gBACxF,CAAC;gBAED,qEAAqC,GAArC,UAAsC,eAAoB,EAAE,yBAA8B;oBACtF,MAAM,CAAC,uBAAS,CAAC,eAAe,GAAG,GAAG,GAAG,yBAAyB,CAAC,CAAC;gBACxE,CAAC;gBAED;;mBAEG;gBACH,+CAAe,GAAf,UAAgB,MAAc,EAAE,iBAAyB;oBACrD,MAAM,CAAC,MAAM,GAAG,iBAAiB,CAAC;gBACtC,CAAC;gBAEL,4BAAC;YAAD,CA7EA,AA6EC,IAAA;;QACD,CAAC;;;;;;;;;;YCrFD;;;eAGG;YACH;gBAAuD,qDAAK;gBAGxD,2CAAY,WAAmB,EAAE,cAAsB;oBAAvD,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,8BAA8B,CAAC;oBAIlC,KAAI,CAAC,OAAO,GAAG,mBAAiB,WAAW,eAAS,cAAc,0EAAsE,CAAC;oBACzI,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,wCAAC;YAAD,CATA,AASC,CATsD,KAAK,GAS3D;;QAAA,CAAC;;;;;;;;;;YCbF;;eAEG;YACH;gBAAkD,gDAAK;gBAGnD,sCAAY,cAAsB;oBAAlC,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,8BAA8B,CAAC;oBAIlC,KAAI,CAAC,OAAO,GAAG,oBAAiB,cAAc,6DAAyD,CAAC;oBACxG,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,mCAAC;YAAD,CATA,AASC,CATiD,KAAK,GAStD;;QAAA,CAAC;;;;;;;;;;YCZF;;eAEG;YACH;gBAAwD,sDAAK;gBAGzD,4CAAY,cAAsB;oBAAlC,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,oCAAoC,CAAC;oBAIxC,KAAI,CAAC,OAAO,GAAG,uBAAoB,cAAc,0EAAsE,CAAC;oBACxH,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,yCAAC;YAAD,CATA,AASC,CATuD,KAAK,GAS5D;;QAAA,CAAC;;;;;;;;;;YCZF;;eAEG;YACH;gBAAiD,+CAAK;gBAGlD,qCAAY,YAA6B,EAAE,cAAsB;oBAAjE,YACI,iBAAO,SAKV;oBARD,UAAI,GAAG,6BAA6B,CAAC;oBAIjC,IAAM,IAAI,GAAG,YAAY,YAAY,QAAQ,GAAI,YAAoB,CAAC,IAAI,GAAG,YAAY,CAAC;oBAC1F,KAAI,CAAC,OAAO,GAAG,uBAAoB,IAAI,gEAA4D;yBAC/F,iDAA8C,cAAc,mBAAe,CAAA,CAAC;oBAChF,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,kCAAC;YAAD,CAXA,AAWC,CAXgD,KAAK,GAWrD;;QAAA,CAAC;;;;;;;;;;YCdF;;eAEG;YACH;gBAAiD,+CAAK;gBAGlD,qCAAY,cAAsB;oBAAlC,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,6BAA6B,CAAC;oBAIjC,KAAI,CAAC,OAAO,GAAG,iCAA8B,cAAc,6DAAyD,CAAC;oBACrH,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,kCAAC;YAAD,CATA,AASC,CATgD,KAAK,GASrD;;QAAA,CAAC;;;;;;;;;;YCZF;;eAEG;YACH;gBAA8D,4DAAK;gBAG/D,kDAAY,cAAsB;oBAAlC,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,0CAA0C,CAAC;oBAI9C,KAAI,CAAC,OAAO,GAAG,8CAA2C,cAAc,0EAAsE,CAAC;oBAC/I,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,+CAAC;YAAD,CATA,AASC,CAT6D,KAAK,GASlE;;QAAA,CAAC;;;;;;;;;;;;;;YCJF;;eAEG;YACH;gBAEI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,qBAAoB,UAAsB,EACtB,mBAAqD,EACrD,eAAyC;oBAFzC,eAAU,GAAV,UAAU,CAAY;oBACtB,wBAAmB,GAAnB,mBAAmB,CAAkC;oBACrD,oBAAe,GAAf,eAAe,CAA0B;gBAC7D,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACG,iDAA2B,GAAjC,UAAkC,aAA4B,EAAE,cAAyB,EAAE,cAAyB,EAAE,cAAyB;;;4BACrI,cAAc,EACd,cAAc,EACd,cAAc,EACd,WAAW;;;;qDAHM,cAAc,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,0BAA0B,CAAC,aAAa,EAAE,OAAO,CAAC,EAAvD,CAAuD,CAAC;qDACtF,cAAc,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,0BAA0B,CAAC,aAAa,EAAE,OAAO,CAAC,EAAvD,CAAuD,CAAC;qDACtF,cAAc,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,0BAA0B,CAAC,aAAa,EAAE,OAAO,CAAC,EAAvD,CAAuD,CAAC;kDACzF,cAAc,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC;oCAChF,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,EAAA;;oCAA9B,SAA8B,CAAC;;;;;iBAClC;gBAED;;mBAEG;gBACG,gDAA0B,GAAhC,UAAiC,aAA4B,EAAE,cAAyB,EAAE,cAAyB,EAAE,cAAyB;;;4BACpI,cAAc,EACd,cAAc,EACd,cAAc,EACd,WAAW;;;;qDAHM,cAAc,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,yBAAyB,CAAC,aAAa,EAAE,OAAO,CAAC,EAAtD,CAAsD,CAAC;qDACrF,cAAc,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,yBAAyB,CAAC,aAAa,EAAE,OAAO,CAAC,EAAtD,CAAsD,CAAC;qDACrF,cAAc,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,yBAAyB,CAAC,aAAa,EAAE,OAAO,CAAC,EAAtD,CAAsD,CAAC;kDACxF,cAAc,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC;oCAChF,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,EAAA;;oCAA9B,SAA8B,CAAC;;;;;iBAClC;gBAED;;;;;mBAKG;gBACG,gDAA0B,GAAhC,UAAiC,aAA4B,EAAE,OAAgB;;;4BAErE,SAAS,EAIT,WAAW;;;;gDAJC,IAAI,CAAC,eAAe;yCACjC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,uCAAkB,CAAC,aAAa,IAAI,KAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,EAAtG,CAAsG,CAAC;yCAC1H,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,EAA7C,CAA6C,CAAC;kDAErD,IAAI,CAAC,mBAAmB;yCACvC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,YAAY,EAArF,CAAqF,CAAC;yCAC3G,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,YAAa,CAAC;wCACxC,aAAa,EAAE,aAAa;wCAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;qCACzB,CAAC,EAHiB,CAGjB,CAAC;oCAEP,qBAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAA;;oCAAhD,SAAgD,CAAC;;;;;iBACpD;gBAED;;;;;mBAKG;gBACG,gDAA0B,GAAhC,UAAiC,aAA4B,EAAE,OAAgB;;;4BAErE,SAAS,EAIT,WAAW;;;;gDAJC,IAAI,CAAC,eAAe;yCACjC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,uCAAkB,CAAC,aAAa,IAAI,KAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,EAAtG,CAAsG,CAAC;yCAC1H,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,EAA7C,CAA6C,CAAC;kDAErD,IAAI,CAAC,mBAAmB;yCACvC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,YAAY,EAArF,CAAqF,CAAC;yCAC3G,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,YAAa,CAAC;wCACxC,aAAa,EAAE,aAAa;wCAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;wCACtB,cAAc,EAAE,OAAO,CAAC,cAAc;wCACtC,cAAc,EAAE,OAAO,CAAC,WAAW;wCACnC,gBAAgB,EAAE,OAAO,CAAC,aAAa;qCAC1C,CAAC,EANiB,CAMjB,CAAC;oCAEP,qBAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAA;;oCAAhD,SAAgD,CAAC;;;;;iBACpD;gBAED;;;;;mBAKG;gBACG,gDAA0B,GAAhC,UAAiC,aAA4B,EAAE,OAAgB;;;4BAErE,SAAS,EAIT,WAAW;;;;gDAJC,IAAI,CAAC,eAAe;yCACjC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,uCAAkB,CAAC,aAAa,IAAI,KAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,EAAtG,CAAsG,CAAC;yCAC1H,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,OAAO,CAAC,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,EAArD,CAAqD,CAAC;kDAE7D,IAAI,CAAC,mBAAmB;yCACvC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,YAAY,EAArF,CAAqF,CAAC;yCAC3G,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,YAAa,CAAC;wCACxC,aAAa,EAAE,aAAa;wCAC5B,MAAM,EAAE,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS;wCACtD,cAAc,EAAE,OAAO,CAAC,cAAc;wCACtC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,cAAc,CAAC;qCACzE,CAAC,EALiB,CAKjB,CAAC;oCAEP,qBAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAA;;oCAAhD,SAAgD,CAAC;;;;;iBACpD;gBAED;;;;;mBAKG;gBACG,+CAAyB,GAA/B,UAAgC,aAA4B,EAAE,OAAgB;;;4BAEpE,SAAS,EAIT,WAAW;;;;gDAJC,IAAI,CAAC,eAAe;yCACjC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,uCAAkB,CAAC,YAAY,IAAI,KAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,EAArG,CAAqG,CAAC;yCACzH,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,EAA7C,CAA6C,CAAC;kDAErD,IAAI,CAAC,mBAAmB;yCACvC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,WAAW,EAApF,CAAoF,CAAC;yCAC1G,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,WAAY,CAAC;wCACvC,aAAa,EAAE,aAAa;wCAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;qCACzB,CAAC,EAHiB,CAGjB,CAAC;oCAEP,qBAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAA;;oCAAhD,SAAgD,CAAC;;;;;iBACpD;gBAED;;;;;mBAKG;gBACG,+CAAyB,GAA/B,UAAgC,aAA4B,EAAE,OAAgB;;;4BAEpE,SAAS,EAIT,WAAW;;;;gDAJC,IAAI,CAAC,eAAe;yCACjC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,uCAAkB,CAAC,YAAY,IAAI,KAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,EAArG,CAAqG,CAAC;yCACzH,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,EAA7C,CAA6C,CAAC;kDAErD,IAAI,CAAC,mBAAmB;yCACvC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,WAAW,EAApF,CAAoF,CAAC;yCAC1G,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,WAAY,CAAC;wCACvC,aAAa,EAAE,aAAa;wCAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;wCACtB,cAAc,EAAE,OAAO,CAAC,cAAc;wCACtC,cAAc,EAAE,OAAO,CAAC,WAAW;wCACnC,gBAAgB,EAAE,OAAO,CAAC,aAAa;qCAC1C,CAAC,EANiB,CAMjB,CAAC;oCAEP,qBAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAA;;oCAAhD,SAAgD,CAAC;;;;;iBACpD;gBAED;;;;;mBAKG;gBACG,+CAAyB,GAA/B,UAAgC,aAA4B,EAAE,OAAgB;;;4BAEpE,SAAS,EAIT,WAAW;;;;gDAJC,IAAI,CAAC,eAAe;yCACjC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,uCAAkB,CAAC,YAAY,IAAI,KAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,EAArG,CAAqG,CAAC;yCACzH,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,EAA7C,CAA6C,CAAC;kDAErD,IAAI,CAAC,mBAAmB;yCACvC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,WAAW,EAApF,CAAoF,CAAC;yCAC1G,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,WAAY,CAAC;wCACvC,aAAa,EAAE,aAAa;wCAC5B,MAAM,EAAE,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS;wCACtD,cAAc,EAAE,OAAO,CAAC,cAAc;wCACtC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,cAAc,CAAC;qCACzE,CAAC,EALiB,CAKjB,CAAC;oCAEP,qBAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAA;;oCAAhD,SAAgD,CAAC;;;;;iBACpD;gBAED;;;;;mBAKG;gBACG,+CAAyB,GAA/B,UAAgC,MAAuB,EAAE,QAAyB;;;;;wCAC9E,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAxC,CAAwC,CAAC,CAAC,EAAA;;oCAAnF,SAAmF,CAAC;;;;;iBACvF;gBAED;;;;;mBAKG;gBACG,yCAAmB,GAAzB,UAA0B,MAAuB,EAAE,MAAqB;;;4BAK9D,QAAQ,EAcR,SAAS,EAIT,WAAW;;;;oCAtBjB,EAAE,CAAC,CAAC,MAAM,YAAY,OAAO,CAAC;wCAC1B,MAAM,gBAAC;+CAGM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,QAAQ,EAAE,QAAQ;wCACrF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;4CAC9C,MAAM,CAAC,QAAQ,CAAC;wCAEpB,IAAM,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;wCAC9C,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;4CACzB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,qBAAqB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;wCAC7G,CAAC;wCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4CACf,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,qBAAqB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;wCAC1F,CAAC;wCAED,MAAM,CAAC,QAAQ,CAAC;oCACpB,CAAC,EAAE,EAAqB,CAAC;gDAEP,IAAI,CAAC,eAAe;yCACjC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,uCAAkB,CAAC,UAAU,IAAI,KAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,EAA3F,CAA2F,CAAC;yCAC/G,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,EAA/B,CAA+B,CAAC;kDAEjC,IAAI,CAAC,mBAAmB;yCACvC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,UAAU,CAAC,SAAS,EAApE,CAAoE,CAAC;yCAC1F,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,SAAU,CAAC,MAAM,CAAC,EAA7B,CAA6B,CAAC;oCAErD,qBAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAA;;oCAAjE,SAAiE,CAAC;;;;;iBACrE;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;mBAEG;gBACO,uCAAiB,GAA3B,UAA4B,QAAgC,EAAE,MAAqB;oBAC/E,0DAA0D;oBAC1D,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,MAAM,CAAC,WAAW;wBACzC,CAAC,QAAQ,CAAC,MAAM,YAAY,QAAQ,IAAI,MAAM,CAAC,WAAW,CAAC,SAAS,YAAY,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,yDAAyD;gBACnK,CAAC;gBAED;;;mBAGG;gBACO,yCAAmB,GAA7B,UAA8B,UAA0C,EAAE,MAAuB;oBAC7F,MAAM,CAAE,CAAC,UAAU,CAAC,QAAQ;wBACpB,CAAC,UAAU,CAAC,QAAQ,EAAE;wBACtB,UAAU,CAAC,QAAQ,EAAE,KAAK,MAAM;wBAChC,UAAU,CAAC,QAAQ,EAAE,KAAK,MAAM,CAAC;gBAC7C,CAAC;gBAEL,kBAAC;YAAD,CAzPA,AAyPC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCtPF;;;;;;;;;;;;;eAaG;YACH;gBAgBI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E;;;;mBAIG;gBACH,uBAAsB,MAAc,EACd,MAAc,EACd,eAAiC;oBAFjC,WAAM,GAAN,MAAM,CAAQ;oBACd,WAAM,GAAN,MAAM,CAAQ;oBACd,oBAAe,GAAf,eAAe,CAAkB;gBACvD,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACG,6BAAK,GAAX;;;;;;oCACI,KAAA,IAAI,CAAA;oCAAe,qBAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAA;;oCAAxD,GAAK,WAAW,GAAG,SAAqC,CAAC;oCACzD,KAAA,IAAI,CAAA;oCAAgB,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;oCAAjD,GAAK,YAAY,GAAG,SAA6B,CAAC;oCAElD,qBAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,EAAA;;oCAAzC,SAAyC,CAAC;;;;oCAEtC,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;oCAA/B,SAA+B,CAAC;oCAChC,gHAAgH;oCAChH,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;oCAD5B,gHAAgH;oCAChH,SAA4B,CAAC;oCAC7B,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;oCAA/B,SAA+B,CAAC;oCAChC,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;;oCAA1B,SAA0B,CAAC;oCAC3B,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;oCAA/B,SAA+B,CAAC;oCAChC,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;oCAA9B,SAA8B,CAAC;oCAC/B,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;oCAA9B,SAA8B,CAAC;oCAC/B,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;;oCAA1B,SAA0B,CAAC;oCAC3B,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,EAAA;;oCAA1C,SAA0C,CAAC;;;;oCAG3C,qBAAM,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,EAAA;;oCAA5C,SAA4C,CAAC;oCAC7C,MAAM,OAAK,CAAC;yCAGZ,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAA;;oCAAhC,SAAgC,CAAC;;;;;;iBAExC;gBAMD,sBAAc,gDAAqB;oBAJnC,4EAA4E;oBAC5E,kBAAkB;oBAClB,4EAA4E;yBAE5E;wBACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,EAA9B,CAA8B,CAAC,CAAC;oBACnF,CAAC;;;mBAAA;gBAED;;mBAEG;gBACO,wCAAgB,GAA1B;oBACI,IAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAnB,CAAmB,CAAC,CAAC;oBACnF,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBACzD,CAAC;gBAED;;mBAEG;gBACa,0CAAkB,GAAlC;;;;;wCACI,qBAAM,2BAAY,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAM,QAAQ;4CAEjE,WAAW,EAKX,uBAAuB;;;;kEALT,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAlC,CAAkC,CAAC;oDACvF,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wDACb,MAAM,gBAAC;8EAGqB,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,gBAAgB;wDAC3E,MAAM,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,kBAAkB,IAAI,OAAA,kBAAkB,CAAC,IAAI,KAAK,gBAAgB,CAAC,IAAI,EAAjD,CAAiD,CAAC,CAAC;oDAC/G,CAAC,CAAC;oDACF,EAAE,CAAC,CAAC,uBAAuB,CAAC,MAAM,KAAK,CAAC,CAAC;wDACrC,MAAM,gBAAC;oDAEX,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,kCAAgC,WAAW,CAAC,IAAI,UAAK,uBAAuB,CAAC,GAAG,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,IAAI,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;oDAE7J,4CAA4C;oDAC5C,WAAW,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,CAAC;oDAEvD,sCAAsC;oDACtC,qBAAM,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,WAAW,EAAE,uBAAuB,CAAC,EAAA;;oDAD5E,sCAAsC;oDACtC,SAA4E,CAAC;;;;yCAChF,CAAC,EAAA;;oCApBF,SAoBE,CAAC;;;;;iBACN;gBAED;;;;mBAIG;gBACa,uCAAe,GAA/B;;;;;wCACI,qBAAM,2BAAY,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAM,QAAQ;4CAEjE,gBAAgB,EAOhB,WAAW;;;;uEAPQ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAlC,CAAkC,CAAC;oDAC5F,EAAE,CAAC,CAAC,gBAAgB,CAAC;wDACjB,MAAM,gBAAC;oDAEX,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,2BAAyB,QAAQ,CAAC,KAAK,CAAC,IAAM,CAAC,CAAC;kEAGvD,IAAI,yBAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC;oDACrH,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oDACpC,qBAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,EAAA;;oDAA/C,SAA+C,CAAC;;;;yCACnD,CAAC,EAAA;;oCAZF,SAYE,CAAC;;;;;iBACN;gBAED;;;mBAGG;gBACO,0CAAkB,GAA5B;oBAAA,iBA+BC;oBA9BG,MAAM,CAAC,2BAAY,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAM,QAAQ;;4BAClE,WAAW,EAIX,oBAAoB;;;;kDAJN,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAlC,CAAkC,CAAC;oCACvF,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCAAC,MAAM,gBAAC;2DAGI,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,YAAY;wCAChE,MAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,QAAQ,KAAK,YAAY,CAAC,IAAI,EAA7C,CAA6C,CAAC,CAAC;oCACnG,CAAC,CAAC;oCACF,EAAE,CAAC,CAAC,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC;wCAClC,MAAM,gBAAC;oCAEX,qEAAqE;oCACrE,qBAAM,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAA,mBAAmB;4CAC1D,MAAM,CAAC,KAAI,CAAC,+BAA+B,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAC;wCAC/F,CAAC,CAAC,CAAC,EAAA;;oCAHH,qEAAqE;oCACrE,SAEG,CAAC;oCAEJ,6CAA6C;oCAC7C,qBAAM,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAA,mBAAmB;4CAC1D,MAAM,CAAC,KAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAC;wCAC3F,CAAC,CAAC,CAAC,EAAA;;oCAHH,6CAA6C;oCAC7C,SAEG,CAAC;oCAEJ,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,wBAAsB,WAAW,CAAC,IAAI,OAAI,GAAG,oBAAoB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oCAEpI,8FAA8F;oCAC9F,WAAW,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;oCAChD,WAAW,CAAC,0BAA0B,CAAC,oBAAoB,CAAC,CAAC;oCAE7D,iCAAiC;oCACjC,qBAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,oBAAoB,CAAC,EAAA;;oCADrE,iCAAiC;oCACjC,SAAqE,CAAC;;;;yBACzE,CAAC,CAAC;gBACP,CAAC;gBAED;;;mBAGG;gBACO,qCAAa,GAAvB;oBAAA,iBAoBC;oBAnBG,MAAM,CAAC,2BAAY,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAM,QAAQ;4BAClE,WAAW,EAKX,kBAAkB,EASlB,gBAAgB;;;;kDAdF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAlC,CAAkC,CAAC;oCACvF,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,gBAAC;yDAGgB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,cAAc;wCAC7D,MAAM,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,IAAI,KAAK,cAAc,CAAC,QAAQ,EAA7C,CAA6C,CAAC,CAAC;oCACpG,CAAC,CAAC;oCACF,EAAE,CAAC,CAAC,kBAAkB,CAAC,MAAM,KAAK,CAAC,CAAC;wCAChC,MAAM,gBAAC;oCAEX,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,qBAAqB,GAAG,kBAAkB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,EAAf,CAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;uDAGxF,IAAI,CAAC,8BAA8B,CAAC,kBAAkB,CAAC;oCAChF,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,EAAE,gBAAgB,CAAC,EAAA;;oCAAhE,SAAgE,CAAC;oCACjE,WAAW,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;;;;yBAC5C,CAAC,CAAC;gBACP,CAAC;gBAED;;;mBAGG;gBACO,0CAAkB,GAA5B;oBAAA,iBA0CC;oBAzCG,MAAM,CAAC,2BAAY,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAM,QAAQ;;4BAClE,WAAW,EAIX,oBAAoB,EAOpB,8BAA8B,EAQ9B,0BAA0B,EAQ1B,sBAAsB;;;;kDA3BR,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAlC,CAAkC,CAAC;oCACvF,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,gBAAC;2DAEkB,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC;oCAC/F,EAAE,CAAC,CAAC,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC;wCAClC,MAAM,gBAAC;oCAEX,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,wBAAsB,WAAW,CAAC,IAAI,iBAAc,GAAG,oBAAoB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;qEAGvG,oBAAoB;yCACtD,MAAM,CAAC,UAAA,mBAAmB,IAAI,OAAA,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,QAAQ,KAAK,mBAAmB,CAAC,IAAI,EAApD,CAAoD,CAAC,EAA/F,CAA+F,CAAC;yCAC9H,GAAG,CAAC,UAAA,mBAAmB,IAAI,OAAA,KAAI,CAAC,+BAA+B,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,mBAAmB,CAAC,IAAI,CAAC,EAAnF,CAAmF,CAAC;oCAEpH,kDAAkD;oCAClD,qBAAM,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,EAAA;;oCADjD,kDAAkD;oCAClD,SAAiD,CAAC;iEAGf,oBAAoB;yCAClD,MAAM,CAAC,UAAA,mBAAmB,IAAI,OAAA,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,QAAQ,KAAK,mBAAmB,CAAC,IAAI,EAApD,CAAoD,CAAC,EAA/F,CAA+F,CAAC;yCAC9H,GAAG,CAAC,UAAA,mBAAmB,IAAI,OAAA,KAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,mBAAmB,CAAC,IAAI,CAAC,EAA/E,CAA+E,CAAC;oCAEhH,6CAA6C;oCAC7C,qBAAM,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,EAAA;;oCAD7C,6CAA6C;oCAC7C,SAA6C,CAAC;6DAGf,oBAAoB,CAAC,GAAG,CAAC,UAAA,mBAAmB;wCACvE,IAAM,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,QAAQ,KAAK,mBAAmB,CAAC,IAAI,EAA5C,CAA4C,CAAC,CAAC;wCACrG,IAAM,eAAe,GAAG,2BAAY,CAAC,MAAM,CAAC,cAAe,EAAE,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,cAAe,CAAC,CAAC,CAAC;wCAC9G,WAAW,CAAC,aAAa,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;wCAEhE,MAAM,CAAC;4CACH,SAAS,EAAE,eAAe;4CAC1B,SAAS,EAAE,mBAAmB;yCACjC,CAAC;oCACN,CAAC,CAAC;oCAEF,sBAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,EAAE,sBAAsB,CAAC,EAAC;;;yBAC9E,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACO,yCAAiB,GAA3B;oBAAA,iBAyBC;oBAxBG,MAAM,CAAC,2BAAY,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAM,QAAQ;4BAClE,WAAW,EAIX,sBAAsB,EACtB,SAAS,EAMT,WAAW;;;;kDAXG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAxD,CAAwD,CAAC;oCAC7G,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,gBAAC;6DAEoB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC;gDACvF,sBAAsB;yCACnC,MAAM,CAAC,UAAA,UAAU;wCACd,MAAM,CAAC,CAAC,WAAW,CAAC,2BAA2B,CAAC,IAAI,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,UAAU,KAAK,UAAU,CAAC,QAAQ,EAA/C,CAA+C,CAAC,CAAC;oCAC1H,CAAC,CAAC;yCACD,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,IAAI,mCAAgB,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,EAA7C,CAA6C,CAAC;kDAEjD,WAAW,CAAC,2BAA2B,CAAC,MAAM,CAAC,UAAA,gBAAgB;wCAC/E,MAAM,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAA,kBAAkB,IAAI,OAAA,kBAAkB,CAAC,QAAQ,KAAK,gBAAgB,CAAC,UAAU,EAA3D,CAA2D,CAAC,CAAC;oCAC3H,CAAC,CAAC;oCAEF,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC;wCACnD,MAAM,gBAAC;oCAEX,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,qBAAmB,WAAW,CAAC,IAAI,iCAA2B,WAAW,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,UAAU,EAAd,CAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,SAAS,oBAAa,SAAS,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,UAAU,EAAd,CAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,SAAS,CAAE,CAAC,CAAC;oCACpO,WAAW,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;oCACtC,WAAW,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;oCAC3C,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,WAAW,CAAC,EAAA;;oCAArD,SAAqD,CAAC;;;;yBACzD,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACO,yCAAiB,GAA3B;oBAAA,iBAiBC;oBAhBG,MAAM,CAAC,2BAAY,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAM,QAAQ;4BAClE,WAAW,EAIX,OAAO,EAMP,aAAa;;;;kDAVC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAlC,CAAkC,CAAC;oCACvF,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,gBAAC;8CAEK,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,UAAU;wCAClD,MAAM,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,EAArC,CAAqC,CAAC,CAAC;oCAChG,CAAC,CAAC;oCACF,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;wCACrB,MAAM,gBAAC;oDAEW,OAAO,CAAC,GAAG,CAAC,UAAA,kBAAkB,IAAI,OAAA,mCAAgB,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAA3C,CAA2C,CAAC;oCACpG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,8BAA4B,OAAO,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAR,CAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;oCAClG,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,WAAW,EAAE,aAAa,CAAC,EAAA;;oCAApE,SAAoE,CAAC;oCACrE,WAAW,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;;;;yBAC7C,CAAC,CAAC;gBACP,CAAC;gBAED;;;mBAGG;gBACO,qCAAa,GAAvB;oBAAA,iBA4BC;oBA3BG,kHAAkH;oBAClH,MAAM,CAAC,2BAAY,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAM,QAAQ;;4BAClE,WAAW,EAKX,WAAW,EASX,UAAU;;;;kDAdI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAlC,CAAkC,CAAC;oCACvF,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,gBAAC;kDAGS,WAAW,CAAC,OAAO;yCAClC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,aAAa,IAAI,OAAA,aAAa,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,EAAvC,CAAuC,CAAC,EAAhF,CAAgF,CAAC;yCACvG,GAAG,CAAC,UAAM,WAAW;;;;oDAClB,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,wBAAsB,WAAW,CAAC,IAAM,CAAC,CAAC;oDACrE,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;oDACrC,qBAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,EAAA;;oDAAvE,SAAuE,CAAC;;;;yCAC3E,CAAC;iDAGa,QAAQ,CAAC,OAAO;yCAC9B,MAAM,CAAC,UAAA,aAAa,IAAI,OAAA,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,EAAvC,CAAuC,CAAC,EAAjF,CAAiF,CAAC;yCAC1G,GAAG,CAAC,UAAM,aAAa;4CACd,WAAW;;;;kEAAG,yBAAW,CAAC,MAAM,CAAC,aAAa,CAAC;oDACrD,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oDACtC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,uBAAqB,WAAW,CAAC,IAAM,CAAC,CAAC;oDACpE,qBAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,EAAA;;oDAAtE,SAAsE,CAAC;;;;yCAC1E,CAAC;oCAEN,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAA;;oCAAjD,SAAiD,CAAC;;;;yBACrD,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACa,mDAA2B,GAA3C,UAA4C,SAAiB,EAAE,UAAkB;;;4BAEvE,iBAAiB,EAKjB,WAAW,EAOX,aAAa,EAMb,oBAAoB,EAQpB,YAAY;;;;wDA1BQ,IAAI,CAAC,eAAe,CAAC,MAAM,CACjD,UAAC,GAAG,EAAE,QAAQ,IAAK,OAAA,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAA5B,CAA4B,EAC/C,EAAqB,CACxB;kDAEmB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,SAAS,EAAxB,CAAwB,CAAC;oCAC7E,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,gBAAC;oDAKW,iBAAiB,CAAC,MAAM,CAAC,UAAA,aAAa;wCACxD,MAAM,CAAC,aAAa,CAAC,SAAS,KAAK,SAAS,IAAI,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oCACrG,CAAC,CAAC;oCACF,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC;wCACtB,MAAM,gBAAC;2DAEkB,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,WAAW;wCAC/D,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,aAAa,IAAI,OAAA,WAAW,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,EAAvC,CAAuC,CAAC,CAAC;oCAC1F,CAAC,CAAC;oCACF,EAAE,CAAC,CAAC,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC;wCAClC,MAAM,gBAAC;oCAEX,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,iCAA+B,SAAS,SAAI,UAAU,UAAK,oBAAoB,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,EAAV,CAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;mDAE7H,oBAAoB,CAAC,GAAG,CAAC,UAAA,KAAK;wCAC/C,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;wCAC/B,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;oCACpE,CAAC,CAAC;oCAEF,qBAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAA;;oCAA/B,SAA+B,CAAC;;;;;iBACnC;gBAED;;mBAEG;gBACa,uDAA+B,GAA/C,UAAgD,SAAiB,EAAE,UAAkB;;4BAE3E,sBAAsB,EAKtB,WAAW,EAKX,iBAAiB,EAejB,uBAAuB,EAOvB,iBAAiB;;;;6DAhCQ,IAAI,CAAC,eAAe,CAAC,MAAM,CACtD,UAAC,GAAG,EAAE,QAAQ,IAAK,OAAA,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAhC,CAAgC,EACnD,EAA0B,CAC7B;kDAEmB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,SAAS,EAAxB,CAAwB,CAAC;oCAC7E,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,gBAAC;wDAGe,sBAAsB,CAAC,MAAM,CAAC,UAAA,UAAU;wCAC9D,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;4CACrC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,QAAQ;gDACrC,MAAM,CAAC,QAAQ,CAAC,QAAQ,KAAK,UAAU,CAAC;4CAC5C,CAAC,CAAC,CAAC;wCACP,CAAC;wCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;4CACtD,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAA,QAAQ;gDAC/C,MAAM,CAAC,QAAQ,CAAC,QAAQ,KAAK,UAAU,CAAC;4CAC5C,CAAC,CAAC,CAAC;wCACP,CAAC;wCACD,MAAM,CAAC,KAAK,CAAC;oCACjB,CAAC,CAAC;oCACF,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC;wCAC1B,MAAM,gBAAC;8DAEqB,iBAAiB,CAAC,MAAM,CAAC,UAAA,EAAE;wCACvD,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,EAA7B,CAA6B,CAAC,CAAC;oCACzF,CAAC,CAAC;oCACF,EAAE,CAAC,CAAC,uBAAuB,CAAC,MAAM,KAAK,CAAC,CAAC;wCACrC,MAAM,gBAAC;oCAEX,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,sCAAoC,SAAS,SAAI,UAAU,UAAK,uBAAuB,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,EAAf,CAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;wDAC1I,uBAAuB,CAAC,GAAG,CAAC,UAAA,kBAAkB,IAAI,OAAA,mCAAgB,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAA3C,CAA2C,CAAC;oCACxH,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;oCACjD,qBAAM,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,WAAW,EAAE,iBAAiB,CAAC,EAAA;;oCAAtE,SAAsE,CAAC;;;;;iBAC1E;gBAED;;mBAEG;gBACO,sDAA8B,GAAxC,UAAyC,OAAyB;oBAAlE,iBAIC;oBAHG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,cAAc;wBAC7B,MAAM,CAAC,2BAAY,CAAC,MAAM,CAAC,cAAc,EAAE,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;oBAC/F,CAAC,CAAC,CAAC;gBACP,CAAC;gBAEL,oBAAC;YAAD,CA9ZA,AA8ZC,IAAA;;QAAA,CAAC;;;;;;;;;;YC1bF;eACG;YACH;gBAA4C,0CAAK;gBAG7C,gCAAY,MAAuB;oBAAnC,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,wBAAwB,CAAC;oBAI5B,IAAM,UAAU,GAAG,OAAO,MAAM,KAAK,UAAU,IAAW,MAAO,CAAC,IAAI,GAAU,MAAO,CAAC,IAAI,GAAG,MAAM,CAAC;oBACtG,KAAI,CAAC,OAAO,GAAG,uBAAoB,UAAU,kBAAc,CAAC;;gBAChE,CAAC;gBAEL,6BAAC;YAAD,CATA,AASC,CAT2C,KAAK,GAShD;;QAAA,CAAC;;;;;;;;;QCQD,CAAC;;;;;;;;;;YCjBF;;eAEG;YACH;gBAqBI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,mBAAY,SAAiB,EAAE,IAAY,EAAE,QAA6B;oBACtE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC7B,CAAC;gBAEL,gBAAC;YAAD,CA/BA,AA+BC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YC1BF;;eAEG;YACH;gBAQI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,2BAAsB,UAAsB,EAAE,mBAAyC;oBAAjE,eAAU,GAAV,UAAU,CAAY;oBACxC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,IAAI,IAAI,yCAAmB,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACvG,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;mBAGG;gBACG,oDAAwB,GAA9B;;;yCAEU,aAAa,sBASf,yBAAyB,EAGvB,aAAa,EAGb,iBAAiB,EA4BnB,sBAAsB;;;wCA5CN,qBAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAxC,SAAwC;oDACtC,IAAI,CAAC,UAAU,CAAC,+CAA+C,CAAC,IAAI,CAAC,mBAAmB,CAAC;oCAE/G,iDAAiD;oCACjD,qBAAM,IAAI,CAAC,+BAA+B,EAAE,EAAA;;oCAD5C,iDAAiD;oCACjD,SAA4C,CAAC;oCAGlB,qBAAM,IAAI,CAAC,sBAAsB,EAAE,EAAA;;yDAAnC,SAAmC;gEAG9B,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC;oDAGrD,IAAI,CAAC,aAAa,EAAE;wDAGhB,aAAa,CAAC,MAAM,CAAC,UAAA,SAAS;wCACpD,8CAA8C;wCAC9C,IAAM,iBAAiB,GAAG,kBAAkB,CAAC,IAAI,CAAC,UAAA,iBAAiB,IAAI,OAAA,iBAAiB,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,EAAzC,CAAyC,CAAC,CAAC;wCAClH,EAAE,CAAC,CAAC,iBAAiB,CAAC;4CAClB,MAAM,CAAC,KAAK,CAAC;wCAEjB,2EAA2E;wCAC3E,EAAE,CAAC,CAAC,yBAAyB,IAAI,SAAS,CAAC,SAAS,GAAG,yBAAyB,CAAC,SAAS,CAAC;4CACvF,MAAM,IAAI,KAAK,CAAC,0BAAwB,SAAS,CAAC,IAAI,mJAAgJ,CAAC,CAAC;wCAE5M,mFAAmF;wCACnF,MAAM,CAAC,IAAI,CAAC;oCAChB,CAAC,CAAC;oCAEF,uDAAuD;oCACvD,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;wCAC5B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,2BAA2B,CAAC,CAAC;wCAChE,MAAM,gBAAC;oCACX,CAAC;oCAED,4CAA4C;oCAC5C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAK,kBAAkB,CAAC,MAAM,oDAAiD,CAAC,CAAC;oCAClH,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAK,aAAa,CAAC,MAAM,+CAA4C,CAAC,CAAC;oCACxG,EAAE,CAAC,CAAC,yBAAyB,CAAC;wCAC1B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAK,yBAAyB,CAAC,IAAI,4DAAuD,IAAI,IAAI,CAAC,yBAAyB,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,QAAQ,EAAE,MAAG,CAAC,CAAC;oCACnM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAK,iBAAiB,CAAC,MAAM,8DAA2D,CAAC,CAAC;6DAG9F,KAAK;yCAC9B,CAAC,WAAW,CAAC,mBAAmB,EAAE,EAAlC,wBAAkC;oCAClC,qBAAM,WAAW,CAAC,gBAAgB,EAAE,EAAA;;oCAApC,SAAoC,CAAC;oCACrC,sBAAsB,GAAG,IAAI,CAAC;;;;oCAK9B,qBAAM,2BAAY,CAAC,aAAa,CAAC,iBAAiB,EAAE,UAAA,SAAS;4CACzD,MAAM,CAAC,SAAS,CAAC,QAAS,CAAC,EAAE,CAAC,WAAW,EAAE,KAAI,CAAC,UAAU,EAAE,aAAa,CAAC;iDACrE,IAAI,CAAC;gDACF,MAAM,CAAC,KAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;4CACnD,CAAC,CAAC;iDACD,IAAI,CAAC;gDACF,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,eAAa,SAAS,CAAC,IAAI,qCAAkC,CAAC,CAAC;4CACtG,CAAC,CAAC,CAAC;wCACX,CAAC,CAAC,EAAA;;oCARF,SAQE,CAAC;yCAGC,sBAAsB,EAAtB,wBAAsB;oCACtB,qBAAM,WAAW,CAAC,iBAAiB,EAAE,EAAA;;oCAArC,SAAqC,CAAC;;;;;yCAGtC,sBAAsB,EAAtB,yBAAsB;oCACtB,qBAAM,WAAW,CAAC,mBAAmB,EAAE,EAAA;;oCAAvC,SAAuC,CAAC;;yCAE5C,MAAM,KAAG,CAAC;;;;;iBAGjB;gBAED;;mBAEG;gBACG,6CAAiB,GAAvB;;yCAEU,aAAa,sBASf,yBAAyB,EASvB,aAAa,EAGb,iBAAiB,EAYnB,sBAAsB;;;wCAlCN,qBAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAxC,SAAwC;oDACtC,IAAI,CAAC,UAAU,CAAC,+CAA+C,CAAC,IAAI,CAAC,mBAAmB,CAAC;oCAE/G,iDAAiD;oCACjD,qBAAM,IAAI,CAAC,+BAA+B,EAAE,EAAA;;oCAD5C,iDAAiD;oCACjD,SAA4C,CAAC;oCAGlB,qBAAM,IAAI,CAAC,sBAAsB,EAAE,EAAA;;yDAAnC,SAAmC;gEAG9B,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC;oCAE3E,gEAAgE;oCAChE,EAAE,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC;wCAC7B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,6DAA6D,CAAC,CAAC;wCAClG,MAAM,gBAAC;oCACX,CAAC;oDAGqB,IAAI,CAAC,aAAa,EAAE;wDAGhB,aAAa,CAAC,IAAI,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,IAAI,KAAK,yBAA0B,CAAC,IAAI,EAAlD,CAAkD,CAAC;oCAE7G,gEAAgE;oCAChE,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC;wCACnB,MAAM,IAAI,KAAK,CAAC,kBAAgB,yBAAyB,CAAC,IAAI,kIAA+H,CAAC,CAAC;oCAEnM,4CAA4C;oCAC5C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAK,kBAAkB,CAAC,MAAM,oDAAiD,CAAC,CAAC;oCAClH,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAK,yBAAyB,CAAC,IAAI,4DAAuD,IAAI,IAAI,CAAC,yBAAyB,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,QAAQ,EAAE,MAAG,CAAC,CAAC;oCAC/L,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;6DAG7B,KAAK;yCAC9B,CAAC,WAAW,CAAC,mBAAmB,EAAE,EAAlC,wBAAkC;oCAClC,qBAAM,WAAW,CAAC,gBAAgB,EAAE,EAAA;;oCAApC,SAAoC,CAAC;oCACrC,sBAAsB,GAAG,IAAI,CAAC;;;;oCAI9B,qBAAM,iBAAiB,CAAC,QAAS,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,EAAA;;oCAAnF,SAAmF,CAAC;oCACpF,qBAAM,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,EAAA;;oCAArD,SAAqD,CAAC;oCACtD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,eAAa,iBAAiB,CAAC,IAAI,qCAAkC,CAAC,CAAC;yCAGtG,sBAAsB,EAAtB,wBAAsB;oCACtB,qBAAM,WAAW,CAAC,iBAAiB,EAAE,EAAA;;oCAArC,SAAqC,CAAC;;;;;yCAGtC,sBAAsB,EAAtB,yBAAsB;oCACtB,qBAAM,WAAW,CAAC,mBAAmB,EAAE,EAAA;;oCAAvC,SAAuC,CAAC;;yCAE5C,MAAM,KAAG,CAAC;;;;;iBAEjB;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;mBAEG;gBACa,2DAA+B,GAA/C;;;;;wCACwB,qBAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAxC,SAAwC;oCACzC,qBAAM,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAA;;iDAAxC,SAAwC;yCACvD,CAAC,UAAU,EAAX,wBAAW;oCACX,qBAAM,WAAW,CAAC,WAAW,CAAC,IAAI,yBAAW,CAAC,YAAY,EAAE;4CACxD,IAAI,2BAAY,CAAC;gDACb,IAAI,EAAE,WAAW;gDACjB,IAAI,EAAE,WAAW,CAAC,aAAa,CAAC;oDAC5B,IAAI,EAAE,yBAAW,CAAC,MAAM;iDAC3B,CAAC;gDACF,SAAS,EAAE,IAAI;gDACf,UAAU,EAAE,KAAK;6CACpB,CAAC;4CACF,IAAI,2BAAY,CAAC;gDACb,IAAI,EAAE,MAAM;gDACZ,IAAI,EAAE,WAAW,CAAC,aAAa,CAAC;oDAC5B,IAAI,EAAE,yBAAW,CAAC,MAAM;iDAC3B,CAAC;gDACF,UAAU,EAAE,KAAK;6CACpB,CAAC;yCACL,CAAC,CAAC,EAAA;;oCAhBH,SAgBG,CAAC;;;;;;iBAEX;gBAED;;mBAEG;gBACa,kDAAsB,GAAtC;;;;;wCAC2C,qBAAM,IAAI,2BAAY,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC;yCACnG,MAAM,EAAE;yCACR,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC;yCACrC,UAAU,EAAE,EAAA;;oDAHsB,SAGtB;oCAEjB,sBAAO,aAAa,CAAC,GAAG,CAAC,UAAA,YAAY;4CACjC,MAAM,CAAC,IAAI,qBAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;wCACpF,CAAC,CAAC,EAAC;;;;iBACN;gBAED;;mBAEG;gBACO,yCAAa,GAAvB;oBACI,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,UAAA,SAAS;wBAC5D,IAAM,kBAAkB,GAAI,SAAS,CAAC,WAAmB,CAAC,IAAI,CAAC;wBAC/D,IAAM,kBAAkB,GAAG,QAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACpE,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC;4BACpB,MAAM,IAAI,KAAK,CAAC,8EAA4E,kBAAkB,8BAA2B,CAAC,CAAC;wBAE/I,MAAM,CAAC,IAAI,qBAAS,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,SAAS,CAAC,CAAC;oBAC5E,CAAC,CAAC,CAAC;oBAEH,yBAAyB;oBACzB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAzB,CAAyB,CAAC,CAAC;gBAChE,CAAC;gBAED;;mBAEG;gBACO,8CAAkB,GAA5B,UAA6B,UAAuB;oBAChD,IAAM,gBAAgB,GAAG,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAhC,CAAgC,CAAC,CAAC;oBACjH,MAAM,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;gBACzE,CAAC;gBAED;;mBAEG;gBACa,mDAAuB,GAAvC,UAAwC,SAAoB;;;;;wCACpC,qBAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAxC,SAAwC;oCAC5D,qBAAM,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE;4CACnC,SAAS,EAAE,SAAS,CAAC,SAAS;4CAC9B,IAAI,EAAE,SAAS,CAAC,IAAI;yCACvB,CAAC,EAAA;;oCAHF,SAGE,CAAC;;;;;iBACN;gBAED;;mBAEG;gBACa,mDAAuB,GAAvC,UAAwC,SAAoB;;;;;wCACpC,qBAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAA;;kDAAxC,SAAwC;oCAC5D,qBAAM,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE;4CACnC,SAAS,EAAE,SAAS,CAAC,SAAS;4CAC9B,IAAI,EAAE,SAAS,CAAC,IAAI;yCACvB,CAAC,EAAA;;oCAHF,SAGE,CAAC;;;;;iBACN;gBAEL,wBAAC;YAAD,CA7PA,AA6PC,IAAA;;QAAA,CAAC;;;;;;;;;;YC1QF;;eAEG;YACH;gBAAyD,uDAAK;gBAG1D,6CAAY,cAAsB;oBAAlC,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,qCAAqC,CAAC;oBAIzC,KAAI,CAAC,OAAO,GAAG,uCAAoC,cAAc,6DAAyD,CAAC;oBAC3H,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,0CAAC;YAAD,CATA,AASC,CATwD,KAAK,GAS7D;;QAAA,CAAC;;;;;;;;;;YCZF;;eAEG;YACH;gBAA4D,0DAAK;gBAG7D,gDAAY,UAAe;oBAA3B,YACI,kBAAM,wBAAqB,UAAU,YAAY,QAAQ,GAAG,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,qCAAiC;wBAC1I,uEAAuE,CAAC,SAC3E;oBALD,UAAI,GAAG,wCAAwC,CAAC;;gBAKhD,CAAC;gBAEL,6CAAC;YAAD,CARA,AAQC,CAR2D,KAAK,GAQhE;;QAAA,CAAC;;;;;;;;;;;;;;YCDF;;;;;;eAMG;YACH;gBAAA;gBAsGA,CAAC;gBApFG,sBAAc,6CAAa;oBAP3B,4EAA4E;oBAC5E,sBAAsB;oBACtB,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;oBACzC,CAAC;;;mBAAA;gBAMD,sBAAc,0CAAU;oBAJxB;;;uBAGG;yBACH;wBACI,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,IAAW,CAAC,CAAC;wBACtE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,+EAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAEvE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAS,MAAM,CAAC,CAAC;oBACzD,CAAC;;;mBAAA;gBAMD,sBAAc,8CAAc;oBAJ5B;;;uBAGG;yBACH;wBACI,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,IAAW,CAAC,CAAC;wBACtE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,+EAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAEvE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAS,MAAM,CAAC,CAAC;oBAC7D,CAAC;;;mBAAA;gBAMD,sBAAc,kDAAkB;oBAJhC;;;uBAGG;yBACH;wBACI,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,IAAW,CAAC,CAAC;wBACtE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;4BACR,MAAM,IAAI,+EAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAEvE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAS,MAAM,CAAC,CAAC;oBACjE,CAAC;;;mBAAA;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;;mBAGG;gBACO,+CAAkB,GAA5B,UAA6B,KAAa;oBACtC,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC3E,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wBACR,MAAM,IAAI,+EAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAEvE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBAC3E,CAAC;gBAED;;mBAEG;gBACO,kDAAqB,GAA/B,UAAmC,MAAqB,EAAE,KAAa;oBACnE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBACnE,CAAC;gBAED;;mBAEG;gBACO,6CAAgB,GAA1B,UAA8B,MAAqB;oBAC/C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBACpD,CAAC;gBAED;;mBAEG;gBACO,iDAAoB,GAA9B,UAAkC,MAAqB;oBACnD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;gBACxD,CAAC;gBAED;;mBAEG;gBACO,qDAAwB,GAAlC,UAAsC,MAAqB;oBACvD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;gBAC5D,CAAC;gBAEL,yBAAC;YAAD,CAtGA,AAsGC,IAAA;;QAAA,CAAC;;;;;;;;;;YCvHF;;eAEG;YACH;gBAAmD,iDAAK;gBAGpD,uCAAY,UAAe;oBAA3B,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,+BAA+B,CAAC;oBAInC,KAAI,CAAC,OAAO,GAAG,wBAAqB,UAAU,YAAY,QAAQ,GAAG,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,sBAAmB;wBACjI,0DAA0D,CAAC;;gBACnE,CAAC;gBAEL,oCAAC;YAAD,CATA,AASC,CATkD,KAAK,GASvD;;QAAA,CAAC;;;;;;;;;;YCZF;;eAEG;YACH;gBAAiD,+CAAK;gBAGlD,qCAAY,UAAe;oBAA3B,YACI,kBAAM,+BAA4B,UAAU,YAAY,QAAQ,GAAG,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,OAAG;wBAC/G,kHAAkH;wBAClH,6DAA6D,CAAC,SACrE;oBAND,UAAI,GAAG,6BAA6B,CAAC;;gBAMrC,CAAC;gBAEL,kCAAC;YAAD,CATA,AASC,CATgD,KAAK,GASrD;;QAAA,CAAC;;;;;;;;;;YCZF;;eAEG;YACH;gBAAkE,gEAAK;gBAGnE,sDAAY,UAAe;oBAA3B,YACI,kBAAM,+BAA4B,UAAU,YAAY,QAAQ,GAAG,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,OAAG;wBAC/G,+FAA+F,CAAC,SACvG;oBALD,UAAI,GAAG,8CAA8C,CAAC;;gBAKtD,CAAC;gBAEL,mDAAC;YAAD,CARA,AAQC,CARiE,KAAK,GAQtE;;QAAA,CAAC;;;;;;;;;;;;;;YC0BF;;;;;eAKG;YACH;gBAAwC,sCAAa;gBAEjD,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,4BAAY,UAAsB,EAAE,mBAAyC;2BACzE,kBAAM,UAAU,EAAE,mBAAmB,CAAC;gBAC1C,CAAC;gBAED,4EAA4E;gBAC5E,qBAAqB;gBACrB,4EAA4E;gBAE5E;;mBAEG;gBACH,kCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;oBACnC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;gBAC5D,CAAC;gBAED;;;mBAGG;gBACH,wCAAW,GAAX,UAAY,gBAA+D;oBACvE,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;gBACjE,CAAC;gBAED;;;mBAGG;gBACH,+CAAkB,GAAlB,UAA2B,iBAA4C,EAAE,KAAa,EAAE,mBAAyC;oBAC7H,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;gBAClE,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,yCAAY,GAAZ,UAAqB,iBAA4C,EAAE,KAAqB;oBACpF,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACjF,CAAC;gBAED;;;mBAGG;gBACH,+CAAkB,GAAlB,UAA2B,iBAA4C,EAAE,KAAqB;oBAC1F,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBACvF,CAAC;gBAED;;mBAEG;gBACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,QAAyB,EAAE,OAAsC;oBAC7H,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBAC1F,CAAC;gBAED;;mBAEG;gBACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,UAA2B,EAAE,OAAqC;oBAC9H,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;gBAC5F,CAAC;gBAED;;mBAEG;gBACH,kCAAK,GAAL,UAAc,iBAA4C,EAAE,KAAqB,EAAE,OAA+B;oBAC9G,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBACnF,CAAC;gBAED;;mBAEG;gBACH,kDAAqB,GAArB,UAA8B,iBAA4C,EAAE,WAAuB,EAAE,OAAsB;oBACvH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,qBAAqB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;gBACzG,CAAC;gBAED;;;;mBAIG;gBACH,oDAAuB,GAAvB,UAAgC,iBAA4C,EAAE,UAA2B;oBACrG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;gBACjG,CAAC;gBAED;;mBAEG;gBACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,KAAoB,EAAE,OAA2B;oBAC9G,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBACxF,CAAC;gBAED;;mBAEG;gBACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,KAAoB,EAAE,OAA2B;oBAC7G,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBACvF,CAAC;gBAED;;mBAEG;gBACH,qCAAQ,GAAR,UAAiB,iBAA4C,EAAE,GAAW,EAAE,KAAoB,EAAE,OAAoD;oBAClJ,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC3F,CAAC;gBAED;;mBAEG;gBACH,gDAAmB,GAAnB,UAA4B,iBAA4C,EAAE,SAAiB,EAAE,OAA2B;oBACpH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBACrG,CAAC;gBAED;;mBAEG;gBACH,kDAAqB,GAArB,UAA8B,iBAA4C;oBACtE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,qBAAqB,EAAE,CAAC;gBACrF,CAAC;gBAED;;mBAEG;gBACH,6CAAgB,GAAhB,UAAyB,iBAA4C,EAAE,KAAoB,EAAE,OAAoE;oBAC7J,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC9F,CAAC;gBAED;;mBAEG;gBACH,8CAAiB,GAAjB,UAA0B,iBAA4C,EAAE,KAAoB,EAAE,WAAmB,EAAE,OAAiC;oBAChJ,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,iBAAiB,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;gBAC5G,CAAC;gBAED;;mBAEG;gBACH,6CAAgB,GAAhB,UAAyB,iBAA4C,EAAE,KAAoB,EAAE,MAAc,EAAE,OAAiC;oBAC1I,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBACtG,CAAC;gBAED;;mBAEG;gBACH,8CAAiB,GAAjB,UAA0B,iBAA4C,EAAE,CAAS,EAAE,CAAS,EAAE,OAAkC;oBAC5H,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;gBAC9F,CAAC;gBAED;;mBAEG;gBACH,oCAAO,GAAP,UAAgB,iBAA4C,EAAE,CAAS,EAAE,CAAS,EAAE,OAAwB;oBACxG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;gBACpF,CAAC;gBAED;;mBAEG;gBACH,kCAAK,GAAL,UAAc,iBAA4C,EAAE,IAAqC,EAAE,SAAiB,EAAE,OAAe,EAAE,MAAqB,EAAE,QAAuB,EAAE,OAAgB,EAAE,OAAsD;oBAC3P,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;gBACjI,CAAC;gBAED;;mBAEG;gBACH,8CAAiB,GAAjB,UAA0B,iBAA4C;oBAClE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,iBAAiB,EAAE,CAAC;gBACjF,CAAC;gBAED;;mBAEG;gBACH,kDAAqB,GAArB,UAA8B,iBAA4C,EAAE,OAAwB;oBAChG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;gBAC5F,CAAC;gBAED;;mBAEG;gBACH,uDAA0B,GAA1B,UAAmC,iBAA4C,EAAE,OAA2B;oBACxG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;gBACjG,CAAC;gBAED;;mBAEG;gBACH,oDAAuB,GAAvB,UAAgC,iBAA4C,EAAE,OAA2B;oBACrG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;gBAC9F,CAAC;gBAED;;mBAEG;gBACH,sDAAyB,GAAzB,UAAkC,iBAA4C,EAAE,OAA2B;oBACvG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;gBAChG,CAAC;gBAED;;mBAEG;gBACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,IAAqB,EAAE,OAAqC;oBACzH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACvF,CAAC;gBAED;;mBAEG;gBACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,GAAkB,EAAE,OAAoC;oBACpH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gBACrF,CAAC;gBAED;;mBAEG;gBACH,qCAAQ,GAAR,UAAiB,iBAA4C;oBACzD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,QAAQ,EAAE,CAAC;gBACxE,CAAC;gBAED;;mBAEG;gBACH,kDAAqB,GAArB,UAA8B,iBAA4C,EAAE,OAAwE;oBAChJ,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;gBAC5F,CAAC;gBAED;;mBAEG;gBACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,GAAoB,EAAE,MAAuB,EAAE,OAA0B;oBACrI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBAC7F,CAAC;gBAED;;;mBAGG;gBACH,mDAAsB,GAAtB,UAA+B,iBAA4C,EAAE,OAAuC;oBAChH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;gBAC7F,CAAC;gBAED;;mBAEG;gBACH,oCAAO,GAAP,UAAgB,iBAA4C;oBACxD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,OAAO,EAAE,CAAC;gBACvE,CAAC;gBAED;;mBAEG;gBACH,mCAAM,GAAN,UAAe,iBAA4C,EAAE,OAAe,EAAE,OAAkC;oBAC5G,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBACtF,CAAC;gBAED;;mBAEG;gBACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,KAAoB,EAAE,GAAkB,EAAE,OAA2B;oBAClI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;gBAC7F,CAAC;gBAED;;mBAEG;gBACH,kCAAK,GAAL,UAAc,iBAA4C,EAAE,OAA2B;oBACnF,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC5E,CAAC;gBAED;;mBAEG;gBACH,uCAAU,GAAV,UAAmB,iBAA4C,EAAE,KAAoB,EAAE,MAAqB,EAAE,OAAuE;oBACjL,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBAChG,CAAC;gBAED;;mBAEG;gBACH,sCAAS,GAAT,UAAkB,iBAA4C,EAAE,KAAoB,EAAE,MAAqB,EAAE,OAA2B;oBACpI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAwB,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBAC/F,CAAC;gBAEL,yBAAC;YAAD,CAlSA,AAkSC,CAlSuC,6BAAa,GAkSpD;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCnSF;;;eAGG;YACH;gBA+FI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,oBAAY,IAAY,EAAE,MAAc,EAAE,MAAc;oBA9ExD;;uBAEG;oBACa,oBAAe,GAAqB,EAAE,CAAC;oBAgBvD;;uBAEG;oBACc,0BAAqB,GAA2B,EAAE,CAAC;oBAEpE;;uBAEG;oBACc,uBAAkB,GAAa,EAAE,CAAC;oBAEnD;;uBAEG;oBACc,oBAAe,GAA6B,EAAE,CAAC;oBAEhE;;uBAEG;oBACc,sBAAiB,GAAqC,EAAE,CAAC;oBAE1E;;uBAEG;oBACc,kBAAa,GAAe,EAAE,CAAC;oBAEhD;;uBAEG;oBACc,kBAAa,GAAmB,EAAE,CAAC;oBAEpD;;uBAEG;oBACc,sBAAiB,GAAe,EAAE,CAAC;oBAEpD;;uBAEG;oBACc,0BAAqB,GAAe,EAAE,CAAC;oBAExD;;uBAEG;oBACc,qBAAgB,GAAe,EAAE,CAAC;oBAOnD;;uBAEG;oBACK,iBAAY,GAAG,KAAK,CAAC;oBAOzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;oBACjD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAChD,CAAC;gBASD,sBAAI,mCAAW;oBAPf,4EAA4E;oBAC5E,YAAY;oBACZ,4EAA4E;oBAE5E;;uBAEG;yBACH;wBACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;oBAC7B,CAAC;;;mBAAA;gBAKD,sBAAI,qCAAa;oBAHjB;;uBAEG;yBACH;wBACI,yBAAyB;wBACzB,oEAAoE;wBAEpE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;oBAC/B,CAAC;;;mBAAA;gBAMD,sBAAI,0CAAkB;oBAJtB;;;uBAGG;yBACH;wBACI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,YAAY,uCAAkB,CAAC,CAAC;4BACrD,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;wBAEnF,MAAM,CAAC,IAAI,CAAC,cAAoC,CAAC;oBACrD,CAAC;;;mBAAA;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACG,4BAAO,GAAb;;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wCACjB,MAAM,IAAI,uEAAkC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oCAE5D,yCAAyC;oCACzC,qBAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAA;;oCAD3B,yCAAyC;oCACzC,SAA2B,CAAC;oCAE5B,kDAAkD;oCAClD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;;;;oCAIrB,IAAI,CAAC,cAAc,EAAE,CAAC;;;;oCAItB,qGAAqG;oCACrG,gCAAgC;oCAChC,qBAAM,IAAI,CAAC,KAAK,EAAE,EAAA;;oCAFlB,qGAAqG;oCACrG,gCAAgC;oCAChC,SAAkB,CAAC;oCACnB,MAAM,OAAK,CAAC;wCAGhB,sBAAO,IAAI,EAAC;;;;iBACf;gBAED;;;;mBAIG;gBACG,0BAAK,GAAX;;;;;oCACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wCAClB,MAAM,IAAI,2DAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oCAEtD,qBAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAA;;oCAA9B,SAA8B,CAAC;oCAC/B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;;;;;iBAC7B;gBAED;;mBAEG;gBACG,iCAAY,GAAlB;;;;;wCACwB,qBAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAA;;kDAArC,SAAqC;oCACzD,qBAAM,WAAW,CAAC,aAAa,EAAE,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAED;;;;mBAIG;gBACG,+BAAU,GAAhB,UAAiB,cAA+B;oBAA/B,+BAAA,EAAA,sBAA+B;;;;;oCAE5C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wCAClB,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,IAAI,yDAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC;yCAElE,cAAc,EAAd,wBAAc;oCACd,qBAAM,IAAI,CAAC,YAAY,EAAE,EAAA;;oCAAzB,SAAyB,CAAC;;;yCAE1B,CAAA,IAAI,CAAC,MAAM,YAAY,yBAAW,CAAA,EAAlC,wBAAkC;oCAClC,qBAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,EAAA;;oCAAlD,SAAkD,CAAC;;wCAGnD,qBAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC,KAAK,EAAE,EAAA;;oCAAxC,SAAwC,CAAC;;;;;;iBAEhD;gBAED;;mBAEG;gBACG,kCAAa,GAAnB;;4BAKU,iBAAiB;;;;oCAHvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wCAClB,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,IAAI,yEAAmC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC;wDAEpD,IAAI,qCAAiB,CAAC,IAAI,CAAC;oCACrD,qBAAM,iBAAiB,CAAC,wBAAwB,EAAE,EAAA;;oCAAlD,SAAkD,CAAC;;;;;iBACtD;gBAED;;mBAEG;gBACG,sCAAiB,GAAvB;;4BAKU,iBAAiB;;;;oCAHvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wCAClB,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,IAAI,yEAAmC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC;wDAEpD,IAAI,qCAAiB,CAAC,IAAI,CAAC;oCACrD,qBAAM,iBAAiB,CAAC,iBAAiB,EAAE,EAAA;;oCAA3C,SAA2C,CAAC;;;;;iBAC/C;gBAED;;mBAEG;gBACH,kDAA6B,GAA7B,UAA8B,KAAe;oBACzC,IAAI,CAAC,cAAc,CAAC,6DAA4B,CAAC,KAAK,CAAC,CAAC,CAAC;oBACzD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,sDAAiC,GAAjC,UAAkC,KAAe;oBAC7C,IAAI,CAAC,mBAAmB,CAAC,2DAA0B,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC5D,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,qDAAgC,GAAhC,UAAiC,KAAe;oBAC5C,IAAI,CAAC,iBAAiB,CAAC,6DAA4B,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC5D,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,0DAAqC,GAArC,UAAsC,KAAe;oBACjD,IAAI,CAAC,sBAAsB,CAAC,6DAA4B,CAAC,KAAK,CAAC,CAAC,CAAC;oBACjE,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,oDAA+B,GAA/B,UAAgC,KAAe;oBAC3C,IAAI,CAAC,gBAAgB,CAAC,6DAA4B,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC3D,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,mCAAc,GAAd,UAAe,QAAoB;oBAAnC,iBAMC;oBALG,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wBACjB,MAAM,IAAI,qEAAiC,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAEvE,QAAQ,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC,CAAC;oBACtD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,wCAAmB,GAAnB,UAAoB,OAAuB;oBAA3C,iBAMC;oBALG,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wBACjB,MAAM,IAAI,qEAAiC,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAEtE,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,EAA/B,CAA+B,CAAC,CAAC;oBAC3D,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,sCAAiB,GAAjB,UAAkB,iBAA6B;oBAA/C,iBAMC;oBALG,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wBACjB,MAAM,IAAI,qEAAiC,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAEjF,iBAAiB,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAhC,CAAgC,CAAC,CAAC;oBACnE,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,2CAAsB,GAAtB,UAAuB,UAAsB;oBAA7C,iBAMC;oBALG,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wBACjB,MAAM,IAAI,qEAAiC,CAAC,mBAAmB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAEhF,UAAU,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC,EAApC,CAAoC,CAAC,CAAC;oBAChE,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED;;mBAEG;gBACH,qCAAgB,GAAhB,UAAiB,UAAsB;oBAAvC,iBAMC;oBALG,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wBACjB,MAAM,IAAI,qEAAiC,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAEzE,UAAU,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC;oBAC3D,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAcD;;;mBAGG;gBACH,sCAAiB,GAAjB,UAAkB,mBAAoC;oBAClD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;wBACjB,MAAM,IAAI,mFAAwC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAElE,IAAI,CAAC,kBAAkB,GAAG,mBAAmB,CAAC;oBAC9C,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAiBD;;mBAEG;gBACH,gCAAW,GAAX,UAAY,MAAuB;oBAC/B,IAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,MAAM,KAAK,MAAM,IAAI,CAAC,OAAO,MAAM,KAAK,QAAQ,IAAI,QAAQ,CAAC,UAAU,KAAK,MAAM,CAAC,EAA5F,CAA4F,CAAC,CAAC;oBACrJ,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;wBACV,MAAM,IAAI,+CAAsB,CAAC,MAAM,CAAC,CAAC;oBAE7C,MAAM,CAAC,QAAQ,CAAC;gBACpB,CAAC;gBAiBD;;mBAEG;gBACH,kCAAa,GAAb,UAAsB,iBAA4C;oBAC9D,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,CAAC,UAAU,CAAC;gBACvE,CAAC;gBAuBD;;;;mBAIG;gBACH,sCAAiB,GAAjB,UAA0B,iBAA4C;oBAClE,iGAAiG;oBAEjG,IAAM,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,CAAC,cAAc,CAAC;oBACnF,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;wBACZ,MAAM,IAAI,+CAAsB,CAAC,iBAAiB,CAAC,CAAC;oBAExD,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAiBD;;mBAEG;gBACH,uCAAkB,GAAlB,UAA2B,iBAA4C;oBACnE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,YAAY,yBAAW,CAAC,CAAC;wBACtC,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;oBAEpF,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,CAAC,UAAqC,CAAC;gBAClG,CAAC;gBA0BD;;;;;mBAKG;gBACH,0CAAqB,GAArB,UAA8B,iBAA4C;oBACtE,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,CAAC,kBAAkB,CAAC;gBAC/E,CAAC;gBAED;;;;mBAIG;gBACH,oEAA+C,GAA/C,UAAgD,mBAAyC;oBACrF,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC;wBACrB,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;oBAErE,MAAM,CAAC,IAAI,6BAAa,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;gBACxD,CAAC;gBAED;;mBAEG;gBACH,kCAAa,GAAb;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;wBACxD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAA,cAAc;4BAC3C,MAAM,CAAC,wBAAgB,CAAqB,cAAc,CAAC,CAAC;wBAChE,CAAC,CAAC,CAAC;oBACP,CAAC;oBAED,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;gBAED;;mBAEG;gBACH,wCAAmB,GAAnB,UAAuB,gBAA+B;oBAClD,IAAM,4BAA4B,GAAG,8BAAsB,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,UAAU;wBACtG,MAAM,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,gBAAgB,YAAY,QAAQ,GAAG,gBAAgB,GAAI,gBAAwB,CAAC,WAAW,CAAC,CAAC;oBACnI,CAAC,CAAC,CAAC;oBACH,EAAE,CAAC,CAAC,CAAC,4BAA4B,CAAC;wBAC9B,MAAM,IAAI,6DAA6B,CAAC,gBAAgB,CAAC,CAAC;oBAE9D,IAAI,wBAAwB,GAAQ,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAA,gBAAgB,IAAI,OAAA,gBAAgB,CAAC,WAAW,KAAK,gBAAgB,EAAjD,CAAiD,CAAC,CAAC;oBACxI,EAAE,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;wBAC5B,EAAE,CAAC,CAAC,4BAA4B,CAAC,YAAY,CAAC,CAAC,CAAC;4BAC5C,wBAAwB,GAAG,wBAAgB,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC;4BAEjF,kGAAkG;4BAClG,6FAA6F;4BAC7F,sDAAsD;4BAEtD,EAAE,CAAC,CAAC,wBAAwB,YAAY,uCAAkB,IAAI,wBAAwB,YAAY,uBAAU,CAAC,CAAC,CAAC;gCAC3G,4HAA4H;gCAC5H,kEAAkE;gCAClE,EAAE,CAAC,CAAE,wBAAgC,CAAC,YAAY,CAAC,IAAK,wBAAgC,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC;oCAC5G,MAAM,IAAI,yDAA2B,CAAC,gBAAgB,CAAC,CAAC;4BAChE,CAAC;wBAEL,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,wBAAwB,GAAG,IAAK,4BAA4B,CAAC,MAAc,EAAE,CAAC;wBAClF,CAAC;wBAED,EAAE,CAAC,CAAC,wBAAwB,YAAY,uCAAkB,CAAC,CAAC,CAAC;4BACzD,4HAA4H;4BAC5H,kEAAkE;4BAClE,EAAE,CAAC,CAAC,CAAE,wBAAgC,CAAC,YAAY,CAAC,CAAC;gCAChD,wBAAgC,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;wBAC/D,CAAC;wBACD,EAAE,CAAC,CAAC,wBAAwB,YAAY,uBAAU,CAAC,CAAC,CAAC;4BACjD,EAAE,CAAC,CAAC,CAAC,4BAA4B,CAAC,MAAM,CAAC;gCACrC,MAAM,IAAI,2FAA4C,CAAC,gBAAgB,CAAC,CAAC;4BAE7E,4HAA4H;4BAC5H,kEAAkE;4BACjE,wBAAgC,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;4BACtD,wBAAgC,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC;wBAC1G,CAAC;wBAED,6BAA6B;wBAC7B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;oBAC3D,CAAC;oBAED,MAAM,CAAC,wBAAwB,CAAC;gBACpC,CAAC;gBAED;;;mBAGG;gBACH,8CAAyB,GAAzB,UAA6B,gBAAqB;oBAC9C,IAAM,4BAA4B,GAAG,8BAAsB,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,UAAU;wBACtG,MAAM,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,gBAAgB,YAAY,QAAQ,GAAG,gBAAgB,GAAI,gBAAwB,CAAC,WAAW,CAAC,CAAC;oBACnI,CAAC,CAAC,CAAC;oBACH,EAAE,CAAC,CAAC,CAAC,4BAA4B,CAAC;wBAC9B,MAAM,IAAI,6DAA6B,CAAC,gBAAgB,CAAC,CAAC;oBAE9D,MAAM,CAAC,4BAA4B,CAAC,MAAM,CAAC;gBAC/C,CAAC;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;mBAEG;gBACO,6CAAwB,GAAlC,UAAmC,iBAAyC;oBACxE,yBAAyB;oBACzB,2DAA2D;oBAE3D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,MAAM,KAAK,iBAAiB,IAAI,CAAC,OAAO,iBAAiB,KAAK,QAAQ,IAAI,QAAQ,CAAC,UAAU,KAAK,iBAAiB,CAAC,EAA7H,CAA6H,CAAC,CAAC;wBACtK,MAAM,IAAI,iDAAuB,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;oBAEpE,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;oBACrD,IAAM,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAA,mBAAmB,IAAI,OAAA,mBAAmB,CAAC,QAAQ,KAAK,QAAQ,EAAzC,CAAyC,CAAC,CAAC;oBAC/H,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC;wBACtB,MAAM,IAAI,iDAAuB,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;oBAEpE,MAAM,CAAC,oBAAoB,CAAC;gBAChC,CAAC;gBAED;;mBAEG;gBACO,mCAAc,GAAxB;oBAAA,iBAiDC;oBA/CG,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;oBAClC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;oBAChC,IAAI,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC;oBACtC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;oBAEhC,IAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBACnD,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;oBAC5C,IAAM,oBAAoB,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;oBAE/D,kCAAkC;oBAClC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,6BAAa,CAAC,cAAc,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC;wBACvH,8BAAsB,EAAE;6BACnB,iBAAiB;6BACjB,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC;6BACvC,OAAO,EAAE;6BACT,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,wBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAjC,CAAiC,CAAC;6BAClD,OAAO,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAvC,CAAuC,CAAC,CAAC;oBACxE,CAAC;oBAED,iCAAiC;oBACjC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;wBAClD,8BAAsB,EAAE;6BACnB,eAAe;6BACf,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC;6BACnC,OAAO,EAAE;6BACT,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,+CAAsB,CAAC,QAAQ,CAAC,CAAC,EAA/D,CAA+D,CAAC,CAAC;oBAC9F,CAAC;oBAED,gFAAgF;oBAChF,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;wBAClD,wBAAgB,CAAC,6CAAqB,CAAC;6BAClC,4BAA4B,CAAC,IAAI,CAAC,MAAM,EAAE,oBAAoB,EAAE,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC;6BACnG,OAAO,CAAC,UAAA,QAAQ;4BACb,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BACpC,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,2CAAoB,CAAC,KAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;wBAC9E,CAAC,CAAC,CAAC;oBACX,CAAC;oBAED,mDAAmD;oBACnD,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;wBAClD,wBAAgB,CAAC,6CAAqB,CAAC;6BAClC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,oBAAoB,EAAE,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC;6BACvF,OAAO,CAAC,UAAA,QAAQ;4BACb,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BACpC,KAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,2CAAoB,CAAC,KAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;wBAC9E,CAAC,CAAC,CAAC;oBACX,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACO,yCAAoB,GAA9B;oBAAA,iBAyBC;oBAvBG,2GAA2G;oBAC3G,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC;wBAC9F,MAAM,CAAC,wBAAgB,CAAC,6CAAqB,CAAC,CAAC;oBAEnD,2EAA2E;oBAC3E,IAAM,cAAc,GAAG,8BAAsB,EAAE;yBAC1C,gBAAgB;yBAChB,eAAe,CAAC,IAAI,CAAC,qBAAqB,CAAC;yBAC3C,OAAO,EAAE;yBACT,IAAI,CAAC,UAAA,QAAQ;wBACV,EAAE,CAAC,CAAC,OAAO,KAAI,CAAC,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC9C,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,KAAI,CAAC,kBAAkB,CAAC;wBACrD,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,KAAI,CAAC,kBAAkB,CAAC;wBACvD,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEP,8BAA8B;oBAC9B,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;wBAChB,MAAM,IAAI,yDAA2B,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAE9E,wCAAwC;oBACxC,MAAM,CAAC,wBAAgB,CAA0B,cAAc,CAAC,MAAM,CAAC,CAAC;gBAC5E,CAAC;gBAED;;mBAEG;gBACO,wCAAmB,GAA7B;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,YAAY,yBAAW,CAAC;wBACnC,MAAM,CAAC,IAAI,uCAAkB,CAAC,IAAI,CAAC,CAAC;oBAExC,MAAM,CAAC,IAAI,6BAAa,CAAC,IAAI,CAAC,CAAC;gBACnC,CAAC;gBAED;;mBAEG;gBACO,sCAAiB,GAA3B;oBACI,MAAM,CAAC,IAAI,yBAAW,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC/E,CAAC;gBAED;;mBAEG;gBACO,wCAAmB,GAA7B;oBACI,MAAM,CAAC,IAAI,6BAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC7E,CAAC;gBAED;;mBAEG;gBACO,+CAA0B,GAApC;oBACI,MAAM,CAAC,IAAI,2CAAoB,CAAC,IAAI,CAAC,CAAC;gBAC1C,CAAC;gBAEL,iBAAC;YAAD,CAxtBA,AAwtBC,IAAA;;QAAA,CAAC;;;;;;;;;;YCtwBF;;eAEG;YACH;gBAA6C,2CAAK;gBAG9C,iCAAY,IAAY;oBAAxB,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,yBAAyB,CAAC;oBAI7B,KAAI,CAAC,OAAO,GAAG,kBAAe,IAAI,sBAAkB,CAAC;oBACrD,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,8BAAC;YAAD,CATA,AASC,CAT4C,KAAK,GASjD;;QAAA,CAAC;;;;;;;;;QCkHD,CAAC;;;;;;;;;;YC9HF;;eAEG;YACH;gBAAwC,sCAAK;gBAGzC,4BAAY,UAAkB;oBAA9B,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,oBAAoB,CAAC;oBAIxB,KAAI,CAAC,OAAO,GAAG,kBAAgB,UAAU,4GAA6F,CAAC;oBACvI,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,yBAAC;YAAD,CATA,AASC,CATuC,KAAK,GAS5C;;QAAA,CAAC;;;;;;;;;;YCZF;;eAEG;YACH;gBAAqD,mDAAK;gBAGtD,yCAAY,cAAsB;oBAAlC,YACI,iBAAO,SAIV;oBAPD,UAAI,GAAG,iCAAiC,CAAC;oBAIrC,KAAI,CAAC,OAAO,GAAG,4CAAyC,cAAc,2CAAuC;wBACzG,4DAA4D,CAAC;oBACjE,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,sCAAC;YAAD,CAVA,AAUC,CAVoD,KAAK,GAUzD;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCIF;;;;;eAKG;YACH;gBAYI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,2BAAsB,kBAAsC,EACtC,MAAoB,EACpB,MAAc;oBAFd,uBAAkB,GAAlB,kBAAkB,CAAoB;oBACtC,WAAM,GAAN,MAAM,CAAc;oBACpB,WAAM,GAAN,MAAM,CAAQ;oBAhBpC,4EAA4E;oBAC5E,uBAAuB;oBACvB,4EAA4E;oBAE5E;;;uBAGG;oBACO,eAAU,GAAG,KAAK,CAAC;gBAS7B,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;mBAGG;gBACH,mCAAO,GAAP;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC;wBAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,CAAC;oBACrD,CAAC;oBAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBAED;;mBAEG;gBACG,yCAAa,GAAnB;;;4BAOc,gBAAgB;;;;oCAN1B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,qBAAM,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,EAAA;;oCAA9C,SAA8C,CAAC;oCAC/C,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;oCAA7B,SAA6B,CAAC;;;;uDAED,oHAAoH;oCACxG,qBAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAA;;kDAAlC,SAAkC;oCACvE,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC,EAAA;;oCAA/D,SAA+D,CAAC;oCAChE,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;oCAA9B,SAA8B,CAAC;;;;oCAG/B,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;oCAAhC,SAAgC,CAAC;oCACjC,MAAM,OAAK,CAAC;wCAGZ,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;oCAApB,SAAoB,CAAC;oCACrB,qBAAM,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,EAAA;;oCAA7C,SAA6C,CAAC;;;;;;iBAErD;gBAED;;mBAEG;gBACG,4CAAgB,GAAtB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAChD,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC5C,MAAM,IAAI,+DAA8B,EAAE,CAAC;oCAE/C,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,IAAI,CAAC;oCACnD,qBAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAA;;oCAArC,SAAqC,CAAC;;;;;iBACzC;gBAED;;mBAEG;gBACG,6CAAiB,GAAvB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;oCAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAA;;oCAA1B,SAA0B,CAAC;oCAC3B,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;iBACvD;gBAED;;mBAEG;gBACG,+CAAmB,GAAzB;;;;;oCACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;wCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;oCAE3C,qBAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAA;;oCAA5B,SAA4B,CAAC;oCAC7B,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;;iBACvD;gBAED;;mBAEG;gBACH,+CAAmB,GAAnB;oBACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gBACvD,CAAC;gBAED;;mBAEG;gBACH,iCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;oBAAvC,iBAgBC;oBAfG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wBAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oBAEhD,MAAM,CAAC,IAAI,OAAO,CAAQ,UAAC,EAAE,EAAE,IAAI;wBAC/B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;wBACxC,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,EAAE,UAAC,GAAQ,EAAE,MAAW;4BAC5E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACN,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gCAC9C,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gCAC/B,IAAI,CAAC,GAAG,CAAC,CAAC;4BACd,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,EAAE,CAAC,MAAM,CAAC,CAAC;4BACf,CAAC;wBACL,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,kCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,eAAgC;;;4BAIhF,IAAI,EACJ,OAAO,EACP,MAAM,EACN,GAAG,EACH,UAAU;;4BAPhB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mCAEnC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;sCACnB,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAjC,CAAiC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;qCAC9D,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;kCACxD,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,SAAI,OAAO,kBAAa,MAAM,MAAG,CAAC,GAAG,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,oBAAiB;yCAC/K,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;4BAElD,sBAAO,IAAI,OAAO,CAAQ,UAAC,EAAE,EAAE,IAAI;oCAC/B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;oCACtC,IAAM,MAAM,GAAG,KAAI,CAAC;oCACpB,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,EAAE,UAAU,GAAQ;wCACtE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4CACN,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;4CAC9C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;4CACjC,IAAI,CAAC,GAAG,CAAC,CAAC;wCACd,CAAC;wCAAC,IAAI,CAAC,CAAC;4CACJ,EAAE,CAAC,CAAC,eAAe,CAAC;gDAChB,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;4CAE9B,EAAE,EAAE,CAAC;wCACT,CAAC;oCACL,CAAC,CAAC,CAAC;gCACP,CAAC,CAAC,EAAC;;;iBACN;gBAED;;mBAEG;gBACG,kCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,UAAyB;;4BAIzE,YAAY,EACZ,eAAe,EACf,KAAK,EACL,YAAY,EACZ,eAAe,EACf,aAAa;;;;oCARnB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mDAE3B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;sDACnC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;4CACnF,YAAU,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,aAAQ,YAAY,UAAI,eAAe,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC,GAAG,EAAE,CAAE;mDACvH,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;sDAC9C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC;oDACrD,YAAY,CAAC,MAAM,CAAC,eAAe,CAAC;oCAC1D,qBAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,aAAa,CAAC,EAAA;;oCAAtC,SAAsC,CAAC;;;;;iBAC1C;gBAYD;;mBAEG;gBACG,kCAAM,GAAZ,UAAa,SAAiB,EAAE,UAAgC,EAAE,eAAuB;;4BAI/E,eAAe,EACf,UAAU,EAEV,GAAG;;;;oCANT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;sDAExB,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;iDAC7F,UAAU,YAAY,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAC,UAA4B,CAAC,GAAG,CAAC,EAAlC,CAAkC,CAAC,GAAG,eAAe;0CAE9H,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,eAAU,eAAiB;oCAC5F,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAED;;mBAEG;gBACG,kDAAsB,GAA5B,UAA6B,SAAiB,EAAE,WAAgB,EAAE,QAAa,EAAE,QAAiB;;4BAI1F,GAAG;;;;oCAHP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEtC,EAAE;oCACZ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wCACX,GAAG,GAAG,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,mCAAgC;6CACvF,sBAAoB,WAAW,yBAAoB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAC3H,sBAAoB,WAAW,UAAK,WAAW,QAAK,CAAA,CAAC;oCAC7D,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,GAAG,GAAG,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAyB;6CAChF,sBAAoB,WAAW,cAAS,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAChH,sBAAoB,WAAW,UAAK,WAAa,CAAA,CAAC;oCAC1D,CAAC;oCACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;oCACW,qBAAM,IAAI,CAAC,KAAK,CAAC,qCAAmC,SAAS,4BAAuB,QAAU,CAAC,EAAA;;8CAA/F,SAA+F;oCAChI,sBAAO,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC;;;;iBAC/F;gBAED;;mBAEG;gBACG,2CAAe,GAArB,UAAsB,SAAiB;;;;;wCACd,qBAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,SAAS,CAAC,CAAC,EAAA;;mDAAxC,SAAwC;oCAC7D,sBAAO,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;iBAChE;gBAED;;mBAEG;gBACG,4CAAgB,GAAtB,UAAuB,UAAoB;;;4BASjC,gBAAgB;;;;oCARtB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,6CAA6C;oCAE7C,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;wCAClC,MAAM,gBAAC,EAAE,EAAC;uDAEW,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,MAAI,SAAS,MAAG,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;oCAG/C,qBAAM,IAAI,CAAC,KAAK,CAAC,mEAAiE,gBAAgB,MAAG,CAAC,EAAA;;+CAAtG,SAAsG;oCAExI,yDAAyD;oCACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;wCAC9B,MAAM,gBAAC,EAAE,EAAC;oCAEd,yCAAyC;oCACzC,sBAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAM,OAAO;;gDACnC,WAAW,2CAUb,uBAAuB,EACrB,QAAQ,EAGJ,KAAK,EACL,OAAO,EA6CX,eAAe;;;;sEA5DD,IAAI,yBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;wDAGa,qBAAM,OAAO,CAAC,GAAG,CAAC;gEAC/E,IAAI,CAAC,KAAK,CAAC,yBAAsB,OAAO,CAAC,MAAM,CAAC,QAAI,CAAC;gEACrD,IAAI,CAAC,KAAK,CAAC,yBAAsB,OAAO,CAAC,MAAM,CAAC,QAAI,CAAC;gEACrD,IAAI,CAAC,KAAK,CAAC,+BAA4B,OAAO,CAAC,MAAM,CAAC,QAAI,CAAC;6DAC9D,CAAC,EAAA;;6DAJ+D,SAI/D;kFAG8C,SAAS;mEAChC,OAAO,CAAC,KAAK,CAAC;wDACvC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4DAC3C,uBAAuB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;oEAClE,uBAAuB,CAAC,WAAW,CAAC,GAAG,CAAC;sEACtC,uBAAuB,CAAC,WAAW,CAAC,GAAG,CAAC;4DACxD,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gEACf,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gEAChE,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC,EAAE,uBAAuB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;gEACvG,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,uBAAuB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;4DAExG,CAAC;4DAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gEACxB,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gEAClE,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC,EAAE,uBAAuB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;gEACvG,uBAAuB,GAAG,uBAAuB,CAAC,MAAM,CAAC,uBAAuB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;4DACxG,CAAC;wDACL,CAAC;wDAED,gDAAgD;wDAChD,WAAW,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ;4DACxC,IAAM,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;4DACxC,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;4DACrC,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;4DACnD,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,QAAQ,CAAC,YAAY,CAAC,KAAK,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC;4DACpI,YAAY,CAAC,UAAU,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;4DACpD,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4DAC9C,YAAY,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC,aAAa;4DACxC,YAAY,CAAC,WAAW,GAAG,uBAAuB,KAAK,QAAQ,CAAC,MAAM,CAAC,CAAC;4DACxE,IAAM,iBAAiB,GAAG,aAAa;iEAClC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,MAAM,CAAC,KAAK,QAAQ,CAAC,MAAM,CAAC,EAAvC,CAAuC,CAAC;iEAC7D,GAAG,CAAC,UAAA,UAAU;gEACX,IAAM,OAAO,GAAG,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gEAC1I,MAAM,CAAC,IAAI,mCAAgB,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,2FAA2F;4DAC7N,CAAC,CAAC,CAAC;4DACP,WAAW,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;4DAC9C,MAAM,CAAC,YAAY,CAAC;wDACxB,CAAC,CAAC,CAAC;wDAEH,4BAA4B;wDAC5B,qBAAM,OAAO,CAAC,GAAG,CAAC,SAAS;iEACtB,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAxB,CAAwB,CAAC;iEACzC,GAAG,CAAC,UAAM,KAAK;gFAEN,YAAY;;;gFADkB,qBAAM,IAAI,CAAC,KAAK,CAAC,yBAAsB,KAAK,CAAC,MAAM,CAAC,QAAI,CAAC,EAAA;;yFAAzD,SAAyD;2FACxE,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,MAAM,CAAC,EAAjB,CAAiB,CAAC;4EACnE,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;gFAC5B,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,mCAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;4EACnF,CAAC,CAAC,CAAC;;;;iEACN,CAAC,CAAC,EAAA;;wDATP,4BAA4B;wDAC5B,SAQO,CAAC;0EAGgB,SAAS;6DAC5B,MAAM,CAAC,UAAA,OAAO;4DACX,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,IAAI;gEAC7B,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,MAAM,CAAC,EAAnC,CAAmC,CAAC,CAAC;gEAClF,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,OAAO,CAAC,MAAM,CAAC,EAAnC,CAAmC,CAAC,CAAC,CAAC;wDAC3F,CAAC,CAAC;6DACD,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,EAAf,CAAe,CAAC;6DAC/B,MAAM,CAAC,UAAC,KAAK,EAAE,KAAK,EAAE,IAAI,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,EAA7B,CAA6B,CAAC,CAAC,SAAS;6DACvE,GAAG,CAAC,UAAM,WAAW;gEACZ,OAAO,cAEP,YAAY;;;;kFAFF,SAAS,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,KAAK,WAAW,EAA/B,CAA+B,CAAC;wEACtC,qBAAM,IAAI,CAAC,KAAK,CAAC,yBAAsB,OAAQ,CAAC,MAAM,CAAC,QAAI,CAAC,EAAA;;qFAA5D,SAA4D;uFAC3E,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,MAAM,CAAC,EAAjB,CAAiB,CAAC;wEAEnE,2EAA2E;wEAC3E,EAAE,CAAC,CAAC,OAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,kBAAkB,CAAC,MAAM,CAAC,KAAK,kBAAkB,CAAC,CAAC,CAAC;4EAC/E,EAAE,CAAC,CAAC,OAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gFAC3B,mCAAmC;gFACnC,YAAY,CAAC,OAAO,CAAC,UAAA,UAAU;oFAC3B,IAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,UAAU,EAA1B,CAA0B,CAAC,CAAC;oFAC9E,EAAE,CAAC,CAAC,MAAM,CAAC;wFACP,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;gFAC/B,CAAC,CAAC,CAAC;4EACP,CAAC;4EAED,MAAM,gBAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EAAC;wEAEtC,CAAC;wEAAC,IAAI,CAAC,CAAC;4EACJ,MAAM,gBAAC,IAAI,yBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAQ,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,OAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAC;wEACxG,CAAC;;;;6DACJ,CAAC;wDAEU,qBAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,EAAA;;kEAAlC,SAAkC;wDAClD,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAkB,CAAC;wDAExE,sBAAO,WAAW,EAAC;;;6CACtB,CAAC,CAAC,EAAC;;;;iBACP;gBAED;;mBAEG;gBACG,oCAAQ,GAAd,UAAe,SAAiB;;4BACtB,GAAG;;;;0CAAG,kEAAgE,SAAS,MAAG;oCACzE,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;6CAArB,SAAqB;oCACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;iBACvC;gBAED;;mBAEG;gBACG,uCAAW,GAAjB,UAAkB,KAAkB;;;4BAK1B,iBAAiB,EACnB,GAAG,EACD,iBAAiB;;;;oCANvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wDAGtB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAjC,CAAiC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;0CACzF,oBAAiB,KAAK,CAAC,IAAI,YAAM,iBAAmB;wDACpC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC;oCACjG,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;wCAC7B,GAAG,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAG,MAAM,CAAC,IAAM,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,CAAC,gEAAgE;oCAC7J,GAAG,IAAI,GAAG,CAAC;oCACX,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,SAAiB;;4BACzB,GAAG;;;;0CAAG,kBAAe,SAAS,OAAG;oCACrC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,SAAiB,EAAE,UAAkB;;4BAC3C,GAAG;;;;0CAAG,yBAAsB,SAAS,QAAI;oCACd,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;8CAArB,SAAqB;oCACtD,sBAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,CAAC,KAAK,UAAU,EAA7B,CAA6B,CAAC,EAAC;;;;iBAClE;gBAYD;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,iBAAqC,EAAE,MAAoB;;yCAKjE,cAAc;;;;oCAJpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;kDAA5C,SAA4C;qDACzC,WAAW,CAAC,KAAK,EAAE;oCAC1C,cAAc,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oCACpC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,WAAW,CAAC,EAAA;;oCAArD,SAAqD,CAAC;;;;;iBACzD;gBAYD;;mBAEG;gBACG,sCAAU,GAAhB,UAAiB,iBAAqC,EAAE,OAAuB;;yCAKrE,cAAc;;;;oCAJpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;kDAA5C,SAA4C;qDACzC,WAAW,CAAC,KAAK,EAAE;oCAC1C,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oCACnC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,WAAW,CAAC,EAAA;;oCAArD,SAAqD,CAAC;;;;;iBACzD;gBAYD;;mBAEG;gBACG,wCAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,qBAA0C;;4BAExI,WAAW,EAUX,SAAS,EAUT,SAAS;;;;kDApB4B,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;gDAEpE,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;wCAC9B,SAAS,CAAC,IAAI,GAAG,qBAAqB,CAAC;oCAC3C,CAAC;oCAED,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,EAAC;;;;iBAC/D;gBAYD;;mBAEG;gBACG,wCAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,SAAuB;;4BAIrH,WAAW,EAUX,SAAS;;;;oCAbb,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;kDAEP,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;oCAE5G,oDAAoD;oCACpD,sBAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAC;;;;iBAC1C;gBAED;;;mBAGG;gBACG,yCAAa,GAAnB,UAAoB,WAAwB,EAAE,cAAsE;;;4BAChH,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,oDAAoD;4BACpD,sBAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAC;;;iBAC1C;gBAYD;;mBAEG;gBACG,sCAAU,GAAhB,UAAiB,iBAAqC,EAAE,kBAAuC;;;4BAC3F,sBAAO,IAAI,CAAC,WAAW,CAAC,iBAAwB,EAAE,CAAC,kBAAyB,CAAC,CAAC,EAAC;;;iBAClF;gBAYD;;mBAEG;gBACG,uCAAW,GAAjB,UAAkB,iBAAqC,EAAE,oBAA6C;;yCAK5F,mBAAmB,EACnB,OAAO;;;;oCALb,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;kDAA5C,SAA4C;0DACpC,WAAW,CAAC,KAAK,EAAE;8CAC9B,oBAA8B,CAAC,GAAG,CAAC,UAAA,mBAAmB;wCACnE,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,QAAQ,CAAC,CAAC,CAAC;4CAC1C,IAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,mBAAmB,EAAnC,CAAmC,CAAC,CAAC;4CACvF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;gDACR,MAAM,IAAI,KAAK,CAAC,qCAAkC,mBAAmB,kCAA2B,WAAW,CAAC,IAAI,cAAU,CAAC,CAAC;4CAEhI,MAAM,CAAC,MAAM,CAAC;wCAElB,CAAC;wCAAC,IAAI,CAAC,CAAC;4CACJ,MAAM,CAAC,mBAAmC,CAAC;wCAC/C,CAAC;oCACL,CAAC,CAAC;oCACF,mBAAmB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;oCAC3C,sBAAO,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,EAAC;;;;iBAClD;gBAED;;mBAEG;gBACG,6CAAiB,GAAvB,UAAwB,OAAoB;;;4BACxC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,sBAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAC;;;iBACtC;gBAYD;;mBAEG;gBACG,4CAAgB,GAAtB,UAAuB,iBAAqC,EAAE,UAA4B;;;4BACtF,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,sBAAO,IAAI,CAAC,iBAAiB,CAAC,iBAAwB,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC;;;iBACzE;gBAYD;;mBAEG;gBACG,6CAAiB,GAAvB,UAAwB,iBAAqC,EAAE,WAA+B;;yCAKpF,kBAAkB;;;;oCAJxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;kDAA5C,SAA4C;yDACrC,WAAW,CAAC,KAAK,EAAE;oCAC9C,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;oCAC/C,sBAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,EAAC;;;;iBACjD;gBAYD;;mBAEG;gBACG,0CAAc,GAApB,UAAqB,iBAAqC,EAAE,UAA4B;;;4BACpF,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,sBAAO,IAAI,CAAC,eAAe,CAAC,iBAAwB,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC;;;iBACvE;gBAYD;;mBAEG;gBACG,2CAAe,GAArB,UAAsB,iBAAqC,EAAE,WAA+B;;yCAKlF,kBAAkB;;;;oCAJxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;kDAA5C,SAA4C;yDACrC,WAAW,CAAC,KAAK,EAAE;oCAC9C,kBAAkB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;oCAClD,sBAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,EAAC;;;;iBACjD;gBAED;;mBAEG;gBACG,uCAAW,GAAjB,UAAkB,SAAiB,EAAE,KAAkB;;4BAI7C,WAAW,EACX,GAAG;;;;oCAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;kDAE5B,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,OAAI,UAAU,OAAG,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;0CACxE,aAAU,KAAK,CAAC,QAAQ,GAAG,SAAS,GAAG,EAAE,iBAAU,KAAK,CAAC,IAAI,gBAAS,SAAS,WAAK,WAAW,MAAG;oCAC9G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,SAAiB,EAAE,SAAiB;;4BAI1C,GAAG;;;;oCAHT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEpC,kBAAe,SAAS,OAAG;oCACvC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACH,yCAAa,GAAb,UAAc,WAAwI;oBAClJ,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;wBACvB,KAAK,QAAQ;4BACT,MAAM,CAAC,oBAAoB,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;wBACxF,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,SAAS;4BACV,MAAM,CAAC,SAAS,CAAC;wBACrB,KAAK,SAAS,CAAC;wBACf,KAAK,KAAK;4BACN,MAAM,CAAC,SAAS,CAAC;wBACrB,KAAK,UAAU;4BACX,MAAM,CAAC,UAAU,CAAC;wBACtB,KAAK,QAAQ;4BACT,MAAM,CAAC,QAAQ,CAAC;wBACpB,KAAK,OAAO;4BACR,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,QAAQ,CAAC;wBACd,KAAK,QAAQ;4BACT,MAAM,CAAC,kBAAkB,CAAC;wBAC9B,KAAK,SAAS;4BACV,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gCAC7C,MAAM,CAAC,aAAW,WAAW,CAAC,SAAS,SAAI,WAAW,CAAC,KAAK,MAAG,CAAC;4BAEpE,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gCAC3B,MAAM,CAAC,aAAW,WAAW,CAAC,KAAK,MAAG,CAAC;4BAE3C,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,aAAW,WAAW,CAAC,SAAS,MAAG,CAAC;4BAE/C,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,SAAS,CAAC;4BAErB,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,MAAM;4BACP,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACvB,MAAM,CAAC,qBAAqB,CAAC;4BACjC,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,wBAAwB,CAAC;4BACpC,CAAC;wBACL,KAAK,UAAU;4BACX,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACvB,MAAM,CAAC,0BAA0B,CAAC;4BACtC,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,6BAA6B,CAAC;4BACzC,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,cAAc;4BACf,MAAM,CAAC,WAAW,CAAC,MAAM,GAAG,oBAAoB,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;oBAC7F,CAAC;oBAED,MAAM,IAAI,qEAAiC,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBAC5E,CAAC;gBAED;;mBAEG;gBACH,gDAAoB,GAApB,UAAqB,mBAAwB,EAAE,aAAkB;oBAE7D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,QAAQ,CAAC;wBACxC,MAAM,CAAC,mBAAmB,KAAK,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAC3D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,SAAS,CAAC;wBACzC,MAAM,CAAC,mBAAmB,KAAK,CAAC,CAAC,CAAC,aAAa,IAAI,aAAa,KAAK,OAAO,CAAC,CAAC;oBAClF,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,UAAU,CAAC;wBAC1C,MAAM,CAAC,mBAAmB,EAAE,KAAK,aAAa,CAAC;oBAEnD,MAAM,CAAC,mBAAmB,KAAK,aAAa,CAAC;gBACjD,CAAC;gBAED;;mBAEG;gBACG,oCAAQ,GAAd,UAAe,SAAiB;;;;wCAC5B,qBAAM,IAAI,CAAC,KAAK,CAAC,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAG,CAAC,EAAA;;oCAAzE,SAAyE,CAAC;;;;;iBAC7E;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;mBAEG;gBACO,uCAAW,GAArB,UAAsB,aAA4B,EAAE,UAAsB;oBAA1E,iBAEC;oBAFmD,2BAAA,EAAA,cAAsB;oBACtE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC,EAAnE,CAAmE,CAAC,CAAC;gBAC/H,CAAC;gBAED;;mBAEG;gBACO,gDAAoB,GAA9B,UAA+B,MAAoB;oBAC/C,IAAI,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;oBAClC,EAAE,CAAC,CAAC,MAAM,YAAY,+BAAc,CAAC,CAAC,CAAC;wBACnC,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBAC1C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;oBAC3B,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC;wBAC3B,CAAC,IAAI,WAAW,CAAC;oBACrB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC;wBACzB,CAAC,IAAI,SAAS,CAAC;oBACnB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC;wBAC5B,CAAC,IAAI,4BAA4B,CAAC;oBACtC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;wBAC1D,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BACrC,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC7C,CAAC,IAAI,WAAW,GAAG,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;wBAClE,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;4BAC9C,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC5C,CAAC,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;oBACL,CAAC;oBAED,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBAEe,yCAAa,GAA7B,UAA8B,WAAwB,EAAE,cAA4B,EAAE,WAAkB;oBAAlB,4BAAA,EAAA,kBAAkB;;;4BAG9F,iBAAiB,EACjB,WAAW,EAEb,IAAI,EASF,iBAAiB,EAYjB,cAAc,EAIV,IAAI,EAKR,IAAI,EAIJ,IAAI,EAIJ,aAAa;;;;wDAzCO,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAnC,CAAmC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;kDACzF,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;2CAEzE,8BAA2B,WAAW,CAAC,IAAI,YAAM,iBAAmB;oCAC/E,8CAA8C;oCAC9C,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;wCACtC,IAAM,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,OAAI,IAAI,OAAG,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wCAC/E,IAAM,qBAAqB,GAAG,UAAU,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,OAAI,IAAI,OAAG,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wCACnG,IAAI,IAAI,mBAAiB,WAAW,uBAAiB,UAAU,CAAC,mBAAmB,WAAK,qBAAqB,MAAG,CAAC;wCACjH,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;4CAAC,IAAI,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC;oCACzE,CAAC,CAAC,CAAC;wDAEuB,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC;oCACvG,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;wCAC7B,IAAI,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAG,MAAM,CAAC,IAAM,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,CAAC,+DAA+D;oCAE7J,IAAI,IAAI,GAAG,CAAC;oCAEZ,8CAA8C;oCAE9C,yCAAyC;oCACzC,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;oCAHtB,8CAA8C;oCAE9C,yCAAyC;oCACzC,SAAsB,CAAC;qDAGA,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,WAAW;yCAGrH,WAAW,EAAX,wBAAW;2CACE,6BAA0B,WAAW,CAAC,IAAI,WAAK,cAAc,iBAAY,cAAc,gBAAU,WAAW,CAAC,IAAI,OAAG;oCACjI,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;oCAAtB,SAAsB,CAAC;;;2CAId,kBAAe,WAAW,CAAC,IAAI,OAAG;oCAC/C,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;oCAAtB,SAAsB,CAAC;2CAGV,6BAA0B,WAAW,CAAC,IAAI,uBAAgB,WAAW,CAAC,IAAI,OAAG;oCAC1F,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;oCAAtB,SAAsB,CAAC;oDAGD,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,EAAzC,CAAyC,CAAC;oCACjG,mFAAmF;oCACnF,qBAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAA,2BAA2B,CAAC,EAAA;;oCAD3D,mFAAmF;oCACnF,SAA2D,CAAC;;;;;iBAC/D;gBAED;;mBAEG;gBACa,0CAAc,GAA9B,UAA+B,iBAAqC;;;;;;yCAC5D,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,sBAAO,iBAAiB,EAAC;wCAEL,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;kDAA7C,SAA6C;oCACjE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,iBAAe,iBAAiB,oCAAiC,CAAC,CAAC;oCAEvF,sBAAO,WAAW,EAAC;;;;iBAE1B;gBAEL,wBAAC;YAAD,CAr4BA,AAq4BC,IAAA;;QACD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YC74BD;;eAEG;YACH;gBAmCI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,sBAAY,iBAAgC,EAAE,MAAc,EAAE,MAAY;oBAEtE,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC;oBACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBAErB,kDAAkD;oBAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;wBACtB,MAAM,IAAI,iDAAuB,CAAC,SAAS,CAAC,CAAC;oBAEjD,wEAAwE;oBACxE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;wBACR,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAChC,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,8BAAO,GAAP;oBAAA,iBAmBC;oBAlBG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;wBAC9B,IAAM,UAAU,GAAG,IAAI,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,OAAO,EAAE,UAAC,GAAQ;4BACvE,EAAE,CAAC,CAAC,GAAG,CAAC;gCACJ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BAErB,KAAI,CAAC,kBAAkB,GAAG;gCACtB,EAAE,EAAE,CAAC;gCACL,UAAU,EAAE,UAAU;gCACtB,mBAAmB,EAAE,KAAK;6BAC7B,CAAC;4BAEF,yFAAyF;4BACzF,kEAAkE;4BAClE,UAAU,CAAC,GAAG,CAAC,2BAA2B,EAAE,UAAC,GAAQ,EAAE,MAAW;gCAC9D,EAAE,EAAE,CAAC;4BACT,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACH,iCAAU,GAAV;oBAAA,iBAQC;oBAPG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;wBAC9B,IAAM,OAAO,GAAG,UAAC,GAAQ,IAAK,OAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,EAAtB,CAAsB,CAAC;wBAErD,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,kBAAkB,CAAC;4BACzB,MAAM,CAAC,IAAI,CAAC,IAAI,iDAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACvD,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACtD,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,wCAAiB,GAAvB;;;;;;oCACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;wCACzB,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,IAAI,iDAAuB,CAAC,QAAQ,CAAC,CAAC,EAAC;oCAEtC,qBAAM,IAAI,CAAC,0BAA0B,EAAE,EAAA;;yDAAvC,SAAuC;oCAClE,sBAAO,IAAI,qCAAiB,CAAC,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAC;;;;iBACvE;gBAED;;mBAEG;gBACH,sCAAe,GAAf;oBACI,MAAM,CAAC;wBACH,MAAM,EAAE,IAAI,CAAC,MAAM;wBACnB,UAAU,EAAE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,GAAG,SAAS;qBACvF,CAAC;gBACN,CAAC;gBAED;;mBAEG;gBACH,6CAAsB,GAAtB,UAAuB,KAAU,EAAE,cAA8B;oBAC7D,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;wBACtC,MAAM,CAAC,IAAI,CAAC;oBAEhB,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;wBAElC,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,QAAQ;4BACrB,EAAE,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,iDAAuB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;4BACpE,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,iDAAuB,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;4BACvE,CAAC;wBAEL,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;wBAEjC,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACH,2CAAoB,GAApB,UAAqB,KAAU,EAAE,cAA8B;oBAC3D,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;wBAEhC,KAAK,yBAAW,CAAC,QAAQ;4BACrB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,EAAE,cAAc,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC;wBAEvG,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;wBAE5D,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAE7B,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;;mBAGG;gBACH,gDAAyB,GAAzB,UAA0B,GAAW,EAAE,UAAyB;oBAC5D,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;wBAC/C,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBAErB,IAAM,eAAe,GAAU,EAAE,CAAC;oBAClC,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,GAAG,SAAS,GAAG,MAAM,EAAzB,CAAyB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC3F,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,UAAC,GAAW;wBACjD,IAAM,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;wBACxC,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;4BACzB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAM;gCACpB,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gCACxB,MAAM,CAAC,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC;4BACxC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAClB,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChC,CAAC;wBACD,MAAM,CAAC,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC;oBACxC,CAAC,CAAC,CAAC,CAAC,kEAAkE;oBACtE,MAAM,CAAC,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;gBAClC,CAAC;gBAED;;mBAEG;gBACH,uCAAgB,GAAhB,UAAiB,UAAkB;oBAC/B,MAAM,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC;gBACpC,CAAC;gBAED;;mBAEG;gBACH,sCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,IAAI,GAAG,SAAS,GAAG,IAAI,CAAC;gBACnC,CAAC;gBAED;;mBAEG;gBACH,sCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,IAAI,GAAG,SAAS,GAAG,IAAI,CAAC;gBACnC,CAAC;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;;;mBAIG;gBACO,iDAA0B,GAApC;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;wBACxB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBAEpD,MAAM,IAAI,iDAAuB,CAAC,QAAQ,CAAC,CAAC;gBAChD,CAAC;gBAED;;mBAEG;gBACO,uCAAgB,GAA1B;oBACI,IAAI,CAAC;wBACD,IAAI,CAAC,MAAM,GAAG,6BAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;oBAE1D,CAAC;oBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,MAAM,IAAI,+DAA8B,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;oBAClE,CAAC;gBACL,CAAC;gBAEL,mBAAC;YAAD,CAxPA,AAwPC,IAAA;;QAAA,CAAC;;;;;;;;;;YC3QF;;;eAGG;YACH;gBAA2D,yDAAK;gBAG5D;oBAAA,YACI,iBAAO,SAMV;oBATD,UAAI,GAAG,uCAAuC,CAAC;oBAI3C,KAAI,CAAC,OAAO,GAAG,oEAAoE;wBAC/E,gHAAgH;wBAChH,2HAAyH;wBACzH,0FAA0F,CAAC;oBAC/F,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,4CAAC;YAAD,CAZA,AAYC,CAZ0D,KAAK,GAY/D;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCAF;;eAEG;YACH;gBAYI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,2BAAsB,kBAAsC,EACtC,MAAoB,EACpB,MAAc;oBAFd,uBAAkB,GAAlB,kBAAkB,CAAoB;oBACtC,WAAM,GAAN,MAAM,CAAc;oBACpB,WAAM,GAAN,MAAM,CAAQ;oBAhBpC,4EAA4E;oBAC5E,uBAAuB;oBACvB,4EAA4E;oBAE5E;;;uBAGG;oBACO,eAAU,GAAG,KAAK,CAAC;gBAS7B,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;;mBAIG;gBACH,mCAAO,GAAP;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC;wBAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,CAAC;oBACrD,CAAC;oBAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBAED;;mBAEG;gBACG,yCAAa,GAAnB;;;4BAOc,gBAAgB;;;;oCAN1B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,kDAAkD;oCAClD,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;oCAD7B,kDAAkD;oCAClD,SAA6B,CAAC;;;;uDAED,oHAAoH;oCACxG,qBAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAA;;kDAAlC,SAAkC;oCACvE,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC,EAAA;;oCAA/D,SAA+D,CAAC;oCAChE,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;oCAA9B,SAA8B,CAAC;;;;oCAG/B,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;oCAAhC,SAAgC,CAAC;oCACjC,MAAM,OAAK,CAAC;wCAGZ,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;oCAApB,SAAoB,CAAC;;;;;;iBAG5B;gBAED;;mBAEG;gBACG,4CAAgB,GAAtB;;;4BACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gCAC5C,MAAM,IAAI,+DAA8B,EAAE,CAAC;4BAE/C,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,IAAI,CAAC;;;;iBAEtD;gBAED;;mBAEG;gBACG,6CAAiB,GAAvB;;;4BACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;4BAE3C,8BAA8B;4BAC9B,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;iBACvD;gBAED;;mBAEG;gBACG,+CAAmB,GAAzB;;;4BACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gCAC7C,MAAM,IAAI,uDAA0B,EAAE,CAAC;4BAE3C,gCAAgC;4BAChC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,KAAK,CAAC;;;;iBACvD;gBAED;;mBAEG;gBACH,+CAAmB,GAAnB;oBACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;gBACvD,CAAC;gBAED;;mBAEG;gBACH,iCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;oBAAvC,iBAwBC;oBAvBG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wBAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oBAEhD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,EAAE,EAAE,IAAI;wBAExB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;wBACxC,IAAM,EAAE,GAAG,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;wBAC9C,2CAA2C;wBAC3C,EAAE,CAAC,WAAW,CAAC,UAAC,EAAO;4BACnB,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,EAAE,UAAC,EAAO,EAAE,MAAW;gCAClD,IAAM,IAAI,GAAG,MAAM;qCACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;qCACjB,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,KAAK,QAAQ,EAAhB,CAAgB,CAAC;qCAC/B,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC;gCAClC,EAAE,CAAC,IAAI,CAAC,CAAC;4BAEb,CAAC,EAAE,UAAC,EAAO,EAAE,GAAQ;gCACjB,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gCAC9C,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gCAC/B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BACrB,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,kCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,eAAgC;;;4BAIhF,IAAI,EACJ,OAAO,EACP,MAAM,EACN,GAAG,EACH,UAAU;;4BAPhB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mCAEnC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;sCACnB,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAjC,CAAiC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;qCAC9D,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;kCACxD,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,SAAI,OAAO,kBAAa,MAAM,MAAG,CAAC,GAAG,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,oBAAiB;yCAC/K,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;4BAElD,sBAAO,IAAI,OAAO,CAAQ,UAAC,EAAE,EAAE,IAAI;oCAC/B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;oCAEtC,IAAM,EAAE,GAAG,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;oCAC9C,2CAA2C;oCAC3C,EAAE,CAAC,WAAW,CAAC,UAAC,EAAO;wCACnB,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,EAAE,UAAC,EAAO,EAAE,MAAW;4CAChD,EAAE,CAAC,CAAC,eAAe,CAAC;gDAChB,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;4CAClC,EAAE,EAAE,CAAC;wCAET,CAAC,EAAE,UAAC,EAAO,EAAE,GAAQ;4CACjB,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;4CAC5C,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;4CAC/B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wCACrB,CAAC,CAAC,CAAC;oCACP,CAAC,CAAC,CAAC;gCACP,CAAC,CAAC,EAAC;;;iBACN;gBAED;;mBAEG;gBACG,kCAAM,GAAZ,UAAa,SAAiB,EAAE,SAAwB,EAAE,UAAyB;;4BAIzE,YAAY,EACZ,eAAe,EACf,KAAK,EACL,YAAY,EACZ,eAAe,EACf,aAAa;;;;oCARnB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;mDAE3B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;sDACnC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;4CACnF,YAAU,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,aAAQ,YAAY,UAAI,eAAe,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC,GAAG,EAAE,CAAE;mDACvH,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,EAAd,CAAc,CAAC;sDAC9C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC;oDACrD,YAAY,CAAC,MAAM,CAAC,eAAe,CAAC;oCAC1D,qBAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,aAAa,CAAC,EAAA;;oCAAtC,SAAsC,CAAC;;;;;iBAC1C;gBAYD;;mBAEG;gBACG,kCAAM,GAAZ,UAAa,SAAiB,EAAE,UAAgC,EAAE,eAAuB;;4BAI/E,eAAe,EACf,UAAU,EAEV,GAAG;;;;oCANT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;sDAExB,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;iDAC7F,UAAU,YAAY,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAC,UAA4B,CAAC,GAAG,CAAC,EAAlC,CAAkC,CAAC,GAAG,eAAe;0CAE9H,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,eAAU,eAAiB;oCAC5F,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,EAAA;;oCAAjC,SAAiC,CAAC;;;;;iBACrC;gBAED;;mBAEG;gBACG,kDAAsB,GAA5B,UAA6B,SAAiB,EAAE,WAAgB,EAAE,QAAa,EAAE,QAAiB;;4BAI1F,GAAG;;;;oCAHP,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEtC,EAAE;oCACZ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wCACX,GAAG,GAAG,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,mCAAgC;6CACvF,sBAAoB,WAAW,yBAAoB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAC3H,sBAAoB,WAAW,UAAK,WAAW,QAAK,CAAA,CAAC;oCAC7D,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,GAAG,GAAG,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAyB;6CAChF,sBAAoB,WAAW,cAAS,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,4BAAuB,QAAQ,MAAG,CAAA;6CAChH,sBAAoB,WAAW,UAAK,WAAa,CAAA,CAAC;oCAC1D,CAAC;oCACD,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;oCACW,qBAAM,IAAI,CAAC,KAAK,CAAC,qCAAmC,SAAS,4BAAuB,QAAU,CAAC,EAAA;;8CAA/F,SAA+F;oCAChI,sBAAO,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC;;;;iBAC/F;gBAED;;mBAEG;gBACG,2CAAe,GAArB,UAAsB,SAAiB;;;;;wCACd,qBAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,SAAS,CAAC,CAAC,EAAA;;mDAAxC,SAAwC;oCAC7D,sBAAO,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,SAAS,EAAC;;;;iBAChE;gBAED;;mBAEG;gBACG,4CAAgB,GAAtB,UAAuB,UAAoB;;;4BASjC,gBAAgB;;;;oCARtB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAEhD,6CAA6C;oCAE7C,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;wCAClC,MAAM,gBAAC,EAAE,EAAC;uDAEW,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,MAAI,SAAS,MAAG,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;oCAG/C,qBAAM,IAAI,CAAC,KAAK,CAAC,mEAAiE,gBAAgB,MAAG,CAAC,EAAA;;+CAAtG,SAAsG;oCAExI,yDAAyD;oCACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;wCAC9B,MAAM,gBAAC,EAAE,EAAC;oCAEd,yCAAyC;oCACzC,sBAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAM,OAAO;gDACnC,WAAW;;8DAAG,IAAI,yBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gDAEpD,2BAA2B;gDAC3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0HAyF0E;gDAE1E,sBAAO,WAAW,EAAC;;6CACtB,CAAC,CAAC,EAAC;;;;iBACP;gBAED;;mBAEG;gBACG,oCAAQ,GAAd,UAAe,SAAiB;;4BACtB,GAAG;;;;0CAAG,iEAA+D,SAAS,MAAG;oCACxE,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;6CAArB,SAAqB;oCACpC,sBAAO,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK,EAAC;;;;iBACvC;gBAED;;mBAEG;gBACG,uCAAW,GAAjB,UAAkB,KAAkB;;;4BAK1B,iBAAiB,EACnB,GAAG,EACD,iBAAiB;;;;oCANvB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;wDAGtB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAjC,CAAiC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;0CACzF,oBAAiB,KAAK,CAAC,IAAI,YAAM,iBAAmB;wDACpC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC;oCACjG,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;wCAC7B,GAAG,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAG,MAAM,CAAC,IAAM,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,CAAC,gEAAgE;oCAC7J,GAAG,IAAI,GAAG,CAAC;oCACX,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,SAAiB;;4BACzB,GAAG;;;;0CAAG,kBAAe,SAAS,OAAG;oCACrC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,SAAiB,EAAE,UAAkB;;4BAC3C,GAAG;;;;0CAAG,yBAAsB,SAAS,QAAI;oCACd,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;8CAArB,SAAqB;oCACtD,sBAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,CAAC,KAAK,UAAU,EAA7B,CAA6B,CAAC,EAAC;;;;iBAClE;gBAYD;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,iBAAqC,EAAE,MAAoB;;yCAKjE,cAAc;;;;oCAJpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;kDAA5C,SAA4C;qDACzC,WAAW,CAAC,KAAK,EAAE;oCAC1C,cAAc,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oCACpC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,WAAW,CAAC,EAAA;;oCAArD,SAAqD,CAAC;;;;;iBACzD;gBAYD;;mBAEG;gBACG,sCAAU,GAAhB,UAAiB,iBAAqC,EAAE,OAAuB;;yCAKrE,cAAc;;;;oCAJpB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;kDAA5C,SAA4C;qDACzC,WAAW,CAAC,KAAK,EAAE;oCAC1C,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oCACnC,qBAAM,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,WAAW,CAAC,EAAA;;oCAArD,SAAqD,CAAC;;;;;iBACzD;gBAYD;;mBAEG;gBACG,wCAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,qBAA0C;;4BAExI,WAAW,EAUX,SAAS,EAUT,SAAS;;;;kDApB4B,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;gDAEpE,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;wCAC9B,SAAS,CAAC,IAAI,GAAG,qBAAqB,CAAC;oCAC3C,CAAC;oCAED,sBAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,EAAC;;;;iBAC/D;gBAYD;;mBAEG;gBACG,wCAAY,GAAlB,UAAmB,iBAAqC,EAAE,qBAA0C,EAAE,SAAuB;;4BAIrH,WAAW,EAUX,SAAS;;;;oCAbb,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;kDAEP,SAAS;yCAC9C,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,WAAW,GAAG,iBAAiB,CAAC;;wCAElB,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;oCAA3D,WAAW,GAAG,SAA6C,CAAC;;;oCAGhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,WAAS,iBAAiB,oBAAiB,CAAC,CAAC;gDAEzB,SAAS;oCACjD,EAAE,CAAC,CAAC,qBAAqB,YAAY,2BAAY,CAAC,CAAC,CAAC;wCAChD,SAAS,GAAG,qBAAqB,CAAC;oCACtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,SAAS,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,qBAAqB,EAArC,CAAqC,CAAC,CAAC;oCAC1F,CAAC;oCAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wCACX,MAAM,IAAI,KAAK,CAAC,cAAW,qBAAqB,kCAA2B,iBAAiB,cAAU,CAAC,CAAC;oCAE5G,oDAAoD;oCACpD,sBAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAC;;;;iBAC1C;gBAED;;;mBAGG;gBACG,yCAAa,GAAnB,UAAoB,WAAwB,EAAE,cAAsE;;;4BAChH,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,oDAAoD;4BACpD,sBAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAC;;;iBAC1C;gBAYD;;mBAEG;gBACG,sCAAU,GAAhB,UAAiB,iBAAqC,EAAE,kBAAuC;;;4BAC3F,sBAAO,IAAI,CAAC,WAAW,CAAC,iBAAwB,EAAE,CAAC,kBAAyB,CAAC,CAAC,EAAC;;;iBAClF;gBAYD;;mBAEG;gBACG,uCAAW,GAAjB,UAAkB,iBAAqC,EAAE,oBAA6C;;yCAK5F,mBAAmB,EACnB,OAAO;;;;oCALb,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;kDAA5C,SAA4C;0DACpC,WAAW,CAAC,KAAK,EAAE;8CAC9B,oBAA8B,CAAC,GAAG,CAAC,UAAA,mBAAmB;wCACnE,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,QAAQ,CAAC,CAAC,CAAC;4CAC1C,IAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,mBAAmB,EAAnC,CAAmC,CAAC,CAAC;4CACvF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;gDACR,MAAM,IAAI,KAAK,CAAC,qCAAkC,mBAAmB,kCAA2B,WAAW,CAAC,IAAI,cAAU,CAAC,CAAC;4CAEhI,MAAM,CAAC,MAAM,CAAC;wCAElB,CAAC;wCAAC,IAAI,CAAC,CAAC;4CACJ,MAAM,CAAC,mBAAmC,CAAC;wCAC/C,CAAC;oCACL,CAAC,CAAC;oCACF,mBAAmB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;oCAC3C,sBAAO,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,EAAC;;;;iBAClD;gBAED;;mBAEG;gBACG,6CAAiB,GAAvB,UAAwB,OAAoB;;;4BACxC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,sBAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAC;;;iBACtC;gBAYD;;mBAEG;gBACG,4CAAgB,GAAtB,UAAuB,iBAAqC,EAAE,UAA4B;;;4BACtF,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,sBAAO,IAAI,CAAC,iBAAiB,CAAC,iBAAwB,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC;;;iBACzE;gBAYD;;mBAEG;gBACG,6CAAiB,GAAvB,UAAwB,iBAAqC,EAAE,WAA+B;;yCAKpF,kBAAkB;;;;oCAJxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;kDAA5C,SAA4C;yDACrC,WAAW,CAAC,KAAK,EAAE;oCAC9C,kBAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;oCAC/C,sBAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,EAAC;;;;iBACjD;gBAYD;;mBAEG;gBACG,0CAAc,GAApB,UAAqB,iBAAqC,EAAE,UAA4B;;;4BACpF,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;4BAEhD,sBAAO,IAAI,CAAC,eAAe,CAAC,iBAAwB,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC;;;iBACvE;gBAYD;;mBAEG;gBACG,2CAAe,GAArB,UAAsB,iBAAqC,EAAE,WAA+B;;yCAKlF,kBAAkB;;;;oCAJxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;oCAE5B,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAA;;kDAA5C,SAA4C;yDACrC,WAAW,CAAC,KAAK,EAAE;oCAC9C,kBAAkB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;oCAClD,sBAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,EAAC;;;;iBACjD;gBAED;;mBAEG;gBACG,uCAAW,GAAjB,UAAkB,SAAiB,EAAE,KAAkB;;4BAI7C,WAAW,EACX,GAAG;;;;oCAJT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;kDAE5B,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,OAAI,UAAU,OAAG,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;0CACxE,aAAU,KAAK,CAAC,QAAQ,GAAG,SAAS,GAAG,EAAE,iBAAU,KAAK,CAAC,IAAI,gBAAS,SAAS,WAAK,WAAW,MAAG;oCAC9G,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACG,qCAAS,GAAf,UAAgB,SAAiB,EAAE,SAAiB;;4BAI1C,GAAG;;;;oCAHT,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;wCAChB,MAAM,IAAI,iEAA+B,EAAE,CAAC;0CAEpC,kBAAe,SAAS,OAAG;oCACvC,qBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAA;;oCAArB,SAAqB,CAAC;;;;;iBACzB;gBAED;;mBAEG;gBACH,yCAAa,GAAb,UAAc,WAAwI;oBAClJ,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;wBACvB,KAAK,QAAQ;4BACT,MAAM,CAAC,oBAAoB,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;wBACxF,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,SAAS;4BACV,MAAM,CAAC,SAAS,CAAC;wBACrB,KAAK,SAAS,CAAC;wBACf,KAAK,KAAK;4BACN,MAAM,CAAC,SAAS,CAAC;wBACrB,KAAK,UAAU;4BACX,MAAM,CAAC,UAAU,CAAC;wBACtB,KAAK,QAAQ;4BACT,MAAM,CAAC,QAAQ,CAAC;wBACpB,KAAK,OAAO;4BACR,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,QAAQ,CAAC;wBACd,KAAK,QAAQ;4BACT,MAAM,CAAC,kBAAkB,CAAC;wBAC9B,KAAK,SAAS;4BACV,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gCAC7C,MAAM,CAAC,aAAW,WAAW,CAAC,SAAS,SAAI,WAAW,CAAC,KAAK,MAAG,CAAC;4BAEpE,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gCAC3B,MAAM,CAAC,aAAW,WAAW,CAAC,KAAK,MAAG,CAAC;4BAE3C,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,aAAW,WAAW,CAAC,SAAS,MAAG,CAAC;4BAE/C,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,SAAS,CAAC;4BAErB,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,MAAM;4BACP,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACvB,MAAM,CAAC,qBAAqB,CAAC;4BACjC,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,wBAAwB,CAAC;4BACpC,CAAC;wBACL,KAAK,UAAU;4BACX,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACvB,MAAM,CAAC,0BAA0B,CAAC;4BACtC,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,6BAA6B,CAAC;4BACzC,CAAC;wBACL,KAAK,MAAM;4BACP,MAAM,CAAC,MAAM,CAAC;wBAClB,KAAK,cAAc;4BACf,MAAM,CAAC,WAAW,CAAC,MAAM,GAAG,oBAAoB,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;oBAC7F,CAAC;oBAED,MAAM,IAAI,qEAAiC,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBAC5E,CAAC;gBAED;;mBAEG;gBACH,gDAAoB,GAApB,UAAqB,mBAAwB,EAAE,aAAkB;oBAE7D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,QAAQ,CAAC;wBACxC,MAAM,CAAC,mBAAmB,KAAK,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAC3D,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,SAAS,CAAC;wBACzC,MAAM,CAAC,mBAAmB,KAAK,CAAC,CAAC,CAAC,aAAa,IAAI,aAAa,KAAK,OAAO,CAAC,CAAC;oBAClF,EAAE,CAAC,CAAC,OAAO,mBAAmB,KAAK,UAAU,CAAC;wBAC1C,MAAM,CAAC,mBAAmB,EAAE,KAAK,aAAa,CAAC;oBAEnD,MAAM,CAAC,mBAAmB,KAAK,aAAa,CAAC;gBACjD,CAAC;gBAED;;mBAEG;gBACG,oCAAQ,GAAd,UAAe,SAAiB;;;;wCAC5B,qBAAM,IAAI,CAAC,KAAK,CAAC,iBAAe,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAG,CAAC,EAAA;;oCAAzE,SAAyE,CAAC;;;;;iBAC7E;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;mBAEG;gBACO,uCAAW,GAArB,UAAsB,aAA4B,EAAE,UAAsB;oBAA1E,iBAEC;oBAFmD,2BAAA,EAAA,cAAsB;oBACtE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC,EAAnE,CAAmE,CAAC,CAAC;gBAC/H,CAAC;gBAED;;mBAEG;gBACO,gDAAoB,GAA9B,UAA+B,MAAoB;oBAC/C,IAAI,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;oBAClC,EAAE,CAAC,CAAC,MAAM,YAAY,+BAAc,CAAC,CAAC,CAAC;wBACnC,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBAC1C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,CAAC,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;oBAC3B,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC;wBAC3B,CAAC,IAAI,WAAW,CAAC;oBACrB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC;wBACzB,CAAC,IAAI,SAAS,CAAC;oBACnB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC;wBAC5B,CAAC,IAAI,4BAA4B,CAAC;oBACtC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;wBAC1D,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BACrC,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC7C,CAAC,IAAI,WAAW,GAAG,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI,GAAG,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;wBACzE,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;4BAC9C,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC5C,CAAC,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;wBAC3C,CAAC;oBACL,CAAC;oBAED,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBAEe,yCAAa,GAA7B,UAA8B,WAAwB,EAAE,cAA4B;;;4BAG1E,iBAAiB,EACjB,WAAW,EAEb,IAAI,EASF,iBAAiB,EAYjB,cAAc,EAGd,IAAI,EAIJ,IAAI,EAIJ,IAAI,EAIJ,aAAa;;;;wDAvCO,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAnC,CAAmC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;kDACzF,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;2CAEzE,8BAA2B,WAAW,CAAC,IAAI,YAAM,iBAAmB;oCAC/E,8CAA8C;oCAC9C,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;wCACtC,IAAM,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,OAAI,IAAI,OAAG,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wCAC/E,IAAM,qBAAqB,GAAG,UAAU,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,OAAI,IAAI,OAAG,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wCACnG,IAAI,IAAI,mBAAiB,WAAW,uBAAiB,UAAU,CAAC,mBAAmB,WAAK,qBAAqB,MAAG,CAAC;wCACjH,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;4CAAC,IAAI,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC;oCACzE,CAAC,CAAC,CAAC;wDAEuB,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,WAAW,EAAvC,CAAuC,CAAC;oCACvG,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;wCAC7B,IAAI,IAAI,mBAAiB,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,KAAG,MAAM,CAAC,IAAM,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,CAAC,+DAA+D;oCAE7J,IAAI,IAAI,GAAG,CAAC;oCAEZ,8CAA8C;oCAE9C,yCAAyC;oCACzC,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;oCAHtB,8CAA8C;oCAE9C,yCAAyC;oCACzC,SAAsB,CAAC;qDAGA,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,OAAI,MAAM,CAAC,IAAI,OAAG,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,WAAW;2CAG5G,6BAA0B,WAAW,CAAC,IAAI,WAAK,cAAc,iBAAY,cAAc,gBAAU,WAAW,CAAC,IAAI,OAAG;oCACjI,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;oCAAtB,SAAsB,CAAC;2CAGV,kBAAe,WAAW,CAAC,IAAI,OAAG;oCAC/C,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;oCAAtB,SAAsB,CAAC;2CAGV,6BAA0B,WAAW,CAAC,IAAI,uBAAgB,WAAW,CAAC,IAAI,OAAG;oCAC1F,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;oCAAtB,SAAsB,CAAC;oDAGD,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,EAAzC,CAAyC,CAAC;oCACjG,mFAAmF;oCACnF,qBAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAA,2BAA2B,CAAC,EAAA;;oCAD3D,mFAAmF;oCACnF,SAA2D,CAAC;;;;;iBAC/D;gBAED;;mBAEG;gBACa,0CAAc,GAA9B,UAA+B,iBAAqC;;;;;;yCAC5D,CAAA,iBAAiB,YAAY,yBAAW,CAAA,EAAxC,wBAAwC;oCACxC,sBAAO,iBAAiB,EAAC;wCAEL,qBAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAA;;kDAA7C,SAA6C;oCACjE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;wCACb,MAAM,IAAI,KAAK,CAAC,iBAAe,iBAAiB,oCAAiC,CAAC,CAAC;oCAEvF,sBAAO,WAAW,EAAC;;;;iBAE1B;gBAEL,wBAAC;YAAD,CAj5BA,AAi5BC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCh5BF;;eAEG;YACH;gBA8BI,4EAA4E;gBAC5E,cAAc;gBACd,4EAA4E;gBAE5E,sBAAY,OAAsB,EAAE,MAAc;oBAE9C,IAAI,CAAC,OAAO,GAAG,yBAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;oBACvD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBAErB,kDAAkD;oBAClD,0BAA0B;oBAC1B,iDAAiD;oBACjD,8BAA8B;oBAC9B,qDAAqD;oBACrD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;wBACvB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;oBAClD,6DAA6D;gBACjE,CAAC;gBAED,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;;;mBAIG;gBACH,8BAAO,GAAP;oBAAA,iBAqBC;oBAnBG,0CAA0C;oBAC1C,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;wBAC9B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;qBAClC,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;oBAE7B,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;wBAC9B,IAAM,UAAU,GAAG,YAAY,CAC3B,OAAO,CAAC,QAAQ,EAChB,OAAO,CAAC,OAAO,EACf,OAAO,CAAC,WAAW,EACnB,OAAO,CAAC,IAAI,CACf,CAAC;wBACF,KAAI,CAAC,kBAAkB,GAAG;4BACtB,EAAE,EAAE,CAAC;4BACL,UAAU,EAAE,UAAU;4BACtB,mBAAmB,EAAE,KAAK;yBAC7B,CAAC;wBACF,EAAE,EAAE,CAAC;oBACT,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACH,iCAAU,GAAV;oBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;wBACzB,MAAM,IAAI,iDAAuB,CAAC,QAAQ,CAAC,CAAC;oBAEhD,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;wBAC9B,wDAAwD;wBACxD,yCAAyC;wBACzC,EAAE,EAAE,CAAC;oBACT,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED;;mBAEG;gBACG,wCAAiB,GAAvB;;;;;;oCACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;wCACzB,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,IAAI,iDAAuB,CAAC,QAAQ,CAAC,CAAC,EAAC;oCAEtC,qBAAM,IAAI,CAAC,0BAA0B,EAAE,EAAA;;yDAAvC,SAAuC;oCAClE,sBAAO,IAAI,qCAAiB,CAAC,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAC;;;;iBACvE;gBAED;;mBAEG;gBACH,sCAAe,GAAf;oBACI,MAAM,CAAC;wBACH,UAAU,EAAE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,GAAG,SAAS;qBACvF,CAAC;gBACN,CAAC;gBAED;;;mBAGG;gBACH,gDAAyB,GAAzB,UAA0B,GAAW,EAAE,UAAyB;oBAC5D,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;wBAC/C,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBACrB,IAAM,iBAAiB,GAAU,EAAE,CAAC;oBACpC,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,GAAG,SAAS,GAAG,MAAM,EAAzB,CAAyB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC3F,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,UAAC,GAAW;wBACjD,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAClD,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC,CAAC,CAAC,CAAC,kEAAkE;oBACtE,MAAM,CAAC,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;gBACpC,CAAC;gBAED;;mBAEG;gBACH,uCAAgB,GAAhB,UAAiB,UAAkB;oBAC/B,MAAM,CAAC,UAAU,CAAC,CAAC,0BAA0B;gBACjD,CAAC;gBAED;;mBAEG;gBACH,sCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,SAAS,CAAC,CAAC,yBAAyB;gBAC/C,CAAC;gBAED;;mBAEG;gBACH,sCAAe,GAAf,UAAgB,SAAiB;oBAC7B,MAAM,CAAC,SAAS,CAAC,CAAC,yBAAyB;gBAC/C,CAAC;gBAED;;mBAEG;gBACH,6CAAsB,GAAtB,UAAuB,KAAU,EAAE,cAA8B;oBAC7D,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;wBACtC,MAAM,CAAC,IAAI,CAAC;oBAEhB,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;wBAElC,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;wBAEhE,KAAK,yBAAW,CAAC,QAAQ;4BACrB,EAAE,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,iDAAuB,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;4BACpE,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,iDAAuB,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;4BACvE,CAAC;wBAEL,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;wBAEjC,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACH,2CAAoB,GAApB,UAAqB,KAAU,EAAE,cAA8B;oBAC3D,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,KAAK,yBAAW,CAAC,OAAO;4BACpB,MAAM,CAAC,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;wBAEhC,KAAK,yBAAW,CAAC,QAAQ;4BACrB,MAAM,CAAC,iDAAuB,CAAC,qBAAqB,CAAC,KAAK,EAAE,cAAc,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC;wBAEvG,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,iDAAuB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;wBAE5D,KAAK,yBAAW,CAAC,IAAI;4BACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBAE7B,KAAK,yBAAW,CAAC,YAAY;4BACzB,MAAM,CAAC,iDAAuB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;oBAClE,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;;;mBAIG;gBACO,iDAA0B,GAApC;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;wBACxB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBAEpD,MAAM,IAAI,iDAAuB,CAAC,QAAQ,CAAC,CAAC;gBAChD,CAAC;gBAEL,mBAAC;YAAD,CAlOA,AAkOC,IAAA;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCtOF;;;eAGG;YACH;gBAAA;oBAEI,4EAA4E;oBAC5E,uBAAuB;oBACvB,4EAA4E;oBAE5E;;uBAEG;oBACO,gBAAW,GAAiB,EAAE,CAAC;gBAsb7C,CAAC;gBApbG,4EAA4E;gBAC5E,iBAAiB;gBACjB,4EAA4E;gBAE5E;;mBAEG;gBACH,+BAAG,GAAH,UAAI,IAAY;oBACZ,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,IAAI,EAAxB,CAAwB,CAAC,CAAC;gBAC3E,CAAC;gBAED;;;;mBAIG;gBACH,+BAAG,GAAH,UAAI,IAAwB;oBAAxB,qBAAA,EAAA,gBAAwB;oBACxB,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,IAAI,EAAxB,CAAwB,CAAC,CAAC;oBACjF,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;wBACZ,MAAM,IAAI,iDAAuB,CAAC,IAAI,CAAC,CAAC;oBAE5C,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAED;;;;;mBAKG;gBACH,kCAAM,GAAN,UAAO,OAA0B;oBAE7B,IAAM,MAAM,GAAG,IAAI,eAAM,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;oBACjD,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;oBACzD,IAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,IAAI,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;oBAEpF,wBAAwB;oBACxB,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;wBAClB,IAAA,uDAA2E,EAA1E,mBAAW,EAAE,eAAO,CAAuD;wBAClF,UAAU;6BACL,mBAAmB,CAAC,OAAO,CAAC;6BAC5B,iCAAiC,CAAC,WAAW,CAAC,CAAC;oBACxD,CAAC;oBAED,kBAAkB;oBAClB,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACb,IAAA,kDAAsE,EAArE,mBAAW,EAAE,eAAO,CAAkD;wBAC7E,UAAU;6BACL,cAAc,CAAC,OAAO,CAAC;6BACvB,6BAA6B,CAAC,WAAW,CAAC,CAAC;oBACpD,CAAC;oBAED,oBAAoB;oBACpB,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;wBAChB,IAAA,qDAAyE,EAAxE,mBAAW,EAAE,eAAO,CAAqD;wBAChF,UAAU;6BACL,iBAAiB,CAAC,OAAO,CAAC;6BAC1B,gCAAgC,CAAC,WAAW,CAAC,CAAC;oBACvD,CAAC;oBAED,2BAA2B;oBAC3B,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBACrB,IAAA,0DAA8E,EAA7E,mBAAW,EAAE,eAAO,CAA0D;wBACrF,UAAU;6BACL,sBAAsB,CAAC,OAAO,CAAC;6BAC/B,qCAAqC,CAAC,WAAW,CAAC,CAAC;oBAC5D,CAAC;oBAED,oBAAoB;oBACpB,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;wBACf,IAAA,oDAAwE,EAAvE,mBAAW,EAAE,eAAO,CAAoD;wBAC/E,UAAU;6BACL,gBAAgB,CAAC,OAAO,CAAC;6BACzB,+BAA+B,CAAC,WAAW,CAAC,CAAC;oBACtD,CAAC;oBAED,qDAAqD;oBACrD,EAAE,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC;wBAC3B,UAAU,CAAC,iBAAiB,CAAC,OAAO,CAAC,kBAAyB,CAAC,CAAC;oBAEpE,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAiDD;;mBAEG;gBACG,4CAAgB,GAAtB,UAAuB,iCAA4D,EAAE,aAAsB;;;4BAEvG,oEAAoE;4BACpE,EAAE,CAAC,CAAC,iCAAiC,IAAI,iCAAiC,YAAY,MAAM,CAAC;gCACzF,MAAM,gBAAC,IAAI,CAAC,mCAAmC,CAAC,iCAAsD,CAAC,EAAC;4BAE5G,yFAAyF;4BACzF,EAAE,CAAC,CAAC,OAAO,iCAAiC,KAAK,QAAQ,CAAC;gCACtD,MAAM,gBAAC,IAAI,CAAC,0BAA0B,CAAC,iCAAiC,IAAI,SAAS,EAAE,aAAa,CAAC,EAAC;4BAE1G,+EAA+E;4BAC/E,EAAE,CAAC,CAAC,IAAI,CAAC,0CAA0C,EAAE,CAAC;gCAClD,MAAM,gBAAC,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,EAAC;4BAEtD,kGAAkG;4BAClG,EAAE,CAAC,CAAC,IAAI,CAAC,6CAA6C,EAAE,CAAC;gCACrD,MAAM,gBAAC,IAAI,CAAC,uBAAuB,EAAE,EAAC;4BAE1C,MAAM,IAAI,6EAAqC,EAAE,CAAC;;;iBACrD;gBA8CD;;mBAEG;gBACG,iDAAqB,GAA3B,UAA4B,0BAAuD;;;;;;oCAE/E,oEAAoE;oCACpE,EAAE,CAAC,CAAC,0BAA0B,IAAI,0BAA0B,YAAY,KAAK,CAAC;wCAC1E,MAAM,gBAAC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,GAAG,CAAC,UAAA,OAAO;gDACrD,MAAM,CAAC,KAAI,CAAC,mCAAmC,CAAC,OAA4B,CAAC,CAAC;4CAClF,CAAC,CAAC,CAAC,EAAC;oCAER,yFAAyF;oCACzF,EAAE,CAAC,CAAC,OAAO,0BAA0B,KAAK,QAAQ,CAAC;wCAC/C,MAAM,gBAAC,IAAI,CAAC,+BAA+B,CAAC,0BAAoC,CAAC,EAAC;oCAEtF,+EAA+E;oCAC/E,EAAE,CAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;wCAC/B,MAAM,gBAAC,IAAI,CAAC,+BAA+B,EAAE,EAAC;yCAG9C,IAAI,CAAC,6CAA6C,EAAE,EAApD,wBAAoD;oCAC5C,qBAAM,IAAI,CAAC,uBAAuB,EAAE,EAAA;wCAA5C,uBAAQ,SAAoC,GAAE;wCAElD,MAAM,IAAI,6EAAqC,EAAE,CAAC;;;;iBACrD;gBAED,4EAA4E;gBAC5E,oBAAoB;gBACpB,4EAA4E;gBAE5E;;mBAEG;gBACO,mDAAuB,GAAjC;oBACI,IAAM,IAAI,GAAG,8BAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,GAAG,iBAAiB,CAAC;oBAC1E,EAAE,CAAC,CAAC,CAAC,8BAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBAC/B,MAAM,CAAC,KAAK,CAAC;oBAEjB,IAAM,aAAa,GAA0C,8BAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACtF,EAAE,CAAC,CAAC,aAAa,YAAY,KAAK,CAAC,CAAC,CAAC;wBACjC,MAAM,CAAC,aAAa;6BACX,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,KAAK,8BAAa,CAAC,cAAc,CAAC,UAAU,CAAC,EAAxF,CAAwF,CAAC;6BAC3G,MAAM,GAAG,CAAC,CAAC;oBAExB,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,YAAY,MAAM,CAAC,CAAC,CAAC;wBACzC,EAAE,CAAC,CAAC,aAAa,CAAC,WAAW,IAAI,aAAa,CAAC,WAAW,KAAK,8BAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;4BACpG,MAAM,CAAC,KAAK,CAAC;wBAEjB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;oBACjD,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACO,sEAA0C,GAApD;oBACI,IAAM,IAAI,GAAG,8BAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,GAAG,iBAAiB,CAAC;oBAC1E,EAAE,CAAC,CAAC,CAAC,8BAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBAC/B,MAAM,CAAC,KAAK,CAAC;oBAEjB,IAAM,aAAa,GAA0C,8BAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACtF,EAAE,CAAC,CAAC,aAAa,YAAY,KAAK,CAAC,CAAC,CAAC;wBACjC,MAAM,CAAC,CAAC,CAAC,aAAa;6BACjB,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,KAAK,8BAAa,CAAC,cAAc,CAAC,UAAU,CAAC,EAAxF,CAAwF,CAAC;6BAC3G,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAA1C,CAA0C,CAAC,CAAC;oBAEpE,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,YAAY,MAAM,CAAC,CAAC,CAAC;wBACzC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI;4BACnB,aAAa,CAAC,IAAI,KAAK,SAAS,CAAC;4BACjC,MAAM,CAAC,KAAK,CAAC;wBAEjB,EAAE,CAAC,CAAC,aAAa,CAAC,WAAW,IAAI,aAAa,CAAC,WAAW,KAAK,8BAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;4BACpG,MAAM,CAAC,KAAK,CAAC;wBAEjB,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED;;mBAEG;gBACO,yEAA6C,GAAvD;oBACI,MAAM,CAAC,CAAC,CAAC,8BAAa,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC;gBACjE,CAAC;gBAED;;mBAEG;gBACa,mDAAuB,GAAvC;;;4BACI,sBAAO,IAAI,CAAC,mCAAmC,CAAC;oCAC5C,MAAM,EAAE;wCACJ,IAAI,EAAE,8BAAa,CAAC,cAAc,CAAC,qBAAqB,CAAC;wCACzD,GAAG,EAAE,8BAAa,CAAC,cAAc,CAAC,aAAa,CAAC;wCAChD,IAAI,EAAE,8BAAa,CAAC,cAAc,CAAC,cAAc,CAAC;wCAClD,IAAI,EAAE,8BAAa,CAAC,cAAc,CAAC,cAAc,CAAC;wCAClD,QAAQ,EAAE,8BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC;wCAC1D,QAAQ,EAAE,8BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC;wCAC1D,QAAQ,EAAE,8BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC;wCAC1D,GAAG,EAAE,8BAAa,CAAC,cAAc,CAAC,aAAa,CAAC;wCAChD,OAAO,EAAE,8BAAa,CAAC,cAAc,CAAC,iBAAiB,CAAC;wCACxD,OAAO,EAAE,8BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,SAAS,GAAG,mBAAQ,CAAC,SAAS,CAAC,8BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,GAAG,SAAS;wCAC1J,KAAK,EAAE,8BAAa,CAAC,cAAc,CAAC,sBAAsB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,8BAAa,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAC,GAAG,SAAS;qCAC7I;oCACD,cAAc,EAAE,mBAAQ,CAAC,SAAS,CAAC,8BAAa,CAAC,cAAc,CAAC,0BAA0B,CAAC,CAAC;oCAC5F,QAAQ,EAAE,8BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC,GAAG,8BAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;oCAC7H,WAAW,EAAE,8BAAa,CAAC,cAAc,CAAC,qBAAqB,CAAC,GAAG,8BAAa,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;oCACtI,aAAa,EAAE,8BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,GAAG,8BAAa,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;oCAC9I,gBAAgB,EAAE,8BAAa,CAAC,cAAc,CAAC,2BAA2B,CAAC,GAAG,8BAAa,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;oCACvJ,kBAAkB,EAAE,8BAAa,CAAC,cAAc,CAAC,8BAA8B,CAAC;oCAChF,OAAO,EAAE;wCACL,UAAU,EAAE,mBAAQ,CAAC,SAAS,CAAC,8BAAa,CAAC,cAAc,CAAC,yBAAyB,CAAC,CAAC;wCACvF,mBAAmB,EAAE,mBAAQ,CAAC,SAAS,CAAC,8BAAa,CAAC,cAAc,CAAC,gCAAgC,CAAC,CAAC;wCACvG,oBAAoB,EAAE,mBAAQ,CAAC,SAAS,CAAC,8BAAa,CAAC,cAAc,CAAC,qCAAqC,CAAC,CAAC;qCAChH;iCACJ,CAAC,EAAC;;;iBACN;gBAGD;;;;;mBAKG;gBACa,2DAA+B,GAA/C,UAAgD,IAAa;;;4BACnD,YAAY,EAIZ,QAAQ;;2CAJ4B,8BAAa,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,8BAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,GAAG,iBAAiB,CAAC,CAAC;4BACpI,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC;gCACd,MAAM,IAAI,KAAK,CAAC,oBAAiB,IAAI,IAAI,gBAAgB,8EAA0E,CAAC,CAAC;uCAExH,YAAY;iCACxB,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,KAAK,8BAAa,CAAC,cAAc,CAAC,UAAU,CAAC,EAAxF,CAAwF,CAAC,CAAC,yHAAyH;iCACrO,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,mCAAmC,CAAC,OAAO,CAAC,EAAjD,CAAiD,CAAC;4BAEtE,sBAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAC;;;iBAChC;gBAED;;;;;mBAKG;gBACa,sDAA0B,GAA1C,UAA2C,cAAsB,EAAE,IAAa;;4BACtE,YAAY,EAIZ,sBAAsB,EACtB,OAAO;;2CAL6B,8BAAa,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,8BAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,GAAG,iBAAiB,CAAC,CAAC;4BACpI,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC;gCACd,MAAM,IAAI,KAAK,CAAC,oBAAiB,IAAI,IAAI,gBAAgB,8EAA0E,CAAC,CAAC;qDAE1G,YAAY,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,IAAI,IAAI,SAAS,CAAC,KAAK,cAAc,EAA9C,CAA8C,CAAC;sCAC7F,sBAAsB,CAAC,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,KAAK,8BAAa,CAAC,cAAc,CAAC,UAAU,CAAC,EAAxF,CAAwF,CAAC;4BAElJ,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;gCAChB,MAAM,IAAI,KAAK,CAAC,kBAAe,cAAc,YAAK,8BAAa,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,sBAAsB,GAAG,8BAAa,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,EAAE,mDAA+C;oCACpN,CAAC,sBAAsB,CAAC,MAAM,GAAG,oEAAkE,sBAAsB,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,WAAW,EAAnB,CAAmB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,GAAG,EAAE,CAAC,CAAC,CAAC;4BAE3L,sBAAO,IAAI,CAAC,mCAAmC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAC;;;iBAC/D;gBAED;;mBAEG;gBACa,+DAAmC,GAAnD,UAAoD,OAA0B;;4BACpE,UAAU;;;;iDAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;oCAEvC,0BAA0B;oCAC1B,qBAAM,UAAU,CAAC,OAAO,EAAE,EAAA;;oCAD1B,0BAA0B;oCAC1B,SAA0B,CAAC;yCAGvB,CAAA,OAAO,CAAC,sBAAsB,IAAI,CAAC,8BAAa,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAA,EAAvF,wBAAuF;oCACvF,qBAAM,UAAU,CAAC,YAAY,EAAE,EAAA;;oCAA/B,SAA+B,CAAC;;;yCAGhC,CAAA,OAAO,CAAC,cAAc,IAAI,CAAC,8BAAa,CAAC,cAAc,CAAC,sBAAsB,CAAC,CAAA,EAA/E,wBAA+E;oCAC/E,qBAAM,UAAU,CAAC,UAAU,EAAE,EAAA;;oCAA7B,SAA6B,CAAC;;;yCAG9B,CAAA,OAAO,CAAC,iBAAiB,IAAI,CAAC,8BAAa,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAA,EAAjF,wBAAiF;oCACjF,qBAAM,UAAU,CAAC,aAAa,EAAE,EAAA;;oCAAhC,SAAgC,CAAC;;wCAErC,sBAAO,UAAU,EAAC;;;;iBACrB;gBAED;;mBAEG;gBACO,kDAAsB,GAAhC,UAAoC,WAAyB;oBACzD,MAAM,CAAC;wBACF,WAAwB,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,GAAG,KAAK,QAAQ,EAAvB,CAAuB,CAAC;wBAC/D,WAAmB,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,GAAG,KAAK,QAAQ,EAAvB,CAAuB,CAAC;qBAC9D,CAAC;gBACN,CAAC;gBAED;;mBAEG;gBACO,wCAAY,GAAtB,UAAuB,OAAsB,EAAE,MAAc;oBACzD,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;wBACnB,KAAK,OAAO;4BACR,MAAM,CAAC,IAAI,yBAAW,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;wBACvD,KAAK,UAAU;4BACX,MAAM,CAAC,IAAI,+BAAc,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC/C,KAAK,SAAS;4BACV,MAAM,CAAC,IAAI,yBAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC5C,KAAK,QAAQ;4BACT,MAAM,CAAC,IAAI,2BAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC7C,KAAK,QAAQ;4BACT,MAAM,CAAC,IAAI,2BAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC7C,KAAK,OAAO;4BACR,MAAM,CAAC,IAAI,iCAAe,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAChD,KAAK,QAAQ;4BACT,MAAM,CAAC,IAAI,2BAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC7C,KAAK,SAAS;4BACV,MAAM,CAAC,IAAI,yBAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC5C;4BACI,MAAM,IAAI,uCAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACnD,CAAC;gBACL,CAAC;gBAED;;mBAEG;gBACO,4CAAgB,GAA1B,UAA2B,IAAY,EAAE,MAAc,EAAE,MAAc;oBACnE,IAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,IAAI,EAAxB,CAAwB,CAAC,CAAC;oBACtF,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;wBAClB,EAAE,CAAC,CAAC,eAAe,CAAC,WAAW,CAAC;4BAC5B,MAAM,IAAI,iEAA+B,CAAC,IAAI,CAAC,CAAC;wBAEpD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC1E,CAAC;oBAED,IAAM,UAAU,GAAG,IAAI,uBAAU,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;oBACxD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAClC,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAEL,wBAAC;YAAD,CA/bA,AA+bC,IAAA;;QACD,CAAC;;;;;;;;;;YCvdD;gBAAkD,gDAAK;gBAGnD,sCAAY,MAAc,EAAE,YAAoB;oBAAhD,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,8BAA8B,CAAC;oBAIlC,KAAI,CAAC,OAAO,GAAG,yBAA6B,MAAM,CAAC,WAAY,CAAC,IAAI,SAAI,YAAY,8BAA2B;wBAC3G,8EAA8E,CAAC;;gBACvF,CAAC;gBAEL,mCAAC;YAAD,CATA,AASC,CATiD,KAAK,GAStD;;QAAA,CAAC;;;;;;ICqBF;;;OAGG;IACH,gBAAuB,aAAwC,EAAE,OAAuB;QACpF,IAAI,IAA0B,CAAC;QAC/B,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC;YACpC,IAAI,GAAgB,aAAa,CAAC;QAEtC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACvB,OAAO,GAAmB,aAAa,CAAC;YACxC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;QAC9B,CAAC;QACD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YAEjD,8FAA8F;YAC9F,qHAAqH;YAErH,uDAAuD;YACvD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACR,IAAM,mBAAmB,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,GAAG,SAAS,CAAC;gBACpJ,EAAE,CAAC,CAAC,mBAAmB,CAAC;oBACpB,IAAI,GAAG,0BAAW,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,CAAC;YAC1E,CAAC;YAED,kEAAkE;YAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAmB,CAAC;YAE5C,yGAAyG;YACzG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC;gBACtB,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAmB,EAAE,OAAO,CAAC,CAAC;YAEtE,yFAAyF;YACzF,qBAAqB;YACrB,gEAAgE;YAEhE,uDAAuD;YACvD,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC;gBAClB,MAAM,IAAI,2DAA4B,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAEjE,4CAA4C;YAC5C,IAAM,IAAI,GAAuB;gBAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;QACD,CAAC;;;;;;IC5ED;;;;OAIG;IACH,0BAAiC,OAAuB;QACpD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YAEjD,qHAAqH;YAErH,kEAAkE;YAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAmB,CAAC;YAE5C,wFAAwF;YACxF,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,0BAAW,CAAC,QAAQ,EAAmB,EAAE,OAAO,CAAC,CAAC;YAElF,4CAA4C;YAC5C,IAAM,IAAI,GAAuB;gBAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QACD,CAAC;;;;;;IC3BD;;;;OAIG;IACH,6BAAoC,oBAAwD;QACxF,MAAM,CAAC,UAAU,MAAgB;YAE7B,kEAAkE;YAClE,IAAM,OAAO,GAAkB;gBAC3B,IAAI,EAAE,oBAAoB,CAAC,IAAI;gBAC/B,IAAI,EAAE,oBAAoB,CAAC,IAAI;aAClC,CAAC;YAEF,4CAA4C;YAC5C,IAAM,IAAI,GAAuB;gBAC7B,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,eAAe;gBACrB,YAAY,EAAE,oBAAoB,CAAC,IAAI;gBACvC,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAED,CAAC;;;;;;;;;;YC9BD;gBAAwD,sDAAK;gBAGzD,4CAAY,MAAc,EAAE,YAAoB;oBAAhD,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,oCAAoC,CAAC;oBAIxC,KAAI,CAAC,OAAO,GAAG,oBAAwB,MAAM,CAAC,WAAY,CAAC,IAAI,SAAI,YAAY,0BAAuB;wBAClG,kEAAkE,CAAC;;gBAC3E,CAAC;gBAEL,yCAAC;YAAD,CATA,AASC,CATuD,KAAK,GAS5D;;QAAA,CAAC;;;;;;ICJF,0HAA0H;IAE1H;;;;;OAKG;IACH,gCAAuC,OAAuB;QAC1D,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,qHAAqH;YAErH,kEAAkE;YAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAmB,CAAC;YAE5C,2GAA2G;YAC3G,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;gBACd,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,KAAK,EAAkB,EAAE,OAAO,CAAC,CAAC;YAErE,wFAAwF;YACxF,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACjB,MAAM,IAAI,uEAAkC,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAEvE,2DAA2D;YAC3D,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAmB,EAAE,OAAO,CAAC,CAAC;YAEtF,4CAA4C;YAC5C,IAAM,IAAI,GAAuB;gBAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAED,CAAC;;;;;;;;;;YC3CD;gBAA8C,4CAAK;gBAG/C,kCAAY,MAAc,EAAE,YAAoB;oBAAhD,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,0BAA0B,CAAC;oBAI9B,KAAI,CAAC,OAAO,GAAG,qBAAyB,MAAM,CAAC,WAAY,CAAC,IAAI,SAAI,YAAY,2CAAwC;wBACpH,+DAA+D,CAAC;;gBACxE,CAAC;gBAEL,+BAAC;YAAD,CATA,AASC,CAT6C,KAAK,GASlD;;QAAA,CAAC;;;;;;ICYF;;;;OAIG;IACH,uBAA8B,aAAwC,EAAE,OAAuB;QAC3F,IAAI,IAA0B,CAAC;QAC/B,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC;YACpC,IAAI,GAAgB,aAAa,CAAC;QACtC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,GAAmB,aAAa,CAAC;QAC5C,CAAC;QACD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YAEjD,qHAAqH;YAErH,uDAAuD;YACvD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACR,IAAM,mBAAmB,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,GAAG,SAAS,CAAC;gBACpJ,EAAE,CAAC,CAAC,mBAAmB,CAAC;oBACpB,IAAI,GAAG,0BAAW,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,CAAC;YAC1E,CAAC;YAED,kEAAkE;YAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAmB,CAAC;YAE5C,yGAAyG;YACzG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC;gBACtB,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAmB,EAAE,OAAO,CAAC,CAAC;YAEtE,yFAAyF;YACzF,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;gBACd,MAAM,IAAI,mDAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAE7D,wFAAwF;YACxF,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACjB,MAAM,IAAI,uEAAkC,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAEvE,6CAA6C;YAC7C,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,IAAI,EAAmB,EAAE,OAAO,CAAC,CAAC;YAErE,4CAA4C;YAC5C,IAAM,IAAI,GAAuB;gBAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;QAED,CAAC;;;;;;ICrED;;;OAGG;IACH,0BAAiC,OAAuB;QACpD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YAEjD,qHAAqH;YAErH,kEAAkE;YAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAmB,CAAC;YAE5C,wFAAwF;YACxF,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,0BAAW,CAAC,QAAQ,EAAmB,EAAE,OAAO,CAAC,CAAC;YAElF,4CAA4C;YAC5C,IAAM,IAAI,GAAuB;gBAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAED,CAAC;;;;;;IC3BD;;;;OAIG;IACH,uBAA8B,OAAuB;QACjD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YAEjD,qHAAqH;YAErH,kEAAkE;YAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAmB,CAAC;YAE5C,wFAAwF;YACxF,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,0BAAW,CAAC,OAAO,EAAmB,EAAE,OAAO,CAAC,CAAC;YAEjF,6CAA6C;YAE7C,4CAA4C;YAC5C,IAAM,IAAI,GAAuB;gBAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAED,CAAC;;;;;;IC/BD;;;OAGG;IACH,wBAAkC,OAAuB;QACrD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YAEjD,kEAAkE;YAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAmB,CAAC;YAC5C,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;gBAC7B,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,GAAG,KAAK;aAC5C,CAAC,CAAC;YAEH,4CAA4C;YAC5C,IAAM,IAAI,GAAuB;gBAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,+BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QACD,CAAC;;;;;;ICxBD;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YAEjD,IAAM,IAAI,GAA+B;gBACrC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,uCAAkB,CAAC,YAAY;aACxC,CAAC;YACF,+BAAsB,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAAA,CAAC;;;;;;ICbF;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,IAAM,IAAI,GAA+B;gBACrC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,uCAAkB,CAAC,UAAU;aACtC,CAAC;YACF,+BAAsB,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAAA,CAAC;;;;;;ICZF;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,IAAM,IAAI,GAA+B;gBACrC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,uCAAkB,CAAC,YAAY;aACxC,CAAC;YACF,+BAAsB,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAAA,CAAC;;;;;;ICZF;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,IAAM,IAAI,GAA+B;gBACrC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,uCAAkB,CAAC,YAAY;aACxC,CAAC;YACF,+BAAsB,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAAA,CAAC;;;;;;ICZF;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,IAAM,IAAI,GAA+B;gBACrC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,uCAAkB,CAAC,aAAa;aACzC,CAAC;YACF,+BAAsB,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAAA,CAAC;;;;;;ICZF;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,IAAM,IAAI,GAA+B;gBACrC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,uCAAkB,CAAC,aAAa;aACzC,CAAC;YACF,+BAAsB,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAAA,CAAC;;;;;;ICZF;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,IAAM,IAAI,GAA+B;gBACrC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,uCAAkB,CAAC,aAAa;aACzC,CAAC;YACF,+BAAsB,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAAA,CAAC;;;;;;ICbF;;;OAGG;IACH;QACI,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,IAAI,GAAiC;gBACvC,MAAM,EAAE,MAAM;aACjB,CAAC;YACF,+BAAsB,EAAE,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACzD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAAA,CAAC;;;;;;;;;QCGD,CAAC;;;;;;;;;QCMD,CAAC;;;;;;;;;QCGF,CAAC;;;;;;ICvBD;;OAEG;IACH,uBAAiC,QAAqC;QAClE,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YAEjD,kDAAkD;YAClD,qHAAqH;YAErH,4CAA4C;YAC5C,IAAM,IAAI,GAA8B;gBACpC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,QAAQ,EAAE,QAAQ;aACrB,CAAC;YACF,+BAAsB,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAED,CAAC;;;;;;IClBD;;;;OAIG;IACH,oBAA2B,OAA2B;QAClD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,OAAO,GAAG,OAAO,IAAI,EAAuB,CAAC;YAC7C,IAAM,IAAI,GAA2B;gBACjC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;aACrD,CAAC;YACF,+BAAsB,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAED,CAAC;;;;;;IClBD;;;OAGG;IACH,mBAA0B,OAA0B;QAChD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,OAAO,GAAG,OAAO,IAAI,EAAsB,CAAC;YAC5C,IAAM,IAAI,GAA0B;gBAChC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;aAC/C,CAAC;YACF,+BAAsB,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAED,CAAC;;;;;;ICAD;;;;OAIG;IACH,oBAA8B,YAA2C,EAC3C,oBAAuH,EACvH,OAA8E;QACxG,IAAI,mBAAgD,CAAC;QACrD,EAAE,CAAC,CAAC,OAAO,oBAAoB,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC3C,OAAO,GAAqB,oBAAoB,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,mBAAmB,GAAiC,oBAAoB,CAAC;QAC7E,CAAC;QAED,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAqB,CAAC;YAE9C,4CAA4C;YAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;YAC7D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrD,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;gBACxF,EAAE,CAAC,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;oBAC1G,MAAM,GAAG,IAAI,CAAC;YACtB,CAAC;YAED,IAAM,IAAI,GAAyB;gBAC/B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,YAAY,EAAE,6BAAa,CAAC,YAAY;gBACxC,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,YAAY;gBAClB,mBAAmB,EAAE,mBAAmB;gBACxC,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,+BAAsB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAED,CAAC;;;;;;ICxCD;;;;OAIG;IACH,mBAA6B,YAA2C,EAC3C,oBAAkE,EAClE,OAAyB;QAClD,IAAI,mBAAgD,CAAC;QACrD,EAAE,CAAC,CAAC,OAAO,oBAAoB,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC3C,OAAO,GAAqB,oBAAoB,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,mBAAmB,GAAiC,oBAAoB,CAAC;QAC7E,CAAC;QAED,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAqB,CAAC;YAE9C,4CAA4C;YAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;YAC7D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrD,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;gBACxF,EAAE,CAAC,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;oBAC1G,MAAM,GAAG,IAAI,CAAC;YACtB,CAAC;YAED,IAAM,IAAI,GAAyB;gBAC/B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,YAAY,EAAE,6BAAa,CAAC,WAAW;gBACvC,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,YAAY;gBAClB,mBAAmB,EAAE,mBAAmB;gBACxC,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,+BAAsB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QACD,CAAC;;;;;;ICvDD,+DAA+D;IAE/D;;;OAGG;IACH,mBAA6B,YAA2C,EAAE,WAAwC,EAAE,OAA8E;QAC9L,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAqB,CAAC;YAE9C,4CAA4C;YAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;YAC7D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrD,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;gBACxF,EAAE,CAAC,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;oBAC1G,MAAM,GAAG,IAAI,CAAC;YACtB,CAAC;YAED,IAAM,IAAI,GAAyB;gBAC/B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,MAAM,EAAE,MAAM;gBACd,YAAY,EAAE,6BAAa,CAAC,WAAW;gBACvC,IAAI,EAAE,YAAY;gBAClB,mBAAmB,EAAE,WAAW;gBAChC,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,+BAAsB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAED,CAAC;;;;;;IClBD;;;OAGG;IACH,kBAA4B,YAA2C,EAC3C,oBAAkE,EAClE,OAAyB;QACjD,IAAI,mBAAgD,CAAC;QACrD,EAAE,CAAC,CAAC,OAAO,oBAAoB,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC3C,OAAO,GAAqB,oBAAoB,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,mBAAmB,GAAiC,oBAAoB,CAAC;QAC7E,CAAC;QAED,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAqB,CAAC;YAE9C,4CAA4C;YAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;YAC7D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrD,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;gBACxF,EAAE,CAAC,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;oBAC1G,MAAM,GAAG,IAAI,CAAC;YACtB,CAAC;YAED,IAAM,IAAI,GAAyB;gBAC/B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,MAAM,EAAE,MAAM;gBACd,YAAY,EAAE,6BAAa,CAAC,UAAU;gBACtC,IAAI,EAAE,YAAY;gBAClB,mBAAmB,EAAE,mBAAmB;gBACxC,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,+BAAsB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAAA,CAAC;;;;;;ICtDF;;OAEG;IACH,oBAA8B,QAAqC;QAC/D,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,IAAM,IAAI,GAA2B;gBACjC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,QAAQ,EAAE,QAAQ;aACrB,CAAC;YACF,+BAAsB,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAED,CAAC;;;;;;ICbD;;;OAGG;IACH,gBAAuB,IAAa,EAAE,OAAuB;QACzD,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,IAAI,GAAsB;gBAC5B,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,GAAG,SAAS;gBACjE,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS;gBAC9D,cAAc,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,cAAc,KAAK,IAAI,CAAC;aACjE,CAAC;YACF,+BAAsB,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QACD,CAAC;;;;;;IClBD;;;OAGG;IACH;QACI,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,IAAI,GAAsB;gBAC5B,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,UAAU;aACnB,CAAC;YACF,+BAAsB,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAAA,CAAC;;;;;;ICZF;;OAEG;IACH,0BAAiC,SAAkB,EAAE,OAAuB;QACxE,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,IAAI,GAAsB;gBAC5B,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,mBAAmB;gBACzB,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,GAAG,SAAS;gBACjE,cAAc,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,cAAc,KAAK,IAAI,CAAC;aACjE,CAAC;YACF,+BAAsB,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAAA,CAAC;;;;;;ICdF;;OAEG;IACH,uBAA8B,IAAa,EAAE,OAAuB;QAChE,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,IAAI,GAAsB;gBAC5B,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,GAAG,SAAS;gBACjE,cAAc,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,cAAc,KAAK,IAAI,CAAC;aACjE,CAAC;YACF,+BAAsB,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QACD,CAAC;;;;;;IChBD;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,IAAI,GAAsB;gBAC5B,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,SAAS;aACrB,CAAC;YACF,+BAAsB,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QACD,CAAC;;;;;;ICbD;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,IAAI,GAAsB;gBAC5B,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,oBAAoB;gBAC1B,OAAO,EAAE,SAAS;aACrB,CAAC;YACF,+BAAsB,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAAA,CAAC;;;;;;ICbF;;OAEG;IACH,0BAAiC,IAAkC;QAC/D,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,IAAI,GAA4B;gBAClC,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,IAAI;aACb,CAAC;YACF,+BAAsB,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAAA,CAAC;;;;;;ICZF;;;;;;;OAOG;IACH,qBAA4B,cAAkC;QAAlC,+BAAA,EAAA,0BAAkC;QAC1D,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB,EAAE,UAA8B;YAE/E,0CAA0C;YAC1C,IAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;YAExC,+CAA+C;YAC/C,UAAU,CAAC,KAAK,GAAG;gBAAA,iBAwBlB;gBAxB2B,cAAc;qBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;oBAAd,yBAAc;;gBACtC,MAAM,CAAC,sBAAa,CAAC,cAAc,CAAC;qBAC/B,aAAa;qBACb,WAAW,CAAC,UAAA,aAAa;oBAEtB,wEAAwE;oBACxE,IAAM,OAAO,GAAG,+BAAsB,EAAE;yBACnC,yBAAyB;yBACzB,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC;yBAClC,OAAO,EAAE;yBACT,MAAM,CAAC,UAAA,wBAAwB,IAAI,OAAA,wBAAwB,CAAC,UAAU,KAAK,UAAU,EAAlD,CAAkD,CAAC;yBACtF,GAAG,CAAC,UAAA,wBAAwB,IAAI,OAAA,wBAAwB,CAAC,KAAK,EAA9B,CAA8B,CAAC,CAAC;oBAErE,IAAI,6BAAoC,CAAC;oBACzC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjB,6BAA6B,GAAO,IAAI,QAAC,CAAC;wBAC1C,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,6BAA6B,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,aAAa,CAAC,EAA7D,CAA6D,CAAC,CAAC;oBAE5F,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,6BAA6B,IAAI,aAAa,SAAK,IAAI,CAAC,CAAC;oBAC7D,CAAC;oBAED,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,KAAI,EAAE,6BAA6B,CAAC,CAAC;gBACrE,CAAC,CAAC,CAAC;YACX,CAAC,CAAC;QACN,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QACD,CAAC;;;;;;ICzCD;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB,EAAE,KAAa;YAC9D,IAAM,IAAI,GAAkC;gBACxC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,UAAU,EAAE,UAAU;gBACtB,KAAK,EAAE,KAAK;aACf,CAAC;YACF,+BAAsB,EAAE,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjE,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QACD,CAAC;;;;;;ICXD;;OAEG;IACH;QACI,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YAEjD,qHAAqH;YAErH,0FAA0F;YAC1F,IAAM,OAAO,GAAkB,EAAE,IAAI,EAAE,0BAAW,CAAC,OAAO,EAAE,CAAC;YAE7D,4CAA4C;YAC5C,IAAM,IAAI,GAAuB;gBAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,IAAI,EAAE,WAAW;gBACjB,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,+BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAED,CAAC;;;;;;ICvBD;;OAEG;IACH,oBAA2B,OAA8E;QACrG,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAqB,CAAC;YAE9C,4CAA4C;YAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;YAC7D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrD,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;gBACxF,EAAE,CAAC,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;oBAC1G,MAAM,GAAG,IAAI,CAAC;YACtB,CAAC;YAED,IAAM,IAAI,GAAyB;gBAC/B,YAAY,EAAE,IAAI;gBAClB,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,MAAM,EAAE,MAAM;gBACd,YAAY,EAAE,6BAAa,CAAC,WAAW;gBACvC,IAAI,EAAE,cAAM,OAAA,MAAM,CAAC,WAAW,EAAlB,CAAkB;gBAC9B,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,+BAAsB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAED,CAAC;;;;;;IC7BD;;OAEG;IACH,sBAA6B,OAA8E;QACvG,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YACjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAqB,CAAC;YAE9C,4CAA4C;YAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;YAC7D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrD,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;gBACxF,EAAE,CAAC,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;oBAC1G,MAAM,GAAG,IAAI,CAAC;YACtB,CAAC;YAED,qCAAqC;YACrC,IAAM,IAAI,GAAyB;gBAC/B,cAAc,EAAE,IAAI;gBACpB,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,+BAA+B;gBAC/B,MAAM,EAAE,MAAM;gBACd,YAAY,EAAE,6BAAa,CAAC,WAAW;gBACvC,IAAI,EAAE,cAAM,OAAA,MAAM,CAAC,WAAW,EAAlB,CAAkB;gBAC9B,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,+BAAsB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;QAED,CAAC;;;;;;ICDD;;OAEG;IACH,eAAsB,qBAA4E,EAC5E,oBAAkG,EAClG,YAA2B;QAC7C,IAAM,IAAI,GAAG,OAAO,qBAAqB,KAAK,QAAQ,GAAG,qBAAqB,GAAG,SAAS,CAAC;QAC3F,IAAM,MAAM,GAAG,OAAO,qBAAqB,KAAK,QAAQ,GAAoE,oBAAoB,GAAG,qBAAiC,CAAC;QACrL,IAAI,OAAO,GAAG,CAAC,OAAO,qBAAqB,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,GAAG,qBAAqC,GAAG,YAAY,CAAC;QAC1J,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YACT,OAAO,GAAG,CAAC,OAAO,oBAAoB,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,GAAG,qBAAqC,GAAG,YAAY,CAAC;QAExJ,MAAM,CAAC,UAAU,WAA4B,EAAE,YAAqB;YAChE,IAAM,IAAI,GAAsB;gBAC5B,MAAM,EAAE,YAAY,GAAG,WAAW,CAAC,WAAW,GAAG,WAAuB;gBACxE,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,YAAY,GAAG,CAAC,YAAY,CAAC,GAAG,MAAM;gBAC/C,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK;aACnD,CAAC;YACF,+BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QACD,CAAC;;;;;;ICrDD;;;;;OAKG;IACH,wBAA+B,IAAa;QACxC,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,YAAY,GAAG,IAAI,GAAG,IAAI,GAAU,MAAO,CAAC,IAAI,CAAC;YACvD,IAAM,IAAI,GAA+B;gBACrC,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,YAAY;aACrB,CAAC;YACF,+BAAsB,EAAE,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QACD,CAAC;;;;;;ICfD;;;;OAIG;IACH,kBAA4B,YAA2C,EAAE,OAA8C;QACnH,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;YAEjD,IAAM,mBAAmB,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,GAAG,SAAS,CAAC;YACpJ,IAAM,OAAO,GAAG,mBAAmB,KAAK,KAAK,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;YAEpG,IAAM,IAAI,GAAyB;gBAC/B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS;gBAC5E,IAAI,EAAE,YAAY;aACrB,CAAC;YACF,+BAAsB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QAAA,CAAC;;;;;;ICrBF;;;OAGG;IACH,4BAAmC,KAAU;QACzC,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,IAAI,GAAmC;gBACzC,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,KAAK;aACf,CAAC;YACF,+BAAsB,EAAE,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QACD,CAAC;;;;;;ICCD;;;;OAIG;IACH,0BAAiC,eAAqD,EAAE,YAAyC;QAC7H,IAAM,MAAM,GAAG,eAAe,YAAY,QAAQ,GAAG,eAA2B,GAAG,SAAS,CAAC;QAC7F,IAAM,OAAO,GAAG,eAAe,YAAY,QAAQ,GAAG,YAAY,GAAG,eAA6C,CAAC;QACnH,MAAM,CAAC,UAAU,MAAgB;YAC7B,IAAM,IAAI,GAAiC;gBACvC,MAAM,EAAE,MAAM;gBACd,MAAM,EAAE,MAAM;gBACd,YAAY,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,YAAY,CAAC;aACpD,CAAC;YACF,+BAAsB,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1D,CAAC,CAAC;IACN,CAAC;;;;;;;;;;QACD,CAAC;;;;;;ICiED,4EAA4E;IAC5E,aAAa;IACb,4EAA4E;IAE5E,4EAA4E;IAC5E,8BAA8B;IAC9B,4EAA4E;IAE5E;;OAEG;IACH;QACI,8FAA8F;QAC9F,qGAAqG;QACrG,mGAAmG;QACnG,8EAA8E;QAC9E,6FAA6F;QAC7F,8FAA8F;QAC9F,iFAAiF;QACjF,4FAA4F;QAC5F,IAAM,WAAW,GAAG,8BAAa,CAAC,iBAAiB,EAAE,CAAC;QACtD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,0BAA0B,CAAC;YACxC,WAAW,CAAC,0BAA0B,GAAG,IAAI,yCAAmB,EAAE,CAAC;QAEvE,MAAM,CAAC,WAAW,CAAC,0BAA0B,CAAC;IAClD,CAAC;;IAED;;OAEG;IACH;QACI,MAAM,CAAC,4BAAgB,CAAC,qCAAiB,CAAC,CAAC;IAC/C,CAAC;;IAiDD;;OAEG;IACH,0BAAiC,iCAA4D,EAAE,aAAsB;QACjH,MAAM,CAAC,oBAAoB,EAAE,CAAC,gBAAgB,CAAC,iCAAwC,EAAE,aAAa,CAAC,CAAC;IAC5G,CAAC;;IA8CD;;OAEG;IACH,2BAAkC,0BAAuD;QACrF,MAAM,CAAC,oBAAoB,EAAE,CAAC,qBAAqB,CAAC,0BAAiC,CAAC,CAAC;IAC3F,CAAC;;IAED;;;OAGG;IACH,uBAA8B,cAAkC;QAAlC,+BAAA,EAAA,0BAAkC;QAC5D,MAAM,CAAC,oBAAoB,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IACtD,CAAC;;IAED;;;OAGG;IACH,0BAAiC,cAAkC;QAAlC,+BAAA,EAAA,0BAAkC;QAC/D,MAAM,CAAC,oBAAoB,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC;IACpE,CAAC;;IAYD;;OAEG;IACH,uBAAsC,iBAA4C,EAAE,cAAkC;QAAlC,+BAAA,EAAA,0BAAkC;QAClH,MAAM,CAAC,oBAAoB,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,aAAa,CAAS,iBAAwB,CAAC,CAAC;IACtG,CAAC;;IAYD;;OAEG;IACH,2BAA0C,iBAA4C,EAAE,cAAkC;QAAlC,+BAAA,EAAA,0BAAkC;QACtH,MAAM,CAAC,oBAAoB,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,iBAAiB,CAAS,iBAAwB,CAAC,CAAC;IAC1G,CAAC;;IAYD;;OAEG;IACH,4BAA2C,iBAA4C,EAAE,cAAkC;QAAlC,+BAAA,EAAA,0BAAkC;QACvH,MAAM,CAAC,oBAAoB,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,kBAAkB,CAAS,iBAAwB,CAAC,CAAC;IAC3G,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QACD,CAAC;;;;;;;;;;;;;;;;;;;;QChT+B,CAAC;;;;;;;;;;YCEjC;;eAEG;YACH;gBAOI,kCAAY,IAAkC;oBAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC9B,CAAC;gBAEL,+BAAC;YAAD,CAXA,AAWC,IAAA;;QAAA,CAAC;;;;;;;;;QCLF,CAAC;;;;;;;;;QCCA,CAAC;;;;;;;;;;YCVF;;eAEG;YACH;gBAqBI,wEAAwE;gBACxE,cAAc;gBACd,wEAAwE;gBAExE,+BAAY,IAA+B;oBACvC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAClC,CAAC;gBAEL,4BAAC;YAAD,CA/BA,AA+BC,IAAA;;QAAA,CAAC;;;;;;;;;;YCpCF;;eAEG;YACH;gBAA6D,2DAAK;gBAG9D,iDAAY,cAAsB;oBAAlC,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,yCAAyC,CAAC;oBAI7C,KAAI,CAAC,OAAO,GAAG,qCAAkC,cAAc,6DAAyD,CAAC;oBACzH,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,8CAAC;YAAD,CATA,AASC,CAT4D,KAAK,GASjE;;QAAA,CAAC;;;;;;;;;;YCZF;;eAEG;YACH;gBAAoD,kDAAK;gBAGrD,wCAAY,cAAsB;oBAAlC,YACI,iBAAO,SAIV;oBAPD,UAAI,GAAG,gCAAgC,CAAC;oBAIpC,KAAI,CAAC,OAAO,GAAG,mCAAgC,cAAc,uDAAoD;wBAC7G,iFAAiF,CAAC;oBACtF,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;gBACnC,CAAC;gBAEL,qCAAC;YAAD,CAVA,AAUC,CAVmD,KAAK,GAUxD;;QAAA,CAAC;;;;;;;;;;YCbF;;eAEG;YACH;gBAA4C,0CAAK;gBAG7C;oBAAA,YACI,iBAAO,SAEV;oBALD,UAAI,GAAG,wBAAwB,CAAC;oBAI5B,KAAI,CAAC,OAAO,GAAG,4EAA4E,CAAC;;gBAChG,CAAC;gBAEL,6BAAC;YAAD,CARA,AAQC,CAR2C,KAAK,GAQhD;;QAAA,CAAC;;;;;;;;;;YCXF;;eAEG;YACH;gBAAoD,kDAAK;gBAGrD,wCAAY,UAAkB;oBAA9B,YACI,iBAAO,SAEV;oBALD,UAAI,GAAG,gCAAgC,CAAC;oBAIpC,KAAI,CAAC,OAAO,GAAG,6CAA2C,UAAU,cAAW,CAAC;;gBACpF,CAAC;gBAEL,qCAAC;YAAD,CARA,AAQC,CARmD,KAAK,GAQxD;;QAAA,CAAC;;;;;;;;;;YCRF;eACG;YACH;gBAA6C,2CAAK;gBAG9C,0EAA0E;gBAC1E,iCAAY,IAAgC,EAAE,QAAwB,EAAE,QAA0B;oBAAlG,YACI,iBAAO,SAEV;oBAND,UAAI,GAAG,yBAAyB,CAAC;oBAK7B,KAAI,CAAC,OAAO,GAAG,eAAa,IAAI,iDAA4C,QAAQ,CAAC,IAAI,SAAI,QAAQ,CAAC,IAAM,CAAC;;gBACjH,CAAC;gBAEL,8BAAC;YAAD,CATA,AASC,CAT4C,KAAK,GASjD;;QAAA,CAAC;;;;;;;;;;YCdF;;eAEG;YACH;gBAAkD,gDAAK;gBAGnD;oBAAA,YACI,iBAAO,SAEV;oBALD,UAAI,GAAG,8BAA8B,CAAC;oBAIlC,KAAI,CAAC,OAAO,GAAG,2FAA2F,CAAC;;gBAC/G,CAAC;gBAEL,mCAAC;YAAD,CARA,AAQC,CARiD,KAAK,GAQtD;;QAAA,CAAC;;;;;;;;;;YCXF;eACG;YACH;gBAA4D,0DAAK;gBAG7D,gDAAY,YAAoB,EAAE,IAAY;oBAA9C,YACI,iBAAO,SAGV;oBAND,UAAI,GAAG,wCAAwC,CAAC;oBAI5C,KAAI,CAAC,OAAO,GAAG,YAAY,GAAG,2BAA2B,GAAG,IAAI,GAAG,mBAAmB;wBAClF,8DAA8D,CAAC;;gBACvE,CAAC;gBAEL,6CAAC;YAAD,CATA,AASC,CAT2D,KAAK,GAShE;;QAAA,CAAC","file":"typeorm-browser.js","sourcesContent":["/**\r\n * Driver type.\r\n */\r\nexport type DriverType = \"mysql\"|\"postgres\"|\"mariadb\"|\"sqlite\"|\"oracle\"|\"mssql\"|\"websql\"|\"mongodb\";\r\n\r\n/**\r\n * Connectivity options used to connect to the database, and other database-driver-specific options.\r\n */\r\nexport interface DriverOptions {\r\n\r\n    /**\r\n     * Database type. This value is required.\r\n     */\r\n    readonly type: DriverType;\r\n\r\n    /**\r\n     * Connection url to where perform connection to.\r\n     */\r\n    readonly url?: string;\r\n\r\n    /**\r\n     * Database host.\r\n     */\r\n    readonly host?: string;\r\n\r\n    /**\r\n     * Database host port.\r\n     */\r\n    readonly port?: number;\r\n\r\n    /**\r\n     * Database username.\r\n     */\r\n    readonly username?: string;\r\n\r\n    /**\r\n     * Database password.\r\n     */\r\n    readonly password?: string;\r\n\r\n    /**\r\n     * Database name to connect to.\r\n     */\r\n    readonly database?: string;\r\n\r\n    /**\r\n     * Schema name. By default is \"public\" (used only in Postgres databases).\r\n     */\r\n    readonly schemaName?: string;\r\n    \r\n    /**\r\n     * Connection SID (used for Oracle databases).\r\n     */\r\n    readonly sid?: string;\r\n\r\n    /**\r\n     * Storage type or path to the storage (used for SQLite databases).\r\n     */\r\n    readonly storage?: string;\r\n\r\n    /**\r\n     * Indicates if connection pooling should be used or not.\r\n     * Be default it is enabled if its supported by a platform.\r\n     * Set to false to disable it.\r\n     *\r\n     * @todo: rename to disablePool? What about mongodb pool?\r\n     */\r\n    readonly usePool?: boolean;\r\n\r\n    /**\r\n     * Extra connection options to be passed to the underlying driver.\r\n     */\r\n    readonly extra?: any;\r\n\r\n    /**\r\n     * Prefix to use on all tables (collections) of this connection in the database.\r\n     *\r\n     * @todo: rename to entityPrefix\r\n     */\r\n    readonly tablesPrefix?: string;\r\n\r\n}\r\n","/**\r\n * All data types that column can be.\r\n */\r\nexport type ColumnType = \"string\"|\"text\"|\"number\"|\"integer\"|\"int\"|\"smallint\"|\"bigint\"|\"float\"|\"double\"|\r\n                         \"decimal\"|\"date\"|\"time\"|\"datetime\"|\"boolean\"|\"json\"|\"jsonb\"|\"simple_array\"|\"uuid\";\r\n\r\n/**\r\n * All data types that column can be.\r\n */\r\nexport class ColumnTypes {\r\n\r\n    /**\r\n     * SQL VARCHAR type. Your class's property type should be a \"string\".\r\n     */\r\n    static STRING: ColumnType = \"string\";\r\n\r\n    /**\r\n     * SQL CLOB type. Your class's property type should be a \"string\".\r\n     */\r\n    static TEXT: ColumnType = \"text\";\r\n\r\n    /**\r\n     * SQL FLOAT type. Your class's property type should be a \"number\".\r\n     */\r\n    static NUMBER: ColumnType = \"number\";\r\n\r\n    /**\r\n     * SQL INT type. Your class's property type should be a \"number\".\r\n     */\r\n    static INTEGER: ColumnType = \"integer\";\r\n\r\n    /**\r\n     * SQL INT type. Your class's property type should be a \"number\".\r\n     */\r\n    static INT: ColumnType = \"int\";\r\n\r\n    /**\r\n     * SQL SMALLINT type. Your class's property type should be a \"number\".\r\n     */\r\n    static SMALLINT: ColumnType = \"smallint\";\r\n\r\n    /**\r\n     * SQL BIGINT type. Your class's property type should be a \"number\".\r\n     */\r\n    static BIGINT: ColumnType = \"bigint\";\r\n\r\n    /**\r\n     * SQL FLOAT type. Your class's property type should be a \"number\".\r\n     */\r\n    static FLOAT: ColumnType = \"float\";\r\n\r\n    /**\r\n     * SQL FLOAT type. Your class's property type should be a \"number\".\r\n     */\r\n    static DOUBLE: ColumnType = \"double\";\r\n\r\n    /**\r\n     * SQL DECIMAL type. Your class's property type should be a \"string\".\r\n     */\r\n    static DECIMAL: ColumnType = \"decimal\";\r\n\r\n    /**\r\n     * SQL DATETIME type. Your class's property type should be a \"Date\" object.\r\n     */\r\n    static DATE: ColumnType = \"date\";\r\n\r\n    /**\r\n     * SQL TIME type. Your class's property type should be a \"Date\" object.\r\n     */\r\n    static TIME: ColumnType = \"time\";\r\n\r\n    /**\r\n     * SQL DATETIME/TIMESTAMP type. Your class's property type should be a \"Date\" object.\r\n     */\r\n    static DATETIME: ColumnType = \"datetime\";\r\n\r\n    /**\r\n     * SQL BOOLEAN type. Your class's property type should be a \"boolean\".\r\n     */\r\n    static BOOLEAN: ColumnType = \"boolean\";\r\n\r\n    /**\r\n     * SQL CLOB type. Your class's property type should be any Object.\r\n     */\r\n    static JSON: ColumnType = \"json\";\r\n\r\n    /**\r\n     * Postgres jsonb type. Your class's property type should be any Object.\r\n     */\r\n    static JSONB: ColumnType = \"jsonb\";\r\n\r\n    /**\r\n     * SQL CLOB type. Your class's property type should be array of string. Note: value in this column should not contain\r\n     * a comma (\",\") since this symbol is used to create a string from the array, using .join(\",\") operator.\r\n     */\r\n    static SIMPLE_ARRAY: ColumnType = \"simple_array\";\r\n\r\n    /**\r\n     * UUID type. Serialized to a string in typescript or javascript\r\n     */\r\n    static UUID: ColumnType = \"uuid\";\r\n\r\n    /**\r\n     * Checks if given type in a string format is supported by ORM.\r\n     */\r\n    static isTypeSupported(type: string) {\r\n        return this.supportedTypes.indexOf(<ColumnType> type) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Returns list of all supported types by the ORM.\r\n     */\r\n    static get supportedTypes() {\r\n        return [\r\n            this.STRING,\r\n            this.TEXT,\r\n            this.NUMBER,\r\n            this.INTEGER,\r\n            this.INT,\r\n            this.SMALLINT,\r\n            this.BIGINT,\r\n            this.FLOAT,\r\n            this.DOUBLE,\r\n            this.DECIMAL,\r\n            this.DATE,\r\n            this.TIME,\r\n            this.DATETIME,\r\n            this.BOOLEAN,\r\n            this.JSON,\r\n            this.JSONB,\r\n            this.SIMPLE_ARRAY,\r\n            this.UUID\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Tries to guess a column type from the given function.\r\n     */\r\n    static determineTypeFromFunction(type: Function): ColumnType|undefined {\r\n        if (type instanceof Date) {\r\n            return ColumnTypes.DATETIME;\r\n\r\n        } else if (type instanceof Function) {\r\n            const typeName = (<any>type).name.toLowerCase();\r\n            switch (typeName) {\r\n                case \"number\":\r\n                    return ColumnTypes.NUMBER;\r\n                case \"boolean\":\r\n                    return ColumnTypes.BOOLEAN;\r\n                case \"string\":\r\n                    return ColumnTypes.STRING;\r\n                case \"date\":\r\n                    return ColumnTypes.DATETIME;\r\n                case \"object\":\r\n                    return ColumnTypes.JSON;\r\n            }\r\n\r\n        } else if (type instanceof Object) {\r\n            return ColumnTypes.JSON;\r\n\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    static typeToString(type: Function): string {\r\n        return (type as any).name.toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Checks if column type is numeric.\r\n     */\r\n    static isNumeric(type: ColumnType) {\r\n        return  type === ColumnTypes.NUMBER ||\r\n                type === ColumnTypes.INT ||\r\n                type === ColumnTypes.INTEGER ||\r\n                type === ColumnTypes.BIGINT ||\r\n                type === ColumnTypes.SMALLINT ||\r\n                type === ColumnTypes.DOUBLE ||\r\n                type === ColumnTypes.FLOAT;\r\n    }\r\n\r\n}","import {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Describes all column's options.\r\n */\r\nexport interface ColumnOptions {\r\n\r\n    /**\r\n     * Column type. Must be one of the value from the ColumnTypes class.\r\n     */\r\n    readonly type?: ColumnType;\r\n\r\n    /**\r\n     * Column name in the database.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Column type's length. Used only on some column types.\r\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\r\n     */\r\n    readonly length?: string|number;\r\n\r\n    /**\r\n     * Indicates if this column is PRIMARY.\r\n     * Same can be achieved if @PrimaryColumn decorator will be used.\r\n     */\r\n    readonly primary?: boolean;\r\n\r\n    /**\r\n     * Specifies if this column will use auto increment (sequence, generated identity).\r\n     * Note that only one column in entity can be marked as generated, and it must be a primary column.\r\n     * (todo: create validation logic for this condition)\r\n     */\r\n    readonly generated?: boolean;\r\n\r\n    /**\r\n     * Specifies if column's value must be unique or not.\r\n     */\r\n    readonly unique?: boolean;\r\n\r\n    /**\r\n     * Indicates if column's value can be set to NULL.\r\n     */\r\n    nullable?: boolean;\r\n\r\n    /**\r\n     * Column comment.\r\n     */\r\n    readonly comment?: string;\r\n\r\n    /**\r\n     * Default database value.\r\n     */\r\n    readonly default?: any;\r\n\r\n    /**\r\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\r\n     * number of digits that are stored for the values.\r\n     */\r\n    readonly precision?: number;\r\n\r\n    /**\r\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\r\n     * of digits to the right of the decimal point and must not be greater than precision.\r\n     */\r\n    readonly scale?: number;\r\n\r\n    /**\r\n     * Indicates if this date column will contain a timezone.\r\n     * Used only for date-typed column types.\r\n     * Note that timezone option is not supported by all databases (only postgres for now).\r\n     */\r\n    readonly timezone?: boolean;\r\n\r\n    /**\r\n     * Indicates if date object must be stored in given date's timezone.\r\n     * By default date is saved in UTC timezone.\r\n     * Works only with \"datetime\" columns.\r\n     */\r\n    readonly localTimezone?: boolean;\r\n\r\n    /**\r\n     * Indicates if column's type will be set as a fixed-length data type.\r\n     * Works only with \"string\" columns.\r\n     */\r\n    readonly fixedLength?: boolean;\r\n\r\n}\r\n","import {ColumnOptions} from \"../decorator/options/ColumnOptions\";\r\nimport {ColumnMode} from \"../metadata/ColumnMetadata\";\r\n\r\n/**\r\n * Arguments for ColumnMetadata class.\r\n */\r\nexport interface ColumnMetadataArgs {\r\n\r\n    /**\r\n     * Class to which column is applied.\r\n     */\r\n    readonly target: Function|string|\"__virtual__\";\r\n\r\n    /**\r\n     * Class's property name to which column is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Class's property type (reflected) to which column is applied.\r\n     *\r\n     * todo: check when this is not set, because for the entity schemas we don't set it.\r\n     */\r\n    // readonly propertyType?: string;\r\n\r\n    /**\r\n     * Column mode in which column will work.\r\n     *\r\n     * todo: find name better then \"mode\".\r\n     */\r\n    readonly mode: ColumnMode;\r\n\r\n    /**\r\n     * Extra column options.\r\n     */\r\n    readonly options: ColumnOptions;\r\n\r\n}\r\n","/**\r\n * Table type. Tables can be abstract, closure, junction, embedded, etc.\r\n */\r\nexport type TableType = \"regular\"|\"abstract\"|\"junction\"|\"closure\"|\"closure-junction\"|\r\n    \"embeddable\"|\"single-table-child\"|\"class-table-child\";\r\n\r\n/**\r\n * Represents a class with constants - list of all possible table types.\r\n */\r\nexport class TableTypes {\r\n\r\n    /**\r\n     * All non-specific tables are just regular tables. Its a default table type.\r\n     */\r\n    static REGULAR: TableType = \"regular\";\r\n\r\n    /**\r\n     * This type is for the tables that does not exist in the database,\r\n     * but provide columns and relations for the tables of the child classes who inherit them.\r\n     */\r\n    static ABSTRACT: TableType = \"abstract\";\r\n\r\n    /**\r\n     * Junction table is a table automatically created by many-to-many relationship.\r\n     */\r\n    static JUNCTION: TableType = \"junction\";\r\n\r\n    /**\r\n     * Closure table is one of the tree-specific tables that supports closure database pattern.\r\n     */\r\n    static CLOSURE: TableType = \"closure\";\r\n\r\n    /**\r\n     * This type is for tables that contain junction metadata of the closure tables.\r\n     */\r\n    static CLOSURE_JUNCTION: TableType = \"closure-junction\";\r\n\r\n    /**\r\n     * Embeddable tables are not stored in the database as separate tables.\r\n     * Instead their columns are embed into tables who owns them.\r\n     */\r\n    static EMBEDDABLE: TableType = \"embeddable\";\r\n\r\n    /**\r\n     * Special table type for tables that are mapped into single table using Single Table Inheritance pattern.\r\n     */\r\n    static SINGLE_TABLE_CHILD: TableType = \"single-table-child\";\r\n\r\n    /**\r\n     * Special table type for tables that are mapped into multiple tables using Class Table Inheritance pattern.\r\n     */\r\n    static CLASS_TABLE_CHILD: TableType = \"class-table-child\";\r\n}","export type OrderByCondition = { [columnName: string]: \"ASC\"|\"DESC\" };\r\n","import {TableType} from \"../metadata/types/TableTypes\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\n\r\n/**\r\n * Arguments for TableMetadata class, helps to construct an TableMetadata object.\r\n */\r\nexport interface TableMetadataArgs {\r\n\r\n    /**\r\n     * Class to which table is applied.\r\n     * Function target is a table defined in the class.\r\n     * String target is a table defined in a json schema.\r\n     * \"__virtual__\" is a table defined without class (like junction tables).\r\n     */\r\n    readonly target: Function|string|\"__virtual__\";\r\n\r\n    /**\r\n     * Table's name. If name is not set then table's name will be generated from target's name.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\r\n     */\r\n    readonly type: TableType;\r\n\r\n    /**\r\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\r\n     */\r\n    readonly orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\r\n\r\n    /**\r\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\r\n     */\r\n    readonly engine?: string;\r\n\r\n    /**\r\n     * Whether table must be synced during schema build or not\r\n     */\r\n    readonly skipSchemaSync?: boolean;\r\n\r\n}\r\n","/**\r\n * Thrown when user tries to execute operation that requires connection to be established.\r\n */\r\nexport class EntityMetadataAlreadySetError extends Error {\r\n    name = \"EntityMetadataAlreadySetError\";\r\n\r\n    constructor(type: Function, target: Function|string|undefined, tableName: string|undefined) {\r\n        super();\r\n        const targetMessage = target ? ` for ${ target instanceof Function ? (target.constructor as any).name : target }` : \"\";\r\n        const tableNameMessage = tableName ? ` with ${ tableName } table name` : \"\";\r\n        this.message = \"Entity metadata\" + targetMessage + tableNameMessage + \" has been already set to this \" + (type.constructor as any).name;\r\n    }\r\n\r\n}","/**\r\n * Thrown when accessed to the class with entity metadata,\r\n * however on that time entity metadata is not set in the class.\r\n */\r\nexport class EntityMetadataNotSetError extends Error {\r\n    name = \"EntityMetadataNotSetError\";\r\n\r\n    constructor(type: Function, target: Function|string|undefined, tableName: string|undefined) {\r\n        super();\r\n        const targetMessage = target ? ` for ${ target instanceof Function ? (target.constructor as any).name : target }` : \"\";\r\n        const tableNameMessage = tableName ? ` with ${ tableName } table name` : \"\";\r\n        this.message = \"Entity metadata\" + targetMessage + tableNameMessage + \" is not set in \" + (type.constructor as any).name;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"./EntityMetadata\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {TableType, TableTypes} from \"./types/TableTypes\";\r\nimport {EntityMetadataAlreadySetError} from \"./error/EntityMetadataAlreadySetError\";\r\nimport {EntityMetadataNotSetError} from \"./error/EntityMetadataNotSetError\";\r\n\r\n/**\r\n * TableMetadata contains all entity's table metadata and information.\r\n */\r\nexport class TableMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     * Function target is a table defined in the class.\r\n     * String target is a table defined in a json schema.\r\n     * \"__virtual__\" is a table defined without target class (like junction tables).\r\n     */\r\n    readonly target: Function|string|\"__virtual__\";\r\n\r\n    /**\r\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\r\n     */\r\n    readonly _orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\r\n\r\n    /**\r\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\r\n     */\r\n    readonly engine?: string;\r\n\r\n    /**\r\n     * Whether table must be synced during schema build or not\r\n     */\r\n    readonly skipSchemaSync?: boolean;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Private Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\r\n     */\r\n    private readonly tableType: TableType = \"regular\";\r\n\r\n    /**\r\n     * Table name in the database. If name is not set then table's name will be generated from target's name.\r\n     */\r\n    private readonly _name?: string;\r\n\r\n    /**\r\n     * EntityMetadata of this table metadata, where this table metadata contained.\r\n     */\r\n    private _entityMetadata?: EntityMetadata;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new TableMetadata based on the given arguments object.\r\n     */\r\n    constructor(args: TableMetadataArgs) {\r\n        this.target = args.target;\r\n        this.tableType = args.type;\r\n        this._name = args.name;\r\n        this._orderBy = args.orderBy;\r\n        this.engine = args.engine;\r\n        this.skipSchemaSync = args.skipSchemaSync;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Accessors\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Sets the entity metadata of this table metadata.\r\n     * Note that entity metadata can be set only once.\r\n     * Once you set it, you can't change it anymore.\r\n     */\r\n    set entityMetadata(metadata: EntityMetadata) {\r\n        if (this._entityMetadata)\r\n            throw new EntityMetadataAlreadySetError(TableMetadata, this.target, this._name);\r\n\r\n        this._entityMetadata = metadata;\r\n    }\r\n\r\n    /**\r\n     * Gets entity metadata of this table metadata.\r\n     * If entity metadata was not set then exception will be thrown.\r\n     */\r\n    get entityMetadata(): EntityMetadata {\r\n        if (!this._entityMetadata)\r\n            throw new EntityMetadataNotSetError(TableMetadata, this.target, this._name);\r\n\r\n        return this._entityMetadata;\r\n    }\r\n\r\n    /**\r\n     * Gets the table name without global table prefix.\r\n     * When querying table you need a table name with prefix, but in some scenarios,\r\n     * for example when you want to name a junction table that contains names of two other tables,\r\n     * you may want a table name without prefix.\r\n     */\r\n    get nameWithoutPrefix() {\r\n        if (this.isClosureJunction && this._name)\r\n            return this.entityMetadata.namingStrategy.closureJunctionTableName(this._name);\r\n\r\n        // otherwise generate table name from target's name\r\n        const name = this.target instanceof Function ? (this.target as any).name : this.target;\r\n        return this.entityMetadata.namingStrategy.tableName(name, this._name);\r\n    }\r\n\r\n    /**\r\n     * Table name in the database.\r\n     * This name includes global table prefix if it was set.\r\n     */\r\n    get name(): string {\r\n        if (this.entityMetadata.tablesPrefix)\r\n            return this.entityMetadata.namingStrategy.prefixTableName(this.entityMetadata.tablesPrefix, this.nameWithoutPrefix);\r\n\r\n        return this.nameWithoutPrefix;\r\n    }\r\n\r\n    /**\r\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\r\n     * If default order by was not set, then returns undefined.\r\n     */\r\n    get orderBy(): OrderByCondition|undefined {\r\n        if (this._orderBy instanceof Function)\r\n            return this._orderBy(this.entityMetadata.createPropertiesMap());\r\n\r\n        return this._orderBy;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is regular.\r\n     * All non-specific tables are just regular tables. Its a default table type.\r\n     */\r\n    get isRegular() {\r\n        return this.tableType === TableTypes.REGULAR;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is abstract.\r\n     * This type is for the tables that does not exist in the database,\r\n     * but provide columns and relations for the tables of the child classes who inherit them.\r\n     */\r\n    get isAbstract() {\r\n        return this.tableType === TableTypes.ABSTRACT;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is abstract.\r\n     * Junction table is a table automatically created by many-to-many relationship.\r\n     */\r\n    get isJunction() {\r\n        return this.tableType === TableTypes.JUNCTION;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is a closure table.\r\n     * Closure table is one of the tree-specific tables that supports closure database pattern.\r\n     */\r\n    get isClosure() {\r\n        return this.tableType === TableTypes.CLOSURE;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is a junction table of the closure table.\r\n     * This type is for tables that contain junction metadata of the closure tables.\r\n     */\r\n    get isClosureJunction() {\r\n        return this.tableType === TableTypes.CLOSURE_JUNCTION;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is an embeddable table.\r\n     * Embeddable tables are not stored in the database as separate tables.\r\n     * Instead their columns are embed into tables who owns them.\r\n     */\r\n    get isEmbeddable() {\r\n        return this.tableType === TableTypes.EMBEDDABLE;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is a single table child.\r\n     * Special table type for tables that are mapped into single table using Single Table Inheritance pattern.\r\n     */\r\n    get isSingleTableChild() {\r\n        return this.tableType === TableTypes.SINGLE_TABLE_CHILD;\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is a class table child.\r\n     * Special table type for tables that are mapped into multiple tables using Class Table Inheritance pattern.\r\n     */\r\n    get isClassTableChild() {\r\n        return this.tableType === TableTypes.CLASS_TABLE_CHILD;\r\n    }\r\n\r\n}\r\n","/**\r\n * All types that relation can be.\r\n */\r\nexport type RelationType = \"one-to-one\"|\"one-to-many\"|\"many-to-one\"|\"many-to-many\";\r\n\r\n/**\r\n * Provides a constants for each relation type.\r\n */\r\nexport class RelationTypes {\r\n    static ONE_TO_ONE: RelationType = \"one-to-one\";\r\n    static ONE_TO_MANY: RelationType = \"one-to-many\";\r\n    static MANY_TO_ONE: RelationType = \"many-to-one\";\r\n    static MANY_TO_MANY: RelationType = \"many-to-many\";\r\n}","import {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {TableMetadata} from \"./TableMetadata\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\n\r\n/**\r\n * ON_DELETE type to be used to specify delete strategy when some relation is being deleted from the database.\r\n */\r\nexport type OnDeleteType = \"RESTRICT\"|\"CASCADE\"|\"SET NULL\";\r\n\r\n/**\r\n * Contains all information about entity's foreign key.\r\n */\r\nexport class ForeignKeyMetadata {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this foreign key is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Array of columns of this foreign key.\r\n     */\r\n    readonly columns: ColumnMetadata[];\r\n\r\n    /**\r\n     * Table to which this foreign key is references.\r\n     */\r\n    readonly referencedTable: TableMetadata;\r\n\r\n    /**\r\n     * Array of referenced columns.\r\n     */\r\n    readonly referencedColumns: ColumnMetadata[];\r\n\r\n    /**\r\n     * What to do with a relation on deletion of the row containing a foreign key.\r\n     */\r\n    readonly onDelete: OnDeleteType;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(columns: ColumnMetadata[],\r\n                referencedTable: TableMetadata,\r\n                referencedColumns: ColumnMetadata[],\r\n                onDelete?: OnDeleteType) {\r\n        this.columns = columns;\r\n        this.referencedTable = referencedTable;\r\n        this.referencedColumns = referencedColumns;\r\n        if (onDelete)\r\n            this.onDelete = onDelete;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets the table name to which this foreign key is applied.\r\n     */\r\n    get tableName() {\r\n        return this.entityMetadata.table.name;\r\n    }\r\n\r\n    /**\r\n     * Gets the table name to which this foreign key is referenced.\r\n     */\r\n    get referencedTableName() {\r\n        return this.referencedTable.name;\r\n    }\r\n\r\n    /**\r\n     * Gets foreign key name.\r\n     */\r\n    get name() {\r\n        return this.entityMetadata.namingStrategy.foreignKeyName(this.tableName, this.columnNames, this.referencedTable.name, this.referencedColumnNames);\r\n    }\r\n\r\n    /**\r\n     * Gets array of column names.\r\n     */\r\n    get columnNames(): string[] {\r\n        return this.columns.map(column => column.fullName);\r\n    }\r\n\r\n    /**\r\n     * Gets array of referenced column names.\r\n     */\r\n    get referencedColumnNames(): string[] {\r\n        return this.referencedColumns.map(column => column.fullName);\r\n    }\r\n\r\n}","/**\r\n * Describes column options.\r\n */\r\nexport interface JoinColumnOptions {\r\n\r\n    /**\r\n     * Name of the column.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Name of the column in the entity to which this column is referenced.\r\n     */\r\n    readonly referencedColumnName?: string;\r\n\r\n}","import {JoinColumnOptions} from \"../decorator/options/JoinColumnOptions\";\r\n\r\n/**\r\n * Arguments for JoinTableMetadata class.\r\n */\r\nexport interface JoinTableMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this column is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Class's property name to which this column is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Name of the table that will be created to store values of the both tables (join table).\r\n     * By default is auto generated.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * First column of the join table.\r\n     */\r\n    readonly joinColumn?: JoinColumnOptions;\r\n\r\n    /**\r\n     * Second (inverse) column of the join table.\r\n     */\r\n    readonly inverseJoinColumn?: JoinColumnOptions;\r\n\r\n}\r\n","import {RelationMetadata} from \"./RelationMetadata\";\r\nimport {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\r\n\r\n/**\r\n * JoinTableMetadata contains all information about relation's join table.\r\n */\r\nexport class JoinTableMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Relation - owner of this join table metadata.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Readonly Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Join table name.\r\n     */\r\n    private readonly _name?: string;\r\n\r\n    /**\r\n     * Join column name.\r\n     */\r\n    private readonly _joinColumnName: string;\r\n\r\n    /**\r\n     * Join column referenced column name.\r\n     */\r\n    private readonly _joinColumnReferencedColumnName: string;\r\n\r\n    /**\r\n     * Join column name of the inverse side.\r\n     */\r\n    private readonly _inverseJoinColumnName: string;\r\n\r\n    /**\r\n     * Join column referenced column name of the inverse side.\r\n     */\r\n    private readonly _inverseJoinColumnReferencedColumnName: string;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(args: JoinTableMetadataArgs) {\r\n        this.target = args.target;\r\n        this.propertyName = args.propertyName;\r\n        this._name = args.name;\r\n\r\n        if (args.joinColumn) {\r\n            if (args.joinColumn.name)\r\n                this._joinColumnName = args.joinColumn.name;\r\n            if (args.joinColumn.referencedColumnName)\r\n                this._joinColumnReferencedColumnName = args.joinColumn.referencedColumnName;\r\n        }\r\n\r\n        if (args.inverseJoinColumn) {\r\n            if (args.inverseJoinColumn.name)\r\n                this._inverseJoinColumnName = args.inverseJoinColumn.name;\r\n            if (args.inverseJoinColumn.referencedColumnName)\r\n                this._inverseJoinColumnReferencedColumnName = args.inverseJoinColumn.referencedColumnName;\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Accessors\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Join table name.\r\n     */\r\n    get name() {\r\n        if (this._name)\r\n            return this._name;\r\n\r\n        return this.relation.entityMetadata.namingStrategy.joinTableName(\r\n            this.relation.entityMetadata.table.nameWithoutPrefix,\r\n            this.relation.inverseEntityMetadata.table.nameWithoutPrefix,\r\n            this.relation.propertyName,\r\n            this.relation.hasInverseSide ? this.relation.inverseRelation.propertyName : \"\",\r\n            this.referencedColumn.fullName,\r\n            this.inverseReferencedColumn.fullName\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Join column name.\r\n     */\r\n    get joinColumnName() {\r\n        if (this._joinColumnName)\r\n            return this._joinColumnName;\r\n\r\n        return this.relation\r\n            .entityMetadata\r\n            .namingStrategy\r\n            .joinTableColumnName(\r\n                this.relation.entityMetadata.table.nameWithoutPrefix,\r\n                this.referencedColumn.fullName,\r\n                this.relation.inverseEntityMetadata.table.nameWithoutPrefix,\r\n                this.inverseReferencedColumn.fullName\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Join column name of the inverse side.\r\n     */\r\n    get inverseJoinColumnName() {\r\n        if (this._inverseJoinColumnName)\r\n            return this._inverseJoinColumnName;\r\n\r\n        return this.relation\r\n            .entityMetadata\r\n            .namingStrategy\r\n            .joinTableInverseColumnName(\r\n                this.relation.inverseEntityMetadata.table.nameWithoutPrefix,\r\n                this.inverseReferencedColumn.fullName,\r\n                this.relation.entityMetadata.table.nameWithoutPrefix,\r\n                this.referencedColumn.fullName\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Referenced join column.\r\n     */\r\n    get referencedColumn(): ColumnMetadata {\r\n        if (this._joinColumnReferencedColumnName) {\r\n            const referencedColumn = this.relation.entityMetadata.columns.find(column => column.fullName === this._joinColumnReferencedColumnName);\r\n            if (!referencedColumn)\r\n                throw new Error(`Referenced column ${this._joinColumnReferencedColumnName} was not found in entity ${this.name}`);\r\n\r\n            return referencedColumn;\r\n        }\r\n\r\n        if (this.relation.entityMetadata.primaryColumns.length > 1)\r\n            throw new Error(`Cannot automatically determine a referenced column of the \"${this.relation.entityMetadata.name}\", because it has multiple primary columns. Try to specify a referenced column explicitly.`);\r\n\r\n        return this.relation.entityMetadata.firstPrimaryColumn;\r\n    }\r\n\r\n    /**\r\n     * Referenced join column of the inverse side.\r\n     */\r\n    get inverseReferencedColumn(): ColumnMetadata {\r\n        if (this._inverseJoinColumnReferencedColumnName) {\r\n            const referencedColumn = this.relation.inverseEntityMetadata.columns.find(column => column.fullName === this._inverseJoinColumnReferencedColumnName);\r\n            if (!referencedColumn)\r\n                throw new Error(`Referenced column ${this._inverseJoinColumnReferencedColumnName} was not found in entity ${this.name}`);\r\n\r\n            return referencedColumn;\r\n        }\r\n\r\n        if (this.relation.inverseEntityMetadata.primaryColumns.length > 1)\r\n            throw new Error(`Cannot automatically determine inverse referenced column of the \"${this.relation.inverseEntityMetadata.name}\", because it has multiple primary columns. Try to specify a referenced column explicitly.`);\r\n\r\n        return this.relation.inverseEntityMetadata.firstPrimaryColumn;\r\n    }\r\n\r\n}","/**\r\n * Arguments for JoinColumnMetadata class.\r\n */\r\nexport interface JoinColumnMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this column is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Class's property name to which this column is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Name of the column.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Name of the column in the entity to which this column is referenced.\r\n     */\r\n    readonly referencedColumnName?: string;\r\n\r\n}\r\n","import {RelationMetadata} from \"./RelationMetadata\";\r\nimport {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\r\n\r\n/**\r\n * JoinColumnMetadata contains all information about relation's join column.\r\n */\r\nexport class JoinColumnMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Relation - owner of this join column metadata.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Readonly Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Join column name.\r\n     */\r\n    private readonly _name: string|undefined;\r\n\r\n    /**\r\n     * Join column referenced column name.\r\n     */\r\n    private readonly referencedColumnName: string|undefined;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(args: JoinColumnMetadataArgs) {\r\n        this.target = args.target;\r\n        this.propertyName = args.propertyName;\r\n        this._name = args.name;\r\n        this.referencedColumnName = args.referencedColumnName;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Accessors\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Join column name.\r\n     */\r\n    get name() {\r\n        return this.relation.entityMetadata.namingStrategy.joinColumnInverseSideName(this._name, this.relation.propertyName);\r\n    }\r\n\r\n    /**\r\n     * Referenced join column.\r\n     */\r\n    get referencedColumn(): ColumnMetadata {\r\n        if (this.referencedColumnName) {\r\n            const referencedColumn = this.relation.inverseEntityMetadata.allColumns.find(column => column.fullName === this.referencedColumnName);\r\n            if (!referencedColumn)\r\n                throw new Error(`Referenced column ${this.referencedColumnName} was not found in entity ${this.name}`);\r\n\r\n            return referencedColumn;\r\n        }\r\n\r\n        const inverseEntityMetadata = this.relation.inverseEntityMetadata;\r\n        const primaryColumns = inverseEntityMetadata.primaryColumnsWithParentIdColumns;\r\n\r\n        if (primaryColumns.length > 1)\r\n            throw new Error(`Cannot automatically determine a referenced column of the \"${inverseEntityMetadata.name}\", because it has multiple primary columns. Try to specify a referenced column explicitly.`);\r\n\r\n        return primaryColumns[0];\r\n    }\r\n\r\n}","import {OnDeleteType} from \"../../metadata/ForeignKeyMetadata\";\r\n\r\n// todo: add ON_UPDATE\r\n\r\n/**\r\n * Describes all relation's options.\r\n */\r\nexport interface RelationOptions {\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be inserted / updated / removed to the db.\r\n     * This is option a shortcut if you would like to set cascadeInsert, cascadeUpdate and cascadeRemove to true.\r\n     */\r\n    readonly cascadeAll?: boolean;\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be inserted to the db.\r\n     */\r\n    readonly cascadeInsert?: boolean;\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be updated in the db.\r\n     */\r\n    readonly cascadeUpdate?: boolean;\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be remove from the db.\r\n     */\r\n    readonly cascadeRemove?: boolean;\r\n\r\n    /**\r\n     * Indicates if relation column value can be nullable or not.\r\n     */\r\n    readonly nullable?: boolean;\r\n\r\n    /**\r\n     * Database cascade action on delete.\r\n     */\r\n    readonly onDelete?: OnDeleteType;\r\n\r\n    /**\r\n     * Indicates if this relation will be a primary key.\r\n     * Can be used only for many-to-one and owner one-to-one relations.\r\n     */\r\n    readonly primary?: boolean;\r\n\r\n    /**\r\n     * Set this relation to be lazy. Note: lazy relations are promises. When you call them they return promise\r\n     * which resolve relation result then. If your property's type is Promise then this relation is set to lazy automatically.\r\n     */\r\n    readonly lazy?: boolean;\r\n\r\n}","import {RelationType} from \"../metadata/types/RelationTypes\";\r\nimport {RelationOptions} from \"../decorator/options/RelationOptions\";\r\nimport {PropertyTypeInFunction, RelationTypeInFunction} from \"../metadata/RelationMetadata\";\r\n\r\n/**\r\n * Arguments for RelationMetadata class.\r\n */\r\nexport interface RelationMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this relation is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * In the case if this relation is without a target, targetId must be specified.\r\n     * This is used for entity schemas without classes.\r\n     */\r\n    // readonly targetId?: string;\r\n\r\n    /**\r\n     * Class's property name to which this relation is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Indicates if this relation will be lazily loaded.\r\n     */\r\n    readonly isLazy: boolean;\r\n\r\n    /**\r\n     * Original (reflected) class's property type.\r\n     *\r\n     * todo: this can be empty for relations from entity schemas.\r\n     */\r\n    // readonly propertyType?: any;\r\n\r\n    /**\r\n     * Type of relation. Can be one of the value of the RelationTypes class.\r\n     */\r\n    readonly relationType: RelationType;\r\n\r\n    /**\r\n     * Type of the relation. This type is in function because of language specifics and problems with recursive\r\n     * referenced classes.\r\n     */\r\n    readonly type: RelationTypeInFunction;\r\n\r\n    /**\r\n     * Inverse side of the relation.\r\n     */\r\n    readonly inverseSideProperty?: PropertyTypeInFunction<any>;\r\n\r\n    /**\r\n     * Additional relation options.\r\n     */\r\n    readonly options: RelationOptions;\r\n\r\n    /**\r\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\r\n     */\r\n    readonly isTreeParent?: boolean;\r\n\r\n    /**\r\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\r\n     */\r\n    readonly isTreeChildren?: boolean;\r\n\r\n}","/**\r\n * Interface of the simple literal object with any string keys.\r\n */\r\nexport interface ObjectLiteral {\r\n    [key: string]: any;\r\n}\r\n","import {RelationTypes, RelationType} from \"./types/RelationTypes\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {OnDeleteType} from \"./ForeignKeyMetadata\";\r\nimport {JoinTableMetadata} from \"./JoinTableMetadata\";\r\nimport {JoinColumnMetadata} from \"./JoinColumnMetadata\";\r\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\r\nimport {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\n/**\r\n * Function that returns a type of the field. Returned value must be a class used on the relation.\r\n */\r\nexport type RelationTypeInFunction = ((type?: any) => Function)|Function|string; // todo: |string ?\r\n\r\n\r\n/**\r\n * Contains the name of the property of the object, or the function that returns this name.\r\n */\r\nexport type PropertyTypeInFunction<T> = string|((t: T) => string|any);\r\n\r\n\r\n/**\r\n * Contains all information about some entity's relation.\r\n */\r\nexport class RelationMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Its own entity metadata.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Related entity metadata.\r\n     */\r\n    inverseEntityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Junction entity metadata.\r\n     */\r\n    junctionEntityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Join table metadata.\r\n     */\r\n    joinTable: JoinTableMetadata;\r\n\r\n    /**\r\n     * Join column metadata.\r\n     */\r\n    joinColumn: JoinColumnMetadata;\r\n\r\n    /**\r\n     * The name of the field that will contain id or ids of this relation. This is used in the case if user\r\n     * wants to save relation without having to load related object, or in the cases if user wants to have id\r\n     * of the object it relates with, but don't want to load that object because of it. Also its used in the\r\n     * cases when user wants to add / remove / load in the many-to-many junction tables.\r\n     */\r\n    idField: string|undefined;\r\n\r\n    /**\r\n     * The name of the field that will contain count of the rows of the relation.\r\n     */\r\n    countField: string|undefined;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Readonly Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\r\n     */\r\n    readonly isTreeParent: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\r\n     */\r\n    readonly isTreeChildren: boolean = false;\r\n\r\n    /**\r\n     * Relation type.\r\n     */\r\n    readonly relationType: RelationType;\r\n\r\n    /**\r\n     * Indicates if this relation will be a primary key.\r\n     * Can be used only for many-to-one and owner one-to-one relations.\r\n     */\r\n    readonly isPrimary: boolean;\r\n\r\n    /**\r\n     * Indicates if this relation will be lazily loaded.\r\n     */\r\n    readonly isLazy: boolean;\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be inserted to the db.\r\n     */\r\n    readonly isCascadeInsert: boolean;\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be updated in the db.\r\n     */\r\n    readonly isCascadeUpdate: boolean;\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be remove from the db.\r\n     */\r\n    readonly isCascadeRemove: boolean;\r\n\r\n    /**\r\n     * Indicates if relation column value can be nullable or not.\r\n     */\r\n    readonly isNullable: boolean = true;\r\n\r\n    /**\r\n     * What to do with a relation on deletion of the row containing a foreign key.\r\n     */\r\n    readonly onDelete: OnDeleteType;\r\n\r\n    /**\r\n     * The real reflected property type.\r\n     */\r\n    // readonly propertyType: any;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Private Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * The type of the field.\r\n     */\r\n    private _type: RelationTypeInFunction;\r\n\r\n    /**\r\n     * Inverse side of the relation.\r\n     */\r\n    private _inverseSideProperty: PropertyTypeInFunction<any>;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(args: RelationMetadataArgs) {\r\n        this.target = args.target;\r\n        this.propertyName = args.propertyName;\r\n        this.relationType = args.relationType;\r\n\r\n        if (args.inverseSideProperty)\r\n            this._inverseSideProperty = args.inverseSideProperty;\r\n        // if (args.propertyType)\r\n        //     this.propertyType = args.propertyType;\r\n        if (args.isLazy !== undefined)\r\n            this.isLazy = args.isLazy;\r\n        if (args.options.cascadeInsert || args.options.cascadeAll)\r\n            this.isCascadeInsert = true;\r\n        if (args.options.cascadeUpdate || args.options.cascadeAll)\r\n            this.isCascadeUpdate = true;\r\n        if (args.options.cascadeRemove || args.options.cascadeAll)\r\n            this.isCascadeRemove = true;\r\n        if (args.options.nullable !== undefined)\r\n            this.isNullable = args.options.nullable;\r\n        if (args.options.onDelete)\r\n            this.onDelete = args.options.onDelete;\r\n        if (args.options.primary !== undefined)\r\n            this.isPrimary = args.options.primary;\r\n        if (args.isTreeParent)\r\n            this.isTreeParent = true;\r\n        if (args.isTreeChildren)\r\n            this.isTreeChildren = true;\r\n\r\n        if (!this._type)\r\n            this._type = args.type;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Accessors\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets relation's entity target.\r\n     * Original target returns target of the class where relation is.\r\n     * This class can be an abstract class, but relation even is from that class,\r\n     * but its more related to a specific entity. That's why we need this field.\r\n     */\r\n    get entityTarget(): Function|string {\r\n        return this.entityMetadata.target;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of column in the database.\r\n     * //Cannot be used with many-to-many relations since they don't have a column in the database.\r\n     * //Also only owning sides of the relations have this property.\r\n     */\r\n    get name(): string {\r\n        // if (!this.isOwning || this.isManyToMany)\r\n\r\n        if (this.isOwning) {\r\n            if (this.joinTable) {\r\n                return this.joinTable.joinColumnName;\r\n            } else if (this.joinColumn) {\r\n                return this.joinColumn.name;\r\n            }\r\n\r\n        } else if (this.hasInverseSide) {\r\n            if (this.inverseRelation.joinTable) {\r\n                return this.inverseRelation.joinTable.inverseJoinColumnName;\r\n            } else if (this.inverseRelation.joinColumn && this.inverseRelation.joinColumn.referencedColumn) {\r\n                return this.inverseRelation.joinColumn.referencedColumn.fullName;\r\n            }\r\n        }\r\n\r\n        throw new Error(`Relation name cannot be retrieved.`);\r\n    }\r\n\r\n    /**\r\n     * Gets the name of column to which this relation is referenced.\r\n     * //Cannot be used with many-to-many relations since all referenced are in the junction table.\r\n     * //Also only owning sides of the relations have this property.\r\n     */\r\n    get referencedColumnName(): string {\r\n        // if (!this.isOwning)\r\n        //     throw new Error(`Only owning side of the relations can have information about referenced column names.`);\r\n\r\n        // for many-to-one and owner one-to-one relations we get referenced column from join column\r\n        /*if (this.joinColumn && this.joinColumn.referencedColumn && this.joinColumn.referencedColumn.name)\r\n            return this.joinColumn.referencedColumn.name;\r\n\r\n        // for many-to-many relation we give referenced column depend of owner side\r\n        if (this.joinTable) { // need to check if this algorithm works correctly\r\n            if (this.isOwning) {\r\n                return this.joinTable.referencedColumn.name;\r\n            } else {\r\n                return this.joinTable.inverseReferencedColumn.name;\r\n            }\r\n        }*/\r\n\r\n        if (this.isOwning) {\r\n            if (this.joinTable) {\r\n                return this.joinTable.referencedColumn.fullName;\r\n\r\n            } else if (this.joinColumn) {\r\n                return this.joinColumn.referencedColumn.fullName;\r\n            }\r\n\r\n        } else if (this.hasInverseSide) {\r\n            if (this.inverseRelation.joinTable) {\r\n                return this.inverseRelation.joinTable.inverseReferencedColumn.fullName;\r\n            } else if (this.inverseRelation.joinColumn) {\r\n                return this.inverseRelation.joinColumn.name; // todo: didn't get this logic here\r\n            }\r\n        }\r\n\r\n        // this should not be possible, but anyway throw error\r\n        throw new Error(`Cannot get referenced column name of the relation ${this.entityMetadata.name}#${this.name}`);\r\n    }\r\n\r\n    /**\r\n     * Gets the column to which this relation is referenced.\r\n     */\r\n    get referencedColumn(): ColumnMetadata {\r\n        if (this.isOwning) {\r\n            if (this.joinTable) {\r\n                return this.joinTable.referencedColumn;\r\n\r\n            } else if (this.joinColumn) {\r\n                return this.joinColumn.referencedColumn;\r\n            }\r\n\r\n        } else if (this.hasInverseSide) {\r\n            if (this.inverseRelation.joinTable) {\r\n                return this.inverseRelation.joinTable.inverseReferencedColumn;\r\n            } else if (this.inverseRelation.joinColumn) {\r\n                return this.inverseRelation.joinColumn.referencedColumn;\r\n            }\r\n        }\r\n\r\n        // this should not be possible, but anyway throw error\r\n        throw new Error(`Cannot get referenced column of the relation ${this.entityMetadata.name}#${this.name}`);\r\n    }\r\n\r\n    /**\r\n     * Gets the property's type to which this relation is applied.\r\n     */\r\n    get type(): Function|string { // todo: when this can be a string?\r\n        return this._type instanceof Function ? (this._type as () => any)() : this._type;\r\n    }\r\n\r\n    /**\r\n     * Indicates if this side is an owner of this relation.\r\n     */\r\n    get isOwning() {\r\n        return  !!(this.isManyToOne ||\r\n                (this.isManyToMany && this.joinTable) ||\r\n                (this.isOneToOne && this.joinColumn));\r\n    }\r\n\r\n    /**\r\n     * Checks if this relation's type is \"one-to-one\".\r\n     */\r\n    get isOneToOne(): boolean {\r\n        return this.relationType === RelationTypes.ONE_TO_ONE;\r\n    }\r\n\r\n    /**\r\n     * Checks if this relation is owner side of the \"one-to-one\" relation.\r\n     * Owner side means this side of relation has a join column in the table.\r\n     */\r\n    get isOneToOneOwner(): boolean {\r\n        return this.isOneToOne && this.isOwning;\r\n    }\r\n\r\n    /**\r\n     * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\r\n     * NOT owner side means this side of relation does not have a join column in the table.\r\n     */\r\n    get isOneToOneNotOwner(): boolean {\r\n        return this.isOneToOne && !this.isOwning;\r\n    }\r\n\r\n    /**\r\n     * Checks if this relation's type is \"one-to-many\".\r\n     */\r\n    get isOneToMany(): boolean {\r\n        return this.relationType === RelationTypes.ONE_TO_MANY;\r\n    }\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-one\".\r\n     */\r\n    get isManyToOne(): boolean {\r\n        return this.relationType === RelationTypes.MANY_TO_ONE;\r\n    }\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-many\".\r\n     */\r\n    get isManyToMany(): boolean {\r\n        return this.relationType === RelationTypes.MANY_TO_MANY;\r\n    }\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\r\n     * Owner side means this side of relation has a join table.\r\n     */\r\n    get isManyToManyOwner(): boolean {\r\n        return this.isManyToMany && this.isOwning;\r\n    }\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\r\n     * Not owner side means this side of relation does not have a join table.\r\n     */\r\n    get isManyToManyNotOwner(): boolean {\r\n        return this.isManyToMany && !this.isOwning;\r\n    }\r\n\r\n    /**\r\n     * Checks if inverse side is specified by a relation.\r\n     */\r\n    get hasInverseSide(): boolean {\r\n        return this.inverseEntityMetadata && this.inverseEntityMetadata.hasRelationWithPropertyName(this.inverseSideProperty);\r\n    }\r\n\r\n    /**\r\n     * Gets the property name of the inverse side of the relation.\r\n     */\r\n    get inverseSideProperty(): string { // todo: should be called inverseSidePropertyName ?\r\n\r\n        if (this._inverseSideProperty) {\r\n            return this.computeInverseSide(this._inverseSideProperty);\r\n\r\n        } else if (this.isTreeParent && this.entityMetadata.hasTreeChildrenRelation) {\r\n            return this.entityMetadata.treeChildrenRelation.propertyName;\r\n\r\n        } else if (this.isTreeChildren && this.entityMetadata.hasTreeParentRelation) {\r\n            return this.entityMetadata.treeParentRelation.propertyName;\r\n\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets the relation metadata of the inverse side of this relation.\r\n     */\r\n    get inverseRelation(): RelationMetadata {\r\n        const relation = this.inverseEntityMetadata.findRelationWithPropertyName(this.inverseSideProperty);\r\n        if (!relation)\r\n            throw new Error(`Inverse side was not found in the relation ${this.entityMetadata.name}#${this.inverseSideProperty}`);\r\n\r\n        return relation;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets given entity's relation's value.\r\n     * Using of this method helps to access value of the lazy loaded relation.\r\n     */\r\n    getEntityValue(entity: ObjectLiteral): any {\r\n        return this.isLazy ? entity[\"__\" + this.propertyName + \"__\"] : entity[this.propertyName];\r\n    }\r\n\r\n    /**\r\n     * Checks if given entity has a value in a relation.\r\n     */\r\n    hasEntityValue(entity: ObjectLiteral): boolean {\r\n        return this.isLazy ? entity[\"__\" + this.propertyName + \"__\"] : entity[this.propertyName];\r\n    }\r\n\r\n    /**\r\n     * todo: lazy relations are not supported here? implement logic?\r\n     *\r\n     * examples:\r\n     *\r\n     * - isOneToOneNotOwner or isOneToMany:\r\n     *  Post has a Category.\r\n     *  Post is owner side.\r\n     *  Category is inverse side.\r\n     *  Post.category is mapped to Category.id\r\n     *\r\n     *  if from Post relation we are passing Category here,\r\n     *  it should return a post.category\r\n     */\r\n    getOwnEntityRelationId(ownEntity: ObjectLiteral): any {\r\n        if (this.isManyToManyOwner) {\r\n            return ownEntity[this.joinTable.referencedColumn.propertyName];\r\n\r\n        } else if (this.isManyToManyNotOwner) {\r\n            return ownEntity[this.inverseRelation.joinTable.inverseReferencedColumn.propertyName];\r\n\r\n        } else if (this.isOneToOneOwner || this.isManyToOne) {\r\n            return ownEntity[this.joinColumn.propertyName];\r\n\r\n        } else if (this.isOneToOneNotOwner || this.isOneToMany) {\r\n            return ownEntity[this.inverseRelation.joinColumn.referencedColumn.propertyName];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * examples:\r\n     *\r\n     * - isOneToOneNotOwner or isOneToMany:\r\n     *  Post has a Category.\r\n     *  Post is owner side.\r\n     *  Category is inverse side.\r\n     *  Post.category is mapped to Category.id\r\n     *\r\n     *  if from Post relation we are passing Category here,\r\n     *  it should return a category.id\r\n     *\r\n     *  @deprecated Looks like this method does not make sence and does same as getOwnEntityRelationId ?\r\n     */\r\n    getInverseEntityRelationId(inverseEntity: ObjectLiteral): any {\r\n        if (this.isManyToManyOwner) {\r\n            return inverseEntity[this.joinTable.inverseReferencedColumn.propertyName];\r\n\r\n        } else if (this.isManyToManyNotOwner) {\r\n            return inverseEntity[this.inverseRelation.joinTable.referencedColumn.propertyName];\r\n\r\n        } else if (this.isOneToOneOwner || this.isManyToOne) {\r\n            return inverseEntity[this.joinColumn.referencedColumn.propertyName];\r\n\r\n        } else if (this.isOneToOneNotOwner || this.isOneToMany) {\r\n            return inverseEntity[this.inverseRelation.joinColumn.propertyName];\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Private Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Inverse side set in the relation can be either string - property name of the column on inverse side,\r\n     * either can be a function that accepts a map of properties with the object and returns one of them.\r\n     * Second approach is used to achieve type-safety.\r\n     */\r\n    private computeInverseSide(inverseSide: PropertyTypeInFunction<any>): string {\r\n        const ownerEntityPropertiesMap = this.inverseEntityMetadata.createPropertiesMap();\r\n        if (typeof inverseSide === \"function\")\r\n            return (<Function> inverseSide)(ownerEntityPropertiesMap);\r\n        if (typeof inverseSide === \"string\")\r\n            return <string> inverseSide;\r\n\r\n        // throw new Error(\"Cannot compute inverse side of the relation\");\r\n        return \"\";\r\n    }\r\n}","/**\r\n * Arguments for IndexMetadata class.\r\n */\r\nexport interface IndexMetadataArgs {\r\n\r\n    /**\r\n     * Class to which index is applied.\r\n     */\r\n    readonly target?: Function|string;\r\n\r\n    /**\r\n     * Index name.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Columns combination to be used as index.\r\n     */\r\n    readonly columns: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\r\n\r\n    /**\r\n     * Indicates if index must be unique or not.\r\n     */\r\n    readonly unique: boolean;\r\n\r\n}\r\n","import {EntityMetadata} from \"./EntityMetadata\";\r\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\r\n\r\n/**\r\n * Index metadata contains all information about table's index.\r\n */\r\nexport class IndexMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the class to which this index is applied.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Readonly Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if this index must be unique.\r\n     */\r\n    readonly isUnique: boolean;\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    readonly target?: Function|string;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Private Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Composite index name.\r\n     */\r\n    private readonly _name: string|undefined;\r\n\r\n    /**\r\n     * Columns combination to be used as index.\r\n     */\r\n    private readonly _columns: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(args: IndexMetadataArgs) {\r\n        this.target = args.target;\r\n        this._columns = args.columns;\r\n        this._name = args.name;\r\n        this.isUnique = args.unique;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Accessors\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets index's name.\r\n     */\r\n    get name() {\r\n        return this.entityMetadata.namingStrategy.indexName(this._name, this.entityMetadata.table.name, this.columns);\r\n    }\r\n\r\n    /**\r\n     * Gets the table name on which index is applied.\r\n     */\r\n    get tableName() {\r\n        return this.entityMetadata.table.name;\r\n    }\r\n\r\n    /**\r\n     * Gets the column names which are in this index.\r\n     */\r\n    get columns(): string[] {\r\n\r\n        // if columns already an array of string then simply return it\r\n        let columnPropertyNames: string[] = [];\r\n        if (this._columns instanceof Array) {\r\n            columnPropertyNames = this._columns;\r\n        } else {\r\n            // if columns is a function that returns array of field names then execute it and get columns names from it\r\n            const propertiesMap = this.entityMetadata.createPropertiesMap();\r\n            const columnsFnResult = this._columns(propertiesMap);\r\n            const columnsNamesFromFnResult = columnsFnResult instanceof Array ? columnsFnResult : Object.keys(columnsFnResult);\r\n            columnPropertyNames = columnsNamesFromFnResult.map((i: any) => String(i));\r\n        }\r\n\r\n        const columns = this.entityMetadata.columns.filter(column => columnPropertyNames.indexOf(column.propertyName) !== -1);\r\n        const missingColumnNames = columnPropertyNames.filter(columnPropertyName => !this.entityMetadata.columns.find(column => column.propertyName === columnPropertyName));\r\n        if (missingColumnNames.length > 0) { // todo: better to extract all validation into single place is possible\r\n            // console.log(this.entityMetadata.columns);\r\n            throw new Error(`Index ${this._name ? \"\\\"\" + this._name + \"\\\" \" : \"\"}contains columns that are missing in the entity: ` + missingColumnNames.join(\", \"));\r\n        }\r\n\r\n        return columns.map(column => column.fullName);\r\n    }\r\n\r\n    /**\r\n     * Builds columns as a map of values where column name is key of object and value is a value provided by\r\n     * function or default value given to this function.\r\n     */\r\n    buildColumnsAsMap(defaultValue = 0): { [key: string]: number } {\r\n\r\n        const map: { [key: string]: number } = {};\r\n\r\n        // if columns already an array of string then simply create a map from it\r\n        if (this._columns instanceof Array) {\r\n            this._columns.forEach(columnName => map[columnName] = defaultValue);\r\n\r\n        } else {\r\n            // if columns is a function that returns array of field names then execute it and get columns names from it\r\n            const propertiesMap = this.entityMetadata.createPropertiesMap();\r\n            const columnsFnResult = this._columns(propertiesMap);\r\n            if (columnsFnResult instanceof Array) {\r\n                columnsFnResult.forEach(columnName => map[columnName] = defaultValue);\r\n            } else {\r\n                Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\r\n            }\r\n        }\r\n\r\n        // replace each propertyNames with column names\r\n        return Object.keys(map).reduce((updatedMap, key) => {\r\n            const column = this.entityMetadata.columns.find(column => column.propertyName === key);\r\n            if (!column)\r\n                throw new Error(`Index ${this._name ? \"\\\"\" + this._name + \"\\\" \" : \"\"}contains columns that are missing in the entity: ${key}`);\r\n\r\n            updatedMap[column.name] = map[key];\r\n            return updatedMap;\r\n        }, {} as { [key: string]: number });\r\n    }\r\n\r\n}","/**\r\n * Naming strategy defines how auto-generated names for such things like table name, or table column gonna be\r\n * generated.\r\n */\r\nexport interface NamingStrategyInterface {\r\n\r\n    /**\r\n     * Naming strategy name.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Gets the table name from the given class name.\r\n     */\r\n    tableName(className: string, customName?: string): string;\r\n\r\n    /**\r\n     * Gets the table's column name from the given property name.\r\n     */\r\n    columnName(propertyName: string, customName?: string): string;\r\n\r\n    /**\r\n     * Gets the embedded's column name from the given property name.\r\n     */\r\n    embeddedColumnName(prefixes: string[], columnPropertyName: string, columnCustomName?: string): string;\r\n\r\n    /**\r\n     * Gets the table's relation name from the given property name.\r\n     */\r\n    relationName(propertyName: string): string;\r\n\r\n    /**\r\n     * Gets the name of the index - simple and compose index.\r\n     */\r\n    indexName(customName: string|undefined, tableName: string, columns: string[]): string;\r\n\r\n    /**\r\n     * Gets the name of the join column used in the one-to-one and many-to-one relations.\r\n     */\r\n    joinColumnInverseSideName(joinColumnName: string|undefined, propertyName: string): string;\r\n\r\n    /**\r\n     * Gets the name of the join table used in the many-to-many relations.\r\n     */\r\n    joinTableName(firstTableName: string,\r\n                  secondTableName: string,\r\n                  firstPropertyName: string,\r\n                  secondPropertyName: string,\r\n                  firstColumnName: string,\r\n                  secondColumnName: string): string;\r\n\r\n    /**\r\n     * Gets the name of the column used for columns in the junction tables.\r\n     */\r\n    joinTableColumnName(tableName: string, columnName: string, secondTableName: string, secondColumnName: string): string;\r\n\r\n    /**\r\n     * Gets the name of the column used for second column name in the junction tables.\r\n     */\r\n    joinTableInverseColumnName(tableName: string, columnName: string, secondTableName: string, secondColumnName: string): string;\r\n\r\n    /**\r\n     * Gets the name for the closure junction table.\r\n     */\r\n    closureJunctionTableName(tableName: string): string;\r\n\r\n    /**\r\n     * Gets the name of the foreign key.\r\n     */\r\n    foreignKeyName(tableName: string, columnNames: string[], referencedTableName: string, referencedColumnNames: string[]): string;\r\n\r\n    /**\r\n     * Gets the column name of the column with foreign key to the parent table used in the class table inheritance.\r\n     */\r\n    classTableInheritanceParentColumnName(parentTableName: any, parentTableIdPropertyName: any): string;\r\n\r\n    /**\r\n     * Adds prefix to the table.\r\n     */\r\n    prefixTableName(prefix: string, originalTableName: string): string;\r\n\r\n}","/**\r\n * Arguments for EmbeddedMetadata class.\r\n */\r\nexport interface EmbeddedMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this column is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Class's property name to which this column is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Indicates if this embedded is array or not.\r\n     */\r\n    readonly isArray: boolean;\r\n\r\n    /**\r\n     * Prefix of the embedded, used instead of propertyName.\r\n     * If set to empty string, then prefix is not set at all.\r\n     */\r\n    readonly prefix?: string;\r\n\r\n    /**\r\n     * Type of the class to be embedded.\r\n     */\r\n    readonly type: ((type?: any) => Function);\r\n\r\n}\r\n","import {EntityMetadata} from \"./EntityMetadata\";\r\nimport {TableMetadata} from \"./TableMetadata\";\r\nimport {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\r\n\r\n/**\r\n * Contains all information about entity's embedded property.\r\n */\r\nexport class EmbeddedMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Its own entity metadata.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Parent embedded in the case if this embedded inside other embedded.\r\n     */\r\n    parentEmbeddedMetadata: EmbeddedMetadata;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Private Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Property name on which this embedded is attached.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Embeddable table.\r\n     */\r\n    readonly table: TableMetadata;\r\n\r\n    /**\r\n     * Embeddable table's columns.\r\n     */\r\n    readonly columns: ColumnMetadata[];\r\n\r\n    /**\r\n     * Nested embeddable in this embeddable.\r\n     */\r\n    readonly embeddeds: EmbeddedMetadata[];\r\n\r\n    /**\r\n     * Embedded type.\r\n     */\r\n    readonly type?: Function;\r\n\r\n    /**\r\n     * Indicates if this embedded is in array mode.\r\n     */\r\n    readonly isArray: boolean;\r\n\r\n    /**\r\n     * Prefix of the embedded, used instead of propertyName.\r\n     * If set to empty string, then prefix is not set at all.\r\n     */\r\n    readonly customPrefix: string|undefined;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(table: TableMetadata,\r\n                columns: ColumnMetadata[],\r\n                embeddeds: EmbeddedMetadata[],\r\n                args: EmbeddedMetadataArgs) {\r\n        this.type = args.type ? args.type() : undefined;\r\n        this.propertyName = args.propertyName;\r\n        this.isArray = args.isArray;\r\n        this.customPrefix = args.prefix;\r\n        this.table = table;\r\n        this.columns = columns;\r\n        this.embeddeds = embeddeds;\r\n        this.embeddeds.forEach(embedded => {\r\n            embedded.parentEmbeddedMetadata = this;\r\n        });\r\n        this.columns.forEach(column => {\r\n            column.embeddedMetadata = this;\r\n        });\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new embedded object.\r\n     */\r\n    create() {\r\n        if (!this.type)\r\n            throw new Error(`Embedded cannot be created because it does not have a type set.`);\r\n\r\n        return new (this.type as any);\r\n    }\r\n\r\n    /**\r\n     * Gets the prefix of the columns.\r\n     * By default its a property name of the class where this prefix is.\r\n     * But if custom prefix is set then it takes its value as a prefix.\r\n     * However if custom prefix is set to empty string prefix to column is not applied at all.\r\n     */\r\n    get prefix() {\r\n        if (this.customPrefix !== undefined)\r\n            return this.customPrefix;\r\n\r\n        return this.propertyName;\r\n    }\r\n\r\n}","import {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {TableMetadata} from \"../metadata/TableMetadata\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\r\n\r\n/**\r\n * Arguments for EntityMetadata class.\r\n */\r\nexport interface EntityMetadataArgs {\r\n\r\n    readonly junction: boolean;\r\n    readonly target: Function|string;\r\n    readonly tablesPrefix?: string;\r\n    readonly inheritanceType?: \"single-table\"|\"class-table\";\r\n    readonly discriminatorValue?: string;\r\n    readonly namingStrategy: NamingStrategyInterface;\r\n    readonly tableMetadata: TableMetadata;\r\n    readonly columnMetadatas?: ColumnMetadata[];\r\n    readonly relationMetadatas?: RelationMetadata[];\r\n    readonly indexMetadatas?: IndexMetadata[];\r\n    readonly foreignKeyMetadatas?: ForeignKeyMetadata[];\r\n    readonly embeddedMetadatas?: EmbeddedMetadata[];\r\n\r\n}\r\n","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\n/**\r\n */\r\nexport class Alias {\r\n    isMain: boolean;\r\n    name: string;\r\n    metadata: EntityMetadata; // TODO can be undefined\r\n    parentPropertyName: string;\r\n    parentAliasName: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    get selection() {\r\n        return this.parentAliasName + \".\" + this.parentPropertyName;\r\n    }\r\n\r\n    get target(): Function|string {\r\n        return this.metadata.target;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {Alias} from \"./Alias\";\r\nimport {Connection} from \"../../connection/Connection\";\r\n\r\n/**\r\n */\r\nexport class AliasMap {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    aliases: Alias[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    addMainAlias(alias: Alias) {\r\n        if (this.hasMainAlias)\r\n            this.aliases.splice(this.aliases.indexOf(this.mainAlias), 1);\r\n\r\n        alias.isMain = true;\r\n        this.aliases.push(alias);\r\n    }\r\n\r\n    addAlias(alias: Alias) {\r\n        this.aliases.push(alias);\r\n    }\r\n\r\n    get hasMainAlias() {\r\n        return !!this.aliases.find(alias => alias.isMain);\r\n    }\r\n\r\n    get mainAlias() {\r\n        const alias = this.aliases.find(alias => alias.isMain);\r\n        if (!alias)\r\n            throw new Error(`Main alias is not set.`);\r\n\r\n        return alias;\r\n    }\r\n\r\n    findAliasByName(name: string) {\r\n        return this.aliases.find(alias => alias.name === name);\r\n    }\r\n\r\n    findAliasByParent(parentAliasName: string, parentPropertyName: string) {\r\n        return this.aliases.find(alias => {\r\n            return alias.parentAliasName === parentAliasName && alias.parentPropertyName === parentPropertyName;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    getEntityMetadataByAlias(alias: Alias): EntityMetadata|undefined {\r\n        if (alias.metadata) {\r\n            // todo: use connection.getMetadata instead?\r\n            return alias.metadata;\r\n\r\n        } else if (alias.parentAliasName && alias.parentPropertyName) {\r\n\r\n            const parentAlias = this.findAliasByName(alias.parentAliasName);\r\n            if (!parentAlias)\r\n                throw new Error(`Alias \"${alias.parentAliasName}\" was not found`);\r\n\r\n            const parentEntityMetadata = this.getEntityMetadataByAlias(parentAlias);\r\n            if (!parentEntityMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + alias.name);\r\n\r\n            if (!parentEntityMetadata.hasRelationWithPropertyName(alias.parentPropertyName))\r\n                throw new Error(\"Relation metadata for \" + alias.parentAliasName + \"#\" + alias.parentPropertyName + \" was not found.\");\r\n\r\n            const relation = parentEntityMetadata.findRelationWithPropertyName(alias.parentPropertyName);\r\n            return relation.inverseEntityMetadata;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\nexport class OrmUtils {\r\n\r\n    static groupBy<T, R>(array: T[], propertyCallback: (item: T) => R): { id: R, items: T[] }[] {\r\n        return array.reduce((groupedArray, value) => {\r\n            const key = propertyCallback(value);\r\n            let grouped = groupedArray.find(i => i.id === key);\r\n            if (!grouped) {\r\n                grouped = { id: key, items: [] };\r\n                groupedArray.push(grouped);\r\n            }\r\n            grouped.items.push(value);\r\n            return groupedArray;\r\n        }, [] as Array<{ id: R, items: T[] }>);\r\n    }\r\n\r\n    /**\r\n     * Transforms given value into boolean value.\r\n     */\r\n    static toBoolean(value: any): boolean {\r\n        if (typeof value === \"boolean\")\r\n            return value;\r\n\r\n        if (typeof value === \"string\")\r\n            return value === \"true\" || value === \"1\";\r\n\r\n        if (typeof value === \"number\")\r\n            return value > 0;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Composes an object from the given array of keys and values.\r\n     */\r\n    static zipObject(keys: any[], values: any[]): ObjectLiteral {\r\n        return keys.reduce((object, column, index) => {\r\n            object[column] = values[index];\r\n            return object;\r\n        }, {} as ObjectLiteral);\r\n    }\r\n\r\n}","import {AliasMap} from \"../alias/AliasMap\";\r\nimport {Alias} from \"../alias/Alias\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {Driver} from \"../../driver/Driver\";\r\nimport {JoinMapping, RelationCountMeta} from \"../QueryBuilder\";\r\nimport {EmbeddedMetadata} from \"../../metadata/EmbeddedMetadata\";\r\n\r\n/**\r\n * Transforms raw sql results returned from the database into entity object.\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class RawSqlResultsToEntityTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private driver: Driver,\r\n                private aliasMap: AliasMap,\r\n                private joinMappings: JoinMapping[],\r\n                private relationCountMetas: RelationCountMeta[],\r\n                private enableRelationIdValues: boolean) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transform(rawSqlResults: any[]): any[] {\r\n        // console.log(\"rawSqlResults: \", rawSqlResults);\r\n        return this.groupAndTransform(rawSqlResults, this.aliasMap.mainAlias);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\r\n     * we need to group our result and we must have some unique id (primary key in our case)\r\n     */\r\n    private groupAndTransform(rawSqlResults: any[], alias: Alias) {\r\n\r\n        const metadata = this.aliasMap.getEntityMetadataByAlias(alias);\r\n        if (!metadata)\r\n            throw new Error(\"Cannot get entity metadata for the given alias \" + alias.name);\r\n\r\n        const groupedResults = OrmUtils.groupBy(rawSqlResults, result => {\r\n            if (!metadata) return;\r\n            return metadata.primaryColumnsWithParentIdColumns.map(column => result[alias.name + \"_\" + column.fullName]).join(\"_\"); // todo: check it\r\n        });\r\n        // console.log(\"groupedResults: \", groupedResults);\r\n        return groupedResults\r\n            .map(group => {\r\n                if (!metadata) return;\r\n                return this.transformIntoSingleResult(group.items, alias, metadata);\r\n            })\r\n            .filter(res => !!res);\r\n    }\r\n\r\n\r\n    /**\r\n     * Transforms set of data results into single entity.\r\n     */\r\n    private transformIntoSingleResult(rawSqlResults: any[], alias: Alias, metadata: EntityMetadata) {\r\n        const entity: any = metadata.create();\r\n        let hasData = false;\r\n\r\n        // console.log(rawSqlResults);\r\n\r\n        // add special columns that contains relation ids\r\n        if (this.enableRelationIdValues) {\r\n            metadata.columns\r\n                .filter(column => !!column.relationMetadata)\r\n                .forEach(column => {\r\n                    const valueInObject = rawSqlResults[0][alias.name + \"_\" + column.fullName]; // we use zero index since its grouped data\r\n                    if (valueInObject !== undefined && valueInObject !== null && column.propertyName) {\r\n                        const value = this.driver.prepareHydratedValue(valueInObject, column);\r\n                        entity[column.propertyName] = value;\r\n                        hasData = true;\r\n                    }\r\n                });\r\n        } // */\r\n\r\n        this.joinMappings\r\n            .filter(joinMapping => joinMapping.parentName === alias.name && !joinMapping.alias.parentAliasName && joinMapping.alias.target)\r\n            .map(joinMapping => {\r\n                const relatedEntities = this.groupAndTransform(rawSqlResults, joinMapping.alias);\r\n                const isResultArray = joinMapping.isMany;\r\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\r\n\r\n                if (result && (!isResultArray || result.length > 0)) {\r\n                    entity[joinMapping.propertyName] = result;\r\n                    hasData = true;\r\n                }\r\n            });\r\n\r\n        // get value from columns selections and put them into object\r\n        metadata.columnsWithoutEmbeddeds.forEach(column => {\r\n            const columnName = column.fullName;\r\n            const valueInObject = rawSqlResults[0][alias.name + \"_\" + columnName]; // we use zero index since its grouped data\r\n            if (valueInObject !== undefined && valueInObject !== null && column.propertyName && !column.isVirtual && !column.isParentId && !column.isDiscriminator) {\r\n                const value = this.driver.prepareHydratedValue(valueInObject, column);\r\n\r\n                // if (column.isInEmbedded) {\r\n                //     if (!entity[column.embeddedProperty])\r\n                //         entity[column.embeddedProperty] = column.embeddedMetadata.create();\r\n                //\r\n                //     entity[column.embeddedProperty][column.propertyName] = value;\r\n                // } else {\r\n                entity[column.propertyName] = value;\r\n                // }\r\n                hasData = true;\r\n            }\r\n        });\r\n\r\n        const addEmbeddedValuesRecursively = (entity: any, embeddeds: EmbeddedMetadata[]) => {\r\n            embeddeds.forEach(embedded => {\r\n                embedded.columns.forEach(column => {\r\n                    const value = rawSqlResults[0][alias.name + \"_\" + column.fullName];\r\n                    if (!value) return;\r\n\r\n                    if (!entity[embedded.propertyName])\r\n                        entity[embedded.propertyName] = embedded.create();\r\n\r\n                    entity[embedded.propertyName][column.propertyName] = value;\r\n                    hasData = true;\r\n                });\r\n                addEmbeddedValuesRecursively(entity[embedded.propertyName], embedded.embeddeds);\r\n            });\r\n        };\r\n\r\n        addEmbeddedValuesRecursively(entity, metadata.embeddeds);\r\n\r\n        // add parent tables metadata\r\n        // console.log(rawSqlResults);\r\n        // todo: duplication\r\n        if (metadata.parentEntityMetadata) {\r\n            metadata.parentEntityMetadata.columnsWithoutEmbeddeds.forEach(column => {\r\n                const columnName = column.fullName;\r\n                const valueInObject = rawSqlResults[0][\"parentIdColumn_\" + metadata.parentEntityMetadata.table.name + \"_\" + columnName]; // we use zero index since its grouped data\r\n                if (valueInObject !== undefined && valueInObject !== null && column.propertyName && !column.isVirtual && !column.isParentId && !column.isDiscriminator) {\r\n                    const value = this.driver.prepareHydratedValue(valueInObject, column);\r\n\r\n                    // if (column.isInEmbedded) {\r\n                    //     if (!entity[column.embeddedProperty])\r\n                    //         entity[column.embeddedProperty] = column.embeddedMetadata.create();\r\n                    //\r\n                    //     entity[column.embeddedProperty][column.propertyName] = value;\r\n                    // } else {\r\n                    entity[column.propertyName] = value;\r\n                    // }\r\n                    hasData = true;\r\n                }\r\n            });\r\n\r\n            addEmbeddedValuesRecursively(entity, metadata.parentEntityMetadata.embeddeds);\r\n        }\r\n\r\n        // if relation is loaded then go into it recursively and transform its values too\r\n        metadata.relations.forEach(relation => {\r\n            const relationAlias = this.aliasMap.findAliasByParent(alias.name, relation.propertyName);\r\n            if (relationAlias) {\r\n                const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"join\" && joinMapping.alias === relationAlias);\r\n                const relatedEntities = this.groupAndTransform(rawSqlResults, relationAlias);\r\n                const isResultArray = relation.isManyToMany || relation.isOneToMany;\r\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\r\n\r\n                if (result) {\r\n                    let propertyName = relation.propertyName;\r\n                    if (joinMapping) {\r\n                        propertyName = joinMapping.propertyName;\r\n                    }\r\n\r\n                    if (relation.isLazy) {\r\n                        entity[\"__\" + propertyName + \"__\"] = result;\r\n                    } else {\r\n                        entity[propertyName] = result;\r\n                    }\r\n\r\n                    if (!isResultArray || result.length > 0)\r\n                        hasData = true;\r\n                }\r\n            }\r\n\r\n            // if relation has id field then relation id/ids to that field.\r\n            if (relation.isManyToMany) {\r\n                if (relationAlias) {\r\n                    const ids: any[] = [];\r\n                    const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"relationId\" && joinMapping.alias === relationAlias);\r\n\r\n                    if (relation.idField || joinMapping) {\r\n                        const propertyName = joinMapping ? joinMapping.propertyName : relation.idField as string;\r\n                        const junctionMetadata = relation.junctionEntityMetadata;\r\n                        const columnName = relation.isOwning ? junctionMetadata.columns[1].fullName : junctionMetadata.columns[0].fullName;\r\n\r\n                        rawSqlResults.forEach(results => {\r\n                            if (relationAlias) {\r\n                                const resultsKey = relationAlias.name + \"_\" + columnName;\r\n                                const value = this.driver.prepareHydratedValue(results[resultsKey], relation.referencedColumn);\r\n                                if (value !== undefined && value !== null)\r\n                                    ids.push(value);\r\n                            }\r\n                        });\r\n\r\n                        if (ids && ids.length)\r\n                            entity[propertyName] = ids;\r\n                    }\r\n                }\r\n            } else if (relation.idField) {\r\n                const relationName = relation.name;\r\n                entity[relation.idField] = this.driver.prepareHydratedValue(rawSqlResults[0][alias.name + \"_\" + relationName], relation.referencedColumn);\r\n            }\r\n\r\n            // if relation counter\r\n            this.relationCountMetas.forEach(joinMeta => {\r\n                if (joinMeta.alias === relationAlias) {\r\n                    // console.log(\"relation count was found for relation: \", relation);\r\n                    // joinMeta.entity = entity;\r\n                    joinMeta.entities.push({ entity: entity, metadata: metadata });\r\n                    // console.log(joinMeta);\r\n                    // console.log(\"---------------------\");\r\n                }\r\n            });\r\n        });\r\n\r\n        return hasData ? entity : null;\r\n    }\r\n\r\n}","/**\r\n * Thrown when user tries to execute operation that requires connection to be established.\r\n */\r\nexport class ConnectionIsNotSetError extends Error {\r\n    name = \"ConnectionIsNotSetError\";\r\n\r\n    constructor(dbType: string) {\r\n        super();\r\n        this.message = `Connection with ${dbType} database is not established. Check connection configuration.`;\r\n    }\r\n\r\n}","/**\r\n * Represents a single connection to a database.\r\n */\r\nexport interface DatabaseConnection {\r\n\r\n    /**\r\n     * Id of the connection.\r\n     */\r\n    readonly id: number;\r\n\r\n    /**\r\n     * Native driver's connection object.\r\n     */\r\n    readonly connection: any;\r\n\r\n    /**\r\n     * Connection's transaction instance.\r\n     */\r\n    transaction?: any;\r\n\r\n    /**\r\n     * Indicates if transaction is active for this connection.\r\n     */\r\n    isTransactionActive: boolean;\r\n\r\n    /**\r\n     * Special function that holds a connection release logic.\r\n     * Releases connection when its called.\r\n     * After releasing connection cannot be used anymore.\r\n     */\r\n    releaseCallback?: () => Promise<void>;\r\n\r\n}","/**\r\n * Thrown when required driver's package is not installed.\r\n */\r\nexport class DriverPackageNotInstalledError extends Error {\r\n    name = \"DriverPackageNotInstalledError\";\r\n\r\n    constructor(driverName: string, packageName: string) {\r\n        super();\r\n        this.message = `${driverName} package has not been found installed. Try to install it: npm install ${packageName} --save`;\r\n    }\r\n\r\n}","import {DriverOptions} from \"./DriverOptions\";\r\n\r\n/**\r\n * Common driver utility functions.\r\n */\r\nexport class DriverUtils {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Normalizes and builds a new driver options.\r\n     * Extracts settings from connection url and sets to a new options object.\r\n     */\r\n    static buildDriverOptions(options: DriverOptions, buildOptions?: { useSid: boolean }): DriverOptions {\r\n        if (options.url) {\r\n            const parsedUrl = this.parseConnectionUrl(options.url);\r\n            if (buildOptions && buildOptions.useSid) {\r\n                const urlDriverOptions: DriverOptions = {\r\n                    type: options.type,\r\n                    host: parsedUrl.host,\r\n                    username: parsedUrl.username,\r\n                    password: parsedUrl.password,\r\n                    port: parsedUrl.port,\r\n                    sid: parsedUrl.database\r\n                };\r\n                return Object.assign(urlDriverOptions, options);\r\n\r\n            } else {\r\n                const urlDriverOptions: DriverOptions = {\r\n                    type: options.type,\r\n                    host: parsedUrl.host,\r\n                    username: parsedUrl.username,\r\n                    password: parsedUrl.password,\r\n                    port: parsedUrl.port,\r\n                    database: parsedUrl.database\r\n                };\r\n                return Object.assign(urlDriverOptions, options);\r\n            }\r\n        }\r\n        return Object.assign({}, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Extracts connection data from the connection url.\r\n     */\r\n    private static parseConnectionUrl(url: string) {\r\n        const firstSlashes = url.indexOf(\"//\");\r\n        const preBase = url.substr(firstSlashes + 2);\r\n        const secondSlash = preBase.indexOf(\"/\");\r\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\r\n        const afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\r\n        const [usernameAndPassword, hostAndPort] = base.split(\"@\");\r\n        const [username, password] = usernameAndPassword.split(\":\");\r\n        const [host, port] = hostAndPort.split(\":\");\r\n\r\n        return {\r\n            host: host,\r\n            username: username,\r\n            password: password,\r\n            port: port ? parseInt(port) : undefined,\r\n            database: afterBase || undefined\r\n        };\r\n    }\r\n\r\n}","/**\r\n * Logging options.\r\n */\r\nexport interface LoggerOptions {\r\n\r\n    /**\r\n     * Some specific logger to be used. By default it is a console.\r\n     */\r\n    readonly logger?: (level: string, message: any) => void;\r\n\r\n    /**\r\n     * Set to true if you want to log every executed query.\r\n     */\r\n    readonly logQueries?: boolean;\r\n\r\n    /**\r\n     * Set to true if you want to log only failed query.\r\n     */\r\n    readonly logOnlyFailedQueries?: boolean;\r\n\r\n    /**\r\n     * Set to true if you want to log error of the failed query.\r\n     */\r\n    readonly logFailedQueryError?: boolean;\r\n\r\n    /**\r\n     * If set to true then schema creation logs will be logged.\r\n     */\r\n    readonly logSchemaCreation?: boolean;\r\n\r\n}","/**\r\n * Browser's implementation of the platform-specific tools.\r\n *\r\n * This file gonna replace PlatformTools for browser environment.\r\n * For node.js environment this class is not getting packaged.\r\n * Don't use methods of this class in the code, use PlatformTools methods instead.\r\n */\r\nexport class PlatformTools {\r\n\r\n    /**\r\n     * Type of the currently running platform.\r\n     */\r\n    static type: \"browser\"|\"node\" = \"browser\";\r\n\r\n    /**\r\n     * Gets global variable where global stuff can be stored.\r\n     */\r\n    static getGlobalVariable(): any {\r\n        return window;\r\n    }\r\n\r\n    /**\r\n     * Loads (\"require\"-s) given file or package.\r\n     * This operation only supports on node platform\r\n     */\r\n    static load(name: string): any {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Normalizes given path. Does \"path.normalize\".\r\n     */\r\n    static pathNormilize(pathStr: string): string {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets file extension. Does \"path.extname\".\r\n     */\r\n    static pathExtname(pathStr: string): string {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Resolved given path. Does \"path.resolve\".\r\n     */\r\n    static pathResolve(pathStr: string): string {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\r\n     */\r\n    static fileExist(pathStr: string): boolean {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets environment variable.\r\n     */\r\n    static getEnvVariable(name: string): any {\r\n        // if (this.type === \"browser\")\r\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\r\n        return undefined;\r\n    }\r\n\r\n}","import {LoggerOptions} from \"./LoggerOptions\";\r\nimport {PlatformTools} from \"../platform/PlatformTools\";\r\n\r\n/**\r\n * Performs logging of the events in TypeORM.\r\n */\r\nexport class Logger {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private options: LoggerOptions) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Logs query and parameters used in it.\r\n     */\r\n    logQuery(query: string, parameters?: any[]) {\r\n        if (this.options.logQueries ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"log\", `executing query: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`);\r\n    }\r\n\r\n    /**\r\n     * Logs query that failed.\r\n     */\r\n    logFailedQuery(query: string, parameters?: any[]) {\r\n        if (this.options.logQueries ||\r\n            this.options.logOnlyFailedQueries ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"error\", `query failed: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`);\r\n    }\r\n\r\n    /**\r\n     * Logs failed query's error.\r\n     */\r\n    logQueryError(error: any) {\r\n        if (this.options.logFailedQueryError ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"error\", \"error during executing query:\" + error);\r\n    }\r\n\r\n    /**\r\n     * Logs events from the schema build process.\r\n     */\r\n    logSchemaBuild(message: string) {\r\n        if (this.options.logSchemaCreation ||\r\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\r\n            this.log(\"info\", message);\r\n    }\r\n\r\n    /**\r\n     * Perform logging using given logger, or by default to the console.\r\n     * Log has its own level and message.\r\n     */\r\n    log(level: \"log\"|\"info\"|\"warn\"|\"error\", message: any) {\r\n        if (!this.options) return;\r\n\r\n        if (this.options.logger) {\r\n            this.options.logger(level, message);\r\n        } else {\r\n            switch (level) {\r\n                case \"log\":\r\n                    console.log(message);\r\n                    break;\r\n                case \"info\":\r\n                    console.info(message);\r\n                    break;\r\n                case \"warn\":\r\n                    console.warn(message);\r\n                    break;\r\n                case \"error\":\r\n                    console.error(message);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Converts parameters to a string.\r\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\r\n     */\r\n    protected stringifyParams(parameters: any[]) {\r\n        try {\r\n            return JSON.stringify(parameters);\r\n\r\n        } catch (error) { // most probably circular objects in parameters\r\n            return parameters;\r\n        }\r\n    }\r\n\r\n}","/**\r\n * Thrown when transaction is already started and user tries to run it again.\r\n */\r\nexport class TransactionAlreadyStartedError extends Error {\r\n    name = \"TransactionAlreadyStartedError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Transaction already started for the given connection, commit current transaction before starting a new one.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown when transaction is not started yet and user tries to run commit or rollback.\r\n */\r\nexport class TransactionNotStartedError extends Error {\r\n    name = \"TransactionNotStartedError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Transaction is not started yet, start transaction before committing or rolling it back.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown if some data type is not supported by a driver.\r\n */\r\nexport class DataTypeNotSupportedByDriverError extends Error {\r\n    name = \"DataTypeNotSupportedByDriverError\";\r\n\r\n    constructor(dataType: string, driverName: string) {\r\n        super();\r\n        this.message = `Specified type (${dataType}) is not supported by ${driverName} driver.`;\r\n    }\r\n\r\n}","import {IndexMetadata} from \"../../metadata/IndexMetadata\";\r\n\r\n/**\r\n * Database's table index stored in this class.\r\n */\r\nexport class IndexSchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Table name that contains this unique index.\r\n     */\r\n    tableName: string;\r\n\r\n    /**\r\n     * Index name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Columns included in this index.\r\n     */\r\n    columnNames: string[];\r\n\r\n    /**\r\n     * Indicates if this index is unique.\r\n     */\r\n    isUnique: boolean;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(tableName: string, name: string, columnNames: string[], isUnique: boolean) {\r\n        this.tableName = tableName;\r\n        this.name = name;\r\n        this.columnNames = columnNames;\r\n        this.isUnique = isUnique;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this index with exactly same properties.\r\n     */\r\n    clone() {\r\n        return new IndexSchema(this.tableName, this.name, this.columnNames.map(name => name), this.isUnique);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates index from the index metadata object.\r\n     */\r\n    static create(indexMetadata: IndexMetadata): IndexSchema {\r\n        return new IndexSchema(\r\n            indexMetadata.entityMetadata.table.name,\r\n            indexMetadata.name,\r\n            indexMetadata.columns,\r\n            indexMetadata.isUnique\r\n        );\r\n    }\r\n\r\n}","import {ForeignKeyMetadata} from \"../../metadata/ForeignKeyMetadata\";\r\n\r\n/**\r\n * Foreign key from the database stored in this class.\r\n */\r\nexport class ForeignKeySchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Name of the table which contains this foreign key.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Column names which included by this foreign key.\r\n     */\r\n    columnNames: string[];\r\n\r\n    /**\r\n     * Table referenced in the foreign key.\r\n     */\r\n    referencedTableName: string;\r\n\r\n    /**\r\n     * Column names which included by this foreign key.\r\n     */\r\n    referencedColumnNames: string[];\r\n\r\n    /**\r\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\r\n     * referenced stuff is being deleted.\r\n     */\r\n    onDelete?: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string,\r\n                columnNames: string[],\r\n                referencedColumnNames: string[],\r\n                referencedTable: string,\r\n                onDelete?: string) {\r\n\r\n        this.name = name;\r\n        this.columnNames = columnNames;\r\n        this.referencedColumnNames = referencedColumnNames;\r\n        this.referencedTableName = referencedTable;\r\n        this.onDelete = onDelete;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this foreign key with exactly same properties.\r\n     */\r\n    clone() {\r\n        return new ForeignKeySchema(\r\n            this.name,\r\n            this.columnNames,\r\n            this.referencedColumnNames,\r\n            this.referencedTableName\r\n        );\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new foreign schema from the given foreign key metadata.\r\n     */\r\n    static create(metadata: ForeignKeyMetadata) {\r\n        return new ForeignKeySchema(\r\n            metadata.name,\r\n            metadata.columnNames,\r\n            metadata.referencedColumnNames,\r\n            metadata.referencedTableName,\r\n            metadata.onDelete\r\n        );\r\n    }\r\n\r\n}","/**\r\n * Primary key from the database stored in this class.\r\n */\r\nexport class PrimaryKeySchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Key name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Column to which this primary key is bind.\r\n     */\r\n    columnName: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string, columnName: string) {\r\n        this.name = name;\r\n        this.columnName = columnName;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this primary key with exactly same properties.\r\n     */\r\n    clone() {\r\n        return new PrimaryKeySchema(this.name, this.columnName);\r\n    }\r\n\r\n}","import {ColumnSchema} from \"./ColumnSchema\";\r\nimport {IndexSchema} from \"./IndexSchema\";\r\nimport {ForeignKeySchema} from \"./ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"./PrimaryKeySchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\n\r\n/**\r\n * Table schema in the database represented in this class.\r\n */\r\nexport class TableSchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Table name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Table columns.\r\n     */\r\n    columns: ColumnSchema[] = [];\r\n\r\n    /**\r\n     * Table indices.\r\n     */\r\n    indices: IndexSchema[] = [];\r\n\r\n    /**\r\n     * Table foreign keys.\r\n     */\r\n    foreignKeys: ForeignKeySchema[] = [];\r\n\r\n    /**\r\n     * Table primary keys.\r\n     */\r\n    primaryKeys: PrimaryKeySchema[] = [];\r\n\r\n    /**\r\n     * Indicates if table schema was just created.\r\n     * This is needed, for example to check if we need to skip primary keys creation\r\n     * for new table schemas.\r\n     */\r\n    justCreated: boolean = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string, columns?: ColumnSchema[]|ObjectLiteral[], justCreated?: boolean) {\r\n        this.name = name;\r\n        if (columns) {\r\n            this.columns = (columns as any[]).map(column => { // as any[] is a temporary fix (some weird compiler error)\r\n                if (column instanceof ColumnSchema) {\r\n                    return column;\r\n                } else {\r\n                    return new ColumnSchema(column);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (justCreated !== undefined)\r\n            this.justCreated = justCreated;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets only those primary keys that does not\r\n     */\r\n    get primaryKeysWithoutGenerated(): PrimaryKeySchema[] {\r\n        const generatedColumn = this.columns.find(column => column.isGenerated);\r\n        if (!generatedColumn)\r\n            return this.primaryKeys;\r\n\r\n        return this.primaryKeys.filter(primaryKey => {\r\n            return primaryKey.columnName !== generatedColumn.name;\r\n        });\r\n    }\r\n\r\n    get hasGeneratedColumn(): boolean {\r\n        return !!this.columns.find(column => column.isGenerated);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Clones this table schema to a new table schema with all properties cloned.\r\n     */\r\n    clone(): TableSchema {\r\n        const cloned = new TableSchema(this.name);\r\n        cloned.columns = this.columns.map(column => column.clone());\r\n        cloned.indices = this.indices.map(index => index.clone());\r\n        cloned.foreignKeys = this.foreignKeys.map(key => key.clone());\r\n        cloned.primaryKeys = this.primaryKeys.map(key => key.clone());\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Adds column schemas.\r\n     */\r\n    addColumns(columns: ColumnSchema[]) {\r\n        this.columns = this.columns.concat(columns);\r\n    }\r\n\r\n    /**\r\n     * Replaces given column.\r\n     */\r\n    replaceColumn(oldColumn: ColumnSchema, newColumn: ColumnSchema) {\r\n        this.columns[this.columns.indexOf(oldColumn)] = newColumn;\r\n    }\r\n\r\n    /**\r\n     * Removes a column schema from this table schema.\r\n     */\r\n    removeColumn(columnToRemove: ColumnSchema) {\r\n        const foundColumn = this.columns.find(column => column.name === columnToRemove.name);\r\n        if (foundColumn)\r\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\r\n    }\r\n\r\n    /**\r\n     * Remove all column schemas from this table schema.\r\n     */\r\n    removeColumns(columns: ColumnSchema[]) {\r\n        columns.forEach(column => this.removeColumn(column));\r\n    }\r\n\r\n    /**\r\n     * Adds all given primary keys.\r\n     */\r\n    addPrimaryKeys(addedKeys: PrimaryKeySchema[]) {\r\n        addedKeys.forEach(key => this.primaryKeys.push(key));\r\n    }\r\n\r\n    /**\r\n     * Removes all given primary keys.\r\n     */\r\n    removePrimaryKeys(droppedKeys: PrimaryKeySchema[]) {\r\n        droppedKeys.forEach(key => {\r\n            this.primaryKeys.splice(this.primaryKeys.indexOf(key), 1);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes primary keys of the given columns.\r\n     */\r\n    removePrimaryKeysOfColumns(columns: ColumnSchema[]) {\r\n        this.primaryKeys = this.primaryKeys.filter(primaryKey => {\r\n            return !columns.find(column => column.name === primaryKey.columnName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds foreign key schemas.\r\n     */\r\n    addForeignKeys(foreignKeys: ForeignKeySchema[]) {\r\n        this.foreignKeys = this.foreignKeys.concat(foreignKeys);\r\n    }\r\n\r\n    /**\r\n     * Removes foreign key from this table schema.\r\n     */\r\n    removeForeignKey(removedForeignKey: ForeignKeySchema) {\r\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name); // this must be by name\r\n        if (fk)\r\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\r\n    }\r\n\r\n    /**\r\n     * Removes all foreign keys from this table schema.\r\n     */\r\n    removeForeignKeys(dbForeignKeys: ForeignKeySchema[]) {\r\n        dbForeignKeys.forEach(foreignKey => this.removeForeignKey(foreignKey));\r\n    }\r\n\r\n    /**\r\n     * Removes index schema from this table schema.\r\n     */\r\n    removeIndex(indexSchema: IndexSchema) {\r\n        const index = this.indices.find(index => index.name === indexSchema.name);\r\n        if (index)\r\n            this.indices.splice(this.indices.indexOf(index), 1);\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table schema and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(queryRunner: QueryRunner, columnMetadatas: ColumnMetadata[]): ColumnSchema[] {\r\n        return this.columns.filter(columnSchema => {\r\n            const columnMetadata = columnMetadatas.find(columnMetadata => columnMetadata.fullName === columnSchema.name);\r\n            if (!columnMetadata)\r\n                return false; // we don't need new columns, we only need exist and changed\r\n\r\n            return  columnSchema.name !== columnMetadata.fullName ||\r\n                    columnSchema.type !== queryRunner.normalizeType(columnMetadata) ||\r\n                    columnSchema.comment !== columnMetadata.comment ||\r\n                    (!columnSchema.isGenerated && !queryRunner.compareDefaultValues(columnMetadata.default, columnSchema.default)) || // we included check for generated here, because generated columns already can have default values\r\n                    columnSchema.isNullable !== columnMetadata.isNullable ||\r\n                    columnSchema.isUnique !== columnMetadata.isUnique ||\r\n                    // columnSchema.isPrimary !== columnMetadata.isPrimary ||\r\n                    columnSchema.isGenerated !== columnMetadata.isGenerated;\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates table schema from a given entity metadata.\r\n     *\r\n     * todo: need deeper implementation\r\n     */\r\n    static create(entityMetadata: EntityMetadata, queryRunner: QueryRunner) {\r\n        const tableSchema = new TableSchema(entityMetadata.table.name);\r\n        entityMetadata.columns.forEach(column => {\r\n            tableSchema.columns.push(ColumnSchema.create(column, queryRunner.normalizeType(column)));\r\n        });\r\n\r\n        return tableSchema;\r\n    }\r\n\r\n}","/**\r\n */\r\nexport class QueryRunnerAlreadyReleasedError extends Error {\r\n    name = \"QueryRunnerAlreadyReleasedError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Query runner already released. Cannot run queries anymore.`;\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {SqlServerDriver} from \"./SqlServerDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single mysql database connection.\r\n */\r\nexport class SqlServerQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: SqlServerDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.beginTransaction();\r\n        try {\r\n            const allTablesSql = `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'`;\r\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\r\n            const tableNames = allTablesResults.map(result => result[\"TABLE_NAME\"]);\r\n            await Promise.all(tableNames.map(async tableName => {\r\n                const dropForeignKeySql = `SELECT 'ALTER TABLE ' +  OBJECT_SCHEMA_NAME(parent_object_id) + '.[' + OBJECT_NAME(parent_object_id) + '] DROP CONSTRAINT ' + name as query FROM sys.foreign_keys WHERE referenced_object_id = object_id('${tableName}')`;\r\n                const dropFkQueries: ObjectLiteral[] = await this.query(dropForeignKeySql);\r\n                return Promise.all(dropFkQueries.map(result => result[\"query\"]).map(dropQuery => {\r\n                    return this.query(dropQuery);\r\n                }));\r\n            }));\r\n            await Promise.all(tableNames.map(tableName => {\r\n                const dropTableSql = `DROP TABLE \"${tableName}\"`;\r\n                return this.query(dropTableSql);\r\n            }));\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n        }\r\n\r\n        // const selectDropsQuery = `SELECT 'DROP TABLE \"' + TABLE_NAME + '\"' as query FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';`;\r\n        // const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n        // const allQueries = [`EXEC sp_msforeachtable \"ALTER TABLE ? NOCHECK CONSTRAINT all\"`]\r\n        //     .concat(dropQueries.map(q => this.query(q[\"query\"])).join(\"; \"));\r\n        //\r\n        // return new Promise<void>((ok, fail) => {\r\n        //\r\n        //     const request = new this.driver.mssql.Request(this.isTransactionActive() ? this.databaseConnection.transaction : this.databaseConnection.connection);\r\n        //     request.multiple = true;\r\n        //     request.query(allQueries, (err: any, result: any) => {\r\n        //         if (err) {\r\n        //             this.logger.logFailedQuery(allQueries);\r\n        //             this.logger.logQueryError(err);\r\n        //             return fail(err);\r\n        //         }\r\n        //\r\n        //         ok();\r\n        //     });\r\n        // });\r\n\r\n        // const selectDropsQuery = `SELECT 'DROP TABLE \"' + TABLE_NAME + '\";' as query FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';`;\r\n        // const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n        // await this.query(`EXEC sp_msforeachtable \"ALTER TABLE ? NOCHECK CONSTRAINT all\"`);\r\n        // await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n        // await this.query(`EXEC sp_msforeachtable 'drop table [?]'`);\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            this.databaseConnection.isTransactionActive = true;\r\n            this.databaseConnection.transaction = this.databaseConnection.connection.transaction();\r\n            this.databaseConnection.transaction.begin((err: any) => {\r\n                if (err) {\r\n                    this.databaseConnection.isTransactionActive = false;\r\n                    return fail(err);\r\n                }\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            this.databaseConnection.transaction.commit((err: any) => {\r\n                if (err) return fail(err);\r\n                this.databaseConnection.isTransactionActive = false;\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            this.databaseConnection.transaction.rollback((err: any) => {\r\n                if (err) return fail(err);\r\n                this.databaseConnection.isTransactionActive = false;\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise((ok, fail) => {\r\n\r\n            this.logger.logQuery(query, parameters);\r\n            const request = new this.driver.mssql.Request(this.isTransactionActive() ? this.databaseConnection.transaction : this.databaseConnection.connection);\r\n            if (parameters && parameters.length) {\r\n                parameters.forEach((parameter, index) => {\r\n                    request.input(index, parameters![index]);\r\n                });\r\n            }\r\n            request.query(query, (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                }\r\n\r\n                ok(result);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map((key, index) => \"@\" + index).join(\",\");\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        const sql = columns.length > 0\r\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) ${ generatedColumn ? \"OUTPUT INSERTED.\" + generatedColumn.fullName + \" \" : \"\" }VALUES (${values})`\r\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} ${ generatedColumn ? \"OUTPUT INSERTED.\" + generatedColumn.fullName + \" \" : \"\" }DEFAULT VALUES `;\r\n\r\n        const result = await this.query(sql, parameters);\r\n        return generatedColumn ? result instanceof Array ? result[0][generatedColumn.fullName] : result[generatedColumn.fullName] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions, updateParams.length).join(\" AND \");\r\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n\r\n        await this.query(sql, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\r\n        const tablesSql          = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\r\n        const columnsSql         = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = '${this.dbName}'`;\r\n        const constraintsSql     = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages ` +\r\n`LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME ` +\r\n`WHERE columnUsages.TABLE_CATALOG = '${this.dbName}' AND tableConstraints.TABLE_CATALOG = '${this.dbName}'`;\r\n        const identityColumnsSql = `SELECT COLUMN_NAME, TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = '${this.dbName}' AND COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1;`;\r\n        const indicesSql         = `SELECT TABLE_NAME = t.name, INDEX_NAME = ind.name, IndexId = ind.index_id, ColumnId = ic.index_column_id, COLUMN_NAME = col.name, ind.*, ic.*, col.* ` +\r\n`FROM sys.indexes ind INNER JOIN sys.index_columns ic ON ind.object_id = ic.object_id and ind.index_id = ic.index_id INNER JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id ` +\r\n`INNER JOIN sys.tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 AND ind.is_unique = 0 AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0 ORDER BY t.name, ind.name, ind.index_id, ic.index_column_id`;\r\n        const [dbTables, dbColumns, dbConstraints, dbIdentityColumns, dbIndices]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(constraintsSql),\r\n            this.query(identityColumnsSql),\r\n            this.query(indicesSql),\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbColumn => {\r\n\r\n                    const isPrimary = !!dbConstraints.find(dbConstraint => {\r\n                        return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\r\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\r\n                    });\r\n                    const isGenerated = !!dbIdentityColumns.find(column => {\r\n                        return  column[\"TABLE_NAME\"] === tableSchema.name &&\r\n                                column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\r\n                    });\r\n                    const isUnique = !!dbConstraints.find(dbConstraint => {\r\n                        return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\r\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\r\n                    });\r\n\r\n                    const columnSchema = new ColumnSchema();\r\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\r\n                    columnSchema.type = dbColumn[\"DATA_TYPE\"].toLowerCase() + (dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] ? \"(\" + dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] + \")\" : \"\"); // todo: use normalize type?\r\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\r\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\r\n                    columnSchema.isPrimary = isPrimary;\r\n                    columnSchema.isGenerated = isGenerated;\r\n                    columnSchema.isUnique = isUnique;\r\n                    columnSchema.comment = \"\"; // todo: less priority, implement this later\r\n                    return columnSchema;\r\n                });\r\n\r\n            // create primary key schema\r\n            tableSchema.primaryKeys = dbConstraints\r\n                .filter(dbConstraint => {\r\n                    return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\r\n                })\r\n                .map(keyColumnUsage => {\r\n                    return new PrimaryKeySchema(keyColumnUsage[\"CONSTRAINT_NAME\"], keyColumnUsage[\"COLUMN_NAME\"]);\r\n                });\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            tableSchema.foreignKeys = dbConstraints\r\n                .filter(dbConstraint => {\r\n                    return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"FOREIGN KEY\";\r\n                })\r\n                .map(dbConstraint => new ForeignKeySchema(dbConstraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create index schemas from the loaded indices\r\n            tableSchema.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return  dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\r\n                            (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\r\n                            (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(dbIndexName => {\r\n                    const columnNames = dbIndices\r\n                        .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName)\r\n                        .map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\r\n\r\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness? */);\r\n                });\r\n\r\n            return tableSchema;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        sql += table.columns\r\n            .filter(column => column.isUnique)\r\n            .map(column => `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`)\r\n            .join(\" \");\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableName: string): Promise<void> {\r\n        let sql = `DROP TABLE \"${tableName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        // to update an identy column we have to drop column and recreate it again\r\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\r\n            await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`);\r\n            await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn)}`);\r\n        }\r\n\r\n        const sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN ${this.buildCreateColumnSql(newColumn, true)}`; // todo: CHANGE OR MODIFY COLUMN ????\r\n        await this.query(sql);\r\n\r\n        if (newColumn.isUnique !== oldColumn.isUnique) {\r\n            if (newColumn.isUnique === true) {\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"uk_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\r\n\r\n            } else if (newColumn.isUnique === false) {\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"uk_${newColumn.name}\"`);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\r\n        return this.query(`ALTER TABLE \"${tableName}\" DROP COLUMN \"${columnName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const oldPrimaryKeySql = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages\r\nLEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME AND tableConstraints.CONSTRAINT_TYPE = 'PRIMARY KEY'\r\nWHERE columnUsages.TABLE_CATALOG = '${this.dbName}' AND tableConstraints.TABLE_CATALOG = '${this.dbName}'`;\r\n        const oldPrimaryKey = await this.query(oldPrimaryKeySql);\r\n        if (oldPrimaryKey.length > 0)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${oldPrimaryKey[0][\"CONSTRAINT_NAME\"]}\"`);\r\n\r\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => `\"` + primaryKey.columnName + `\"`);\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\r\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\r\n            `FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `DROP INDEX \"${tableName}\".\"${indexName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                if (typeOptions.fixedLength) {\r\n                    return \"nchar(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                } else {\r\n                    return \"nvarchar(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                }\r\n            case \"text\":\r\n                return \"ntext\";\r\n            case \"boolean\":\r\n                return \"bit\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"int\";\r\n            case \"smallint\":\r\n                return \"smallint\";\r\n            case \"bigint\":\r\n                return \"bigint\";\r\n            case \"float\":\r\n                return \"float\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"real\";\r\n            case \"decimal\":\r\n                // if (column.precision && column.scale) {\r\n                //     return `decimal(${column.precision},${column.scale})`;\r\n                //\r\n                // } else if (column.scale) {\r\n                //     return `decimal(${column.scale})`;\r\n                //\r\n                // } else if (column.precision) {\r\n                //     return `decimal(${column.precision})`;\r\n                //\r\n                // } else {\r\n                    return \"decimal\";\r\n                // }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                return \"time\";\r\n            case \"datetime\":\r\n                return \"datetime\";\r\n            case \"json\":\r\n                return \"text\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"nvarchar(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"SQLServer\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startFrom: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => {\r\n            return this.driver.escapeColumnName(key) + \"=@\" + (startFrom + index);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema, skipIdentity: boolean = false) {\r\n        let c = `\"${column.name}\" ${column.type}`;\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isGenerated === true && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" IDENTITY(1,1)\";\r\n        // if (column.isPrimary === true && !skipPrimary)\r\n        //     c += \" PRIMARY KEY\";\r\n        if (column.comment)\r\n            c += \" COMMENT '\" + column.comment + \"'\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"1\" : \"0\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n        return c;\r\n    }\r\n\r\n\r\n}","/**\r\n * Thrown if some required driver's option is not set.\r\n */\r\nexport class DriverOptionNotSetError extends Error {\r\n    name = \"DriverOptionNotSetError\";\r\n\r\n    constructor(optionName: string) {\r\n        super();\r\n        this.message = `Driver option (${optionName}) is not set. Please set it to perform connection to the database.`;\r\n    }\r\n\r\n}","/**\r\n * Provides utilities to transform hydrated and persisted data.\r\n */\r\nexport class DataTransformationUtils {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Normalizes date object hydrated from the database.\r\n     */\r\n    static normalizeHydratedDate(mixedDate: Date|string|undefined, storedInLocal: boolean): Date|string|undefined {\r\n        if (!mixedDate)\r\n            return mixedDate;\r\n\r\n        const date = typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate as Date;\r\n        if (!storedInLocal) {\r\n\r\n            // else if it was not stored in local timezone, means it was stored in UTC\r\n            // because driver hydrates it with timezone applied why we need to add timezone hours to match a local timezone\r\n\r\n            const correctedDate = new Date();\r\n            correctedDate.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\r\n            correctedDate.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n            return correctedDate;\r\n        }\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\r\n     */\r\n    static mixedDateToDateString(value: Date|any): string|any {\r\n        if (value instanceof Date)\r\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into time string in a \"HH:mm:ss\" format.\r\n     */\r\n    static mixedDateToTimeString(value: Date|any): string|any {\r\n        if (value instanceof Date)\r\n            return this.formatZerolessValue(value.getHours()) + \":\" + this.formatZerolessValue(value.getMinutes()) + \":\" + this.formatZerolessValue(value.getSeconds());\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\r\n     */\r\n    static mixedTimeToString(value: string|any): string|any {\r\n        value = value instanceof Date ? (value.getHours() + \":\" + value.getMinutes() + \":\" + value.getSeconds()) : value;\r\n        if (typeof value === \"string\") {\r\n            return value.split(\":\")\r\n                .map(v => v.length === 1 ? \"0\" + v : v) // append zero at beginning if we have a first-zero-less number\r\n                .join(\":\");\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\r\n     */\r\n    static mixedDateToDatetimeString(value: Date|any): string|any {\r\n        if (typeof value === \"string\") {\r\n            value = new Date(value);\r\n        }\r\n        if (value instanceof Date) {\r\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" +\r\n                this.formatZerolessValue(value.getMonth() + 1) + \"-\" +\r\n                this.formatZerolessValue(value.getDate()) + \" \" +\r\n                this.formatZerolessValue(value.getHours()) + \":\" +\r\n                this.formatZerolessValue(value.getMinutes()) + \":\" +\r\n                this.formatZerolessValue(value.getSeconds());\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\r\n     */\r\n    static mixedDateToUtcDatetimeString(value: Date|any): string|any {\r\n        if (typeof value === \"string\") {\r\n            value = new Date(value);\r\n        }\r\n        if (value instanceof Date) {\r\n            return this.formatZerolessValue(value.getUTCFullYear()) + \"-\" +\r\n                this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" +\r\n                this.formatZerolessValue(value.getUTCDate()) + \" \" +\r\n                this.formatZerolessValue(value.getUTCHours()) + \":\" +\r\n                this.formatZerolessValue(value.getUTCMinutes()) + \":\" +\r\n                this.formatZerolessValue(value.getUTCSeconds());\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts each item in the given array to string joined by \",\" separator.\r\n     */\r\n    static simpleArrayToString(value: any[]|any): string[]|any {\r\n        if (value instanceof Array) {\r\n            return (value as any[])\r\n                .map(i => String(i))\r\n                .join(\",\");\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Converts given string to simple array split by \",\" separator.\r\n     */\r\n    static stringToSimpleArray(value: string|any): string|any {\r\n        if (value instanceof String || typeof value === \"string\") {\r\n            return value.split(\",\");\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\r\n     */\r\n    private static formatZerolessValue(value: number): string {\r\n        if (value < 10)\r\n            return \"0\" + value;\r\n\r\n        return String(value);\r\n    }\r\n\r\n}\r\n","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {SqlServerQueryRunner} from \"./SqlServerQueryRunner\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\n\r\n/**\r\n * Organizes communication with SQL Server DBMS.\r\n */\r\nexport class SqlServerDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    /**\r\n     * SQL Server library.\r\n     */\r\n    public mssql: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection to mssql database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * SQL Server pool.\r\n     */\r\n    protected connection: any;\r\n\r\n    /**\r\n     * Pool of database connections.\r\n     */\r\n    protected databaseConnectionPool: DatabaseConnection[] = [];\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, mssql?: any) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(options);\r\n        this.logger = logger;\r\n        this.mssql = mssql;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.host)\r\n            throw new DriverOptionNotSetError(\"host\");\r\n        if (!this.options.username)\r\n            throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // if mssql package instance was not set explicitly then try to load it\r\n        if (!mssql)\r\n            this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            server: this.options.host,\r\n            user: this.options.username,\r\n            password: this.options.password,\r\n            database: this.options.database,\r\n            port: this.options.port\r\n        }, this.options.extra || {});\r\n\r\n        // set default useUTC option if it hasn't been set\r\n        if (!options.options) options.options = { useUTC: false };\r\n        else if (!options.options.useUTC) options.options.useUTC = false; \r\n\r\n        // pooling is enabled either when its set explicitly to true,\r\n        // either when its not defined at all (e.g. enabled by default)\r\n        return new Promise<void>((ok, fail) => {\r\n            const connection = new this.mssql.Connection(options).connect((err: any) => {\r\n                if (err) return fail(err);\r\n                this.connection = connection;\r\n                if (this.options.usePool === false) {\r\n                    this.databaseConnection = {\r\n                        id: 1,\r\n                        connection: new this.mssql.Request(connection),\r\n                        isTransactionActive: false\r\n                    };\r\n                }\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        if (!this.connection)\r\n            throw new ConnectionIsNotSetError(\"mssql\");\r\n\r\n        this.connection.close();\r\n        this.connection = undefined;\r\n        this.databaseConnection = undefined;\r\n        this.databaseConnectionPool = [];\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.connection)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mssql\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new SqlServerQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.mssql,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\r\n            pool: this.connection\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            const value = parameters[key.substr(1)];\r\n            if (value instanceof Array) {\r\n                return value.map((v: any) => {\r\n                    escapedParameters.push(v);\r\n                    return \"@\" + (escapedParameters.length - 1);\r\n                }).join(\", \");\r\n            } else {\r\n                escapedParameters.push(value);\r\n            }\r\n            return \"@\" + (escapedParameters.length - 1);\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return `\"${columnName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return `\"${aliasName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return `\"${tableName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n\r\n        if (!this.connection)\r\n            throw new ConnectionIsNotSetError(\"mssql\");\r\n\r\n        return new Promise((ok, fail) => {\r\n            if (this.databaseConnection)\r\n                return ok(this.databaseConnection);\r\n            // let dbConnection: DatabaseConnection|undefined;\r\n            // const connection = this.pool.connect((err: any) => {\r\n            //     if (err)\r\n            //         return fail(err);\r\n            //     ok(dbConnection);\r\n            // });\r\n            //\r\n            // console.log(connection);\r\n            // console.log(this.pool);\r\n            // console.log(this.pool === connection);\r\n\r\n            // const request = new this.mssql.Request(this.connection);\r\n            // console.log(\"request:\", request);\r\n            // let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\r\n            // if (!dbConnection) {\r\n            let dbConnection: DatabaseConnection = {\r\n                id: this.databaseConnectionPool.length,\r\n                connection: this.connection,\r\n                isTransactionActive: false\r\n            };\r\n            dbConnection.releaseCallback = () => {\r\n                // }\r\n                // if (this.connection && dbConnection) {\r\n                // request.release();\r\n                this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\r\n                return Promise.resolve();\r\n            };\r\n            this.databaseConnectionPool.push(dbConnection);\r\n            ok(dbConnection);\r\n            // }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.mssql = PlatformTools.load(\"mssql\");\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"SQL Server\", \"mssql\");\r\n        }\r\n    }\r\n\r\n}\r\n","export interface JoinOptions {\r\n    limit?: number;\r\n}","import {QueryRunner} from \"./QueryRunner\";\r\nimport {Driver} from \"../driver/Driver\";\r\n\r\n/**\r\n * Represents functionality to provide a new query runners, and release old ones.\r\n * Also can provide always same query runner.\r\n */\r\nexport class QueryRunnerProvider {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected reusableQueryRunner: QueryRunner;\r\n\r\n    protected reusableQueryRunnerPromise: Promise<QueryRunner>;\r\n\r\n    /**\r\n     * Indicates if this entity manager is released.\r\n     * Entity manager can be released only if custom queryRunnerProvider is provided.\r\n     * Once entity manager is released, its repositories and some other methods can't be used anymore.\r\n     */\r\n    protected _isReleased: boolean;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected driver: Driver,\r\n                protected useSingleQueryRunner: boolean = false) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    get isReleased() {\r\n        return this._isReleased;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Provides a new query runner used to run repository queries.\r\n     * If use useSingleQueryRunner mode is enabled then reusable query runner will be provided instead.\r\n     */\r\n    provide(): Promise<QueryRunner> {\r\n        if (this.useSingleQueryRunner) {\r\n            if (!this.reusableQueryRunner) {\r\n                if (!this.reusableQueryRunnerPromise) {\r\n                    // we do this because this method can be created multiple times\r\n                    // this will lead to multiple query runner creations\r\n                    this.reusableQueryRunnerPromise = this.driver\r\n                        .createQueryRunner()\r\n                        .then(reusableQueryRunner => {\r\n                            this.reusableQueryRunner = reusableQueryRunner;\r\n                            return reusableQueryRunner;\r\n                        });\r\n                }\r\n                return this.reusableQueryRunnerPromise;\r\n            }\r\n            return Promise.resolve(this.reusableQueryRunner);\r\n        }\r\n        return this.driver.createQueryRunner();\r\n    }\r\n\r\n    /**\r\n     * Query runner release logic extracted into separated methods intently,\r\n     * to make possible to create a subclass with its own release query runner logic.\r\n     * Note: release only query runners that provided by a provide() method.\r\n     * This is important and by design.\r\n     */\r\n    async release(queryRunner: QueryRunner): Promise<void> {\r\n        if (queryRunner === this.reusableQueryRunner)\r\n            return;\r\n\r\n        return queryRunner.release();\r\n    }\r\n\r\n    /**\r\n     * Releases reused query runner.\r\n     */\r\n    async releaseReused(): Promise<void> {\r\n        this._isReleased = true;\r\n        if (this.reusableQueryRunner)\r\n            return this.reusableQueryRunner.release();\r\n    }\r\n\r\n}","/**\r\n * Thrown when a transaction is required for the current operation, but there is none open.\r\n */\r\nexport class PessimisticLockTransactionRequiredError extends Error {\r\n    name = \"PessimisticLockTransactionRequiredError\";\r\n\r\n    constructor() {\r\n        super();\r\n        Object.setPrototypeOf(this, PessimisticLockTransactionRequiredError.prototype);\r\n        this.message = `An open transaction is required for pessimistic lock.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown when an entity does not have no version and no update date column.\r\n */\r\nexport class NoVersionOrUpdateDateColumnError extends Error {\r\n    name = \"NoVersionOrUpdateDateColumnError\";\r\n\r\n    constructor(entity: string) {\r\n        super();\r\n        Object.setPrototypeOf(this, NoVersionOrUpdateDateColumnError.prototype);\r\n        this.message = `Entity ${entity} does not have version or update date columns.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown when a version check on an object that uses optimistic locking through a version field fails.\r\n */\r\nexport class OptimisticLockVersionMismatchError extends Error {\r\n    name = \"OptimisticLockVersionMismatchError\";\r\n\r\n    constructor(entity: string, expectedVersion: number|Date, actualVersion: number|Date) {\r\n        super();\r\n        Object.setPrototypeOf(this, OptimisticLockVersionMismatchError.prototype);\r\n        this.message = `The optimistic lock on entity ${entity} failed, version ${expectedVersion} was expected, but is actually ${actualVersion}.`;\r\n    }\r\n\r\n}\r\n","/**\r\n * Thrown when an optimistic lock cannot be used in query builder.\r\n */\r\nexport class OptimisticLockCanNotBeUsedError extends Error {\r\n    name = \"OptimisticLockCanNotBeUsedError\";\r\n\r\n    constructor() {\r\n        super();\r\n        Object.setPrototypeOf(this, OptimisticLockCanNotBeUsedError.prototype);\r\n        this.message = `The optimistic lock can be used only with getOne() method.`;\r\n    }\r\n\r\n}\r\n","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {PostgresDriver} from \"./PostgresDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single postgres database connection.\r\n */\r\nexport class PostgresQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    private schemaName: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: PostgresDriver,\r\n                protected logger: Logger) {\r\n        this.schemaName = driver.schemaName || \"public\";\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.beginTransaction();\r\n        try {\r\n            const selectDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || tablename || '\" CASCADE;' as query FROM pg_tables WHERE schemaname = '${this.schemaName}'`;\r\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.databaseConnection.isTransactionActive = true;\r\n        await this.query(\"START TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // console.log(\"query: \", query);\r\n        // console.log(\"parameters: \", parameters);\r\n        return new Promise<any[]>((ok, fail) => {\r\n            this.logger.logQuery(query, parameters);\r\n            this.databaseConnection.connection.query(query, parameters, (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    fail(err);\r\n                } else {\r\n                    ok(result.rows);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\r\n        const sql = columns.length > 0\r\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values}) ${ generatedColumn ? \" RETURNING \" + this.driver.escapeColumnName(generatedColumn.fullName) : \"\" }`\r\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES ${ generatedColumn ? \" RETURNING \" + this.driver.escapeColumnName(generatedColumn.fullName) : \"\" }`;\r\n        const parameters = keys.map(key => keyValues[key]);\r\n        const result: ObjectLiteral[] = await this.query(sql, parameters);\r\n        if (generatedColumn)\r\n            return result[0][generatedColumn.fullName];\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\r\n        const query = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(query, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\r\n        const tablesSql      = `SELECT * FROM information_schema.tables WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name IN (${tableNamesString})`;\r\n        const columnsSql     = `SELECT * FROM information_schema.columns WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}'`;\r\n        const indicesSql     = `SELECT t.relname AS table_name, i.relname AS index_name, a.attname AS column_name  FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace ns\r\nWHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid\r\nAND a.attnum = ANY(ix.indkey) AND t.relkind = 'r' AND t.relname IN (${tableNamesString}) AND t.relnamespace = ns.OID AND ns.nspname ='${this.schemaName}' ORDER BY t.relname, i.relname`;\r\n        const foreignKeysSql = `SELECT table_name, constraint_name FROM information_schema.table_constraints WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND constraint_type = 'FOREIGN KEY'`;\r\n        const uniqueKeysSql  = `SELECT * FROM information_schema.table_constraints WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND constraint_type = 'UNIQUE'`;\r\n        const primaryKeysSql = `SELECT c.column_name, tc.table_name, tc.constraint_name FROM information_schema.table_constraints tc\r\nJOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)\r\nJOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name\r\nwhere constraint_type = 'PRIMARY KEY' AND c.table_schema = '${this.schemaName}' and tc.table_catalog = '${this.dbName}'`;\r\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys, dbUniqueKeys, primaryKeys]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(indicesSql),\r\n            this.query(foreignKeysSql),\r\n            this.query(uniqueKeysSql),\r\n            this.query(primaryKeysSql),\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return dbTables.map(dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"table_name\"]);\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"table_name\"] === tableSchema.name)\r\n                .map(dbColumn => {\r\n                    const columnType = dbColumn[\"data_type\"].toLowerCase() + (dbColumn[\"character_maximum_length\"] !== undefined && dbColumn[\"character_maximum_length\"] !== null ? (\"(\" + dbColumn[\"character_maximum_length\"] + \")\") : \"\");\r\n                    const isGenerated = dbColumn[\"column_default\"] === `nextval('${dbColumn[\"table_name\"]}_id_seq'::regclass)` \r\n                        || dbColumn[\"column_default\"] === `nextval('\"${dbColumn[\"table_name\"]}_id_seq\"'::regclass)` \r\n                        || /^uuid\\_generate\\_v\\d\\(\\)/.test(dbColumn[\"column_default\"]);\r\n\r\n                    const columnSchema = new ColumnSchema();\r\n                    columnSchema.name = dbColumn[\"column_name\"];\r\n                    columnSchema.type = columnType;\r\n                    columnSchema.default = dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined ? dbColumn[\"column_default\"] : undefined;\r\n                    columnSchema.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\r\n                    // columnSchema.isPrimary = dbColumn[\"column_key\"].indexOf(\"PRI\") !== -1;\r\n                    columnSchema.isGenerated = isGenerated;\r\n                    columnSchema.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\r\n                    columnSchema.isUnique = !!dbUniqueKeys.find(key => key[\"constraint_name\"] ===  `uk_${dbColumn[\"table_name\"]}_${dbColumn[\"column_name\"]}`);\r\n                    return columnSchema;\r\n                });\r\n\r\n            // create primary key schema\r\n            tableSchema.primaryKeys = primaryKeys\r\n                .filter(primaryKey => primaryKey[\"table_name\"] === tableSchema.name)\r\n                .map(primaryKey => new PrimaryKeySchema(primaryKey[\"constraint_name\"], primaryKey[\"column_name\"]));\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            tableSchema.foreignKeys = dbForeignKeys\r\n                .filter(dbForeignKey => dbForeignKey[\"table_name\"] === tableSchema.name)\r\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"constraint_name\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create unique key schemas from the loaded indices\r\n            /*tableSchema.uniqueKeys = dbUniqueKeys\r\n                .filter(dbUniqueKey => dbUniqueKey[\"table_name\"] === tableSchema.name)\r\n                .map(dbUniqueKey => {\r\n                    return new UniqueKeySchema(dbUniqueKey[\"TABLE_NAME\"], dbUniqueKey[\"CONSTRAINT_NAME\"], [/!* todo *!/]);\r\n                });*/\r\n\r\n            // create index schemas from the loaded indices\r\n            tableSchema.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return dbIndex[\"table_name\"] === tableSchema.name &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"index_name\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"index_name\"])) &&\r\n                        (!dbUniqueKeys.find(key => key[\"constraint_name\"] === dbIndex[\"index_name\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"index_name\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(dbIndexName => {\r\n                    const columnNames = dbIndices\r\n                        .filter(dbIndex => dbIndex[\"table_name\"] === tableSchema.name && dbIndex[\"index_name\"] === dbIndexName)\r\n                        .map(dbIndex => dbIndex[\"column_name\"]);\r\n\r\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\r\n                });\r\n\r\n            return tableSchema;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM information_schema.tables WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\r\n        let sql = `CREATE SCHEMA IF NOT EXISTS \"${this.schemaName}\";CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        sql += table.columns\r\n            .filter(column => column.isUnique)\r\n            .map(column => `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`)\r\n            .join(\" \");\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableName: string): Promise<void> {\r\n        let sql = `DROP TABLE \"${tableName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM information_schema.columns WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name = '${tableName}' AND column_name = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column, false)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        if (oldColumn.type !== newColumn.type ||\r\n            oldColumn.name !== newColumn.name) {\r\n\r\n            let sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\"`;\r\n            if (oldColumn.type !== newColumn.type) {\r\n                sql += ` TYPE ${newColumn.type}`;\r\n            }\r\n            if (oldColumn.name !== newColumn.name) { // todo: make rename in a separate query too\r\n                sql += ` RENAME TO ` + newColumn.name;\r\n            }\r\n            await this.query(sql);\r\n        }\r\n\r\n        if (oldColumn.isNullable !== newColumn.isNullable) {\r\n            let sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\"`;\r\n            if (newColumn.isNullable) {\r\n                sql += ` DROP NOT NULL`;\r\n            } else {\r\n                sql += ` SET NOT NULL`;\r\n            }\r\n            await this.query(sql);\r\n        }\r\n\r\n        // update sequence generation\r\n        if (oldColumn.isGenerated !== newColumn.isGenerated) {\r\n            if (!oldColumn.isGenerated && newColumn.type !== \"uuid\") {\r\n                await this.query(`CREATE SEQUENCE \"${tableSchema.name}_id_seq\" OWNED BY \"${tableSchema.name}\".\"${oldColumn.name}\"`);\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT nextval('\"${tableSchema.name}_id_seq\"')`);\r\n            } else {\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\" DROP DEFAULT`);\r\n                await this.query(`DROP SEQUENCE \"${tableSchema.name}_id_seq\"`);\r\n            }\r\n        }\r\n\r\n        if (oldColumn.comment !== newColumn.comment) {\r\n            await this.query(`COMMENT ON COLUMN \"${tableSchema.name}\".\"${oldColumn.name}\" is '${newColumn.comment}'`);\r\n        }\r\n\r\n        if (oldColumn.isUnique !== newColumn.isUnique) {\r\n            if (newColumn.isUnique === true) {\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"uk_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\r\n\r\n            } else if (newColumn.isUnique === false) {\r\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"uk_${newColumn.name}\"`);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\r\n        return this.query(`ALTER TABLE \"${tableName}\" DROP \"${columnName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => `\"${primaryKey.columnName}\"`);\r\n        await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT IF EXISTS \"${dbTable.name}_pkey\"`);\r\n        await this.query(`DROP INDEX IF EXISTS \"${dbTable.name}_pkey\"`);\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\r\n            `FOREIGN KEY (\"${foreignKey.columnNames.join(\"\\\", \\\"\")}\") ` +\r\n            `REFERENCES \"${foreignKey.referencedTableName}\"(\"${foreignKey.referencedColumnNames.join(\"\\\", \\\"\")}\")`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string, isGenerated: boolean = false): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (isGenerated) {\r\n            await this.query(`ALTER SEQUENCE \"${tableName}_id_seq\" OWNED BY NONE`);\r\n        }\r\n\r\n        const sql = `DROP INDEX \"${indexName}\"`; // todo: make sure DROP INDEX should not be used here\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                if (typeOptions.fixedLength) {\r\n                    return \"character(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                } else {\r\n                    return \"character varying(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                }\r\n            case \"text\":\r\n                return \"text\";\r\n            case \"boolean\":\r\n                return \"boolean\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"integer\";\r\n            case \"smallint\":\r\n                return \"smallint\";\r\n            case \"bigint\":\r\n                return \"bigint\";\r\n            case \"float\":\r\n                return \"real\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"double precision\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                if (typeOptions.timezone) {\r\n                    return \"time with time zone\";\r\n                } else {\r\n                    return \"time without time zone\";\r\n                }\r\n            case \"datetime\":\r\n                if (typeOptions.timezone) {\r\n                    return \"timestamp with time zone\";\r\n                } else {\r\n                    return \"timestamp without time zone\";\r\n                }\r\n            case \"json\":\r\n                return \"json\";\r\n            case \"jsonb\":\r\n                return \"jsonb\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"character varying(\" + typeOptions.length + \")\" : \"text\";\r\n            case \"uuid\":\r\n                return \"uuid\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"Postgres\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => this.driver.escapeColumnName(key) + \"=$\" + (startIndex + index + 1));\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\r\n        let c = \"\\\"\" + column.name + \"\\\"\";\r\n        if (column.isGenerated === true && column.type !== \"uuid\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" SERIAL\";\r\n        if (!column.isGenerated || column.type === \"uuid\")\r\n            c += \" \" + column.type;\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isGenerated)\r\n            c += \" PRIMARY KEY\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n        if (column.isGenerated && column.type === \"uuid\" && !column.default)\r\n            c += \" DEFAULT uuid_generate_v4()\";\r\n        return c;\r\n    }\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {PostgresQueryRunner} from \"./PostgresQueryRunner\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\n\r\n// todo(tests):\r\n// check connection with url\r\n// check if any of required option is not set exception to be thrown\r\n//\r\n\r\n/**\r\n * Organizes communication with PostgreSQL DBMS.\r\n */\r\nexport class PostgresDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Postgres library.\r\n     */\r\n    protected postgres: any;\r\n\r\n    /**\r\n     * Connection to postgres database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Postgres pool.\r\n     */\r\n    protected pool: any;\r\n\r\n    /**\r\n     * Pool of database connections.\r\n     */\r\n    protected databaseConnectionPool: DatabaseConnection[] = [];\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    /**\r\n     * Schema name. (Only used in Postgres)\r\n     * default: \"public\"\r\n     */\r\n    public schemaName?: string;\r\n    \r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connectionOptions: DriverOptions, logger: Logger, postgres?: any) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(connectionOptions);\r\n        this.logger = logger;\r\n        this.postgres = postgres;\r\n        this.schemaName = connectionOptions.schemaName || \"public\";\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.host)\r\n            throw new DriverOptionNotSetError(\"host\");\r\n        if (!this.options.username)\r\n            throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // if postgres package instance was not set explicitly then try to load it\r\n        if (!postgres)\r\n            this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            host: this.options.host,\r\n            user: this.options.username,\r\n            password: this.options.password,\r\n            database: this.options.database,\r\n            port: this.options.port\r\n        }, this.options.extra || {});\r\n\r\n        // pooling is enabled either when its set explicitly to true,\r\n        // either when its not defined at all (e.g. enabled by default)\r\n        if (this.options.usePool === undefined || this.options.usePool === true) {\r\n            this.pool = new this.postgres.Pool(options);\r\n            return Promise.resolve();\r\n\r\n        } else {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.databaseConnection = {\r\n                    id: 1,\r\n                    connection: new this.postgres.Client(options),\r\n                    isTransactionActive: false\r\n                };\r\n                this.databaseConnection.connection.connect((err: any) => {\r\n                    if (err) {\r\n                        fail(err);\r\n                    } else {\r\n                        this.databaseConnection!.connection.query(`SET search_path TO '${this.schemaName}', 'public';`, (err: any, result: any) => {\r\n                            if (err) {\r\n                                this.logger.logFailedQuery(`SET search_path TO '${this.schemaName}', 'public';`);\r\n                                this.logger.logQueryError(err);\r\n                                fail(err);\r\n                            } else {\r\n                                ok();\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            throw new ConnectionIsNotSetError(\"postgres\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n\r\n            if (this.databaseConnection) {\r\n                this.databaseConnection.connection.end(/*handler*/); // todo: check if it can emit errors\r\n                this.databaseConnection = undefined;\r\n            }\r\n\r\n            if (this.pool) {\r\n                this.databaseConnectionPool.forEach(dbConnection => {\r\n                    if (dbConnection && dbConnection.releaseCallback) {\r\n                        dbConnection.releaseCallback();\r\n                    }\r\n                });\r\n                this.pool.end(handler);\r\n                this.pool = undefined;\r\n                this.databaseConnectionPool = [];\r\n            }\r\n\r\n            ok();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"postgres\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new PostgresQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.postgres,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\r\n            pool: this.pool\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, column: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (column.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (column.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n            case ColumnTypes.JSONB:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n            case ColumnTypes.JSONB:\r\n                // pg(pg-types) have done JSON.parse conversion\r\n                // https://github.com/brianc/node-pg-types/blob/ed2d0e36e33217b34530727a98d20b325389e73a/lib/textParsers.js#L170\r\n                return value;\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n\r\n        const builtParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\r\n            const value = parameters[key.substr(1)];\r\n            if (value instanceof Array) {\r\n                return value.map((v: any) => {\r\n                    builtParameters.push(v);\r\n                    return \"$\" + builtParameters.length;\r\n                }).join(\", \");\r\n            } else {\r\n                builtParameters.push(value);\r\n            }\r\n            return \"$\" + builtParameters.length;\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, builtParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return \"\\\"\" + columnName + \"\\\"\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return \"\\\"\" + aliasName + \"\\\"\";\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return \"\\\"\" + tableName + \"\\\"\";\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n        if (this.pool) {\r\n            return new Promise((ok, fail) => {\r\n                this.pool.connect((err: any, connection: any, release: Function) => {\r\n                    if (err) {\r\n                        fail(err);\r\n                        return;\r\n                    }\r\n\r\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\r\n                    if (!dbConnection) {\r\n                        dbConnection = {\r\n                            id: this.databaseConnectionPool.length,\r\n                            connection: connection,\r\n                            isTransactionActive: false\r\n                        };\r\n                        this.databaseConnectionPool.push(dbConnection);\r\n                    }\r\n                    dbConnection.releaseCallback = () => {\r\n                        if (dbConnection) {\r\n                            this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\r\n                        }\r\n                        release();\r\n                        return Promise.resolve();\r\n                    };\r\n                    dbConnection.connection.query(`SET search_path TO '${this.schemaName}', 'public';`, (err: any) => {\r\n                        if (err) {\r\n                            this.logger.logFailedQuery(`SET search_path TO '${this.schemaName}', 'public';`);\r\n                            this.logger.logQueryError(err);\r\n                            fail(err);\r\n                        } else {\r\n                            ok(dbConnection);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"postgres\");\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.postgres = PlatformTools.load(\"pg\");\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"Postgres\", \"pg\");\r\n        }\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {MysqlDriver} from \"./MysqlDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single mysql database connection.\r\n */\r\nexport class MysqlQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: MysqlDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.beginTransaction();\r\n        try {\r\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\r\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\r\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\r\n\r\n            await this.query(disableForeignKeysCheckQuery);\r\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\r\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\r\n            await this.query(enableForeignKeysCheckQuery);\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.databaseConnection.isTransactionActive = true;\r\n        await this.query(\"START TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise((ok, fail) => {\r\n            this.logger.logQuery(query, parameters);\r\n            this.databaseConnection.connection.query(query, parameters, (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                }\r\n\r\n                ok(result);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map(key => \"?\").join(\",\");\r\n        const parameters = keys.map(key => keyValues[key]);\r\n        const sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`;\r\n        const result = await this.query(sql, parameters);\r\n        return generatedColumn ? result.insertId : undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions).join(\" AND \");\r\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(sql, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\r\n        const tablesSql      = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\r\n        const columnsSql     = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}'`;\r\n        const indicesSql     = `SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = '${this.dbName}' AND INDEX_NAME != 'PRIMARY'`;\r\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\r\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(indicesSql),\r\n            this.query(foreignKeysSql)\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\r\n            const primaryKeys: ObjectLiteral[] = await this.query(`SHOW INDEX FROM \\`${dbTable[\"TABLE_NAME\"]}\\` WHERE Key_name = 'PRIMARY'`);\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbColumn => {\r\n                    const columnSchema = new ColumnSchema();\r\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\r\n                    columnSchema.type = dbColumn[\"COLUMN_TYPE\"].toLowerCase();\r\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\r\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\r\n                    columnSchema.isPrimary = dbColumn[\"COLUMN_KEY\"].indexOf(\"PRI\") !== -1;\r\n                    columnSchema.isUnique = dbColumn[\"COLUMN_KEY\"].indexOf(\"UNI\") !== -1;\r\n                    columnSchema.isGenerated = dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\r\n                    columnSchema.comment = dbColumn[\"COLUMN_COMMENT\"];\r\n                    return columnSchema;\r\n                });\r\n\r\n            // create primary keys\r\n            tableSchema.primaryKeys = primaryKeys.map(primaryKey => {\r\n                return new PrimaryKeySchema(primaryKey[\"Key_name\"], primaryKey[\"Column_name\"]);\r\n            });\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            tableSchema.foreignKeys = dbForeignKeys\r\n                .filter(dbForeignKey => dbForeignKey[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create index schemas from the loaded indices\r\n            tableSchema.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(dbIndexName => {\r\n                    const currentDbIndices = dbIndices.filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName);\r\n                    const columnNames = currentDbIndices.map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\r\n\r\n                    // find a special index - unique index and\r\n                    if (currentDbIndices.length === 1 && currentDbIndices[0][\"NON_UNIQUE\"] === 0) {\r\n                        const column = tableSchema.columns.find(column => column.name === currentDbIndices[0][\"INDEX_NAME\"] && column.name === currentDbIndices[0][\"COLUMN_NAME\"]);\r\n                        if (column) {\r\n                            column.isUnique = true;\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\r\n                })\r\n                .filter(index => !!index) as IndexSchema[]; // remove empty returns\r\n\r\n            return tableSchema;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table schema and column schemas inside it.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\r\n        let sql = `CREATE TABLE \\`${table.name}\\` (${columnDefinitions}`;\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\\`${column.name}\\``).join(\", \")})`;\r\n        sql += `) ENGINE=InnoDB;`; // todo: remove engine from here\r\n\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drop the table.\r\n     */\r\n    async dropTable(tableName: String): Promise<void> {\r\n        let sql = `DROP TABLE \\`${tableName}\\``;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \\`${tableName}\\` ADD ${this.buildCreateColumnSql(column, false)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        if (newColumn.isUnique === false && oldColumn.isUnique === true)\r\n            await this.query(`ALTER TABLE \\`${tableSchema.name}\\` DROP INDEX \\`${oldColumn.name}\\``);\r\n\r\n        return this.query(`ALTER TABLE \\`${tableSchema.name}\\` CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(newColumn, oldColumn.isPrimary)}`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\r\n        return this.query(`ALTER TABLE \\`${tableName}\\` DROP \\`${columnName}\\``);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableSchema: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!tableSchema.hasGeneratedColumn)\r\n            await this.query(`ALTER TABLE ${tableSchema.name} DROP PRIMARY KEY`);\r\n\r\n        const primaryColumnNames = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated).map(column => \"`\" + column.name + \"`\");\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE ${tableSchema.name} ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnNames = foreignKey.columnNames.map(column => \"`\" + column + \"`\").join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"`\" + column + \"`\").join(\",\");\r\n        let sql = `ALTER TABLE \\`${tableName}\\` ADD CONSTRAINT \\`${foreignKey.name}\\` ` +\r\n            `FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES \\`${foreignKey.referencedTableName}\\`(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        return this.query(`ALTER TABLE \\`${tableName}\\` DROP FOREIGN KEY \\`${foreignKey.name}\\``);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columns = index.columnNames.map(columnName => \"`\" + columnName + \"`\").join(\", \");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \\`${index.name}\\` ON \\`${tableName}\\`(${columns})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `ALTER TABLE \\`${tableName}\\` DROP INDEX \\`${indexName}\\``;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                if (typeOptions.fixedLength) {\r\n                    return \"char(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                } else {\r\n                    return \"varchar(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                }\r\n            case \"text\":\r\n                return \"text\";\r\n            case \"boolean\":\r\n                return \"tinyint(1)\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"int(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\r\n            case \"smallint\":\r\n                return \"smallint(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\r\n            case \"bigint\":\r\n                return \"bigint(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\r\n            case \"float\":\r\n                return \"float\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"double\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                return \"time\";\r\n            case \"datetime\":\r\n                return \"datetime\";\r\n            case \"json\":\r\n                return \"text\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"varchar(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"MySQL/MariaDB\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\r\n        return Object.keys(objectLiteral).map(key => this.driver.escapeColumnName(key) + \"=?\");\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\r\n        let c = \"`\" + column.name + \"` \" + column.type;\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isUnique === true)\r\n            c += \" UNIQUE\";\r\n        if (column.isGenerated && column.isPrimary && !skipPrimary)\r\n            c += \" PRIMARY KEY\";\r\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" AUTO_INCREMENT\";\r\n        if (column.comment)\r\n            c += \" COMMENT '\" + column.comment + \"'\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n        return c;\r\n    }\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {MysqlQueryRunner} from \"./MysqlQueryRunner\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\n\r\n/**\r\n * Organizes communication with MySQL DBMS.\r\n */\r\nexport class MysqlDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Mysql library.\r\n     */\r\n    protected mysql: any;\r\n\r\n    /**\r\n     * Connection to mysql database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Mysql pool.\r\n     */\r\n    protected pool: any;\r\n\r\n    /**\r\n     * Pool of database connections.\r\n     */\r\n    protected databaseConnectionPool: DatabaseConnection[] = [];\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, mysql?: any) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(options);\r\n        this.logger = logger;\r\n        this.mysql = mysql;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)))\r\n            throw new DriverOptionNotSetError(\"socketPath and host\");\r\n        if (!this.options.username)\r\n            throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // if mysql package instance was not set explicitly then try to load it\r\n        if (!mysql)\r\n            this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            host: this.options.host,\r\n            user: this.options.username,\r\n            password: this.options.password,\r\n            database: this.options.database,\r\n            port: this.options.port\r\n        }, this.options.extra || {});\r\n\r\n        // pooling is enabled either when its set explicitly to true,\r\n        // either when its not defined at all (e.g. enabled by default)\r\n        if (this.options.usePool === undefined || this.options.usePool === true) {\r\n            this.pool = this.mysql.createPool(options);\r\n            return Promise.resolve();\r\n\r\n        } else {\r\n            return new Promise<void>((ok, fail) => {\r\n                const connection = this.mysql.createConnection(options);\r\n                this.databaseConnection = {\r\n                    id: 1,\r\n                    connection: connection,\r\n                    isTransactionActive: false\r\n                };\r\n                this.databaseConnection.connection.connect((err: any) => err ? fail(err) : ok());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            throw new ConnectionIsNotSetError(\"mysql\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n\r\n            // if pooling is used, then disconnect from it\r\n            if (this.pool) {\r\n                this.pool.end(handler);\r\n                this.pool = undefined;\r\n                this.databaseConnectionPool = [];\r\n            }\r\n\r\n            // if single connection is opened, then close it\r\n            if (this.databaseConnection) {\r\n                this.databaseConnection.connection.end(handler);\r\n                this.databaseConnection = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mysql\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new MysqlQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.mysql,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\r\n            pool: this.pool\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            escapedParameters.push(parameters[key.substr(1)]);\r\n            return \"?\";\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return \"`\" + columnName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return \"`\" + aliasName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return \"`\" + tableName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n\r\n        if (this.pool) {\r\n            return new Promise((ok, fail) => {\r\n                this.pool.getConnection((err: any, connection: any) => {\r\n                    if (err)\r\n                        return fail(err);\r\n\r\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\r\n                    if (!dbConnection) {\r\n                        dbConnection = {\r\n                            id: this.databaseConnectionPool.length,\r\n                            connection: connection,\r\n                            isTransactionActive: false\r\n                        };\r\n                        dbConnection.releaseCallback = () => {\r\n                            if (this.pool && dbConnection) {\r\n                                connection.release();\r\n                                this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\r\n                            }\r\n                            return Promise.resolve();\r\n                        };\r\n                        this.databaseConnectionPool.push(dbConnection);\r\n                    }\r\n                    ok(dbConnection);\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"mysql\");\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.mysql = PlatformTools.load(\"mysql\");  // try to load first supported package\r\n\r\n        } catch (e) {\r\n            try {\r\n                this.mysql = PlatformTools.load(\"mysql2\"); // try to load second supported package\r\n\r\n            } catch (e) {\r\n                throw new DriverPackageNotInstalledError(\"Mysql\", \"mysql\");\r\n            }\r\n        }\r\n    }\r\n\r\n}","/**\r\n * Thrown when selected sql driver does not supports locking.\r\n */\r\nexport class LockNotSupportedOnGivenDriverError extends Error {\r\n    name = \"LockNotSupportedOnGivenDriverError\";\r\n\r\n    constructor() {\r\n        super();\r\n        Object.setPrototypeOf(this, LockNotSupportedOnGivenDriverError.prototype);\r\n        this.message = `Locking not supported on giver driver.`;\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {OracleDriver} from \"./OracleDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single mysql database connection.\r\n *\r\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\r\n */\r\nexport class OracleQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: OracleDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.beginTransaction();\r\n        try {\r\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\r\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\r\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\r\n\r\n            await this.query(disableForeignKeysCheckQuery);\r\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\r\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\r\n            await this.query(enableForeignKeysCheckQuery);\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        // await this.query(\"START TRANSACTION\");\r\n        this.databaseConnection.isTransactionActive = true;\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise((ok, fail) => {\r\n            this.logger.logQuery(query, parameters);\r\n            const handler = (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                }\r\n\r\n                ok(result.rows || result.outBinds);\r\n            };\r\n            const executionOptions = {\r\n                autoCommit: this.databaseConnection.isTransactionActive ? false : true\r\n            };\r\n            this.databaseConnection.connection.execute(query, parameters || {}, executionOptions, handler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map(key => \":\" + key).join(\", \");\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        const insertSql = columns.length > 0\r\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`\r\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\r\n        if (generatedColumn) {\r\n            const sql2 = `declare lastId number; begin ${insertSql} returning \"id\" into lastId; dbms_output.enable; dbms_output.put_line(lastId); dbms_output.get_line(:ln, :st); end;`;\r\n            const saveResult = await this.query(sql2, parameters.concat([\r\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.STRING, maxSize: 32767 },\r\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.NUMBER }\r\n            ]));\r\n            return parseInt(saveResult[0]);\r\n        } else {\r\n            return this.query(insertSql, parameters);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions).join(\" AND \");\r\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(sql, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\r\n        const tablesSql      = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN (${tableNamesString})`;\r\n        const columnsSql     = `SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN (${tableNamesString})`;\r\n        const indicesSql     = `SELECT ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS, LISTAGG(cols.COLUMN_NAME, ',') WITHIN GROUP (ORDER BY cols.COLUMN_NAME) AS COLUMN_NAMES\r\n                                FROM USER_INDEXES ind, USER_IND_COLUMNS cols \r\n                                WHERE ind.INDEX_NAME = cols.INDEX_NAME AND ind.TABLE_NAME IN (${tableNamesString})\r\n                                GROUP BY ind.INDEX_NAME, ind.TABLE_NAME, ind.UNIQUENESS`;\r\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\r\n        const uniqueKeysSql  = `SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = '${this.dbName}' AND CONSTRAINT_TYPE = 'UNIQUE'`;\r\n        const constraintsSql = `SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\r\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN (${tableNamesString}) \r\nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position`;\r\n        const [dbTables, dbColumns, dbIndices, /*dbForeignKeys, dbUniqueKeys, */constraints]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(indicesSql),\r\n            // this.query(foreignKeysSql),\r\n            // this.query(uniqueKeysSql),\r\n            this.query(constraintsSql),\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return dbTables.map(dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\r\n                .map(dbColumn => {\r\n                    const isPrimary = !!constraints\r\n                        .find(constraint => {\r\n                            return  constraint[\"TABLE_NAME\"] === tableSchema.name &&\r\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"P\" &&\r\n                                    constraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\r\n                        });\r\n\r\n                    let columnType = dbColumn[\"DATA_TYPE\"].toLowerCase();\r\n                    if (dbColumn[\"DATA_TYPE\"].toLowerCase() === \"varchar2\" && dbColumn[\"DATA_LENGTH\"] !== null) {\r\n                        columnType += \"(\" + dbColumn[\"DATA_LENGTH\"] + \")\";\r\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null && dbColumn[\"DATA_SCALE\"] !== null) {\r\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \",\" + dbColumn[\"DATA_SCALE\"] + \")\";\r\n                    } else if (dbColumn[\"DATA_SCALE\"] !== null) {\r\n                        columnType += \"(0,\" + dbColumn[\"DATA_SCALE\"] + \")\";\r\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null) {\r\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \")\";\r\n                    }\r\n\r\n                    const columnSchema = new ColumnSchema();\r\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\r\n                    columnSchema.type = columnType;\r\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\r\n                    columnSchema.isNullable = dbColumn[\"NULLABLE\"] !== \"N\";\r\n                    columnSchema.isPrimary = isPrimary;\r\n                    columnSchema.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\"; // todo\r\n                    columnSchema.comment = \"\"; // todo\r\n                    return columnSchema;\r\n                });\r\n\r\n            // create primary key schema\r\n            tableSchema.primaryKeys = constraints\r\n                .filter(constraint => \r\n                    constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"P\"\r\n                )\r\n                .map(constraint => \r\n                    new PrimaryKeySchema(constraint[\"CONSTRAINT_NAME\"], constraint[\"COLUMN_NAME\"])\r\n                );\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            tableSchema.foreignKeys = constraints\r\n                .filter(constraint => constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"R\")\r\n                .map(constraint => new ForeignKeySchema(constraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create index schemas from the loaded indices\r\n            tableSchema.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return  dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\r\n                })\r\n                .map(dbIndex => {\r\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndex[\"INDEX_NAME\"], dbIndex[\"COLUMN_NAMES\"], !!(dbIndex[\"COLUMN_NAMES\"] === \"UNIQUE\"));\r\n                });\r\n\r\n            return tableSchema;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableName: string): Promise<void> {\r\n        let sql = `DROP TABLE \"${tableName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\r\n\r\n            if (newColumn.isGenerated) {\r\n                if (tableSchema.primaryKeys.length > 0 && oldColumn.isPrimary) {\r\n                    // console.log(tableSchema.primaryKeys);\r\n                    const dropPrimarySql = `ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"${tableSchema.primaryKeys[0].name}\"`;\r\n                    await this.query(dropPrimarySql);\r\n                }\r\n\r\n                // since modifying identity column is not supported yet, we need to recreate this column\r\n                const dropSql = `ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`;\r\n                await this.query(dropSql);\r\n\r\n                const createSql = `ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn)}`;\r\n                await this.query(createSql);\r\n\r\n            } else {\r\n                const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" DROP IDENTITY`;\r\n                await this.query(sql);\r\n\r\n            }\r\n        }\r\n\r\n        if (newColumn.isNullable !== oldColumn.isNullable) {\r\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type} ${newColumn.isNullable ? \"NULL\" : \"NOT NULL\"}`;\r\n            await this.query(sql);\r\n\r\n        } else if (newColumn.type !== oldColumn.type) { // elseif is used because\r\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type}`;\r\n            await this.query(sql);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\r\n        return this.query(`ALTER TABLE \"${tableName}\" DROP COLUMN \"${columnName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => \"\\\"\" + primaryKey.columnName + \"\\\"\");\r\n        // console.log(dbTable.primaryKeys);\r\n        if (dbTable.primaryKeys.length > 0 && dbTable.primaryKeys[0].name)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${dbTable.primaryKeys[0].name}\"`);\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const columnNames = foreignKey.columnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\",\");\r\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\r\n            `FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\r\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columns = index.columnNames.map(columnName => \"\\\"\" + columnName + \"\\\"\").join(\", \");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE\" : \"\"} INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `ALTER TABLE \"${tableName}\" DROP INDEX \"${indexName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                if (typeOptions.fixedLength) {\r\n                    return \"char(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n                } else {\r\n                    return \"varchar2(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";                    \r\n                }\r\n            case \"text\":\r\n                return \"clob\";\r\n            case \"boolean\":\r\n                return \"number(1)\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                // if (column.isGenerated)\r\n                //     return `number(22)`;\r\n                if (typeOptions.precision && typeOptions.scale)\r\n                    return `number(${typeOptions.precision},${typeOptions.scale})`;\r\n                if (typeOptions.precision)\r\n                    return `number(${typeOptions.precision},0)`;\r\n                if (typeOptions.scale)\r\n                    return `number(0,${typeOptions.scale})`;\r\n\r\n                return \"number(10,0)\";\r\n            case \"smallint\":\r\n                return \"number(5)\";\r\n            case \"bigint\":\r\n                return \"number(20)\";\r\n            case \"float\":\r\n                if (typeOptions.precision && typeOptions.scale)\r\n                    return `float(${typeOptions.precision},${typeOptions.scale})`;\r\n                if (typeOptions.precision)\r\n                    return `float(${typeOptions.precision},0)`;\r\n                if (typeOptions.scale)\r\n                    return `float(0,${typeOptions.scale})`;\r\n\r\n                return `float(126)`;\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"float(126)\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(0,${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                return \"date\";\r\n            case \"datetime\":\r\n                return \"timestamp(0)\";\r\n            case \"json\":\r\n                return \"clob\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"varchar2(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"Oracle\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.schemaName as string;\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\r\n        return Object.keys(objectLiteral).map(key => this.driver.escapeColumnName(key) + \"=:\" + key);\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema) {\r\n        let c = `\"${column.name}\" ` + column.type;\r\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\r\n            c += \" NOT NULL\";\r\n        // if (column.isPrimary === true && addPrimary)\r\n        //     c += \" PRIMARY KEY\";\r\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" GENERATED BY DEFAULT ON NULL AS IDENTITY\";\r\n        // if (column.comment) // todo: less priority, fix it later\r\n        //     c += \" COMMENT '\" + column.comment + \"'\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {OracleQueryRunner} from \"./OracleQueryRunner\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\n\r\n/**\r\n * Organizes communication with Oracle DBMS.\r\n *\r\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\r\n */\r\nexport class OracleDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Oracle library.\r\n     */\r\n    oracle: any;\r\n\r\n    /**\r\n     * Connection to oracle database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Oracle pool.\r\n     */\r\n    protected pool: any;\r\n\r\n    /**\r\n     * Pool of database connections.\r\n     */\r\n    protected databaseConnectionPool: DatabaseConnection[] = [];\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, oracle?: any) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(options, { useSid: true });\r\n        this.logger = logger;\r\n        this.oracle = oracle;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.host)\r\n            throw new DriverOptionNotSetError(\"host\");\r\n        if (!this.options.username)\r\n            throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.sid)\r\n            throw new DriverOptionNotSetError(\"sid\");\r\n\r\n        // if oracle package instance was not set explicitly then try to load it\r\n        if (!oracle)\r\n            this.loadDependencies();\r\n\r\n        this.oracle.outFormat = this.oracle.OBJECT;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            user: this.options.username,\r\n            password: this.options.password,\r\n            connectString: this.options.host + \":\" + this.options.port + \"/\" + this.options.sid,\r\n        }, this.options.extra || {});\r\n\r\n        // pooling is enabled either when its set explicitly to true,\r\n        // either when its not defined at all (e.g. enabled by default)\r\n        if (this.options.usePool === undefined || this.options.usePool === true) {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.oracle.createPool(options, (err: any, pool: any) => {\r\n                    if (err)\r\n                        return fail(err);\r\n\r\n                    this.pool = pool;\r\n                    ok();\r\n                });\r\n            });\r\n\r\n        } else {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.oracle.getConnection(options, (err: any, connection: any) => {\r\n                    if (err)\r\n                        return fail(err);\r\n\r\n                    this.databaseConnection = {\r\n                        id: 1,\r\n                        connection: connection,\r\n                        isTransactionActive: false\r\n                    };\r\n                    this.databaseConnection.connection.connect((err: any) => err ? fail(err) : ok());\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            throw new ConnectionIsNotSetError(\"oracle\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n\r\n            // if pooling is used, then disconnect from it\r\n            if (this.pool) {\r\n                this.pool.close(handler);\r\n                this.pool = undefined;\r\n                this.databaseConnectionPool = [];\r\n            }\r\n\r\n            // if single connection is opened, then close it\r\n            if (this.databaseConnection) {\r\n                this.databaseConnection.connection.close(handler);\r\n                this.databaseConnection = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection && !this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"oracle\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new OracleQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.oracle,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\r\n            pool: this.pool\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            escapedParameters.push(parameters[key.substr(1)]);\r\n            return key;\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return `\"${columnName}\"`; // \"`\" + columnName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return `\"${aliasName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return `\"${tableName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n\r\n        if (this.pool) {\r\n            return new Promise((ok, fail) => {\r\n                this.pool.getConnection((err: any, connection: any) => {\r\n                    if (err)\r\n                        return fail(err);\r\n\r\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\r\n                    if (!dbConnection) {\r\n                        dbConnection = {\r\n                            id: this.databaseConnectionPool.length,\r\n                            connection: connection,\r\n                            isTransactionActive: false\r\n                        };\r\n                        dbConnection.releaseCallback = () => {\r\n                            return new Promise<void>((ok, fail) => {\r\n                                connection.close((err: any) => {\r\n                                    if (err)\r\n                                        return fail(err);\r\n\r\n                                    if (this.pool && dbConnection) {\r\n                                        this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\r\n                                    }\r\n                                    ok();\r\n                                });\r\n                            });\r\n                        };\r\n                        this.databaseConnectionPool.push(dbConnection);\r\n                    }\r\n                    ok(dbConnection);\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"oracle\");\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.oracle = PlatformTools.load(\"oracledb\");\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"Oracle\", \"oracledb\");\r\n        }\r\n    }\r\n\r\n}","import {Alias} from \"./alias/Alias\";\r\nimport {AliasMap} from \"./alias/AliasMap\";\r\nimport {RawSqlResultsToEntityTransformer} from \"./transformer/RawSqlResultsToEntityTransformer\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {JoinOptions} from \"./JoinOptions\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {PessimisticLockTransactionRequiredError} from \"./error/PessimisticLockTransactionRequiredError\";\r\nimport {NoVersionOrUpdateDateColumnError} from \"./error/NoVersionOrUpdateDateColumnError\";\r\nimport {OptimisticLockVersionMismatchError} from \"./error/OptimisticLockVersionMismatchError\";\r\nimport {OptimisticLockCanNotBeUsedError} from \"./error/OptimisticLockCanNotBeUsedError\";\r\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\r\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\r\nimport {LockNotSupportedOnGivenDriverError} from \"./error/LockNotSupportedOnGivenDriverError\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\r\n\r\n/**\r\n */\r\nexport interface Join {\r\n    alias: Alias;\r\n    type: \"LEFT\"|\"INNER\";\r\n    condition?: string;\r\n    tableName: string;\r\n    mapToProperty?: string;\r\n    isMappingMany: boolean;\r\n    options?: JoinOptions;\r\n}\r\n\r\nexport interface JoinRelationId {\r\n\r\n    alias: Alias;\r\n    type: \"LEFT\"|\"INNER\";\r\n    condition?: string;\r\n    mapToProperty?: string;\r\n}\r\n\r\nexport interface RelationCountMeta {\r\n\r\n    alias: Alias;\r\n    // property: string;\r\n    condition?: string;\r\n    mapToProperty?: string;\r\n    entities: { entity: any, metadata: EntityMetadata }[];\r\n    // entity?: any;\r\n}\r\n\r\n/**\r\n */\r\nexport interface JoinMapping {\r\n    type: \"join\"|\"relationId\";\r\n    alias: Alias;\r\n    parentName: string;\r\n    propertyName: string;\r\n    isMany: boolean;\r\n}\r\n\r\n// todo: fix problem with long aliases eg getMaxIdentifierLength\r\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\r\n// todo: implement joinAlways in relations and relationId\r\n// todo: implement @Where decorator\r\n// todo: add quoting functions\r\n// todo: .addCount and .addCountSelect()\r\n// todo: add selectAndMap\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class QueryBuilder<Entity> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected aliasMap: AliasMap;\r\n    protected type: \"select\"|\"update\"|\"delete\" = \"select\";\r\n    protected selects: string[] = [];\r\n    protected fromEntity: { alias: Alias };\r\n    protected fromTableName: string;\r\n    protected fromTableAlias: string;\r\n    protected updateQuerySet: Object;\r\n    protected joins: Join[] = [];\r\n    protected joinRelationIds: JoinRelationId[] = [];\r\n    protected relationCountMetas: RelationCountMeta[] = [];\r\n    protected groupBys: string[] = [];\r\n    protected wheres: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\r\n    protected havings: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\r\n    protected orderBys: OrderByCondition = {};\r\n    protected parameters: ObjectLiteral = {};\r\n    protected limit: number;\r\n    protected offset: number;\r\n    protected lockMode: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\";\r\n    protected lockVersion?: number|Date;\r\n    protected skipNumber: number;\r\n    protected takeNumber: number;\r\n    protected enableQuoting: boolean = true;\r\n    protected ignoreParentTablesJoins: boolean = false;\r\n\r\n    /**\r\n     * Indicates if virtual columns should be included in entity result.\r\n     */\r\n    protected enableRelationIdValues: boolean = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected queryRunnerProvider?: QueryRunnerProvider) {\r\n        this.aliasMap = new AliasMap(connection);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets the main alias string used in this query builder.\r\n     */\r\n    get alias(): string {\r\n        return this.aliasMap.mainAlias.name;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Disable escaping.\r\n     */\r\n    disableQuoting(): this {\r\n        this.enableQuoting = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates DELETE query.\r\n     */\r\n    delete(): this {\r\n        this.type = \"delete\";\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given entity and applies given update values.\r\n     */\r\n    update(entity: Function, updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given table name and applies given update values.\r\n     */\r\n    update(tableName: string, updateSet: ObjectLiteral): this;\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(tableNameOrEntityOrUpdateSet?: string|Function|ObjectLiteral, maybeUpdateSet?: ObjectLiteral): this {\r\n        const updateSet = maybeUpdateSet ? maybeUpdateSet : <ObjectLiteral> tableNameOrEntityOrUpdateSet;\r\n\r\n        if (tableNameOrEntityOrUpdateSet instanceof Function) {\r\n            const aliasName = (<any> tableNameOrEntityOrUpdateSet).name;\r\n            const aliasObj = new Alias(aliasName);\r\n            aliasObj.metadata = this.connection.getMetadata(tableNameOrEntityOrUpdateSet);\r\n            this.aliasMap.addMainAlias(aliasObj);\r\n            this.fromEntity = { alias: aliasObj };\r\n\r\n        } else if (typeof tableNameOrEntityOrUpdateSet === \"string\") {\r\n            this.fromTableName = <string> tableNameOrEntityOrUpdateSet;\r\n        }\r\n\r\n        this.type = \"update\";\r\n        this.updateQuerySet = updateSet;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates SELECT query.\r\n     * Replaces all old selections if they exist.\r\n     */\r\n    select(): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all old selections if they exist.\r\n     */\r\n    select(selection: string): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all old selections if they exist.\r\n     */\r\n    select(selection: string[]): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all old selections if they exist.\r\n     */\r\n    select(...selection: string[]): this;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all old selections if they exist.\r\n     */\r\n    select(selection?: string|string[]): this {\r\n        this.type = \"select\";\r\n        if (selection) {\r\n            if (selection instanceof Array) {\r\n                this.selects = selection;\r\n            } else {\r\n                this.selects = [selection];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string): this;\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string[]): this;\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(...selection: string[]): this;\r\n\r\n    /**\r\n     * Adds new selection to the SELECT query.\r\n     */\r\n    addSelect(selection: string|string[]): this {\r\n        if (selection instanceof Array)\r\n            this.selects = this.selects.concat(selection);\r\n        else\r\n            this.selects.push(selection);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\", lockVersion: number): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\", lockVersion: Date): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"pessimistic_read\"|\"pessimistic_write\"): this;\r\n\r\n    /**\r\n     * Sets locking mode.\r\n     */\r\n    setLock(lockMode: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\", lockVersion?: number|Date): this {\r\n        this.lockMode = lockMode;\r\n        this.lockVersion = lockVersion;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies FROM which entity's table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    from(entityTarget: Function|string, alias: string): this {\r\n        const aliasObj = new Alias(alias);\r\n        aliasObj.metadata = this.connection.getMetadata(entityTarget);\r\n        this.aliasMap.addMainAlias(aliasObj);\r\n        this.fromEntity = {alias: aliasObj};\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies FROM which table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    fromTable(tableName: string, alias: string) {\r\n        this.fromTableName = <string> tableName;\r\n        this.fromTableAlias = alias;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs (without selection) entity's property.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection) given entity's table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection) given table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs (without selection).\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoin(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) entity's property.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) entity's table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection) given table.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs (without selection).\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoin(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options);\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property and adds all selection properties to SELECT.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndSelect(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property and adds all selection properties to SELECT.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs and adds all selection properties to SELECT.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndSelect(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options);\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options, mapToProperty, true);\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    innerJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options, mapToProperty, false);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options, mapToProperty, true);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * Given entity property should be a relation.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\r\n\r\n    /**\r\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\r\n     * This is extremely useful when you want to select some data and map it to some virtual property.\r\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\r\n     * You also need to specify an alias of the joined data.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     */\r\n    leftJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\r\n        this.addSelect(alias);\r\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options, mapToProperty, false);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs relation id.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    leftJoinRelationId(property: string, condition?: string): this {\r\n        return this.joinRelationId(\"LEFT\", undefined, property, condition);\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs relation id.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    innerJoinRelationId(property: string, condition?: string): this {\r\n        return this.joinRelationId(\"INNER\", undefined, property, condition);\r\n    }\r\n\r\n    /**\r\n     * LEFT JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    leftJoinRelationIdAndMap(mapToProperty: string, property: string, condition: string = \"\"): this {\r\n        return this.joinRelationId(\"INNER\", mapToProperty, property, condition);\r\n    }\r\n\r\n    /**\r\n     * INNER JOINs relation id and maps it into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    innerJoinRelationIdAndMap(mapToProperty: string, property: string, condition: string = \"\"): this {\r\n        return this.joinRelationId(\"INNER\", mapToProperty, property, condition);\r\n    }\r\n\r\n    /**\r\n     * Counts number of entities of entity's relation.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    countRelation(property: string, condition: string = \"\"): this {\r\n\r\n        const [parentAliasName, parentPropertyName] = property.split(\".\");\r\n        const alias = parentAliasName + \"_\" + parentPropertyName + \"_relation_count\";\r\n\r\n        const aliasObj = new Alias(alias);\r\n        this.aliasMap.addAlias(aliasObj);\r\n        aliasObj.parentAliasName = parentAliasName;\r\n        aliasObj.parentPropertyName = parentPropertyName;\r\n\r\n        const relationCountMeta: RelationCountMeta = {\r\n            condition: condition,\r\n            alias: aliasObj,\r\n            entities: []\r\n        };\r\n        this.relationCountMetas.push(relationCountMeta);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Counts number of entities of entity's relation and maps the value into some entity's property.\r\n     * Optionally, you can add condition and parameters used in condition.\r\n     *\r\n     * @experimental\r\n     */\r\n    countRelationAndMap(mapProperty: string, property: string, condition: string = \"\"): this {\r\n\r\n        const [parentAliasName, parentPropertyName] = property.split(\".\");\r\n        const alias = parentAliasName + \"_\" + parentPropertyName + \"_relation_count\";\r\n        const aliasObj = new Alias(alias);\r\n        this.aliasMap.addAlias(aliasObj);\r\n        aliasObj.parentAliasName = parentAliasName;\r\n        aliasObj.parentPropertyName = parentPropertyName;\r\n\r\n        const relationCountMeta: RelationCountMeta = {\r\n            mapToProperty: mapProperty,\r\n            condition: condition,\r\n            alias: aliasObj,\r\n            entities: []\r\n        };\r\n        this.relationCountMetas.push(relationCountMeta);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: string, parameters?: ObjectLiteral): this {\r\n        this.wheres.push({ type: \"simple\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: string, parameters?: ObjectLiteral): this {\r\n        this.wheres.push({ type: \"and\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     *\r\n     * @experimental Maybe this method should be moved to repository?\r\n     */\r\n    andWhereInIds(ids: any[]): this {\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.andWhere(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: string, parameters?: ObjectLiteral): this {\r\n        this.wheres.push({ type: \"or\", condition: where });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     *\r\n     * @experimental Maybe this method should be moved to repository?\r\n     */\r\n    orWhereInIds(ids: any[]): this {\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.orWhere(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets HAVING condition in the query builder.\r\n     * If you had previously HAVING expression defined,\r\n     * calling this function will override previously set HAVING conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    having(having: string, parameters?: ObjectLiteral): this {\r\n        this.havings.push({ type: \"simple\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND HAVING condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andHaving(having: string, parameters?: ObjectLiteral): this {\r\n        this.havings.push({ type: \"and\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR HAVING condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orHaving(having: string, parameters?: ObjectLiteral): this {\r\n        this.havings.push({ type: \"or\", condition: having });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets GROUP BY condition in the query builder.\r\n     * If you had previously GROUP BY expression defined,\r\n     * calling this function will override previously set GROUP BY conditions.\r\n     */\r\n    groupBy(groupBy: string): this {\r\n        this.groupBys = [groupBy];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds GROUP BY condition in the query builder.\r\n     */\r\n    addGroupBy(groupBy: string): this {\r\n        this.groupBys.push(groupBy);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\"): this {\r\n        this.orderBys = { [sort]: order };\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds ORDER BY condition in the query builder.\r\n     */\r\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\"): this {\r\n        this.orderBys[sort] = order;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set's LIMIT - maximum number of rows to be selected.\r\n     * NOTE that it may not work as you expect if you are using joins.\r\n     * If you want to implement pagination, and you are having join in your query,\r\n     * then use instead setMaxResults instead.\r\n     */\r\n    setLimit(limit: number): this {\r\n        this.limit = limit;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set's OFFSET - selection offset.\r\n     * NOTE that it may not work as you expect if you are using joins.\r\n     * If you want to implement pagination, and you are having join in your query,\r\n     * then use instead setFirstResult instead.\r\n     */\r\n    setOffset(offset: number): this {\r\n        this.offset = offset;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets maximal number of entities to take.\r\n     */\r\n    take(take: number): this {\r\n        this.takeNumber = take;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets number of entities to skip\r\n     */\r\n    skip(skip: number): this {\r\n        this.skipNumber = skip;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets given parameter's value.\r\n     */\r\n    setParameter(key: string, value: any): this {\r\n        this.parameters[key] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds all parameters from the given object.\r\n     * Unlike setParameters method it does not clear all previously set parameters.\r\n     */\r\n    setParameters(parameters: ObjectLiteral): this {\r\n        Object.keys(parameters).forEach(key => {\r\n            this.parameters[key] = parameters[key];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds all parameters from the given object.\r\n     * Unlike setParameters method it does not clear all previously set parameters.\r\n     *\r\n     * @deprecated use setParameters instead\r\n     */\r\n    addParameters(parameters: ObjectLiteral): this {\r\n        Object.keys(parameters).forEach(key => {\r\n            this.parameters[key] = parameters[key];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets all parameters.\r\n     */\r\n    getParameters(): ObjectLiteral {\r\n        const parameters: ObjectLiteral = Object.assign({}, this.parameters);\r\n\r\n        // add discriminator column parameter if it exist\r\n        if (!this.fromTableName) {\r\n            const mainMetadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n            if (mainMetadata.hasDiscriminatorColumn)\r\n                parameters[\"discriminatorColumnValue\"] = mainMetadata.discriminatorValue;\r\n        }\r\n\r\n        return parameters;\r\n    }\r\n\r\n    /**\r\n     * Gets generated sql that will be executed.\r\n     * Parameters in the query are escaped for the currently used driver.\r\n     */\r\n    getSql(): string {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createJoinRelationIdsExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        [sql] = this.connection.driver.escapeQueryWithParameters(sql, this.parameters);\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Gets generated sql without parameters being replaced.\r\n     *\r\n     * @experimental\r\n     */\r\n    getGeneratedQuery(): string {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createJoinRelationIdsExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Gets sql to be executed with all parameters used in it.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSqlWithParameters(options?: { skipOrderBy?: boolean }): [string, any[]] {\r\n        let sql = this.createSelectExpression();\r\n        sql += this.createJoinExpression();\r\n        sql += this.createJoinRelationIdsExpression();\r\n        sql += this.createWhereExpression();\r\n        sql += this.createGroupByExpression();\r\n        sql += this.createHavingExpression();\r\n        if (!options || !options.skipOrderBy)\r\n            sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        sql += this.createOffsetExpression();\r\n        sql += this.createLockExpression();\r\n        return this.connection.driver.escapeQueryWithParameters(sql, this.getParameters());\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<any> {\r\n        const queryRunner = await this.getQueryRunner();\r\n\r\n        const [sql, parameters] = this.getSqlWithParameters();\r\n        try {\r\n            return await queryRunner.query(sql, parameters);  // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\r\n     */\r\n    async getEntitiesAndRawResults(): Promise<{ entities: Entity[], rawResults: any[] }> {\r\n        const queryRunner = await this.getQueryRunner();\r\n\r\n        try {\r\n            if (!this.aliasMap.hasMainAlias)\r\n                throw new Error(`Alias is not set. Looks like nothing is selected. Use select*, delete, update method to set an alias.`);\r\n\r\n            if ((this.lockMode === \"pessimistic_read\" || this.lockMode === \"pessimistic_write\") && !queryRunner.isTransactionActive())\r\n                throw new PessimisticLockTransactionRequiredError();\r\n\r\n            if (this.lockMode === \"optimistic\") {\r\n                const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n                if (!metadata.hasVersionColumn && !metadata.hasUpdateDateColumn)\r\n                    throw new NoVersionOrUpdateDateColumnError(metadata.name);\r\n            }\r\n\r\n            const mainAliasName = this.fromTableName ? this.fromTableName : this.aliasMap.mainAlias.name;\r\n            let rawResults: any[];\r\n            if (this.skipNumber || this.takeNumber) {\r\n                // we are skipping order by here because its not working in subqueries anyway\r\n                // to make order by working we need to apply it on a distinct query\r\n                const [sql, parameters] = this.getSqlWithParameters({ skipOrderBy: true });\r\n                const [selects, orderBys] = this.createOrderByCombinedWithSelectExpression(\"distinctAlias\");\r\n\r\n                const distinctAlias = this.escapeTable(\"distinctAlias\");\r\n                const metadata = this.connection.getMetadata(this.fromEntity.alias.target);\r\n                let idsQuery = `SELECT `;\r\n                if (this.connection.driver instanceof OracleDriver) { // todo: :D\r\n                    idsQuery += `rownum rn,`;\r\n                }\r\n                idsQuery += metadata.primaryColumns.map((primaryColumn, index) => {\r\n                    const propertyName = this.escapeAlias(mainAliasName + \"_\" + primaryColumn.fullName);\r\n                    if (index === 0) {\r\n                        return `DISTINCT(${distinctAlias}.${propertyName}) as ids_${primaryColumn.fullName}`;\r\n                    } else {\r\n                        return `${distinctAlias}.${propertyName}) as ids_${primaryColumn.fullName}`;\r\n                    }\r\n                }).join(\", \");\r\n                if (selects.length > 0)\r\n                    idsQuery += \", \" + selects;\r\n\r\n                idsQuery += ` FROM (${sql}) ${distinctAlias}`; // TODO: WHAT TO DO WITH PARAMETERS HERE? DO THEY WORK?\r\n\r\n                if (orderBys.length > 0) {\r\n                    idsQuery += \" ORDER BY \" + orderBys;\r\n                } else {\r\n                    idsQuery += ` ORDER BY \"ids_${metadata.firstPrimaryColumn.fullName}\"`; // this is required for mssql driver if firstResult is used. Other drivers don't care about it\r\n                }\r\n\r\n                if (this.connection.driver instanceof SqlServerDriver) { // todo: temporary. need to refactor and make a proper abstraction\r\n\r\n                    if (this.skipNumber || this.takeNumber) {\r\n                        idsQuery += ` OFFSET ${this.skipNumber || 0} ROWS`;\r\n                        if (this.takeNumber)\r\n                            idsQuery += \" FETCH NEXT \" + this.takeNumber + \" ROWS ONLY\";\r\n                    }\r\n                } else if (this.connection.driver instanceof OracleDriver) { // todo: :D\r\n                    if (this.skipNumber || this.takeNumber) {\r\n                        idsQuery = `SELECT * FROM (${idsQuery}) WHERE rn >= ${this.skipNumber || 0}`;\r\n                        if (this.takeNumber)\r\n                            idsQuery += ` AND rn <= ${this.skipNumber + this.takeNumber}`;\r\n                    }\r\n                } else {\r\n\r\n                    if (this.takeNumber)\r\n                        idsQuery += \" LIMIT \" + this.takeNumber;\r\n                    if (this.skipNumber)\r\n                        idsQuery += \" OFFSET \" + this.skipNumber;\r\n                }\r\n\r\n                return await queryRunner.query(idsQuery, parameters)\r\n                    .then((results: any[]) => {\r\n                        rawResults = results;\r\n                        if (results.length === 0)\r\n                            return [];\r\n\r\n                        let condition = \"\";\r\n                        const parameters: ObjectLiteral = {};\r\n                        if (metadata.hasMultiplePrimaryKeys) {\r\n                            condition = results.map(result => {\r\n                                return metadata.primaryColumns.map(primaryColumn => {\r\n                                    parameters[\"ids_\" + primaryColumn.propertyName] = result[\"ids_\" + primaryColumn.propertyName];\r\n                                    return mainAliasName + \".\" + primaryColumn.propertyName + \"=:ids_\" + primaryColumn.propertyName;\r\n                                }).join(\" AND \");\r\n                            }).join(\" OR \");\r\n                        } else {\r\n                            const ids = results.map(result => result[\"ids_\" + metadata.firstPrimaryColumn.propertyName]);\r\n                            const areAllNumbers = ids.map((id: any) => typeof id === \"number\");\r\n                            if (areAllNumbers) {\r\n                                // fixes #190. if all numbers then its safe to perform query without parameter\r\n                                condition = `${mainAliasName}.${metadata.firstPrimaryColumn.propertyName} IN (${ids.join(\", \")})`;\r\n                            } else {\r\n                                parameters[\"ids\"] = ids;\r\n                                condition = mainAliasName + \".\" + metadata.firstPrimaryColumn.propertyName + \" IN (:ids)\";\r\n                            }\r\n                        }\r\n                        const [queryWithIdsSql, queryWithIdsParameters] = this.clone({queryRunnerProvider: this.queryRunnerProvider})\r\n                            .andWhere(condition, parameters)\r\n                            .getSqlWithParameters();\r\n                        return (queryRunner as QueryRunner).query(queryWithIdsSql, queryWithIdsParameters);\r\n                    })\r\n                    .then(results => {\r\n                        return this.rawResultsToEntities(results);\r\n                    })\r\n                    .then(results => {\r\n\r\n                        return this.loadRelationCounts(queryRunner as QueryRunner, results)\r\n                            .then(counts => {\r\n                                return results;\r\n                            });\r\n                    })\r\n                    .then(results => {\r\n                        if (!this.fromTableName)\r\n                            return this.connection.broadcaster.broadcastLoadEventsForAll(this.aliasMap.mainAlias.target, results).then(() => results);\r\n\r\n                        return results;\r\n                    })\r\n                    .then(results => {\r\n                        return {\r\n                            entities: results,\r\n                            rawResults: rawResults\r\n                        };\r\n                    });\r\n\r\n            } else {\r\n\r\n                const [sql, parameters] = this.getSqlWithParameters();\r\n\r\n                return await queryRunner.query(sql, parameters)\r\n                    .then(results => {\r\n                        rawResults = results;\r\n                        return this.rawResultsToEntities(results);\r\n                    })\r\n                    .then(results => {\r\n\r\n                        return this.loadRelationCounts(queryRunner as QueryRunner, results)\r\n                            .then(counts => {\r\n                                return results;\r\n                            });\r\n                    })\r\n                    .then(results => {\r\n                        if (!this.fromTableName) {\r\n                            return this.connection.broadcaster\r\n                                .broadcastLoadEventsForAll(this.aliasMap.mainAlias.target, results)\r\n                                .then(() => results);\r\n                        }\r\n                        return results;\r\n                    })\r\n                    .then(results => {\r\n                        return {\r\n                            entities: results,\r\n                            rawResults: rawResults\r\n                        };\r\n                    });\r\n            }\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets count - number of entities selected by sql generated by this query builder.\r\n     * Count excludes all limitations set by setFirstResult and setMaxResults methods call.\r\n     */\r\n    async getCount(): Promise<number> {\r\n        if (this.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const queryRunner = await this.getQueryRunner();\r\n\r\n        const mainAlias = this.fromTableName ? this.fromTableName : this.aliasMap.mainAlias.name; // todo: will this work with \"fromTableName\"?\r\n        const metadata = this.connection.getMetadata(this.fromEntity.alias.target);\r\n\r\n        const distinctAlias = this.escapeAlias(mainAlias);\r\n        let countSql = `COUNT(` + metadata.primaryColumnsWithParentIdColumns.map((primaryColumn, index) => {\r\n                const propertyName = this.escapeColumn(primaryColumn.fullName);\r\n                if (index === 0) {\r\n                    return `DISTINCT(${distinctAlias}.${propertyName})`;\r\n                } else {\r\n                    return `${distinctAlias}.${propertyName})`;\r\n                }\r\n            }).join(\", \") + \") as cnt\";\r\n\r\n        const countQuery = this\r\n            .clone({\r\n                queryRunnerProvider: this.queryRunnerProvider,\r\n                skipOrderBys: true,\r\n                ignoreParentTablesJoins: true,\r\n                skipLimit: true,\r\n                skipOffset: true\r\n            })\r\n            .select(countSql);\r\n\r\n        const [countQuerySql, countQueryParameters] = countQuery.getSqlWithParameters();\r\n\r\n        try {\r\n            const results = await queryRunner.query(countQuerySql, countQueryParameters);\r\n            if (!results || !results[0] || (!results[0][\"cnt\"] || !results[0][\"CNT\"]))\r\n                return 0;\r\n\r\n            return parseInt(results[0][\"cnt\"] ? results[0][\"cnt\"] : results[0][\"CNT\"]);\r\n\r\n        } finally {\r\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all raw results returned by execution of generated query builder sql.\r\n     */\r\n    async getRawMany(): Promise<any[]> {\r\n        if (this.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        return this.execute();\r\n    }\r\n\r\n    /**\r\n     * Gets first raw result returned by execution of generated query builder sql.\r\n     */\r\n    async getRawOne(): Promise<any> {\r\n        if (this.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const results = await this.execute();\r\n        return results[0];\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets entities and count returned by execution of generated query builder sql.\r\n     */\r\n    async getManyAndCount(): Promise<[Entity[], number]> {\r\n        if (this.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        // todo: share database connection and counter\r\n        return Promise.all([\r\n            this.getMany(),\r\n            this.getCount()\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Gets entities returned by execution of generated query builder sql.\r\n     */\r\n    async getMany(): Promise<Entity[]> {\r\n        if (this.lockMode === \"optimistic\")\r\n            throw new OptimisticLockCanNotBeUsedError();\r\n\r\n        const results = await this.getEntitiesAndRawResults();\r\n        return results.entities;\r\n    }\r\n\r\n    // logSql(): this {\r\n    //     console.log(this.getSql());\r\n    //     return this;\r\n    // }\r\n\r\n    /**\r\n     * Gets single entity returned by execution of generated query builder sql.\r\n     */\r\n    async getOne(): Promise<Entity|undefined> {\r\n        const results = await this.getEntitiesAndRawResults();\r\n        const result = results.entities[0] as any;\r\n\r\n        if (result && this.lockMode === \"optimistic\" && this.lockVersion) {\r\n            const metadata = this.connection.getMetadata(this.fromEntity.alias.target);\r\n\r\n            if (this.lockVersion instanceof Date) {\r\n                const actualVersion = result[metadata.updateDateColumn.propertyName];\r\n                this.lockVersion.setMilliseconds(0);\r\n                if (actualVersion.getTime() !== this.lockVersion.getTime())\r\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.lockVersion, actualVersion);\r\n\r\n            } else {\r\n                const actualVersion = result[metadata.versionColumn.propertyName];\r\n                if (actualVersion !== this.lockVersion)\r\n                    throw new OptimisticLockVersionMismatchError(metadata.name, this.lockVersion, actualVersion);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clones query builder as it is.\r\n     */\r\n    clone(options?: { queryRunnerProvider?: QueryRunnerProvider, skipOrderBys?: boolean, skipLimit?: boolean, skipOffset?: boolean, ignoreParentTablesJoins?: boolean }): QueryBuilder<Entity> {\r\n        const qb = new QueryBuilder(this.connection, options ? options.queryRunnerProvider : undefined);\r\n        if (options && options.ignoreParentTablesJoins)\r\n            qb.ignoreParentTablesJoins = options.ignoreParentTablesJoins;\r\n\r\n        switch (this.type) {\r\n            case \"select\":\r\n                qb.select(this.selects);\r\n                break;\r\n            case \"update\":\r\n                qb.update(this.updateQuerySet);\r\n                break;\r\n            case \"delete\":\r\n                qb.delete();\r\n                break;\r\n        }\r\n\r\n        if (this.fromEntity && this.fromEntity.alias && this.fromEntity.alias.target) {\r\n            qb.from(this.fromEntity.alias.target, this.fromEntity.alias.name);\r\n\r\n        } else if (this.fromTableName) {\r\n            qb.fromTable(this.fromTableName, this.fromTableAlias);\r\n        }\r\n\r\n        this.joins.forEach(join => {\r\n            let property = join.tableName || join.alias.target;\r\n            if (join.alias.parentAliasName && join.alias.parentPropertyName) {\r\n                property = join.alias.parentAliasName + \".\" + join.alias.parentPropertyName;\r\n            }\r\n            qb.join(join.type, property, join.alias.name, join.condition || \"\", undefined, join.mapToProperty, join.isMappingMany);\r\n        });\r\n\r\n        this.groupBys.forEach(groupBy => qb.addGroupBy(groupBy));\r\n\r\n        this.wheres.forEach(where => {\r\n            switch (where.type) {\r\n                case \"simple\":\r\n                    qb.where(where.condition);\r\n                    break;\r\n                case \"and\":\r\n                    qb.andWhere(where.condition);\r\n                    break;\r\n                case \"or\":\r\n                    qb.orWhere(where.condition);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.havings.forEach(having => {\r\n            switch (having.type) {\r\n                case \"simple\":\r\n                    qb.having(having.condition);\r\n                    break;\r\n                case \"and\":\r\n                    qb.andHaving(having.condition);\r\n                    break;\r\n                case \"or\":\r\n                    qb.orHaving(having.condition);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        if (!options || !options.skipOrderBys)\r\n            Object.keys(this.orderBys).forEach(columnName => qb.addOrderBy(columnName, this.orderBys[columnName]));\r\n\r\n        Object.keys(this.parameters).forEach(key => qb.setParameter(key, this.parameters[key]));\r\n\r\n        if (!options || !options.skipLimit)\r\n            qb.setLimit(this.limit);\r\n\r\n        if (!options || !options.skipOffset)\r\n            qb.setOffset(this.offset);\r\n\r\n        qb.skip(this.skipNumber)\r\n            .take(this.takeNumber);\r\n\r\n        return qb;\r\n    }\r\n\r\n    escapeAlias(name: string) {\r\n        if (!this.enableQuoting)\r\n            return name;\r\n        return this.connection.driver.escapeAliasName(name);\r\n    }\r\n\r\n    escapeColumn(name: string) {\r\n        if (!this.enableQuoting)\r\n            return name;\r\n        return this.connection.driver.escapeColumnName(name);\r\n    }\r\n\r\n    escapeTable(name: string) {\r\n        if (!this.enableQuoting)\r\n            return name;\r\n        return this.connection.driver.escapeTableName(name);\r\n    }\r\n\r\n    /**\r\n     * Enables special query builder options.\r\n     */\r\n    enableOption(option: \"RELATION_ID_VALUES\"): this {\r\n        switch (option) {\r\n            case \"RELATION_ID_VALUES\":\r\n                this.enableRelationIdValues = true;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected loadRelationCounts(queryRunner: QueryRunner, results: Entity[]): Promise<{}> {\r\n\r\n        const promises = this.relationCountMetas.map(relationCountMeta => {\r\n            const parentAlias = relationCountMeta.alias.parentAliasName;\r\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\r\n            if (!foundAlias)\r\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\r\n\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(foundAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\r\n\r\n            const relation = parentMetadata.findRelationWithPropertyName(relationCountMeta.alias.parentPropertyName);\r\n\r\n            const queryBuilder = new QueryBuilder(this.connection, this.queryRunnerProvider);\r\n            let condition = \"\";\r\n\r\n            const metadata = this.aliasMap.getEntityMetadataByAlias(relationCountMeta.alias);\r\n            if (!metadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + relationCountMeta.alias.name);\r\n\r\n            let joinTableName: string = metadata.table.name;\r\n\r\n            const junctionMetadata = relation.junctionEntityMetadata;\r\n            const appendedCondition = relationCountMeta.condition ? \" AND \" + this.replacePropertyNames(relationCountMeta.condition) : \"\";\r\n\r\n            /*if (relation.isManyToMany) {\r\n             const junctionTable = junctionMetadata.table.name;\r\n             const junctionAlias = relationCountMeta.alias.parentAliasName + \"_\" + relationCountMeta.alias.name;\r\n             const joinAlias = relationCountMeta.alias.name;\r\n             const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable; // not sure if this is correct\r\n             const joinTableColumn = joinTable.referencedColumn.name; // not sure if this is correct\r\n             const inverseJoinColumnName = joinTable.inverseReferencedColumn.name; // not sure if this is correct\r\n\r\n             let condition1 = \"\", condition2 = \"\";\r\n             if (relation.isOwning) {\r\n             condition1 = junctionAlias + \".\" + junctionMetadata.columns[0].name + \"=\" + parentAlias + \".\" + joinTableColumn;\r\n             condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[1].name;\r\n             } else {\r\n             condition1 = junctionAlias + \".\" + junctionMetadata.columns[1].name + \"=\" + parentAlias + \".\" + joinTableColumn;\r\n             condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[0].name;\r\n             }\r\n\r\n             condition = \" LEFT JOIN \" + junctionTable + \" \" + junctionAlias + \" \" + relationCountMeta.conditionType + \" \" + condition1 +\r\n             \" LEFT JOIN \" + joinTableName + \" \" + joinAlias + \" \" + relationCountMeta.conditionType + \" \" + condition2 + appendedCondition;\r\n\r\n             } else if (relation.isManyToOne || (relation.isOneToOne && relation.isOwning)) {\r\n             const joinTableColumn = relation.joinColumn.referencedColumn.name;\r\n             const condition2 = relationCountMeta.alias.name + \".\" + joinTableColumn + \"=\" + parentAlias + \".\" + relation.name;\r\n             condition = \" LEFT JOIN \" + joinTableName + \" \" + relationCountMeta.alias.name + \" \" + relationCountMeta.conditionType + \" \" + condition2 + appendedCondition;\r\n\r\n             } else {\r\n             throw new Error(`Relation count can be applied only `); // this should be done on entity build\r\n             }*/\r\n\r\n            // if (relationCountMeta.condition)\r\n            //     condition += relationCountMeta.condition;\r\n            // relationCountMeta.alias.target;\r\n            // todo: FIX primaryColumn usages\r\n\r\n            const ids = relationCountMeta.entities\r\n                .map(entityWithMetadata => entityWithMetadata.metadata.getEntityIdMap(entityWithMetadata.entity))\r\n                .filter(idMap => idMap !== undefined)\r\n                .map(idMap => idMap![parentMetadata.primaryColumn.propertyName]);\r\n            if (!ids || !ids.length)\r\n                return Promise.resolve(); // todo: need to set zero to relationCount column in this case?\r\n\r\n            return queryBuilder\r\n                .select(`${parentMetadata.name + \".\" + parentMetadata.primaryColumn.propertyName} AS id`)\r\n                .addSelect(`COUNT(${ this.escapeAlias(relation.propertyName) + \".\" + this.escapeColumn(relation.inverseEntityMetadata.primaryColumn.fullName) }) as cnt`)\r\n                .from(parentMetadata.target, parentMetadata.name)\r\n                .leftJoin(parentMetadata.name + \".\" + relation.propertyName, relation.propertyName, relationCountMeta.condition)\r\n                .setParameters(this.parameters)\r\n                .where(`${parentMetadata.name + \".\" + parentMetadata.primaryColumn.propertyName} IN (:relationCountIds)`, {relationCountIds: ids})\r\n                .groupBy(parentMetadata.name + \".\" + parentMetadata.primaryColumn.propertyName)\r\n                .getRawMany()\r\n                .then((results: { id: any, cnt: any }[]) => {\r\n                    relationCountMeta.entities.forEach(entityWithMetadata => {\r\n                        const entityId = entityWithMetadata.entity[entityWithMetadata.metadata.primaryColumn.propertyName];\r\n                        const entityResult = results.find(result => {\r\n                            return entityId === this.connection.driver.prepareHydratedValue(result.id, entityWithMetadata.metadata.primaryColumn);\r\n                        });\r\n                        if (entityResult) {\r\n\r\n                            if (relationCountMeta.mapToProperty) {\r\n                                const [parentName, propertyName] = (relationCountMeta.mapToProperty as string).split(\".\");\r\n                                // todo: right now mapping is working only on the currently countRelation class, but\r\n                                // different properties are working. make different classes to work too\r\n                                entityWithMetadata.entity[propertyName] = parseInt(entityResult.cnt);\r\n\r\n                            } else if (relation.countField) {\r\n                                entityWithMetadata.entity[relation.countField] = parseInt(entityResult.cnt);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n        });\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    protected rawResultsToEntities(results: any[]) {\r\n        const transformer = new RawSqlResultsToEntityTransformer(this.connection.driver, this.aliasMap, this.extractJoinMappings(), this.relationCountMetas, this.enableRelationIdValues);\r\n        return transformer.transform(results);\r\n    }\r\n\r\n    protected buildEscapedEntityColumnSelects(alias: Alias): string[] {\r\n        const hasMainAlias = this.selects.some(select => select === alias.name);\r\n\r\n        const columns: ColumnMetadata[] = hasMainAlias ? alias.metadata.columns : alias.metadata.columns.filter(column => {\r\n            return this.selects.some(select => select === alias.name + \".\" + column.propertyName);\r\n        });\r\n\r\n        return columns.map(column => {\r\n            return this.escapeAlias(alias.name) + \".\" + this.escapeColumn(column.fullName) +\r\n                \" AS \" + this.escapeAlias(alias.name + \"_\" + column.fullName);\r\n        });\r\n    };\r\n\r\n    protected findEntityColumnSelects(alias: Alias): string[] {\r\n        const mainAlias = this.selects.find(select => select === alias.name);\r\n        if (mainAlias)\r\n            return [mainAlias];\r\n\r\n        return this.selects.filter(select => {\r\n            return alias.metadata.columns.some(column => select === alias.name + \".\" + column.propertyName);\r\n        });\r\n    };\r\n\r\n    protected createSelectExpression() {\r\n        // todo throw exception if selects or from is missing\r\n\r\n        let alias: string = \"\", tableName: string;\r\n        const allSelects: string[] = [];\r\n        const excludedSelects: string[] = [];\r\n\r\n        if (this.fromTableName) {\r\n            tableName = this.fromTableName;\r\n            alias = this.fromTableAlias;\r\n\r\n        } else if (this.fromEntity) {\r\n            if (!this.fromEntity.alias.metadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.fromEntity.alias.name);\r\n            tableName = this.fromEntity.alias.metadata.table.name;\r\n            alias = this.fromEntity.alias.name;\r\n\r\n            allSelects.push(...this.buildEscapedEntityColumnSelects(this.aliasMap.mainAlias));\r\n            excludedSelects.push(...this.findEntityColumnSelects(this.aliasMap.mainAlias));\r\n        } else {\r\n            throw new Error(\"No from given\");\r\n        }\r\n\r\n        // add selects from joins\r\n        this.joins.forEach(join => {\r\n            if (join.alias.metadata) {\r\n                allSelects.push(...this.buildEscapedEntityColumnSelects(join.alias));\r\n                excludedSelects.push(...this.findEntityColumnSelects(join.alias));\r\n            } else {\r\n                const hasMainAlias = this.selects.some(select => select === join.alias.name);\r\n                if (hasMainAlias) {\r\n                    allSelects.push(this.escapeAlias(join.alias.name) + \".*\");\r\n                    excludedSelects.push(join.alias.name);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!this.ignoreParentTablesJoins && !this.fromTableName) {\r\n            if (this.aliasMap.mainAlias.metadata.parentEntityMetadata && this.aliasMap.mainAlias.metadata.parentIdColumns) {\r\n                const alias = \"parentIdColumn_\" + this.escapeAlias(this.aliasMap.mainAlias.metadata.parentEntityMetadata.table.name);\r\n                this.aliasMap.mainAlias.metadata.parentEntityMetadata.columns.forEach(column => {\r\n                    // TODO implement partial select\r\n                    allSelects.push(alias + \".\" + this.escapeColumn(column.fullName) + \" AS \" + alias + \"_\" + this.escapeAlias(column.fullName));\r\n                });\r\n            }\r\n        }\r\n\r\n        // add selects from relation id joins\r\n        this.joinRelationIds.forEach(join => {\r\n            // const joinMetadata = this.aliasMap.getEntityMetadataByAlias(join.alias);\r\n\r\n            const parentAlias = join.alias.parentAliasName;\r\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\r\n            if (!foundAlias)\r\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\r\n\r\n            if (!foundAlias.metadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\r\n            const relation = foundAlias.metadata.findRelationWithPropertyName(join.alias.parentPropertyName);\r\n            const junctionMetadata = relation.junctionEntityMetadata;\r\n            // const junctionTable = junctionMetadata.table.name;\r\n\r\n            junctionMetadata.columns.forEach(column => {\r\n                allSelects.push(this.escapeAlias(join.alias.name) + \".\" + this.escapeColumn(column.fullName) + \" AS \" + this.escapeAlias(join.alias.name + \"_\" + column.fullName));\r\n            });\r\n        });\r\n\r\n        /*if (this.enableRelationIdValues) {\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(this.aliasMap.mainAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.aliasMap.mainAlias.name);\r\n\r\n            const metadata = this.connection.entityMetadatas.findByTarget(this.aliasMap.mainAlias.target);\r\n            metadata.manyToManyRelations.forEach(relation => {\r\n\r\n                const junctionMetadata = relation.junctionEntityMetadata;\r\n                junctionMetadata.columns.forEach(column => {\r\n                    const select = this.escapeAlias(this.aliasMap.mainAlias.name + \"_\" + junctionMetadata.table.name + \"_ids\") + \".\" +\r\n                        this.escapeColumn(column.name) + \" AS \" +\r\n                        this.escapeAlias(this.aliasMap.mainAlias.name + \"_\" + relation.name + \"_ids_\" + column.name);\r\n                    allSelects.push(select);\r\n                });\r\n            });\r\n        }*/\r\n\r\n        // add all other selects\r\n        this.selects.filter(select => excludedSelects.indexOf(select) === -1)\r\n            .forEach(select => allSelects.push(this.replacePropertyNames(select)));\r\n\r\n        // if still selection is empty, then simply set it to all (*)\r\n        if (allSelects.length === 0)\r\n            allSelects.push(\"*\");\r\n\r\n        let lock: string = \"\";\r\n        if (this.connection.driver instanceof SqlServerDriver) {\r\n            switch (this.lockMode) {\r\n                case \"pessimistic_read\":\r\n                    lock = \" WITH (HOLDLOCK, ROWLOCK)\";\r\n                    break;\r\n                case \"pessimistic_write\":\r\n                    lock = \" WITH (UPDLOCK, ROWLOCK)\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // create a selection query\r\n        switch (this.type) {\r\n            case \"select\":\r\n                return \"SELECT \" + allSelects.join(\", \") + \" FROM \" + this.escapeTable(tableName) + \" \" + this.escapeAlias(alias) + lock;\r\n            case \"delete\":\r\n                return \"DELETE FROM \" + this.escapeTable(tableName);\r\n                // return \"DELETE \" + (alias ? this.escapeAlias(alias) : \"\") + \" FROM \" + this.escapeTable(tableName) + \" \" + (alias ? this.escapeAlias(alias) : \"\"); // TODO: only mysql supports aliasing, so what to do with aliases in DELETE queries? right now aliases are used however we are relaying that they will always match a table names\r\n            case \"update\":\r\n                const updateSet = Object.keys(this.updateQuerySet).map(key => key + \"=:updateQuerySet_\" + key);\r\n                const params = Object.keys(this.updateQuerySet).reduce((object, key) => {\r\n                    // todo: map propertyNames to names ?\r\n                    (<any> object)[\"updateQuerySet_\" + key] = (<any> this.updateQuerySet)[key];\r\n                    return object;\r\n                }, {});\r\n                this.setParameters(params);\r\n                return \"UPDATE \" + tableName + \" \" + (alias ? this.escapeAlias(alias) : \"\") + \" SET \" + updateSet;\r\n        }\r\n\r\n        throw new Error(\"No query builder type is specified.\");\r\n    }\r\n\r\n    protected createHavingExpression() {\r\n        if (!this.havings || !this.havings.length) return \"\";\r\n        const conditions = this.havings.map((having, index) => {\r\n                switch (having.type) {\r\n                    case \"and\":\r\n                        return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(having.condition);\r\n                    case \"or\":\r\n                        return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(having.condition);\r\n                    default:\r\n                        return this.replacePropertyNames(having.condition);\r\n                }\r\n            }).join(\" \");\r\n\r\n        if (!conditions.length) return \"\";\r\n        return \" HAVING \" + conditions;\r\n    }\r\n\r\n    protected createWhereExpression() {\r\n\r\n        const conditions = this.wheres.map((where, index) => {\r\n            switch (where.type) {\r\n                case \"and\":\r\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(where.condition);\r\n                case \"or\":\r\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(where.condition);\r\n                default:\r\n                    return this.replacePropertyNames(where.condition);\r\n            }\r\n        }).join(\" \");\r\n\r\n        if (!this.fromTableName) {\r\n            const mainMetadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n            if (mainMetadata.hasDiscriminatorColumn)\r\n                return ` WHERE ${ conditions.length ? \"(\" + conditions + \") AND\" : \"\" } ${mainMetadata.discriminatorColumn.fullName}=:discriminatorColumnValue`;\r\n        }\r\n\r\n        if (!conditions.length) return \"\";\r\n        return \" WHERE \" + conditions;\r\n    }\r\n\r\n    /**\r\n     * Replaces all entity's propertyName to name in the given statement.\r\n     */\r\n    private replacePropertyNames(statement: string) {\r\n        this.aliasMap.aliases.forEach(alias => {\r\n            if (!alias.metadata) return;\r\n            alias.metadata.embeddeds.forEach(embedded => {\r\n                embedded.columns.forEach(column => {\r\n                    const expression = alias.name + \"\\\\.\" + embedded.propertyName + \"\\\\.\" + column.propertyName + \"([ =]|.{0}$)\";\r\n                    statement = statement.replace(new RegExp(expression, \"gm\"), this.escapeAlias(alias.name) + \".\" + this.escapeColumn(column.fullName) + \"$1\");\r\n                });\r\n                // todo: what about embedded relations here?\r\n            });\r\n            alias.metadata.columns.filter(column => !column.isInEmbedded).forEach(column => {\r\n                const expression = alias.name + \"\\\\.\" + column.propertyName + \"([ =]|.{0}$)\";\r\n                statement = statement.replace(new RegExp(expression, \"gm\"), this.escapeAlias(alias.name) + \".\" + this.escapeColumn(column.fullName) + \"$1\");\r\n            });\r\n            alias.metadata.relationsWithJoinColumns/*.filter(relation => !relation.isInEmbedded)*/.forEach(relation => {\r\n                const expression = alias.name + \"\\\\.\" + relation.propertyName + \"([ =]|.{0}$)\";\r\n                statement = statement.replace(new RegExp(expression, \"gm\"), this.escapeAlias(alias.name) + \".\" + this.escapeColumn(relation.name) + \"$1\");\r\n            });\r\n        });\r\n        return statement;\r\n    }\r\n\r\n    protected createJoinRelationIdsExpression() {\r\n        return this.joinRelationIds.map(join => {\r\n            const parentAlias = join.alias.parentAliasName;\r\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\r\n            if (!foundAlias)\r\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\r\n\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(foundAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\r\n\r\n            const relation = parentMetadata.findRelationWithPropertyName(join.alias.parentPropertyName);\r\n            const junctionMetadata = relation.junctionEntityMetadata;\r\n            const junctionTable = junctionMetadata.table.name;\r\n            const junctionAlias = join.alias.name;\r\n            const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable; // not sure if this is correct\r\n            const joinTableColumn = joinTable.referencedColumn.fullName; // not sure if this is correct\r\n\r\n            let condition1 = \"\";\r\n            if (relation.isOwning) {\r\n                condition1 = this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[0].fullName) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(joinTableColumn);\r\n                // condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[1].name;\r\n            } else {\r\n                condition1 = this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[1].fullName) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(joinTableColumn);\r\n                // condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[0].name;\r\n            }\r\n\r\n            return \" \" + join.type + \" JOIN \" + junctionTable + \" \" + this.escapeAlias(junctionAlias) + \" ON \" + condition1;\r\n            // \" \" + joinType + \" JOIN \" + joinTableName + \" \" + joinAlias + \" \" + join.conditionType + \" \" + condition2 + appendedCondition;\r\n            // return \" \" + join.type + \" JOIN \" + joinTableName + \" \" + join.alias.name + \" \" + (join.condition ? (join.conditionType + \" \" + join.condition) : \"\");\r\n        });\r\n    }\r\n\r\n    protected createJoinExpression() {\r\n        let joins = this.joins.map(join => {\r\n            const joinType = join.type; // === \"INNER\" ? \"INNER\" : \"LEFT\";\r\n            let joinTableName: string = join.tableName;\r\n            if (!joinTableName) {\r\n\r\n                if (!join.alias.metadata)\r\n                    throw new Error(\"Cannot get entity metadata for the given alias \" + join.alias.name);\r\n\r\n                joinTableName = join.alias.metadata.table.name;\r\n            }\r\n\r\n            const parentAlias = join.alias.parentAliasName;\r\n            if (!parentAlias) {\r\n                return \" \" + joinType + \" JOIN \" + this.escapeTable(joinTableName) + \" \" + this.escapeAlias(join.alias.name) + \" \" + (join.condition ? ( \"ON \" + this.replacePropertyNames(join.condition) ) : \"\");\r\n            }\r\n\r\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\r\n            if (!foundAlias)\r\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\r\n\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(foundAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\r\n\r\n            const relation = parentMetadata.findRelationWithPropertyName(join.alias.parentPropertyName);\r\n            const junctionMetadata = relation.junctionEntityMetadata;\r\n            const appendedCondition = join.condition ? \" AND \" + this.replacePropertyNames(join.condition) : \"\";\r\n\r\n            if (relation.isManyToMany) {\r\n                const junctionTable = junctionMetadata.table.name;\r\n                const junctionAlias = join.alias.parentAliasName + \"_\" + join.alias.name;\r\n                const joinAlias = join.alias.name;\r\n                const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable;\r\n                const joinTableColumn = relation.isOwning ? joinTable.referencedColumn.fullName : joinTable.inverseReferencedColumn.fullName;\r\n                const inverseJoinColumnName = relation.isOwning ? joinTable.inverseReferencedColumn.fullName : joinTable.referencedColumn.fullName;\r\n\r\n                let condition1 = \"\", condition2 = \"\";\r\n                if (relation.isOwning) {\r\n                    condition1 = this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[0].fullName) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(joinTableColumn);\r\n                    condition2 = this.escapeAlias(joinAlias) + \".\" + this.escapeColumn(inverseJoinColumnName) + \"=\" + this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[1].fullName);\r\n                } else {\r\n                    condition1 = this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[1].fullName) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(joinTableColumn);\r\n                    condition2 = this.escapeAlias(joinAlias) + \".\" + this.escapeColumn(inverseJoinColumnName) + \"=\" + this.escapeAlias(junctionAlias) + \".\" + this.escapeColumn(junctionMetadata.columns[0].fullName);\r\n                }\r\n\r\n                return \" \" + joinType + \" JOIN \" + this.escapeTable(junctionTable) + \" \" + this.escapeAlias(junctionAlias) + \" ON \" + condition1 +\r\n                       \" \" + joinType + \" JOIN \" + this.escapeTable(joinTableName) + \" \" + this.escapeAlias(joinAlias) + \" ON \" + condition2 + appendedCondition;\r\n\r\n            } else if (relation.isManyToOne || (relation.isOneToOne && relation.isOwning)) {\r\n                const joinTableColumn = relation.joinColumn.referencedColumn.fullName;\r\n                const condition = this.escapeAlias(join.alias.name) + \".\" + this.escapeColumn(joinTableColumn) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(relation.name);\r\n                return \" \" + joinType + \" JOIN \" + this.escapeTable(joinTableName) + \" \" + this.escapeAlias(join.alias.name) + \" ON \" + condition + appendedCondition;\r\n\r\n            } else if (relation.isOneToMany || (relation.isOneToOne && !relation.isOwning)) {\r\n                const joinTableColumn = relation.inverseRelation.joinColumn.referencedColumn.fullName;\r\n                const condition = this.escapeAlias(join.alias.name) + \".\" + this.escapeColumn(relation.inverseRelation.name) + \"=\" + this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(joinTableColumn);\r\n                return \" \" + joinType + \" JOIN \" + this.escapeTable(joinTableName) + \" \" + this.escapeAlias(join.alias.name) + \" ON \" + condition + appendedCondition;\r\n\r\n            } else {\r\n                throw new Error(\"Unexpected relation type\"); // this should not be possible\r\n            }\r\n        }).join(\" \");\r\n\r\n        if (!this.ignoreParentTablesJoins && !this.fromTableName) {\r\n            const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n            if (metadata.parentEntityMetadata && metadata.parentIdColumns) {\r\n                const alias = this.escapeAlias(\"parentIdColumn_\" + metadata.parentEntityMetadata.table.name);\r\n                joins += \" JOIN \" + this.escapeTable(metadata.parentEntityMetadata.table.name)\r\n                    + \" \" + alias + \" ON \";\r\n                joins += metadata.parentIdColumns.map(parentIdColumn => {\r\n                    return this.aliasMap.mainAlias.name + \".\" + parentIdColumn.fullName + \"=\" + alias + \".\" + parentIdColumn.propertyName;\r\n                });\r\n            }\r\n        }\r\n\r\n        /*if (this.enableRelationIdValues) {\r\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(this.aliasMap.mainAlias);\r\n            if (!parentMetadata)\r\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.aliasMap.mainAlias.name);\r\n\r\n            const metadata = this.connection.entityMetadatas.findByTarget(this.aliasMap.mainAlias.target);\r\n            joins += metadata.manyToManyRelations.map(relation => {\r\n\r\n                const junctionMetadata = relation.junctionEntityMetadata;\r\n                const junctionTable = junctionMetadata.table.name;\r\n                const junctionAlias = this.aliasMap.mainAlias.name + \"_\" + junctionTable + \"_ids\";\r\n                const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable; // not sure if this is correct\r\n                const joinTableColumn = joinTable.referencedColumn.name; // not sure if this is correct\r\n\r\n                let condition1 = \"\";\r\n                if (relation.isOwning) {\r\n                    condition1 = this.escapeAlias(junctionAlias) + \".\" +\r\n                        this.escapeColumn(junctionMetadata.columns[0].name) + \"=\" +\r\n                        this.escapeAlias(this.aliasMap.mainAlias.name) + \".\" +\r\n                        this.escapeColumn(joinTableColumn);\r\n                } else {\r\n                    condition1 = this.escapeAlias(junctionAlias) + \".\" +\r\n                        this.escapeColumn(junctionMetadata.columns[1].name) + \"=\" +\r\n                        this.escapeAlias(this.aliasMap.mainAlias.name) + \".\" +\r\n                        this.escapeColumn(joinTableColumn);\r\n                }\r\n\r\n                return \" LEFT JOIN \" + junctionTable + \" \" + this.escapeAlias(junctionAlias) + \" ON \" + condition1;\r\n            }).join(\" \");\r\n        }*/\r\n\r\n        return joins;\r\n    }\r\n\r\n    protected createGroupByExpression() {\r\n        if (!this.groupBys || !this.groupBys.length) return \"\";\r\n        return \" GROUP BY \" + this.replacePropertyNames(this.groupBys.join(\", \"));\r\n    }\r\n\r\n    protected createOrderByCombinedWithSelectExpression(parentAlias: string) {\r\n\r\n        // if table has a default order then apply it\r\n        let orderBys = this.orderBys;\r\n        if (!Object.keys(orderBys).length && !this.fromTableName) {\r\n            const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n            orderBys = metadata.table.orderBy || {};\r\n        }\r\n\r\n        const selectString = Object.keys(orderBys)\r\n            .map(columnName => {\r\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\r\n                return this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(alias + \"_\" + column + embeddedProperties.join(\"_\"));\r\n            })\r\n            .join(\", \");\r\n\r\n        const orderByString = Object.keys(orderBys)\r\n            .map(columnName => {\r\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\r\n                return this.escapeAlias(parentAlias) + \".\" + this.escapeColumn(alias + \"_\" + column + embeddedProperties.join(\"_\")) + \" \" + this.orderBys[columnName];\r\n            })\r\n            .join(\", \");\r\n\r\n        return [selectString, orderByString];\r\n    }\r\n\r\n    protected createOrderByExpression() {\r\n\r\n        let orderBys = this.orderBys;\r\n\r\n        // if table has a default order then apply it\r\n        if (!Object.keys(orderBys).length && !this.fromTableName) {\r\n            const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n            orderBys = metadata.table.orderBy || {};\r\n        }\r\n\r\n        // if user specified a custom order then apply it\r\n        if (Object.keys(orderBys).length > 0)\r\n            return \" ORDER BY \" + Object.keys(orderBys)\r\n                    .map(columnName => {\r\n                        return this.replacePropertyNames(columnName) + \" \" + this.orderBys[columnName];\r\n                    })\r\n                    .join(\", \");\r\n\r\n        return \"\";\r\n    }\r\n\r\n    protected createLimitExpression(): string {\r\n        if (!this.limit) return \"\";\r\n        return \" LIMIT \" + this.limit;\r\n    }\r\n\r\n    protected createOffsetExpression(): string {\r\n        if (!this.offset) return \"\";\r\n        return \" OFFSET \" + this.offset;\r\n    }\r\n\r\n    protected createLockExpression(): string {\r\n        switch (this.lockMode) {\r\n            case \"pessimistic_read\":\r\n                if (this.connection.driver instanceof MysqlDriver) {\r\n                    return \" LOCK IN SHARE MODE\";\r\n\r\n                } else if (this.connection.driver instanceof PostgresDriver) {\r\n                    return \" FOR SHARE\";\r\n\r\n                } else if (this.connection.driver instanceof SqlServerDriver) {\r\n                    return \"\";\r\n\r\n                } else {\r\n                    throw new LockNotSupportedOnGivenDriverError();\r\n                }\r\n            case \"pessimistic_write\":\r\n                if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof PostgresDriver) {\r\n                    return \" FOR UPDATE\";\r\n\r\n                } else if (this.connection.driver instanceof SqlServerDriver) {\r\n                    return \"\";\r\n\r\n                } else {\r\n                    throw new LockNotSupportedOnGivenDriverError();\r\n                }\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    private extractJoinMappings(): JoinMapping[] {\r\n        const mappings: JoinMapping[] = [];\r\n        this.joins\r\n            .filter(join => !!join.mapToProperty)\r\n            .forEach(join => {\r\n                const [parentName, propertyName] = (join.mapToProperty as string).split(\".\");\r\n                mappings.push({\r\n                    type: \"join\",\r\n                    alias: join.alias,\r\n                    parentName: parentName,\r\n                    propertyName: propertyName,\r\n                    isMany: join.isMappingMany\r\n                } as JoinMapping);\r\n            });\r\n\r\n        this.joinRelationIds\r\n            .filter(join => !!join.mapToProperty)\r\n            .forEach(join => {\r\n                const [parentName, propertyName] = (join.mapToProperty as string).split(\".\");\r\n                mappings.push({\r\n                    type: \"relationId\",\r\n                    alias: join.alias,\r\n                    parentName: parentName,\r\n                    propertyName: propertyName,\r\n                    isMany: false\r\n                });\r\n            });\r\n\r\n        return mappings;\r\n    }\r\n\r\n    protected join(joinType: \"INNER\"|\"LEFT\", property: string, alias: string, condition?: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): this;\r\n    protected join(joinType: \"INNER\"|\"LEFT\", entity: Function, alias: string, condition?: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): this;\r\n    protected join(joinType: \"INNER\"|\"LEFT\", entityOrProperty: Function|string, alias: string, condition: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): this;\r\n    protected join(joinType: \"INNER\"|\"LEFT\", entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions, mapToProperty?: string, isMappingMany: boolean = false): this {\r\n\r\n        // todo: entityOrProperty can be a table name. implement if its a table\r\n        // todo: entityOrProperty can be target name. implement proper behaviour if it is.\r\n\r\n        let tableName = \"\";\r\n        const aliasObj = new Alias(alias);\r\n        this.aliasMap.addAlias(aliasObj);\r\n        if (entityOrProperty instanceof Function) {\r\n            aliasObj.metadata = this.connection.getMetadata(entityOrProperty);\r\n\r\n        } else if (this.isPropertyAlias(entityOrProperty)) {\r\n            [aliasObj.parentAliasName, aliasObj.parentPropertyName] = entityOrProperty.split(\".\");\r\n\r\n            const parentAlias = this.aliasMap.findAliasByName(aliasObj.parentAliasName);\r\n            // todo: throw exception if parentAlias not found\r\n            // todo: throw exception if parentAlias.metadata not found\r\n            // todo: throw exception if parentAlias not found\r\n            // todo: throw exception if relation not found?\r\n            const relation = parentAlias!.metadata.findRelationWithPropertyName(aliasObj.parentPropertyName);\r\n            aliasObj.metadata = relation.inverseEntityMetadata;\r\n\r\n        } else if (typeof entityOrProperty === \"string\") {\r\n\r\n            // check if we have entity with such table name, and use its metadata if found\r\n            const metadata = this.connection.entityMetadatas.find(metadata => metadata.table.name === entityOrProperty);\r\n            if (metadata) {\r\n                aliasObj.metadata = metadata;\r\n            } else {\r\n                tableName = entityOrProperty;\r\n            }\r\n\r\n            if (!mapToProperty) // todo: comment why its needed\r\n                mapToProperty = entityOrProperty;\r\n        }\r\n\r\n        const join: Join = {\r\n            type: joinType,\r\n            alias: aliasObj,\r\n            tableName: tableName,\r\n            condition: condition,\r\n            options: options,\r\n            mapToProperty: mapToProperty,\r\n            isMappingMany: isMappingMany\r\n        };\r\n        this.joins.push(join);\r\n        return this;\r\n    }\r\n\r\n    protected joinRelationId(joinType: \"LEFT\"|\"INNER\", mapToProperty: string|undefined, property: string, condition?: string): this {\r\n\r\n        if (!this.isPropertyAlias(property))\r\n            throw new Error(\"Only entity relations are allowed in the leftJoinRelationId operation\"); // todo: also check if that relation really has entityId\r\n\r\n        const [parentAliasName, parentPropertyName] = property.split(\".\");\r\n        const alias = parentAliasName + \"_\" + parentPropertyName + \"_relation_id\";\r\n\r\n        const aliasObj = new Alias(alias);\r\n        this.aliasMap.addAlias(aliasObj);\r\n        aliasObj.parentAliasName = parentAliasName;\r\n        aliasObj.parentPropertyName = parentPropertyName;\r\n\r\n        this.joinRelationIds.push({\r\n            type: joinType,\r\n            mapToProperty: mapToProperty,\r\n            alias: aliasObj,\r\n            condition: condition\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    private isPropertyAlias(str: any): str is string {\r\n        if (!(typeof str === \"string\"))\r\n            return false;\r\n        if (str.indexOf(\".\") === -1)\r\n            return false;\r\n\r\n        const aliasName = str.split(\".\")[0];\r\n        const propertyName = str.split(\".\")[1];\r\n\r\n        if (!aliasName || !propertyName)\r\n            return false;\r\n\r\n        const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\r\n        const propertyNameRegexp = aliasNameRegexp;\r\n        if (!aliasNameRegexp.test(aliasName) || !propertyNameRegexp.test(propertyName))\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\r\n     */\r\n    protected createWhereIdsExpression(ids: any[]): [string, ObjectLiteral] {\r\n        const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\r\n\r\n        // create shortcuts for better readability\r\n        const escapeAlias = (alias: string) => this.escapeAlias(alias);\r\n        const escapeColumn = (column: string) => this.escapeColumn(column);\r\n\r\n        const alias = this.aliasMap.mainAlias.name;\r\n        const parameters: ObjectLiteral = {};\r\n        const whereStrings = ids.map((id, index) => {\r\n            const whereSubStrings: string[] = [];\r\n            if (metadata.hasMultiplePrimaryKeys) {\r\n                metadata.primaryColumns.forEach((primaryColumn, secondIndex) => {\r\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(primaryColumn.fullName) + \"=:id_\" + index + \"_\" + secondIndex);\r\n                    parameters[\"id_\" + index + \"_\" + secondIndex] = id[primaryColumn.fullName];\r\n                });\r\n                metadata.parentIdColumns.forEach((primaryColumn, secondIndex) => {\r\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(id[primaryColumn.fullName]) + \"=:parentId_\" + index + \"_\" + secondIndex);\r\n                    parameters[\"parentId_\" + index + \"_\" + secondIndex] = id[primaryColumn.propertyName];\r\n                });\r\n            } else {\r\n                if (metadata.primaryColumns.length > 0) {\r\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(metadata.firstPrimaryColumn.fullName) + \"=:id_\" + index);\r\n                    parameters[\"id_\" + index] = id;\r\n\r\n                } else if (metadata.parentIdColumns.length > 0) {\r\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(metadata.parentIdColumns[0].fullName) + \"=:parentId_\" + index);\r\n                    parameters[\"parentId_\" + index] = id;\r\n                }\r\n            }\r\n            return whereSubStrings.join(\" AND \");\r\n        });\r\n\r\n        const whereString = whereStrings.length > 1 ? \"(\" + whereStrings.join(\" OR \") + \")\" : whereStrings[0];\r\n        return [whereString, parameters];\r\n    }\r\n\r\n    protected async getQueryRunner(): Promise<QueryRunner> {\r\n\r\n        if (this.queryRunnerProvider instanceof QueryRunnerProvider) {\r\n            return this.queryRunnerProvider.provide();\r\n\r\n        } else { // means its empty\r\n            return this.connection.driver.createQueryRunner();\r\n        }\r\n    }\r\n\r\n    protected hasOwnQueryRunner(): boolean {\r\n        return !this.queryRunnerProvider;\r\n    }\r\n\r\n}\r\n","import {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * This class wraps entities and provides functions there to lazily load its relations.\r\n */\r\nexport class LazyRelationsWrapper {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    wrap(object: Object, relation: RelationMetadata) {\r\n        const connection = this.connection;\r\n        const index = \"__\" + relation.propertyName + \"__\";\r\n        const promiseIndex = \"__promise__\" + relation.propertyName + \"__\";\r\n        const resolveIndex = \"__has__\" + relation.propertyName + \"__\";\r\n\r\n        Object.defineProperty(object, relation.propertyName, {\r\n            get: function() {\r\n                if (this[resolveIndex] === true)\r\n                    return Promise.resolve(this[index]);\r\n                if (this[promiseIndex])\r\n                    return this[promiseIndex];\r\n\r\n                // create shortcuts for better readability\r\n                const escapeAlias = (alias: string) => connection.driver.escapeAliasName(alias);\r\n                const escapeColumn = (column: string) => connection.driver.escapeColumnName(column);\r\n\r\n                const qb = new QueryBuilder(connection);\r\n                if (relation.isManyToMany) {\r\n\r\n                    if (relation.isManyToManyOwner) {\r\n                        qb.select(relation.propertyName)\r\n                            .from(relation.type, relation.propertyName)\r\n                            .innerJoin(relation.junctionEntityMetadata.table.name, relation.junctionEntityMetadata.table.name,\r\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.joinTable.joinColumnName)}=:${relation.propertyName}Id AND ` +\r\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.joinTable.inverseJoinColumnName)}=${escapeAlias(relation.propertyName)}.${escapeColumn(relation.joinTable.referencedColumn.propertyName)}`)\r\n                            .setParameter(relation.propertyName + \"Id\", this[relation.referencedColumn.propertyName]);\r\n\r\n                    } else { // non-owner\r\n                        qb.select(relation.propertyName)\r\n                            .from(relation.type, relation.propertyName)\r\n                            .innerJoin(relation.junctionEntityMetadata.table.name, relation.junctionEntityMetadata.table.name,\r\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.inverseRelation.joinTable.inverseJoinColumnName)}=:${relation.propertyName}Id AND ` +\r\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.inverseRelation.joinTable.joinColumnName)}=${escapeAlias(relation.propertyName)}.${escapeColumn(relation.inverseRelation.joinTable.referencedColumn.propertyName)}`)\r\n                            .setParameter(relation.propertyName + \"Id\", this[relation.inverseRelation.referencedColumn.propertyName]);\r\n                    }\r\n\r\n                    this[promiseIndex] = qb.getMany().then(results => {\r\n                        this[index] = results;\r\n                        this[resolveIndex] = true;\r\n                        delete this[promiseIndex];\r\n                        return this[index];\r\n                    }).catch(err => {\r\n                        throw err;\r\n                    });\r\n                    return this[promiseIndex];\r\n\r\n                } else if (relation.isOneToMany) {\r\n\r\n                    qb.select(relation.propertyName)\r\n                        .from(relation.inverseRelation.entityMetadata.target, relation.propertyName)\r\n                        .innerJoin(`${relation.propertyName}.${relation.inverseRelation.propertyName}`, relation.entityMetadata.targetName)\r\n                        .where(relation.entityMetadata.targetName + \".\" + relation.inverseEntityMetadata.firstPrimaryColumn.propertyName + \"=:id\", { id: relation.entityMetadata.getEntityIdMixedMap(this) });\r\n\r\n                    this[promiseIndex] = qb.getMany().then(results => {\r\n                        this[index] = results;\r\n                        this[resolveIndex] = true;\r\n                        delete this[promiseIndex];\r\n                        return this[index];\r\n\r\n                    }).catch(err => {\r\n                        throw err;\r\n                    });\r\n                    return this[promiseIndex];\r\n\r\n                } else {\r\n\r\n                    if (relation.hasInverseSide) {\r\n                        qb.select(relation.propertyName)\r\n                            .from(relation.inverseRelation.entityMetadata.target, relation.propertyName)\r\n                            .innerJoin(`${relation.propertyName}.${relation.inverseRelation.propertyName}`, relation.entityMetadata.targetName)\r\n                            .where(relation.entityMetadata.targetName + \".\" + relation.joinColumn.referencedColumn.fullName + \"=:id\", { id: relation.entityMetadata.getEntityIdMixedMap(this) }); // is referenced column usage is correct here?\r\n\r\n                    } else {\r\n                        // (ow) post.category<=>category.post\r\n                        // loaded: category from post\r\n                        // example: SELECT category.id AS category_id, category.name AS category_name FROM category category\r\n                        //              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\r\n                        qb.select(relation.propertyName) // category\r\n                            .from(relation.type, relation.propertyName) // Category, category\r\n                            .innerJoin(relation.entityMetadata.target as Function, relation.entityMetadata.name,\r\n                                `${escapeAlias(relation.entityMetadata.name)}.${escapeColumn(relation.propertyName)}=${escapeAlias(relation.propertyName)}.${escapeColumn(relation.referencedColumn.propertyName)}`)\r\n                            .where(relation.entityMetadata.name + \".\" + relation.joinColumn.referencedColumn.fullName + \"=:id\", { id: relation.entityMetadata.getEntityIdMixedMap(this) }); // is referenced column usage is correct here?\r\n                    }\r\n\r\n                    this[promiseIndex] = qb.getOne().then(result => {\r\n                        this[index] = result;\r\n                        this[resolveIndex] = true;\r\n                        delete this[promiseIndex];\r\n                        return this[index];\r\n\r\n                    }).catch(err => {\r\n                        throw err;\r\n                    });\r\n                    return this[promiseIndex];\r\n                }\r\n            },\r\n            set: function(promise: Promise<any>) {\r\n                if (promise instanceof Promise) {\r\n                    promise.then(result => {\r\n                        this[index] = result;\r\n                        this[resolveIndex] = true;\r\n                    });\r\n                } else {\r\n                    this[index] = promise;\r\n                    this[resolveIndex] = true;\r\n                }\r\n            },\r\n            configurable: true\r\n        });\r\n    }\r\n\r\n}","import {TableMetadata} from \"./TableMetadata\";\r\nimport {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {RelationMetadata, PropertyTypeInFunction} from \"./RelationMetadata\";\r\nimport {IndexMetadata} from \"./IndexMetadata\";\r\nimport {RelationTypes} from \"./types/RelationTypes\";\r\nimport {ForeignKeyMetadata} from \"./ForeignKeyMetadata\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {EntityMetadataArgs} from \"../metadata-args/EntityMetadataArgs\";\r\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\r\n\r\n// todo: IDEA. store all entity metadata in the EntityMetadata too? (this will open more features for metadata objects + no need to access connection in lot of places)\r\n\r\n/**\r\n * Contains all entity metadata.\r\n */\r\nexport class EntityMetadata {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * If entity's table is a closure-typed table, then this entity will have a closure junction table metadata.\r\n     */\r\n    closureJunctionTable: EntityMetadata;\r\n\r\n    /**\r\n     * Parent's entity metadata. Used in inheritance patterns.\r\n     */\r\n    parentEntityMetadata: EntityMetadata;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used to generate and normalize names.\r\n     */\r\n    readonly namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Target class to which this entity metadata is bind.\r\n     * Note, that when using table inheritance patterns target can be different rather then table's target.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Indicates if this entity metadata of a junction table, or not.\r\n     */\r\n    readonly junction: boolean;\r\n\r\n    /**\r\n     * Entity's table metadata.\r\n     */\r\n    readonly table: TableMetadata;\r\n\r\n    /**\r\n     * Entity's relation metadatas.\r\n     */\r\n    readonly relations: RelationMetadata[];\r\n\r\n    /**\r\n     * Entity's index metadatas.\r\n     */\r\n    readonly indices: IndexMetadata[];\r\n\r\n    /**\r\n     * Entity's foreign key metadatas.\r\n     */\r\n    readonly foreignKeys: ForeignKeyMetadata[] = [];\r\n\r\n    /**\r\n     * Entity's embedded metadatas.\r\n     */\r\n    readonly embeddeds: EmbeddedMetadata[];\r\n\r\n    /**\r\n     * If this entity metadata's table using one of the inheritance patterns,\r\n     * then this will contain what pattern it uses.\r\n     */\r\n    readonly inheritanceType?: \"single-table\"|\"class-table\";\r\n\r\n    /**\r\n     * If this entity metadata is a child table of some table, it should have a discriminator value.\r\n     * Used to store a value in a discriminator column.\r\n     */\r\n    readonly discriminatorValue?: string;\r\n\r\n    /**\r\n     * Global tables prefix. Customer can set a global table prefix for all tables in the database.\r\n     */\r\n    readonly tablesPrefix?: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity's column metadatas.\r\n     */\r\n    private readonly _columns: ColumnMetadata[];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(args: EntityMetadataArgs,\r\n                private lazyRelationsWrapper: LazyRelationsWrapper) {\r\n        this.target = args.target;\r\n        this.junction = args.junction;\r\n        this.tablesPrefix = args.tablesPrefix;\r\n        this.namingStrategy = args.namingStrategy;\r\n        this.table = args.tableMetadata;\r\n        this._columns = args.columnMetadatas || [];\r\n        this.relations = args.relationMetadatas || [];\r\n        this.indices = args.indexMetadatas || [];\r\n        this.foreignKeys = args.foreignKeyMetadatas || [];\r\n        this.embeddeds = args.embeddedMetadatas || [];\r\n        this.discriminatorValue = args.discriminatorValue;\r\n        this.inheritanceType = args.inheritanceType;\r\n\r\n        this.table.entityMetadata = this;\r\n        this._columns.forEach(column => column.entityMetadata = this);\r\n        this.relations.forEach(relation => relation.entityMetadata = this);\r\n        this.foreignKeys.forEach(foreignKey => foreignKey.entityMetadata = this);\r\n        this.indices.forEach(index => index.entityMetadata = this);\r\n\r\n        const setEmbeddedEntityMetadataRecursively = (embeddeds: EmbeddedMetadata[]) => {\r\n            embeddeds.forEach(embedded => {\r\n                embedded.entityMetadata = this;\r\n                embedded.columns.forEach(column => column.entityMetadata = this);\r\n                setEmbeddedEntityMetadataRecursively(embedded.embeddeds);\r\n            });\r\n        };\r\n        setEmbeddedEntityMetadataRecursively(this.embeddeds);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity's name. Equal to entity target class's name if target is set to table, or equals to table name if its set.\r\n     */\r\n    get name(): string {\r\n        if (!this.table)\r\n            throw new Error(\"No table target set to the entity metadata.\");\r\n\r\n        return this.targetName ? this.targetName : this.table.name;\r\n    }\r\n\r\n    /**\r\n     * Columns of the entity, including columns that are coming from the embeddeds of this entity.\r\n     * @deprecated\r\n     */\r\n    get columns(): ColumnMetadata[] {\r\n        let allColumns: ColumnMetadata[] = ([] as ColumnMetadata[]).concat(this._columns);\r\n        this.embeddeds.forEach(embedded => {\r\n            allColumns = allColumns.concat(embedded.columns);\r\n        });\r\n        return allColumns;\r\n    }\r\n\r\n    /**\r\n     * Gets columns without embedded columns.\r\n     */\r\n    get columnsWithoutEmbeddeds(): ColumnMetadata[] {\r\n        return this._columns;\r\n    }\r\n\r\n    /**\r\n     * All columns of the entity, including columns that are coming from the embeddeds of this entity,\r\n     * and including columns from the parent entities.\r\n     */\r\n    get allColumns(): ColumnMetadata[] {\r\n        let columns = this.columns;\r\n        if (this.parentEntityMetadata)\r\n            columns = columns.concat(this.parentEntityMetadata.columns);\r\n\r\n        return columns;\r\n    }\r\n\r\n    /**\r\n     * All relations of the entity, including relations from the parent entities.\r\n     */\r\n    get allRelations(): RelationMetadata[] {\r\n        let relations = this.relations;\r\n        if (this.parentEntityMetadata)\r\n            relations = relations.concat(this.parentEntityMetadata.relations);\r\n\r\n        return relations;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the target.\r\n     */\r\n    get targetName(): string {\r\n        if (typeof this.target === \"string\")\r\n            return this.target;\r\n\r\n        if (this.target instanceof Function)\r\n            return (<any> this.target).name;\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Checks if entity's table has multiple primary columns.\r\n     */\r\n    get hasMultiplePrimaryKeys() {\r\n        return this.primaryColumns.length > 1;\r\n    }\r\n\r\n    /**\r\n     * Gets the primary column.\r\n     *\r\n     * @deprecated\r\n     */\r\n    get primaryColumn(): ColumnMetadata {\r\n        const primaryKey = this.primaryColumns[0];\r\n        if (!primaryKey)\r\n            throw new Error(`Primary key is not set for the ${this.name} entity.`);\r\n\r\n        return primaryKey;\r\n    }\r\n\r\n    /**\r\n     * Checks if table has generated column.\r\n     */\r\n    get hasGeneratedColumn(): boolean {\r\n        return !!this.generatedColumnIfExist;\r\n    }\r\n\r\n    /**\r\n     * Gets the column with generated flag.\r\n     */\r\n    get generatedColumn(): ColumnMetadata {\r\n        const generatedColumn = this.generatedColumnIfExist;\r\n        if (!generatedColumn)\r\n            throw new Error(`Generated column was not found`);\r\n\r\n        return generatedColumn;\r\n    }\r\n\r\n    /**\r\n     * Gets the generated column if it exists, or returns undefined if it does not.\r\n     */\r\n    get generatedColumnIfExist(): ColumnMetadata|undefined {\r\n        return this._columns.find(column => column.isGenerated);\r\n    }\r\n\r\n    /**\r\n     * Gets first primary column. In the case if table contains multiple primary columns it\r\n     * throws error.\r\n     */\r\n    get firstPrimaryColumn(): ColumnMetadata {\r\n        if (this.hasMultiplePrimaryKeys)\r\n            throw new Error(`Entity ${this.name} has multiple primary keys. This operation is not supported on entities with multiple primary keys`);\r\n\r\n        return this.primaryColumns[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the primary columns.\r\n     */\r\n    get primaryColumns(): ColumnMetadata[] {\r\n        // const originalPrimaryColumns = this._columns.filter(column => column.isPrimary);\r\n        // const parentEntityPrimaryColumns = this.hasParentIdColumn ? [this.parentIdColumn] : [];\r\n        // return originalPrimaryColumns.concat(parentEntityPrimaryColumns);\r\n        return this._columns.filter(column => column.isPrimary);\r\n        // const originalPrimaryColumns = this._columns.filter(column => column.isPrimary);\r\n        // const parentEntityPrimaryColumns = this.parentEntityMetadata ? this.parentEntityMetadata.primaryColumns : [];\r\n        // return originalPrimaryColumns.concat(parentEntityPrimaryColumns);\r\n    }\r\n\r\n    get primaryColumnsWithParentIdColumns(): ColumnMetadata[] {\r\n        return this.primaryColumns.concat(this.parentIdColumns);\r\n    }\r\n\r\n    /**\r\n     * Gets all primary columns including columns from the parent entities.\r\n     */\r\n    get allPrimaryColumns(): ColumnMetadata[] {\r\n        return this.primaryColumns.concat(this.parentPrimaryColumns);\r\n    }\r\n\r\n    /**\r\n     * Gets the primary columns of the parent entity metadata.\r\n     * If parent entity metadata does not exist then it simply returns empty array.\r\n     */\r\n    get parentPrimaryColumns(): ColumnMetadata[] {\r\n        if (this.parentEntityMetadata)\r\n            return this.parentEntityMetadata.primaryColumns;\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Gets only primary columns owned by this entity.\r\n     */\r\n    get ownPimaryColumns(): ColumnMetadata[] {\r\n        return this._columns.filter(column => column.isPrimary);\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has a create date column.\r\n     */\r\n    get hasCreateDateColumn(): boolean {\r\n        return !!this._columns.find(column => column.mode === \"createDate\");\r\n    }\r\n\r\n    /**\r\n     * Gets entity column which contains a create date value.\r\n     */\r\n    get createDateColumn(): ColumnMetadata {\r\n        const column = this._columns.find(column => column.mode === \"createDate\");\r\n        if (!column)\r\n            throw new Error(`CreateDateColumn was not found in entity ${this.name}`);\r\n\r\n        return column;\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an update date column.\r\n     */\r\n    get hasUpdateDateColumn(): boolean {\r\n        return !!this._columns.find(column => column.mode === \"updateDate\");\r\n    }\r\n\r\n    /**\r\n     * Gets entity column which contains an update date value.\r\n     */\r\n    get updateDateColumn(): ColumnMetadata {\r\n        const column = this._columns.find(column => column.mode === \"updateDate\");\r\n        if (!column)\r\n            throw new Error(`UpdateDateColumn was not found in entity ${this.name}`);\r\n\r\n        return column;\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has a version column.\r\n     */\r\n    get hasVersionColumn(): boolean {\r\n        return !!this._columns.find(column => column.mode === \"version\");\r\n    }\r\n\r\n    /**\r\n     * Gets entity column which contains an entity version.\r\n     */\r\n    get versionColumn(): ColumnMetadata {\r\n        const column = this._columns.find(column => column.mode === \"version\");\r\n        if (!column)\r\n            throw new Error(`VersionColumn was not found in entity ${this.name}`);\r\n\r\n        return column;\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has a discriminator column.\r\n     */\r\n    get hasDiscriminatorColumn(): boolean {\r\n        return !!this._columns.find(column => column.mode === \"discriminator\");\r\n    }\r\n\r\n    /**\r\n     * Gets the discriminator column used to store entity identificator in single-table inheritance tables.\r\n     */\r\n    get discriminatorColumn(): ColumnMetadata {\r\n        const column = this._columns.find(column => column.mode === \"discriminator\");\r\n        if (!column)\r\n            throw new Error(`DiscriminatorColumn was not found in entity ${this.name}`);\r\n\r\n        return column;\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has a tree level column.\r\n     */\r\n    get hasTreeLevelColumn(): boolean {\r\n        return !!this._columns.find(column => column.mode === \"treeLevel\");\r\n    }\r\n\r\n    get treeLevelColumn(): ColumnMetadata {\r\n        const column = this._columns.find(column => column.mode === \"treeLevel\");\r\n        if (!column)\r\n            throw new Error(`TreeLevelColumn was not found in entity ${this.name}`);\r\n\r\n        return column;\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has a tree level column.\r\n     */\r\n    get hasParentIdColumn(): boolean {\r\n        return !!this._columns.find(column => column.mode === \"parentId\");\r\n    }\r\n\r\n    get parentIdColumn(): ColumnMetadata {\r\n        const column = this._columns.find(column => column.mode === \"parentId\");\r\n        if (!column)\r\n            throw new Error(`Parent id column was not found in entity ${this.name}`);\r\n\r\n        return column;\r\n    }\r\n\r\n    get parentIdColumns(): ColumnMetadata[] {\r\n        return this._columns.filter(column => column.mode === \"parentId\");\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an object id column.\r\n     */\r\n    get hasObjectIdColumn(): boolean {\r\n        return !!this._columns.find(column => column.mode === \"objectId\");\r\n    }\r\n\r\n    /**\r\n     * Gets the object id column used with mongodb database.\r\n     */\r\n    get objectIdColumn(): ColumnMetadata {\r\n        const column = this._columns.find(column => column.mode === \"objectId\");\r\n        if (!column)\r\n            throw new Error(`ObjectId was not found in entity ${this.name}`);\r\n\r\n        return column;\r\n    }\r\n\r\n    /**\r\n     * Gets single (values of which does not contain arrays) relations.\r\n     */\r\n    get singleValueRelations(): RelationMetadata[] {\r\n        return this.relations.filter(relation => {\r\n            return relation.relationType === RelationTypes.ONE_TO_ONE || relation.relationType === RelationTypes.ONE_TO_MANY;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets single (values of which does not contain arrays) relations.\r\n     */\r\n    get multiValueRelations(): RelationMetadata[] {\r\n        return this.relations.filter(relation => {\r\n            return relation.relationType === RelationTypes.ONE_TO_ONE || relation.relationType === RelationTypes.ONE_TO_MANY;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets only one-to-one relations of the entity.\r\n     */\r\n    get oneToOneRelations(): RelationMetadata[] {\r\n        return this.relations.filter(relation => relation.relationType === RelationTypes.ONE_TO_ONE);\r\n    }\r\n\r\n    /**\r\n     * Gets only owner one-to-one relations of the entity.\r\n     */\r\n    get ownerOneToOneRelations(): RelationMetadata[] {\r\n        return this.relations.filter(relation => relation.relationType === RelationTypes.ONE_TO_ONE && relation.isOwning);\r\n    }\r\n\r\n    /**\r\n     * Gets only one-to-many relations of the entity.\r\n     */\r\n    get oneToManyRelations(): RelationMetadata[] {\r\n        return this.relations.filter(relation => relation.relationType === RelationTypes.ONE_TO_MANY);\r\n    }\r\n\r\n    /**\r\n     * Gets only many-to-one relations of the entity.\r\n     */\r\n    get manyToOneRelations(): RelationMetadata[] {\r\n        return this.relations.filter(relation => relation.relationType === RelationTypes.MANY_TO_ONE);\r\n    }\r\n\r\n    /**\r\n     * Gets only many-to-many relations of the entity.\r\n     */\r\n    get manyToManyRelations(): RelationMetadata[] {\r\n        return this.relations.filter(relation => relation.relationType === RelationTypes.MANY_TO_MANY);\r\n    }\r\n\r\n    /**\r\n     * Gets only owner many-to-many relations of the entity.\r\n     */\r\n    get ownerManyToManyRelations(): RelationMetadata[] {\r\n        return this.relations.filter(relation => relation.relationType === RelationTypes.MANY_TO_MANY && relation.isOwning);\r\n    }\r\n\r\n    /**\r\n     * Gets only owner one-to-one and many-to-one relations.\r\n     */\r\n    get relationsWithJoinColumns() {\r\n        return this.ownerOneToOneRelations.concat(this.manyToOneRelations);\r\n    }\r\n\r\n    /**\r\n     * Checks if there is a tree parent relation. Used only in tree-tables.\r\n     */\r\n    get hasTreeParentRelation() {\r\n        return !!this.relations.find(relation => relation.isTreeParent);\r\n    }\r\n\r\n    /**\r\n     * Tree parent relation. Used only in tree-tables.\r\n     */\r\n    get treeParentRelation() {\r\n        const relation = this.relations.find(relation => relation.isTreeParent);\r\n        if (!relation)\r\n            throw new Error(`TreeParent relation was not found in entity ${this.name}`);\r\n\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Checks if there is a tree children relation. Used only in tree-tables.\r\n     */\r\n    get hasTreeChildrenRelation() {\r\n        return !!this.relations.find(relation => relation.isTreeChildren);\r\n    }\r\n\r\n    /**\r\n     * Tree children relation. Used only in tree-tables.\r\n     */\r\n    get treeChildrenRelation() {\r\n        const relation = this.relations.find(relation => relation.isTreeChildren);\r\n        if (!relation)\r\n            throw new Error(`TreeParent relation was not found in entity ${this.name}`);\r\n\r\n        return relation;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new entity.\r\n     */\r\n    create(): any {\r\n\r\n        // if target is set to a function (e.g. class) that can be created then create it\r\n        if (this.target instanceof Function)\r\n            return new (<any> this.target)();\r\n\r\n        // otherwise simply return a new empty object\r\n        const newObject = {};\r\n        this.relations\r\n            .filter(relation => relation.isLazy)\r\n            .forEach(relation => this.lazyRelationsWrapper.wrap(newObject, relation));\r\n\r\n        return newObject;\r\n    }\r\n\r\n    /**\r\n     * Creates an object - map of columns and relations of the entity.\r\n     */\r\n    createPropertiesMap(): { [name: string]: string|any } {\r\n        const entity: { [name: string]: string|any } = {};\r\n        this._columns.forEach(column => entity[column.propertyName] = column.propertyName);\r\n        this.relations.forEach(relation => entity[relation.propertyName] = relation.propertyName);\r\n        return entity;\r\n    }\r\n\r\n    /**\r\n     * Computes property name of the entity using given PropertyTypeInFunction.\r\n     */\r\n    computePropertyName(nameOrFn: PropertyTypeInFunction<any>) {\r\n        return typeof nameOrFn === \"string\" ? nameOrFn : nameOrFn(this.createPropertiesMap());\r\n    }\r\n\r\n    /**\r\n     * todo: undefined entities should not go there\r\n     */\r\n    getEntityIdMap(entity: any): ObjectLiteral|undefined {\r\n        if (!entity)\r\n            return undefined;\r\n\r\n        const map: ObjectLiteral = {};\r\n        if (this.parentEntityMetadata) {\r\n            this.primaryColumnsWithParentIdColumns.forEach(column => {\r\n                const entityValue = entity[column.propertyName];\r\n                if (entityValue === null || entityValue === undefined)\r\n                    return;\r\n\r\n                // if entity id is a relation, then extract referenced column from that relation\r\n                const columnRelation = this.relations.find(relation => relation.propertyName === column.propertyName);\r\n\r\n                if (columnRelation && columnRelation.joinColumn) {\r\n                    map[column.propertyName] = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\r\n                } else if (columnRelation && columnRelation.inverseRelation.joinColumn) {\r\n                    map[column.propertyName] = entityValue[columnRelation.inverseRelation.joinColumn.referencedColumn.propertyName];\r\n                } else {\r\n                    map[column.propertyName] = entityValue;\r\n                }\r\n            });\r\n\r\n        } else {\r\n            this.primaryColumns.forEach(column => {\r\n                const entityValue = entity[column.propertyName];\r\n                if (entityValue === null || entityValue === undefined)\r\n                    return;\r\n\r\n                // if entity id is a relation, then extract referenced column from that relation\r\n                const columnRelation = this.relations.find(relation => relation.propertyName === column.propertyName);\r\n\r\n                if (columnRelation && columnRelation.joinColumn) {\r\n                    map[column.propertyName] = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\r\n                } else if (columnRelation && columnRelation.inverseRelation.joinColumn) {\r\n                    map[column.propertyName] = entityValue[columnRelation.inverseRelation.joinColumn.referencedColumn.propertyName];\r\n                } else {\r\n                    map[column.propertyName] = entityValue;\r\n                }\r\n            });\r\n        }\r\n        return Object.keys(map).length > 0 ? map : undefined;\r\n    }\r\n\r\n    /**\r\n     * Same as getEntityIdMap, but instead of id column property names it returns database column names.\r\n     */\r\n    getDatabaseEntityIdMap(entity: ObjectLiteral): ObjectLiteral|undefined {\r\n        const map: ObjectLiteral = {};\r\n        if (this.parentEntityMetadata) {\r\n            this.primaryColumnsWithParentIdColumns.forEach(column => {\r\n                const entityValue = entity[column.propertyName];\r\n                if (entityValue === null || entityValue === undefined)\r\n                    return;\r\n\r\n                // if entity id is a relation, then extract referenced column from that relation\r\n                const columnRelation = this.relations.find(relation => relation.propertyName === column.propertyName);\r\n\r\n                if (columnRelation && columnRelation.joinColumn) {\r\n                    map[column.fullName] = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\r\n                } else if (columnRelation && columnRelation.inverseRelation.joinColumn) {\r\n                    map[column.fullName] = entityValue[columnRelation.inverseRelation.joinColumn.referencedColumn.propertyName];\r\n                } else {\r\n                    map[column.fullName] = entityValue;\r\n                }\r\n            });\r\n\r\n        } else {\r\n            this.primaryColumns.forEach(column => {\r\n                const entityValue = entity[column.propertyName];\r\n                if (entityValue === null || entityValue === undefined)\r\n                    return;\r\n\r\n                // if entity id is a relation, then extract referenced column from that relation\r\n                const columnRelation = this.relations.find(relation => relation.propertyName === column.propertyName);\r\n\r\n                if (columnRelation && columnRelation.joinColumn) {\r\n                    map[column.fullName] = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\r\n                } else if (columnRelation && columnRelation.inverseRelation.joinColumn) {\r\n                    map[column.fullName] = entityValue[columnRelation.inverseRelation.joinColumn.referencedColumn.propertyName];\r\n                } else {\r\n                    map[column.fullName] = entityValue;\r\n                }\r\n            });\r\n        }\r\n        const hasAllIds = Object.keys(map).every(key => {\r\n            return map[key] !== undefined && map[key] !== null;\r\n        });\r\n        return hasAllIds ? map : undefined;\r\n    }\r\n\r\n    /**\r\n\r\n    createSimpleIdMap(id: any): ObjectLiteral {\r\n        const map: ObjectLiteral = {};\r\n        if (this.parentEntityMetadata) {\r\n            this.primaryColumnsWithParentIdColumns.forEach(column => {\r\n                map[column.propertyName] = id;\r\n            });\r\n\r\n        } else {\r\n            this.primaryColumns.forEach(column => {\r\n                map[column.propertyName] = id;\r\n            });\r\n        }\r\n        return map;\r\n    } */\r\n\r\n    /**\r\n     * Same as createSimpleIdMap, but instead of id column property names it returns database column names.\r\n\r\n    createSimpleDatabaseIdMap(id: any): ObjectLiteral {\r\n        const map: ObjectLiteral = {};\r\n        if (this.parentEntityMetadata) {\r\n            this.primaryColumnsWithParentIdColumns.forEach(column => {\r\n                map[column.name] = id;\r\n            });\r\n\r\n        } else {\r\n            this.primaryColumns.forEach(column => {\r\n                map[column.name] = id;\r\n            });\r\n        }\r\n        return map;\r\n    }*/\r\n\r\n    /**\r\n     * todo: undefined entities should not go there??\r\n     * todo: shouldnt be entity ObjectLiteral here?\r\n     */\r\n    getEntityIdMixedMap(entity: any): any {\r\n        if (!entity)\r\n            return undefined;\r\n\r\n        const idMap = this.getEntityIdMap(entity);\r\n        if (this.hasMultiplePrimaryKeys) {\r\n            return idMap;\r\n\r\n        } else if (idMap) {\r\n            return idMap[this.firstPrimaryColumn.propertyName]; // todo: what about parent primary column?\r\n        }\r\n\r\n        return idMap;\r\n    }\r\n\r\n    /**\r\n     * Same as `getEntityIdMap` but the key of the map will be the column names instead of the property names.\r\n     */\r\n    getEntityIdColumnMap(entity: any): ObjectLiteral|undefined {\r\n        return this.transformIdMapToColumnNames(this.getEntityIdMap(entity));\r\n    }\r\n\r\n    transformIdMapToColumnNames(idMap: ObjectLiteral|undefined) {\r\n        if (!idMap) {\r\n            return idMap;\r\n        }\r\n        const map: ObjectLiteral = {};\r\n        Object.keys(idMap).forEach(propertyName => {\r\n            const column = this.getColumnByPropertyName(propertyName);\r\n            if (column) {\r\n                map[column.fullName] = idMap[propertyName];\r\n            }\r\n        });\r\n        return map;\r\n    }\r\n\r\n    getColumnByPropertyName(propertyName: string) {\r\n        return this._columns.find(column => column.propertyName === propertyName);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given property name exist.\r\n     */\r\n    hasColumnWithPropertyName(propertyName: string): boolean {\r\n        return !!this._columns.find(column => column.propertyName === propertyName);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given database name exist.\r\n     */\r\n    hasColumnWithDbName(name: string): boolean {\r\n        return !!this._columns.find(column => column.fullName === name);\r\n    }\r\n\r\n    /**\r\n     * Checks if relation with the given property name exist.\r\n     */\r\n    hasRelationWithPropertyName(propertyName: string): boolean {\r\n        return !!this.relations.find(relation => relation.propertyName === propertyName);\r\n    }\r\n\r\n    /**\r\n     * Finds relation with the given property name.\r\n     */\r\n    findRelationWithPropertyName(propertyName: string): RelationMetadata {\r\n        const relation = this.relations.find(relation => relation.propertyName === propertyName);\r\n        if (!relation)\r\n            throw new Error(`Relation with property name ${propertyName} in ${this.name} entity was not found.`);\r\n\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Checks if relation with the given name exist.\r\n     */\r\n    hasRelationWithDbName(dbName: string): boolean {\r\n        return !!this.relationsWithJoinColumns.find(relation => relation.name === dbName);\r\n    }\r\n\r\n    /**\r\n     * Finds relation with the given name.\r\n     */\r\n    findRelationWithDbName(name: string): RelationMetadata {\r\n        const relation = this.relationsWithJoinColumns.find(relation => relation.name === name);\r\n        if (!relation)\r\n            throw new Error(`Relation with name ${name} in ${this.name} entity was not found.`);\r\n\r\n        return relation;\r\n    }\r\n\r\n    addColumn(column: ColumnMetadata) {\r\n        this._columns.push(column);\r\n        column.entityMetadata = this;\r\n    }\r\n\r\n    extractNonEmptyColumns(object: ObjectLiteral): ColumnMetadata[] {\r\n        return this.columns.filter(column => !!object[column.propertyName]);\r\n    }\r\n\r\n    extractNonEmptySingleValueRelations(object: ObjectLiteral): RelationMetadata[] {\r\n        return this.relations.filter(relation => {\r\n            return (relation.relationType === RelationTypes.ONE_TO_ONE || relation.relationType === RelationTypes.MANY_TO_ONE)\r\n                && !!object[relation.propertyName];\r\n        });\r\n    }\r\n\r\n    extractNonEmptyMultiValueRelations(object: ObjectLiteral): RelationMetadata[] {\r\n        return this.relations.filter(relation => {\r\n            return (relation.relationType === RelationTypes.MANY_TO_MANY || relation.relationType === RelationTypes.ONE_TO_MANY)\r\n                && !!object[relation.propertyName];\r\n        });\r\n    }\r\n\r\n    extractExistSingleValueRelations(object: ObjectLiteral): RelationMetadata[] {\r\n        return this.relations.filter(relation => {\r\n            return (relation.relationType === RelationTypes.ONE_TO_ONE || relation.relationType === RelationTypes.MANY_TO_ONE)\r\n                && object.hasOwnProperty(relation.propertyName);\r\n        });\r\n    }\r\n\r\n    extractExistMultiValueRelations(object: ObjectLiteral): RelationMetadata[] {\r\n        return this.relations.filter(relation => {\r\n            return (relation.relationType === RelationTypes.MANY_TO_MANY || relation.relationType === RelationTypes.ONE_TO_MANY)\r\n                && object.hasOwnProperty(relation.propertyName);\r\n        });\r\n    }\r\n\r\n    checkIfObjectContainsAllPrimaryKeys(object: ObjectLiteral) {\r\n        return this.primaryColumns.every(primaryColumn => {\r\n            return object.hasOwnProperty(primaryColumn.propertyName);\r\n        });\r\n    }\r\n\r\n    compareEntities(firstEntity: any, secondEntity: any) {\r\n        const firstEntityIds = this.getEntityIdMap(firstEntity);\r\n        const secondEntityIds = this.getEntityIdMap(secondEntity);\r\n        return this.compareIds(firstEntityIds, secondEntityIds);\r\n    }\r\n\r\n    compareIds(firstId: ObjectLiteral|undefined, secondId: ObjectLiteral|undefined): boolean {\r\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\r\n            return false;\r\n\r\n        return Object.keys(firstId).every(key => {\r\n            if (firstId[key] instanceof Object && secondId[key] instanceof Object)\r\n                return firstId[key].equals(secondId[key]);\r\n\r\n            return firstId[key] === secondId[key];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Compares two entity ids.\r\n     * If any of the given value is empty then it will return false.\r\n     */\r\n    compareEntityMixedIds(firstId: any, secondId: any): boolean {\r\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\r\n            return false;\r\n\r\n        if (this.hasMultiplePrimaryKeys) {\r\n            return Object.keys(firstId).every(key => {\r\n                return firstId[key] === secondId[key];\r\n            });\r\n        } else {\r\n            return firstId === secondId;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates throw entity and finds and extracts all values from relations in the entity.\r\n     * If relation value is an array its being flattened.\r\n     */\r\n    extractRelationValuesFromEntity(entity: ObjectLiteral, relations: RelationMetadata[]): [RelationMetadata, any, EntityMetadata][] {\r\n        const relationsAndValues: [RelationMetadata, any, EntityMetadata][] = [];\r\n        relations.forEach(relation => {\r\n            const value = relation.getEntityValue(entity);\r\n            if (value instanceof Array) {\r\n                value.forEach(subValue => relationsAndValues.push([relation, subValue, relation.inverseEntityMetadata]));\r\n            } else if (value) {\r\n                relationsAndValues.push([relation, value, relation.inverseEntityMetadata]);\r\n            }\r\n        });\r\n        return relationsAndValues;\r\n    }\r\n\r\n    /**\r\n     * Checks if given entity has an id.\r\n     */\r\n    hasId(entity: ObjectLiteral): boolean {\r\n\r\n        // if (this.metadata.parentEntityMetadata) {\r\n        //     return this.metadata.parentEntityMetadata.parentIdColumns.every(parentIdColumn => {\r\n        //         const columnName = parentIdColumn.propertyName;\r\n        //         return !!entity &&\r\n        //             entity.hasOwnProperty(columnName) &&\r\n        //             entity[columnName] !== null &&\r\n        //             entity[columnName] !== undefined &&\r\n        //             entity[columnName] !== \"\";\r\n        //     });\r\n\r\n        // } else {\r\n        return this.primaryColumns.every(primaryColumn => {\r\n            const columnName = primaryColumn.propertyName;\r\n            return !!entity &&\r\n                entity.hasOwnProperty(columnName) &&\r\n                entity[columnName] !== null &&\r\n                entity[columnName] !== undefined &&\r\n                entity[columnName] !== \"\";\r\n        });\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * Checks if there any non-nullable column exist in this entity.\r\n     */\r\n    get hasNonNullableColumns(): boolean {\r\n        return this.relationsWithJoinColumns.some(relation => !relation.isNullable || relation.isPrimary);\r\n        // return this.relationsWithJoinColumns.some(relation => relation.isNullable || relation.isPrimary);\r\n    }\r\n\r\n}","import {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {ColumnType} from \"./types/ColumnTypes\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\n\r\n/**\r\n * Kinda type of the column. Not a type in the database, but locally used type to determine what kind of column\r\n * we are working with.\r\n * For example, \"primary\" means that it will be a primary column, or \"createDate\" means that it will create a create\r\n * date column.\r\n */\r\nexport type ColumnMode = \"regular\"|\"virtual\"|\"createDate\"|\"updateDate\"|\"version\"|\"treeChildrenCount\"|\"treeLevel\"|\"discriminator\"|\"parentId\"|\"objectId\"|\"array\";\r\n\r\n/**\r\n * This metadata contains all information about entity's column.\r\n */\r\nexport class ColumnMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this column metadata is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Embedded metadata where this column metadata is.\r\n     */\r\n    embeddedMetadata: EmbeddedMetadata;\r\n\r\n    /**\r\n     * If this column is foreign key of some relation then this relation's metadata will be here.\r\n     */\r\n    relationMetadata: RelationMetadata;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Readonly Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    readonly target: Function|string|\"__virtual__\";\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * The real reflected property type.\r\n     */\r\n    // readonly propertyType: string;\r\n\r\n    /**\r\n     * The database type of the column.\r\n     */\r\n    readonly type: ColumnType;\r\n\r\n    /**\r\n     * Column's mode in which this column is working.\r\n     */\r\n    readonly mode: ColumnMode;\r\n\r\n    /**\r\n     * Type's length in the database.\r\n     */\r\n    readonly length: string = \"\";\r\n\r\n    /**\r\n     * Indicates if this column is a primary key.\r\n     */\r\n    readonly isPrimary: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column is generated (auto increment or generated other way).\r\n     */\r\n    readonly isGenerated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if value in the database should be unique or not.\r\n     */\r\n    readonly isUnique: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column can contain nulls or not.\r\n     */\r\n    readonly isNullable: boolean = false;\r\n\r\n    /**\r\n     * Column comment.\r\n     */\r\n    readonly comment: string = \"\";\r\n\r\n    /**\r\n     * Default database value.\r\n     */\r\n    readonly default: any;\r\n\r\n    /**\r\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\r\n     * number of digits that are stored for the values.\r\n     */\r\n    readonly precision: number;\r\n\r\n    /**\r\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\r\n     * of digits to the right of the decimal point and must not be greater than precision.\r\n     */\r\n    readonly scale: number;\r\n\r\n    /**\r\n     * Indicates if this date column will contain a timezone.\r\n     * Used only for date-typed column types.\r\n     * Note that timezone option is not supported by all databases (only postgres for now).\r\n     */\r\n    readonly timezone: boolean;\r\n\r\n    /**\r\n     * Indicates if date object must be stored in given date's timezone.\r\n     * By default date is saved in UTC timezone.\r\n     * Works only with \"datetime\" columns.\r\n     */\r\n    readonly localTimezone?: boolean;\r\n\r\n    /**\r\n     * Indicates if column's type will be set as a fixed-length data type.\r\n     * Works only with \"string\" columns.\r\n     */\r\n    readonly fixedLength?: boolean;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Private Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Column name to be used in the database.\r\n     */\r\n    private _name: string;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(args: ColumnMetadataArgs) {\r\n        this.target = args.target;\r\n        this.propertyName = args.propertyName;\r\n\r\n        if (args.mode)\r\n            this.mode = args.mode;\r\n        // if (args.propertyType)\r\n        //     this.propertyType = args.propertyType.toLowerCase();\r\n        if (args.options.name)\r\n            this._name = args.options.name;\r\n        if (args.options.type)\r\n            this.type = args.options.type;\r\n\r\n        if (args.options.length)\r\n            this.length = String(args.options.length);\r\n        if (args.options.primary)\r\n            this.isPrimary = args.options.primary;\r\n        if (args.options.generated)\r\n            this.isGenerated = args.options.generated;\r\n        if (args.options.unique)\r\n            this.isUnique = args.options.unique;\r\n        if (args.options.nullable)\r\n            this.isNullable = args.options.nullable;\r\n        if (args.options.comment)\r\n            this.comment = args.options.comment;\r\n        if (args.options.default !== undefined && args.options.default !== null)\r\n            this.default = args.options.default;\r\n        if (args.options.scale)\r\n            this.scale = args.options.scale;\r\n        if (args.options.precision)\r\n            this.precision = args.options.precision;\r\n        if (args.options.timezone)\r\n            this.timezone = args.options.timezone;\r\n        if (args.options.localTimezone)\r\n            this.localTimezone = args.options.localTimezone;\r\n        if (args.options.fixedLength)\r\n            this.fixedLength = args.options.fixedLength;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Accessors\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets column's entity target.\r\n     * Original target returns target of the class where column is.\r\n     * This class can be an abstract class, but column even is from that class,\r\n     * but its more related to a specific entity. That's why we need this field.\r\n     */\r\n    get entityTarget(): Function|string {\r\n        return this.entityMetadata.target;\r\n    }\r\n\r\n    /**\r\n     * Column name in the database.\r\n     *\r\n     * todo: rename to originalName\r\n     */\r\n    get name(): string {\r\n        return this.entityMetadata.namingStrategy.columnName(this.propertyName, this._name);\r\n    }\r\n\r\n    /**\r\n     * Column name in the database including its embedded prefixes.\r\n     *\r\n     * todo: rename to databaseName\r\n     */\r\n    get fullName(): string {\r\n\r\n        // if this column is embedded's column then apply different entity\r\n        if (this.embeddedMetadata) {\r\n\r\n            // because embedded can be inside other embedded we need to go recursively and collect all prefix name\r\n            const prefixes: string[] = [];\r\n            const buildPrefixRecursively = (embeddedMetadata: EmbeddedMetadata) => {\r\n                if (embeddedMetadata.parentEmbeddedMetadata)\r\n                    buildPrefixRecursively(embeddedMetadata.parentEmbeddedMetadata);\r\n\r\n                prefixes.push(embeddedMetadata.prefix);\r\n            };\r\n            buildPrefixRecursively(this.embeddedMetadata);\r\n\r\n            return this.entityMetadata.namingStrategy.embeddedColumnName(prefixes, this.propertyName, this._name);\r\n        }\r\n\r\n        // if there is a naming strategy then use it to normalize propertyName as column name\r\n        if (this.entityMetadata)\r\n            return this.entityMetadata.namingStrategy.columnName(this.propertyName, this._name);\r\n\r\n        throw new Error(`Column ${this._name ? this._name + \" \" : \"\"}is not attached to any entity or embedded.`);\r\n    }\r\n\r\n    /**\r\n     * Indicates if this column is in embedded, not directly in the table.\r\n     */\r\n    get isInEmbedded(): boolean {\r\n        return !!this.embeddedMetadata;\r\n    }\r\n\r\n    /**\r\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\r\n     */\r\n    get isVirtual() {\r\n        return this.mode === \"virtual\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if column is array.\r\n     * Array columns are now only supported by Mongodb driver.\r\n     *\r\n     * todo: implement array serialization functionality for relational databases as well\r\n     */\r\n    get isArray() {\r\n        return this.mode === \"array\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if column is a parent id. Parent id columns are not mapped to the entity.\r\n     */\r\n    get isParentId() {\r\n        return this.mode === \"parentId\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\r\n     */\r\n    get isDiscriminator() {\r\n        return this.mode === \"discriminator\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if this column contains an entity creation date.\r\n     */\r\n    get isCreateDate() {\r\n        return this.mode === \"createDate\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if this column contains an entity update date.\r\n     */\r\n    get isUpdateDate() {\r\n        return this.mode === \"updateDate\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if this column contains an entity version.\r\n     */\r\n    get isVersion() {\r\n        return this.mode === \"version\";\r\n    }\r\n\r\n    /**\r\n     * Indicates if this column contains an object id.\r\n     */\r\n    get isObjectId() {\r\n        return this.mode === \"objectId\";\r\n    }\r\n\r\n    /**\r\n     * If this column references some column, it gets the first referenced column of this column.\r\n     */\r\n    get referencedColumn(): ColumnMetadata|undefined {\r\n        const foreignKey = this.entityMetadata.foreignKeys.find(foreignKey => foreignKey.columns.indexOf(this) !== -1);\r\n        if (foreignKey) {\r\n            return foreignKey.referencedColumns[0];\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets embedded property in which column is.\r\n     */\r\n    get embeddedProperty() {\r\n        if (!this.embeddedMetadata)\r\n            throw new Error(`This column${ this._name ? this._name + \" \" : \"\" } is not in embedded entity.`);\r\n\r\n        return this.embeddedMetadata.propertyName;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    hasEntityValue(entity: any) {\r\n        if (!entity)\r\n            return false;\r\n\r\n        if (this.isInEmbedded) {\r\n            return  entity[this.embeddedProperty] !== undefined &&\r\n                    entity[this.embeddedProperty] !== null &&\r\n                    entity[this.embeddedProperty][this.propertyName] !== undefined &&\r\n                    entity[this.embeddedProperty][this.propertyName] !== null;\r\n\r\n        } else {\r\n            return  entity[this.propertyName] !== undefined &&\r\n                    entity[this.propertyName] !== null;\r\n        }\r\n    }\r\n\r\n    getEntityValue(entity: any) {\r\n        if (this.isInEmbedded) {\r\n            if (entity[this.embeddedProperty] === undefined ||\r\n                entity[this.embeddedProperty] === null)\r\n                return undefined;\r\n\r\n            return entity[this.embeddedProperty][this.propertyName];\r\n        } else {\r\n            return entity[this.propertyName];\r\n        }\r\n    }\r\n\r\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\n\r\n/**\r\n * Table's column's schema in the database represented in this class.\r\n */\r\nexport class ColumnSchema {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Column name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Column type.\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Column's default value.\r\n     */\r\n    default: any;\r\n\r\n    /**\r\n     * Indicates if column is NULL, or is NOT NULL in the database.\r\n     */\r\n    isNullable: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is auto-generated sequence.\r\n     */\r\n    isGenerated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is a primary key.\r\n     */\r\n    isPrimary: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column has unique value.\r\n     */\r\n    isUnique: boolean = false;\r\n\r\n    /**\r\n     * Column's comment.\r\n     */\r\n    comment: string|undefined;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options?: {\r\n        name?: string,\r\n        type?: string,\r\n        default?: string,\r\n        isNullable?: boolean,\r\n        isGenerated?: boolean,\r\n        isPrimary?: boolean,\r\n        isUnique?: boolean,\r\n        comment?: string\r\n    }) {\r\n        if (options) {\r\n            this.name = options.name || \"\";\r\n            this.type = options.type || \"\";\r\n            this.default = options.default;\r\n            this.isNullable = options.isNullable || false;\r\n            this.isGenerated = options.isGenerated || false;\r\n            this.isPrimary = options.isPrimary || false;\r\n            this.isUnique = options.isUnique || false;\r\n            this.comment = options.comment;\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Clones this column schema to a new column schema with exact same properties as this column schema has.\r\n     */\r\n    clone(): ColumnSchema {\r\n        const newColumnSchema = new ColumnSchema();\r\n        newColumnSchema.name = this.name;\r\n        newColumnSchema.type = this.type;\r\n        newColumnSchema.default = this.default;\r\n        newColumnSchema.isNullable = this.isNullable;\r\n        newColumnSchema.isGenerated = this.isGenerated;\r\n        newColumnSchema.isPrimary = this.isPrimary;\r\n        newColumnSchema.isUnique = this.isUnique;\r\n        newColumnSchema.comment = this.comment;\r\n        return newColumnSchema;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new column based on the given column metadata.\r\n     */\r\n    static create(columnMetadata: ColumnMetadata, normalizedType: string): ColumnSchema {\r\n        const columnSchema = new ColumnSchema();\r\n        columnSchema.name = columnMetadata.fullName;\r\n        columnSchema.default = columnMetadata.default;\r\n        columnSchema.comment = columnMetadata.comment;\r\n        columnSchema.isGenerated = columnMetadata.isGenerated;\r\n        columnSchema.isNullable = columnMetadata.isNullable;\r\n        columnSchema.type = normalizedType;\r\n        columnSchema.isPrimary = columnMetadata.isPrimary;\r\n        columnSchema.isUnique = columnMetadata.isUnique;\r\n        return columnSchema;\r\n    }\r\n\r\n}","import {ColumnSchema} from \"../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../schema-builder/schema/ForeignKeySchema\";\r\nimport {IndexSchema} from \"../schema-builder/schema/IndexSchema\";\r\nimport {ColumnType} from \"../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single database connection.\r\n *\r\n * todo: extract schema build operations out of query runner.\r\n */\r\nexport interface QueryRunner {\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void>;\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    clearDatabase(): Promise<void>;\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    beginTransaction(): Promise<void>;\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    commitTransaction(): Promise<void>;\r\n\r\n    /**\r\n     * Ends transaction.\r\n     */\r\n    rollbackTransaction(): Promise<void>;\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean;\r\n\r\n    /**\r\n     * Executes a given SQL query and returns raw database results.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any>;\r\n\r\n    /**\r\n     * Updates rows that match given simple conditions in the given table.\r\n     */\r\n    update(tableName: string, valuesMap: Object, conditions: Object): Promise<void>;\r\n\r\n    /**\r\n     * Inserts a new row into given table.\r\n     */\r\n    insert(tableName: string, valuesMap: Object, generatedColumn?: ColumnMetadata): Promise<any>;\r\n\r\n    /**\r\n     * Performs a simple DELETE query by a given conditions in a given table.\r\n     */\r\n    delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Performs a simple DELETE query by a given conditions in a given table.\r\n     */\r\n    delete(tableName: string, conditions: Object): Promise<void>;\r\n\r\n    /**\r\n     * Inserts new values into closure table.\r\n     */\r\n    insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number>;\r\n\r\n    /**\r\n     * Converts a column type of the metadata to the database column's type.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string;\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean;\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    loadTableSchema(tableName: string): Promise<TableSchema|undefined>;\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    loadTableSchemas(tableNames: string[]): Promise<TableSchema[]>;\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    hasTable(tableName: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    createTable(table: TableSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    dropTable(tableName: string): Promise<void>;\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    hasColumn(tableName: string, columnName: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Adds a new column in the table.\r\n     */\r\n    addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new column in the table.\r\n     */\r\n    addColumn(table: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Adds new columns in the table.\r\n     */\r\n    addColumns(tableSchema: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Adds new columns in the table.\r\n     */\r\n    addColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(table: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a columns in the table.\r\n     */\r\n    changeColumns(table: TableSchema, changedColumns: { oldColumn: ColumnSchema, newColumn: ColumnSchema }[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the column in the table.\r\n     */\r\n    dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops the column in the table.\r\n     */\r\n    dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops the column in the table.\r\n     */\r\n    dropColumn(table: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Updates primary keys in the table.\r\n     */\r\n    updatePrimaryKeys(table: TableSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    createForeignKeys(table: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    dropForeignKey(table: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    dropForeignKey(table: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    dropForeignKeys(table: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    dropForeignKeys(table: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    createIndex(tableName: string, index: IndexSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    dropIndex(tableName: string, indexName: string): Promise<void>;\r\n\r\n    /**\r\n     * Truncates table.\r\n     *\r\n     * todo: probably this should be renamed to drop or clear?\r\n     */\r\n    truncate(tableName: string): Promise<void>;\r\n\r\n}","import {DriverOptions} from \"./DriverOptions\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\n\r\n/**\r\n * Driver organizes TypeORM communication with specific database management system.\r\n */\r\nexport interface Driver {\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Driver options contains connectivity options used to connection to the database.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    /**\r\n     * Creates repository instance of this driver.\r\n     */\r\n    // createRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): Repository<any>;\r\n\r\n    /**\r\n     * Creates tree repository instance of this driver.\r\n     */\r\n    // createTreeRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): TreeRepository<any>;\r\n\r\n    /**\r\n     * Creates specific repository instance of this driver.\r\n     */\r\n    // createSpecificRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): SpecificRepository<any>;\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void>;\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    disconnect(): Promise<void>;\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface(): any;\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    createQueryRunner(): Promise<QueryRunner>;\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]];\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string;\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string;\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string;\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, column: ColumnMetadata): any;\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column metadata.\r\n     */\r\n    prepareHydratedValue(value: any, type: ColumnMetadata): any;\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type.\r\n     */\r\n    prepareHydratedValue(value: any, column: ColumnMetadata): any;\r\n\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\n\r\n/**\r\n * Transforms plain old javascript object\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class PlainObjectToNewEntityTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transform<T>(newEntity: T, object: ObjectLiteral, metadata: EntityMetadata): T {\r\n        this.groupAndTransform(newEntity, object, metadata);\r\n        return newEntity;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\r\n     * we need to group our result and we must have some unique id (primary key in our case)\r\n     */\r\n    private groupAndTransform(entity: any, object: ObjectLiteral, metadata: EntityMetadata): void {\r\n\r\n        // copy regular column properties from the given object\r\n        metadata.allColumns\r\n            .filter(column => object.hasOwnProperty(column.propertyName))\r\n            .forEach(column => entity[column.propertyName] = object[column.propertyName]); // todo: also need to be sure that type is correct\r\n\r\n        // if relation is loaded then go into it recursively and transform its values too\r\n        metadata.allRelations\r\n            .filter(relation => object.hasOwnProperty(relation.propertyName))\r\n            .forEach(relation => {\r\n                const relationMetadata = relation.inverseEntityMetadata;\r\n                if (!relationMetadata)\r\n                    throw new Error(\"Relation metadata for the relation \" + metadata.name + \"#\" + relation.propertyName + \" is missing\");\r\n\r\n                if (relation.isManyToMany || relation.isOneToMany) {\r\n                    if (object[relation.propertyName] instanceof Array) {\r\n                        entity[relation.propertyName] = object[relation.propertyName].map((subObject: any) => {\r\n                            let subEntity = relationMetadata.create();\r\n                            // todo: support custom initial fields here\r\n                            if (entity[relation.propertyName] instanceof Array) {\r\n                                const existRelation = entity[relation.propertyName].find((subEntity: any) => {\r\n                                    return subEntity[relation.referencedColumnName] === subObject[relation.referencedColumnName];\r\n                                });\r\n                                if (existRelation)\r\n                                    this.groupAndTransform(subEntity, existRelation, relationMetadata);\r\n                            }\r\n\r\n                            this.groupAndTransform(subEntity, subObject, relationMetadata);\r\n                            return subEntity;\r\n                        });\r\n                    } else {\r\n                        entity[relation.propertyName] = object[relation.propertyName];\r\n                    }\r\n                } else {\r\n                    if (object[relation.propertyName]) {\r\n                        const subEntity = relationMetadata.create();\r\n                        if (entity[relation.propertyName])\r\n                            this.groupAndTransform(subEntity, entity[relation.propertyName], relationMetadata);\r\n\r\n                        this.groupAndTransform(subEntity, object[relation.propertyName], relationMetadata);\r\n                        entity[relation.propertyName] = subEntity;\r\n                    } else {\r\n                        entity[relation.propertyName] = object[relation.propertyName];\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n}","/**\r\n * Defines a special criteria to find specific entity.\r\n */\r\nexport interface FindOneOptions<Entity> {\r\n\r\n    /**\r\n     * Simple condition that should be applied to match entities.\r\n     */\r\n    where?: Partial<Entity>;\r\n\r\n    /**\r\n     * Specifies what relations should be loaded.\r\n     */\r\n    join?: JoinOptions;\r\n\r\n    /**\r\n     * Order, in which entities should be ordered.\r\n     */\r\n    order?: { [P in keyof Entity]?: \"ASC\"|\"DESC\" };\r\n\r\n}\r\n","import {FindOneOptions} from \"./FindOneOptions\";\r\n\r\n/**\r\n * Defines a special criteria to find specific entities.\r\n */\r\nexport interface FindManyOptions<Entity> extends FindOneOptions<Entity> {\r\n\r\n    /**\r\n     * Offset (paginated) where from entities should be taken.\r\n     */\r\n    skip?: number;\r\n\r\n    /**\r\n     * Limit (paginated) - max number of entities should be taken.\r\n     */\r\n    take?: number;\r\n\r\n}\r\n","/**\r\n * Represents some Type of the Object.\r\n */\r\nexport type ObjectType<T> = { new (): T }|Function;\r\n","import {Repository} from \"./Repository\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\n\r\n/**\r\n * Repository with additional functions to work with trees.\r\n *\r\n * @see Repository\r\n */\r\nexport class TreeRepository<Entity> extends Repository<Entity> {\r\n\r\n    // todo: implement moving\r\n    // todo: implement removing\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets complete trees for all roots in the table.\r\n     */\r\n    async findTrees(): Promise<Entity[]> {\r\n        const roots = await this.findRoots();\r\n        await Promise.all(roots.map(async root => {\r\n            await this.findDescendantsTree(root);\r\n        }));\r\n\r\n        return roots;\r\n    }\r\n\r\n    /**\r\n     * Roots are entities that have no ancestors. Finds them all.\r\n     */\r\n    findRoots(): Promise<Entity[]> {\r\n\r\n        const parentPropertyName = this.metadata.treeParentRelation.propertyName;\r\n        return this.createQueryBuilder(\"treeEntity\")\r\n            .where(`treeEntity.${parentPropertyName} IS NULL`)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Creates a query builder used to get descendants of the entities in a tree.\r\n     */\r\n    createDescendantsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): QueryBuilder<Entity> {\r\n\r\n        // create shortcuts for better readability\r\n        const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\r\n        const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\r\n\r\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.firstPrimaryColumn.fullName)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}`;\r\n        return this.createQueryBuilder(alias)\r\n            .innerJoin(this.metadata.closureJunctionTable.table.name, closureTableAlias, joinCondition)\r\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.firstPrimaryColumn.propertyName]}`);\r\n    }\r\n\r\n    /**\r\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\r\n     */\r\n    findDescendants(entity: Entity): Promise<Entity[]> {\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\r\n     */\r\n    findDescendantsTree(entity: Entity): Promise<Entity> {\r\n        // todo: throw exception if there is no column of this relation?\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getEntitiesAndRawResults()\r\n            .then(entitiesAndScalars => {\r\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.rawResults);\r\n                this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);\r\n                return entity;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets number of descendants of the entity.\r\n     */\r\n    countDescendants(entity: Entity): Promise<number> {\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getCount();\r\n    }\r\n\r\n    /**\r\n     * Creates a query builder used to get ancestors of the entities in the tree.\r\n     */\r\n    createAncestorsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): QueryBuilder<Entity> {\r\n\r\n        // create shortcuts for better readability\r\n        const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\r\n        const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\r\n\r\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.firstPrimaryColumn.fullName)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}`;\r\n        return this.createQueryBuilder(alias)\r\n            .innerJoin(this.metadata.closureJunctionTable.table.name, closureTableAlias, joinCondition)\r\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.firstPrimaryColumn.propertyName]}`);\r\n    }\r\n\r\n    /**\r\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\r\n     */\r\n    findAncestors(entity: Entity): Promise<Entity[]> {\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\r\n     */\r\n    findAncestorsTree(entity: Entity): Promise<Entity> {\r\n        // todo: throw exception if there is no column of this relation?\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getEntitiesAndRawResults()\r\n            .then(entitiesAndScalars => {\r\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.rawResults);\r\n                this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);\r\n                return entity;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets number of ancestors of the entity.\r\n     */\r\n    countAncestors(entity: Entity): Promise<number> {\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getCount();\r\n    }\r\n\r\n    /**\r\n     * Moves entity to the children of then given entity.\r\n     *\r\n    move(entity: Entity, to: Entity): Promise<void> {\r\n        return Promise.resolve();\r\n    } */\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected createRelationMaps(alias: string, rawResults: any[]): { id: any, parentId: any }[] {\r\n        return rawResults.map(rawResult => {\r\n            return {\r\n                id: rawResult[alias + \"_\" + this.metadata.firstPrimaryColumn.fullName],\r\n                parentId: rawResult[alias + \"_\" + this.metadata.treeParentRelation.name]\r\n            };\r\n        });\r\n    }\r\n\r\n    protected buildChildrenEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\r\n        const childProperty = this.metadata.treeChildrenRelation.propertyName;\r\n        const parentEntityId = entity[this.metadata.firstPrimaryColumn.propertyName];\r\n        const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\r\n        const childIds = childRelationMaps.map(relationMap => relationMap.id);\r\n        entity[childProperty] = entities.filter(entity => childIds.indexOf(entity[this.metadata.firstPrimaryColumn.propertyName]) !== -1);\r\n        entity[childProperty].forEach((childEntity: any) => {\r\n            this.buildChildrenEntityTree(childEntity, entities, relationMaps);\r\n        });\r\n    }\r\n\r\n    protected buildParentEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\r\n        const parentProperty = this.metadata.treeParentRelation.propertyName;\r\n        const entityId = entity[this.metadata.firstPrimaryColumn.propertyName];\r\n        const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\r\n        const parentEntity = entities.find(entity => {\r\n            if (!parentRelationMap)\r\n                return false;\r\n\r\n            return entity[this.metadata.firstPrimaryColumn.propertyName] === parentRelationMap.parentId;\r\n        });\r\n        if (parentEntity) {\r\n            entity[parentProperty] = parentEntity;\r\n            this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);\r\n        }\r\n    }\r\n\r\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {ColumnTypes} from \"../metadata/types/ColumnTypes\";\r\nimport {DataTransformationUtils} from \"../util/DataTransformationUtils\";\r\n\r\n/**\r\n * Holds information about insert operation into junction table.\r\n */\r\nexport interface JunctionInsert {\r\n\r\n    /**\r\n     * Relation of the junction table.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * Entities that needs to be \"bind\" to the subject.\r\n     */\r\n    junctionEntities: ObjectLiteral[];\r\n}\r\n\r\n/**\r\n * Holds information about remove operation from the junction table.\r\n */\r\nexport interface JunctionRemove {\r\n\r\n    /**\r\n     * Relation of the junction table.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * Entity ids that needs to be removed from the junction table.\r\n     */\r\n    junctionRelationIds: any[];\r\n}\r\n\r\n/**\r\n * Holds information about relation update in some subject.\r\n */\r\nexport interface RelationUpdate {\r\n\r\n    /**\r\n     * Relation that needs to be updated.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * New value that needs to be set into into new relation.\r\n     */\r\n    value: any;\r\n}\r\n\r\n/**\r\n * Subject is a subject of persistence.\r\n * It holds information about each entity that needs to be persisted:\r\n * - what entity should be persisted\r\n * - what is database representation of the persisted entity\r\n * - what entity metadata of the persisted entity\r\n * - what is allowed to with persisted entity (insert/update/remove)\r\n *\r\n * Having this collection of subjects we can perform database queries.\r\n */\r\nexport class Subject {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Persist entity (changed entity).\r\n     */\r\n    private _persistEntity?: ObjectLiteral;\r\n\r\n    /**\r\n     * Database entity.\r\n     */\r\n    private _databaseEntity?: ObjectLiteral;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the subject entity.\r\n     */\r\n    readonly metadata: EntityMetadata;\r\n\r\n    /**\r\n     * Date when this entity is persisted.\r\n     */\r\n    readonly date: Date = new Date();\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if this subject can be inserted into the database.\r\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\r\n     */\r\n    canBeInserted: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this subject can be updated in the database.\r\n     * This means that this subject either was persisted, either can be updated by cascades.\r\n     */\r\n    canBeUpdated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this subject MUST be removed from the database.\r\n     * This means that this subject either was removed, either was removed by cascades.\r\n     */\r\n    mustBeRemoved: boolean = false;\r\n\r\n    /**\r\n     * Differentiated columns between persisted and database entities.\r\n     */\r\n    diffColumns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Differentiated relations between persisted and database entities.\r\n     */\r\n    diffRelations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * List of relations which need to be unset.\r\n     * This is used to update relation from inverse side.\r\n     */\r\n    relationUpdates: RelationUpdate[] = [];\r\n\r\n    /**\r\n     * Records that needs to be inserted into the junction tables of this subject.\r\n     */\r\n    junctionInserts: JunctionInsert[] = [];\r\n\r\n    /**\r\n     * Records that needs to be removed from the junction tables of this subject.\r\n     */\r\n    junctionRemoves: JunctionRemove[] = [];\r\n\r\n    /**\r\n     * When subject is newly persisted it may have a generated entity id.\r\n     * In this case it should be written here.\r\n     */\r\n    newlyGeneratedId?: any;\r\n\r\n    /**\r\n     * When subject is newly persisted it may have a generated object id.\r\n     * This value will be stored here. This is actual only for mongodb database.\r\n     */\r\n    generatedObjectId?: any;\r\n\r\n    /**\r\n     * Generated id of the parent entity. Used in the class-table-inheritance.\r\n     */\r\n    parentGeneratedId?: any;\r\n\r\n    /**\r\n     * Used in newly persisted entities which are tree tables.\r\n     */\r\n    treeLevel?: number;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral) {\r\n        this.metadata = metadata;\r\n        this._persistEntity = entity;\r\n        this._databaseEntity = databaseEntity;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets entity sent to the persistence (e.g. changed entity).\r\n     * Throws error if persisted entity was not set.\r\n     */\r\n    get entity(): ObjectLiteral {\r\n        if (!this._persistEntity)\r\n            throw new Error(`Persistence entity is not set for the given subject.`);\r\n\r\n        return this._persistEntity;\r\n    }\r\n\r\n    /**\r\n     * Checks if subject has a persisted entity.\r\n     */\r\n    get hasEntity(): boolean {\r\n        return !!this._persistEntity;\r\n    }\r\n\r\n    /**\r\n     * Gets entity from the database (e.g. original entity).\r\n     * Throws error if database entity was not set.\r\n     */\r\n    get databaseEntity(): ObjectLiteral {\r\n        if (!this._databaseEntity)\r\n            throw new Error(`Database entity is not set for the given subject.`);\r\n\r\n        return this._databaseEntity;\r\n    }\r\n\r\n    /**\r\n     * Checks if subject has a database entity.\r\n     */\r\n    get hasDatabaseEntity(): boolean {\r\n        return !!this._databaseEntity;\r\n    }\r\n\r\n    /**\r\n     * Sets entity from the database (e.g. original entity).\r\n     * Once database entity set it calculates differentiated columns and relations\r\n     * between persistent entity and database entity.\r\n     */\r\n    set databaseEntity(databaseEntity: ObjectLiteral) {\r\n        this._databaseEntity = databaseEntity;\r\n        this.recompute();\r\n    }\r\n\r\n    /**\r\n     * Gets entity target from the entity metadata of this subject.\r\n     */\r\n    get entityTarget(): Function|string {\r\n        return this.metadata.target;\r\n    }\r\n\r\n    /**\r\n     * Checks if this subject must be inserted into the database.\r\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\r\n     * and if it does not have database entity set.\r\n     */\r\n    get mustBeInserted() {\r\n        return this.canBeInserted && !this.hasDatabaseEntity;\r\n    }\r\n\r\n    /**\r\n     * Checks if this subject must be updated into the database.\r\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\r\n     * and if it does have differentiated columns or relations.\r\n     */\r\n    get mustBeUpdated() {\r\n        return this.canBeUpdated && (this.diffColumns.length > 0 || this.diffRelations.length > 0);\r\n    }\r\n\r\n    /**\r\n     * Checks if this subject has relations to be updated.\r\n     */\r\n    get hasRelationUpdates(): boolean {\r\n        return this.relationUpdates.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets id of the persisted entity.\r\n     * If entity is not set then it returns undefined.\r\n     * If entity itself has an id then it simply returns it.\r\n     * If entity does not have an id then it returns newly generated id.\r\n\r\n    get getPersistedEntityIdMap(): any|undefined {\r\n        if (!this.hasEntity)\r\n            return undefined;\r\n\r\n        const entityIdMap = this.metadata.getDatabaseEntityIdMap(this.entity);\r\n        if (entityIdMap)\r\n            return entityIdMap;\r\n\r\n        if (this.newlyGeneratedId)\r\n            return this.metadata.createSimpleDatabaseIdMap(this.newlyGeneratedId);\r\n\r\n        return undefined;\r\n    }*/\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validates this subject for errors.\r\n     * Subject cannot be at the same time inserted and updated, removed and inserted, removed and updated.\r\n     */\r\n    validate() {\r\n\r\n        if (this.mustBeInserted && this.mustBeRemoved)\r\n            throw new Error(`Removed entity ${this.metadata.name} is also scheduled for insert operation. This looks like ORM problem. Please report a github issue.`);\r\n\r\n        if (this.mustBeUpdated && this.mustBeRemoved)\r\n            throw new Error(`Removed entity \"${this.metadata.name}\" is also scheduled for update operation. ` +\r\n                `Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).`);\r\n\r\n        if (this.mustBeInserted && this.mustBeUpdated)\r\n            throw new Error(`Inserted entity ${this.metadata.name} is also scheduled for updated operation. This looks like ORM problem. Please report a github issue.`);\r\n\r\n    }\r\n\r\n    /**\r\n     * Performs entity re-computations.\r\n     */\r\n    recompute() {\r\n        if (this.hasEntity && this._databaseEntity) {\r\n            this.computeDiffColumns();\r\n            this.computeDiffRelationalColumns();\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Differentiate columns from the updated entity and entity stored in the database.\r\n     */\r\n    protected computeDiffColumns(): void {\r\n        this.diffColumns = this.metadata.allColumns.filter(column => {\r\n\r\n            // prepare both entity and database values to make comparision\r\n            let entityValue = column.getEntityValue(this.entity);\r\n            let databaseValue = column.getEntityValue(this.databaseEntity);\r\n\r\n            // normalize special values to make proper comparision\r\n            if (entityValue !== null && entityValue !== undefined) {\r\n                if (column.type === ColumnTypes.DATE) {\r\n                    entityValue = DataTransformationUtils.mixedDateToDateString(entityValue);\r\n\r\n                } else if (column.type === ColumnTypes.TIME) {\r\n                    entityValue = DataTransformationUtils.mixedDateToTimeString(entityValue);\r\n\r\n                } else if (column.type === ColumnTypes.DATETIME) {\r\n                    // if (column.loadInLocalTimezone) {\r\n                    //     entityValue = DataTransformationUtils.mixedDateToDatetimeString(entityValue);\r\n                    //     databaseValue = DataTransformationUtils.mixedDateToDatetimeString(databaseValue);\r\n                    // } else {\r\n                        entityValue = DataTransformationUtils.mixedDateToUtcDatetimeString(entityValue);\r\n                        databaseValue = DataTransformationUtils.mixedDateToUtcDatetimeString(databaseValue);\r\n                    // }\r\n\r\n                } else if (column.type === ColumnTypes.JSON) {\r\n                    entityValue = JSON.stringify(entityValue);\r\n                    if (databaseValue !== null && databaseValue !== undefined)\r\n                        databaseValue = JSON.stringify(databaseValue);\r\n\r\n                } else if (column.type === ColumnTypes.SIMPLE_ARRAY) {\r\n                    entityValue = DataTransformationUtils.simpleArrayToString(entityValue);\r\n                    databaseValue = DataTransformationUtils.simpleArrayToString(databaseValue);\r\n                }\r\n            }\r\n            // todo: this mechanism does not get in count embeddeds in embeddeds\r\n\r\n            // if value is not defined then no need to update it\r\n            if (!column.isInEmbedded && this.entity[column.propertyName] === undefined)\r\n                return false;\r\n\r\n            // if value is in embedded and is not defined then no need to update it\r\n            if (column.isInEmbedded && (this.entity[column.embeddedProperty] === undefined || this.entity[column.embeddedProperty][column.propertyName] === undefined))\r\n                return false;\r\n\r\n            // if its a special column or value is not changed - then do nothing\r\n            if (column.isVirtual ||\r\n                column.isParentId ||\r\n                column.isDiscriminator ||\r\n                column.isUpdateDate ||\r\n                column.isVersion ||\r\n                column.isCreateDate ||\r\n                entityValue === databaseValue)\r\n                return false;\r\n\r\n            // filter out \"relational columns\" only in the case if there is a relation object in entity\r\n            if (!column.isInEmbedded && this.metadata.hasRelationWithDbName(column.propertyName)) {\r\n                const relation = this.metadata.findRelationWithDbName(column.propertyName); // todo: why with dbName ?\r\n                if (this.entity[relation.propertyName] !== null && this.entity[relation.propertyName] !== undefined)\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Difference columns of the owning one-to-one and many-to-one columns.\r\n     */\r\n    protected computeDiffRelationalColumns(/*todo: updatesByRelations: UpdateByRelationOperation[], */): void {\r\n        this.diffRelations = this.metadata.allRelations.filter(relation => {\r\n            if (!relation.isManyToOne && !(relation.isOneToOne && relation.isOwning))\r\n                return false;\r\n\r\n            // here we cover two scenarios:\r\n            // 1. related entity can be another entity which is natural way\r\n            // 2. related entity can be entity id which is hacked way of updating entity\r\n            // todo: what to do if there is a column with relationId? (cover this too?)\r\n            const updatedEntityRelationId: any =\r\n                this.entity[relation.propertyName] instanceof Object ?\r\n                    relation.inverseEntityMetadata.getEntityIdMixedMap(this.entity[relation.propertyName])\r\n                    : this.entity[relation.propertyName];\r\n\r\n\r\n            // here because we have enabled RELATION_ID_VALUES option in the QueryBuilder when we loaded db entities\r\n            // we have in the dbSubject only relationIds.\r\n            // this allows us to compare relation id in the updated subject with id in the database.\r\n            // note that we used relation.name instead of relation.propertyName because query builder with RELATION_ID_VALUES\r\n            // returns values in the relation.name column, not relation.propertyName column\r\n            const dbEntityRelationId = this.databaseEntity[relation.name];\r\n\r\n            // todo: try to find if there is update by relation operation - we dont need to generate update relation operation for this\r\n            // todo: if (updatesByRelations.find(operation => operation.targetEntity === this && operation.updatedRelation === relation))\r\n            // todo:     return false;\r\n\r\n            // we don't perform operation over undefined properties\r\n            if (updatedEntityRelationId === undefined)\r\n                return false;\r\n\r\n            // if both are empty totally no need to do anything\r\n            if ((updatedEntityRelationId === undefined || updatedEntityRelationId === null) &&\r\n                (dbEntityRelationId === undefined || dbEntityRelationId === null))\r\n                return false;\r\n\r\n            // if relation ids aren't equal then we need to update them\r\n            return updatedEntityRelationId !== dbEntityRelationId;\r\n        });\r\n    }\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {Subject} from \"../persistence/Subject\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\n\r\n/**\r\n * Repository for more specific operations.\r\n */\r\nexport class SpecificRepository<Entity extends ObjectLiteral> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected metadata: EntityMetadata,\r\n                protected queryRunnerProvider?: QueryRunnerProvider) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setRelation(relationName: string, entityId: any, relatedEntityId: any): Promise<void>;\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityId: any): Promise<void>;\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setRelation(relationName: string|((t: Entity) => string|any), entityId: any, relatedEntityId: any): Promise<void> {\r\n        const propertyName = this.metadata.computePropertyName(relationName);\r\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\r\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\r\n\r\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\r\n        // if (relation.isManyToMany || relation.isOneToMany || relation.isOneToOneNotOwner)\r\n        //     throw new Error(`Only many-to-one and one-to-one with join column are supported for this operation. ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\r\n        if (relation.isManyToMany)\r\n            throw new Error(`Many-to-many relation is not supported for this operation. Use #addToRelation method for many-to-many relations.`);\r\n\r\n        let table: string, values: any = {}, conditions: any = {};\r\n        if (relation.isOwning) {\r\n            table = relation.entityMetadata.table.name;\r\n            values[relation.name] = relatedEntityId;\r\n            conditions[relation.joinColumn.referencedColumn.fullName] = entityId;\r\n        } else {\r\n            table = relation.inverseEntityMetadata.table.name;\r\n            values[relation.inverseRelation.name] = relatedEntityId;\r\n            conditions[relation.inverseRelation.joinColumn.referencedColumn.fullName] = entityId;\r\n        }\r\n\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        await queryRunner.update(table, values, conditions);\r\n        if (!this.queryRunnerProvider) // means created by this method\r\n            await queryRunnerProvider.release(queryRunner);\r\n    }\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setInverseRelation(relationName: string, relatedEntityId: any, entityId: any): Promise<void>;\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityId: any): Promise<void>;\r\n\r\n    /**\r\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\r\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async setInverseRelation(relationName: string|((t: Entity) => string|any), relatedEntityId: any, entityId: any): Promise<void> {\r\n        const propertyName = this.metadata.computePropertyName(relationName);\r\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\r\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\r\n\r\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\r\n        // if (relation.isManyToMany || relation.isOneToMany || relation.isOneToOneNotOwner)\r\n        //     throw new Error(`Only many-to-one and one-to-one with join column are supported for this operation. ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\r\n        if (relation.isManyToMany)\r\n            throw new Error(`Many-to-many relation is not supported for this operation. Use #addToRelation method for many-to-many relations.`);\r\n\r\n        let table: string, values: any = {}, conditions: any = {};\r\n        if (relation.isOwning) {\r\n            table = relation.inverseEntityMetadata.table.name;\r\n            values[relation.inverseRelation.name] = relatedEntityId;\r\n            conditions[relation.inverseRelation.joinColumn.referencedColumn.fullName] = entityId;\r\n        } else {\r\n            table = relation.entityMetadata.table.name;\r\n            values[relation.name] = relatedEntityId;\r\n            conditions[relation.joinColumn.referencedColumn.fullName] = entityId;\r\n        }\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        await queryRunner.update(table, values, conditions);\r\n        if (!this.queryRunnerProvider) // means created by this method\r\n            await queryRunnerProvider.release(queryRunner);\r\n    }\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToRelation(relationName: string, entityId: any, relatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToRelation(relationName: string|((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void> {\r\n        const propertyName = this.metadata.computePropertyName(relationName);\r\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\r\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\r\n\r\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\r\n        if (!relation.isManyToMany)\r\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        const insertPromises = relatedEntityIds.map(relatedEntityId => {\r\n            const values: any = {};\r\n            if (relation.isOwning) {\r\n                values[relation.junctionEntityMetadata.columns[0].fullName] = entityId;\r\n                values[relation.junctionEntityMetadata.columns[1].fullName] = relatedEntityId;\r\n            } else {\r\n                values[relation.junctionEntityMetadata.columns[1].fullName] = entityId;\r\n                values[relation.junctionEntityMetadata.columns[0].fullName] = relatedEntityId;\r\n            }\r\n\r\n            return queryRunner.insert(relation.junctionEntityMetadata.table.name, values);\r\n        });\r\n        await Promise.all(insertPromises);\r\n\r\n        if (!this.queryRunnerProvider) // means created by this method\r\n            await queryRunnerProvider.release(queryRunner);\r\n    }\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToInverseRelation(relationName: string, relatedEntityId: any, entityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\r\n     * Should be used when you want quickly and efficiently add a relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addToInverseRelation(relationName: string|((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void> {\r\n        const propertyName = this.metadata.computePropertyName(relationName);\r\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\r\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\r\n\r\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\r\n        if (!relation.isManyToMany)\r\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\r\n\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        try {\r\n            const insertPromises = entityIds.map(entityId => {\r\n                const values: any = {};\r\n                if (relation.isOwning) {\r\n                    values[relation.junctionEntityMetadata.columns[0].fullName] = entityId;\r\n                    values[relation.junctionEntityMetadata.columns[1].fullName] = relatedEntityId;\r\n                } else {\r\n                    values[relation.junctionEntityMetadata.columns[1].fullName] = entityId;\r\n                    values[relation.junctionEntityMetadata.columns[0].fullName] = relatedEntityId;\r\n                }\r\n\r\n                return queryRunner.insert(relation.junctionEntityMetadata.table.name, values);\r\n            });\r\n            await Promise.all(insertPromises);\r\n\r\n        } finally {\r\n            if (!this.queryRunnerProvider) // means created by this method\r\n                await queryRunnerProvider.release(queryRunner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromRelation(relationName: string, entityId: any, relatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromRelation(relationName: string|((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void> {\r\n        const propertyName = this.metadata.computePropertyName(relationName);\r\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\r\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\r\n\r\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\r\n        if (!relation.isManyToMany)\r\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\r\n\r\n        // check if given relation entity ids is empty - then nothing to do here (otherwise next code will remove all ids)\r\n        if (!relatedEntityIds || !relatedEntityIds.length)\r\n            return Promise.resolve();\r\n\r\n        const qb = new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .delete()\r\n            .fromTable(relation.junctionEntityMetadata.table.name, \"junctionEntity\");\r\n\r\n        const firstColumnName = this.connection.driver.escapeColumnName(relation.isOwning ? relation.junctionEntityMetadata.columns[0].fullName : relation.junctionEntityMetadata.columns[1].fullName);\r\n        const secondColumnName = this.connection.driver.escapeColumnName(relation.isOwning ? relation.junctionEntityMetadata.columns[1].fullName : relation.junctionEntityMetadata.columns[0].fullName);\r\n\r\n        relatedEntityIds.forEach((relatedEntityId, index) => {\r\n            qb.orWhere(`(${firstColumnName}=:entityId AND ${secondColumnName}=:relatedEntity_${index})`)\r\n                .setParameter(\"relatedEntity_\" + index, relatedEntityId);\r\n        });\r\n\r\n        await qb\r\n            .setParameter(\"entityId\", entityId)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromInverseRelation(relationName: string, relatedEntityId: any, entityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Removes a relation between two entities from relation's many-to-many table.\r\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeFromInverseRelation(relationName: string|((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void> {\r\n        const propertyName = this.metadata.computePropertyName(relationName);\r\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\r\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\r\n\r\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\r\n        if (!relation.isManyToMany)\r\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\r\n\r\n        // check if given entity ids is empty - then nothing to do here (otherwise next code will remove all ids)\r\n        if (!entityIds || !entityIds.length)\r\n            return Promise.resolve();\r\n\r\n        const qb = new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .delete()\r\n            .from(relation.junctionEntityMetadata.table.name, \"junctionEntity\");\r\n\r\n        const firstColumnName = relation.isOwning ? relation.junctionEntityMetadata.columns[1].fullName : relation.junctionEntityMetadata.columns[0].fullName;\r\n        const secondColumnName = relation.isOwning ? relation.junctionEntityMetadata.columns[0].fullName : relation.junctionEntityMetadata.columns[1].fullName;\r\n\r\n        entityIds.forEach((entityId, index) => {\r\n            qb.orWhere(`(${firstColumnName}=:relatedEntityId AND ${secondColumnName}=:entity_${index})`)\r\n              .setParameter(\"entity_\" + index, entityId);\r\n        });\r\n\r\n        await qb.setParameter(\"relatedEntityId\", relatedEntityId).execute();\r\n    }\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromRelation(relation: string, entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromRelation(relation: ((t: Entity) => string|any), entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromRelation(relation: string|((t: Entity) => string|any), entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void> {\r\n        await Promise.all([\r\n            this.addToRelation(relation as any, entityId, addRelatedEntityIds),\r\n            this.removeFromRelation(relation as any, entityId, removeRelatedEntityIds)\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromInverseRelation(relation: string, relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromInverseRelation(relation: ((t: Entity) => string|any), relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Performs both #addToRelation and #removeFromRelation operations.\r\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async addAndRemoveFromInverseRelation(relation: string|((t: Entity) => string|any), relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void> {\r\n        await Promise.all([\r\n            this.addToInverseRelation(relation as any, relatedEntityId, addEntityIds),\r\n            this.removeFromInverseRelation(relation as any, relatedEntityId, removeEntityIds)\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Removes entity with the given id.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeById(id: any): Promise<void> {\r\n        const alias = this.metadata.table.name;\r\n        const parameters: ObjectLiteral = {};\r\n        let condition = \"\";\r\n\r\n        if (this.metadata.hasMultiplePrimaryKeys) {\r\n            condition = this.metadata.primaryColumns.map(primaryColumn => {\r\n                parameters[primaryColumn.propertyName] = id[primaryColumn.propertyName];\r\n                return alias + \".\" + primaryColumn.propertyName + \"=:\" + primaryColumn.propertyName;\r\n            }).join(\" AND \");\r\n\r\n        } else {\r\n            condition = alias + \".\" + this.metadata.firstPrimaryColumn.propertyName + \"=:id\";\r\n            parameters[\"id\"] = id;\r\n        }\r\n\r\n        await new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .delete()\r\n            .from(this.metadata.target, alias)\r\n            .where(condition, parameters)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Removes all entities with the given ids.\r\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\r\n     */\r\n    async removeByIds(ids: any[]): Promise<void> {\r\n        const alias = this.metadata.table.name;\r\n        const parameters: ObjectLiteral = {};\r\n        let condition = \"\";\r\n\r\n        if (this.metadata.hasMultiplePrimaryKeys) {\r\n            condition = ids.map((id, idIndex) => {\r\n                this.metadata.primaryColumns.map(primaryColumn => {\r\n                    parameters[primaryColumn.propertyName + \"_\" + idIndex] = id[primaryColumn.propertyName];\r\n                    return alias + \".\" + primaryColumn.propertyName + \"=:\" + primaryColumn.propertyName + \"_\" + idIndex;\r\n                }).join(\" AND \");\r\n            }).join(\" OR \");\r\n        } else {\r\n            condition = alias + \".\" + this.metadata.firstPrimaryColumn.propertyName + \" IN (:ids)\";\r\n            parameters[\"ids\"] = ids;\r\n        }\r\n\r\n        await new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .delete()\r\n            .from(this.metadata.target, alias)\r\n            .where(condition, parameters)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Finds all relation ids in the given entities.\r\n     */\r\n    async findRelationIds(relationOrName: RelationMetadata|string|((...args: any[]) => any), entityOrEntities: Entity[]|Entity|any|any[], inIds?: any[], notInIds?: any[]): Promise<any[]> {\r\n\r\n        const relation = this.convertMixedRelationToMetadata(relationOrName);\r\n        if (!(entityOrEntities instanceof Array)) entityOrEntities = [entityOrEntities];\r\n\r\n        const entityReferencedColumn = relation.isOwning ? relation.joinTable.referencedColumn : relation.inverseRelation.joinTable.inverseReferencedColumn;\r\n        const ownerEntityColumn = relation.isOwning ? relation.junctionEntityMetadata.columns[0] : relation.junctionEntityMetadata.columns[1];\r\n        const inverseEntityColumn = relation.isOwning ? relation.junctionEntityMetadata.columns[1] : relation.junctionEntityMetadata.columns[0];\r\n\r\n        let entityIds = this.convertEntityOrEntitiesToIdOrIds(entityReferencedColumn, entityOrEntities);\r\n        if (!(entityIds instanceof Array)) entityIds = [entityIds];\r\n\r\n        // filter out empty entity ids\r\n        entityIds = (entityIds as any[]).filter(entityId => entityId !== null && entityId !== undefined);\r\n\r\n        // if no entity ids at the end, then we don't need to load anything\r\n        if ((entityIds as any[]).length === 0)\r\n            return [];\r\n\r\n        // create shortcuts for better readability\r\n        const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\r\n        const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\r\n\r\n        const ids: any[] = [];\r\n        const promises = (entityIds as any[]).map((entityId: any) => {\r\n            const qb = new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n                .select(escapeAlias(\"junction\") + \".\" + escapeColumn(inverseEntityColumn.fullName) + \" AS \" + escapeColumn(\"id\"))\r\n                .fromTable(relation.junctionEntityMetadata.table.name, \"junction\")\r\n                .andWhere(escapeAlias(\"junction\") + \".\" + escapeColumn(ownerEntityColumn.fullName) + \"=:entityId\", {entityId: entityId});\r\n\r\n            if (inIds && inIds.length > 0)\r\n                qb.andWhere(escapeAlias(\"junction\") + \".\" + escapeColumn(inverseEntityColumn.fullName) + \" IN (:inIds)\", {inIds: inIds});\r\n\r\n            if (notInIds && notInIds.length > 0)\r\n                qb.andWhere(escapeAlias(\"junction\") + \".\" + escapeColumn(inverseEntityColumn.fullName) + \" NOT IN (:notInIds)\", {notInIds: notInIds});\r\n\r\n            return qb.getRawMany()\r\n                .then((results: { id: any }[]) => {\r\n                    results.forEach(result => ids.push(result.id)); // todo: prepare result?\r\n                });\r\n        });\r\n\r\n        await Promise.all(promises);\r\n        return ids;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Converts entity or entities to id or ids map.\r\n     */\r\n    protected convertEntityOrEntitiesToIdOrIds(column: ColumnMetadata, entityOrEntities: Entity[]|Entity|any|any[]): any|any[] {\r\n        if (entityOrEntities instanceof Array) {\r\n            return entityOrEntities.map(entity => this.convertEntityOrEntitiesToIdOrIds(column, entity));\r\n\r\n        } else {\r\n            if (entityOrEntities instanceof Object) {\r\n                return entityOrEntities[column.propertyName];\r\n            } else {\r\n                return entityOrEntities;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts relation name, relation name in function into RelationMetadata.\r\n     */\r\n    protected convertMixedRelationToMetadata(relationOrName: RelationMetadata|string|((...args: any[]) => any)): RelationMetadata {\r\n        if (relationOrName instanceof RelationMetadata)\r\n            return relationOrName;\r\n\r\n        const relationName = relationOrName instanceof Function ? relationOrName(this.metadata.createPropertiesMap()) : relationOrName;\r\n        return this.metadata.findRelationWithPropertyName(relationName);\r\n    }\r\n\r\n    /**\r\n     * Extracts unique objects from given entity and all its downside relations.\r\n     */\r\n    protected extractObjectsById(entity: any, metadata: EntityMetadata, entityWithIds: Subject[] = []): Promise<Subject[]> {\r\n        const promises = metadata.relations.map(relation => {\r\n            const relMetadata = relation.inverseEntityMetadata;\r\n\r\n            const value = relation.isLazy ? entity[\"__\" + relation.propertyName + \"__\"] : entity[relation.propertyName];\r\n            if (!value)\r\n                return undefined;\r\n\r\n            if (value instanceof Array) {\r\n                const subPromises = value.map((subEntity: any) => {\r\n                    return this.extractObjectsById(subEntity, relMetadata, entityWithIds);\r\n                });\r\n                return Promise.all(subPromises);\r\n\r\n            } else {\r\n                return this.extractObjectsById(value, relMetadata, entityWithIds);\r\n            }\r\n        });\r\n\r\n        return Promise.all<any>(promises.filter(result => !!result)).then(() => {\r\n            if (!entityWithIds.find(entityWithId => entityWithId.entity === entity)) {\r\n                const entityWithId = new Subject(metadata, entity);\r\n                entityWithIds.push(entityWithId);\r\n            }\r\n\r\n            return entityWithIds;\r\n        });\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {MongoDriver} from \"./MongoDriver\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\nimport {\r\n    Cursor,\r\n    Db,\r\n    Collection,\r\n    MongoCountPreferences,\r\n    CollectionAggregationOptions,\r\n    AggregationCursor,\r\n    CollectionBluckWriteOptions,\r\n    BulkWriteOpResultObject,\r\n    IndexOptions,\r\n    CollectionOptions,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    ReadPreference,\r\n    Code,\r\n    OrderedBulkOperation,\r\n    UnorderedBulkOperation,\r\n    InsertWriteOpResult,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    InsertOneWriteOpResult,\r\n    CommandCursor,\r\n    MapReduceOptions,\r\n    ParallelCollectionScanOptions,\r\n    ReplaceOneOptions,\r\n    UpdateWriteOpResult,\r\n    CollStats\r\n} from \"mongodb\";\r\n\r\n/**\r\n * Runs queries on a single MongoDB connection.\r\n */\r\nexport class MongoQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: MongoDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    cursor(collectionName: string, query?: ObjectLiteral): Cursor<any> {\r\n        return this.getCollection(collectionName).find(query || {});\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate(collectionName: string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<any> {\r\n        return this.getCollection(collectionName).aggregate(pipeline, options);\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    async bulkWrite(collectionName: string, operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).bulkWrite(operations, options);\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    async count(collectionName: string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        return await this.getCollection(collectionName).count(query || {}, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    async createCollectionIndex(collectionName: string, fieldOrSpec: string|any, options?: IndexOptions): Promise<string> {\r\n        return await this.getCollection(collectionName).createIndex(fieldOrSpec, options);\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    async createCollectionIndexes(collectionName: string, indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        return await this.getCollection(collectionName).createIndexes(indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    async deleteMany(collectionName: string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).deleteMany(query, options);\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    async deleteOne(collectionName: string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).deleteOne(query, options);\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    async distinct(collectionName: string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\r\n        return await this.getCollection(collectionName).distinct(key, query, options);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    async dropCollectionIndex(collectionName: string, indexName: string, options?: CollectionOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).dropIndex(indexName, options);\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    async dropCollectionIndexes(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).dropIndexes();\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndDelete(collectionName: string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndDelete(query, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndReplace(collectionName: string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndReplace(query, replacement, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndUpdate(collectionName: string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.getCollection(collectionName).findOneAndUpdate(query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    async geoHaystackSearch(collectionName: string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).geoHaystackSearch(x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    async geoNear(collectionName: string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).geoNear(x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    async group(collectionName: string, keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\r\n        return await this.getCollection(collectionName).group(keys, condition, initial, reduce, finalize, command, options);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexes(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).indexes();\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexExists(collectionName: string, indexes: string|string[]): Promise<boolean> {\r\n        return await this.getCollection(collectionName).indexExists(indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    async collectionIndexInformation(collectionName: string, options?: { full: boolean }): Promise<any> {\r\n        return await this.getCollection(collectionName).indexInformation(options);\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp(collectionName: string, options?: CollectionOptions): OrderedBulkOperation {\r\n        return this.getCollection(collectionName).initializeOrderedBulkOp(options);\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp(collectionName: string, options?: CollectionOptions): UnorderedBulkOperation {\r\n        return this.getCollection(collectionName).initializeUnorderedBulkOp(options);\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    async insertMany(collectionName: string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        return await this.getCollection(collectionName).insertMany(docs, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    async insertOne(collectionName: string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        return await this.getCollection(collectionName).insertOne(doc, options);\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    async isCapped(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).isCapped();\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes(collectionName: string, options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\r\n        return this.getCollection(collectionName).listIndexes(options);\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    async mapReduce(collectionName: string, map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\r\n        return await this.getCollection(collectionName).mapReduce(map, reduce, options);\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    async parallelCollectionScan(collectionName: string, options?: ParallelCollectionScanOptions): Promise<Cursor<any>[]> {\r\n        return await this.getCollection(collectionName).parallelCollectionScan(options);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async reIndex(collectionName: string): Promise<any> {\r\n        return await this.getCollection(collectionName).reIndex();\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async rename(collectionName: string, newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\r\n        return await this.getCollection(collectionName).rename(newName, options);\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    async replaceOne(collectionName: string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).replaceOne(query, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    async stats(collectionName: string, options?: { scale: number }): Promise<CollStats> {\r\n        return await this.getCollection(collectionName).stats(options);\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    async updateMany(collectionName: string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).updateMany(query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    async updateOne(collectionName: string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.getCollection(collectionName).updateOne(query, update, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods (from QueryRunner)\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * For MongoDB database we don't release connection, because its single connection.\r\n     */\r\n    async release(): Promise<void> {\r\n        // releasing connection are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Removes all collections from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        await this.databaseConnection.connection.dropDatabase();\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Executing SQL query is not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into given table.\r\n     */\r\n    async insert(collectionName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        const results = await this.databaseConnection\r\n            .connection\r\n            .collection(collectionName)\r\n            .insertOne(keyValues);\r\n\r\n        return results.insertedId;\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(collectionName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        await this.databaseConnection\r\n            .connection\r\n            .collection(collectionName)\r\n            .updateOne(conditions, valuesMap);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(collectionName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(collectionName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(collectionName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (typeof conditions === \"string\")\r\n            throw new Error(`String condition is not supported by MongoDB driver.`);\r\n\r\n        await this.databaseConnection\r\n            .connection\r\n            .collection(collectionName)\r\n            .deleteOne(conditions);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(collectionName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(collectionName: string): Promise<TableSchema|undefined> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(collectionNames: string[]): Promise<TableSchema[]> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n        // так я от тебя не слышу что ты получаешь удовольствие. все что я слышу это как ты делаешь холодные расчеты для вы\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(collectionName: string): Promise<boolean> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table schema and column schemas inside it.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableName: string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(collectionName: string, columnName: string): Promise<boolean> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(collectionName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(collectionName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(collectionName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(collectionName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(collectionName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableSchema: TableSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(collectionName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(collectionName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(collectionName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(collectionName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(collectionName: string, index: IndexSchema): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(collectionName: string, indexName: string): Promise<void> {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n        throw new Error(`Schema update queries are not supported by MongoDB driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops collection.\r\n     */\r\n    async truncate(collectionName: string): Promise<void> {\r\n        await this.databaseConnection\r\n            .connection\r\n            .dropCollection(collectionName);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name shortcut.\r\n     */\r\n    protected get dbName(): string {\r\n        return this.driver.options.database as string;\r\n    }\r\n\r\n    /**\r\n     * Gets collection from the database with a given name.\r\n     */\r\n    protected getCollection(collectionName: string): Collection {\r\n        return (this.databaseConnection.connection as Db).collection(collectionName);\r\n    }\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {MongoQueryRunner} from \"./MongoQueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\n\r\n/**\r\n * Organizes communication with MongoDB.\r\n */\r\nexport class MongoDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Mongodb does not require to dynamically create query runner each time,\r\n     * because it does not have a regular pool.\r\n     */\r\n    queryRunner: MongoQueryRunner;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Underlying mongodb driver.\r\n     */\r\n    protected mongodb: any;\r\n\r\n    /**\r\n     * Connection to mongodb database provided by native driver.\r\n     */\r\n    protected pool: any;\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger, mongodb?: any) {\r\n\r\n        // validate options to make sure everything is correct and driver will be able to establish connection\r\n        this.validateOptions(options);\r\n\r\n        // if mongodb package instance was not set explicitly then try to load it\r\n        if (!mongodb)\r\n            mongodb = this.loadDependencies();\r\n\r\n        this.options = options;\r\n        this.logger = logger;\r\n        this.mongodb = mongodb;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    connect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.mongodb.MongoClient.connect(this.buildConnectionUrl(), this.options.extra, (err: any, database: any) => {\r\n                if (err) return fail(err);\r\n\r\n                this.pool = database;\r\n                const databaseConnection: DatabaseConnection = {\r\n                    id: 1,\r\n                    connection: this.pool,\r\n                    isTransactionActive: false\r\n                };\r\n                this.queryRunner = new MongoQueryRunner(databaseConnection, this, this.logger);\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        if (!this.pool)\r\n            throw new ConnectionIsNotSetError(\"mongodb\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n            this.pool.close(handler);\r\n            this.pool = undefined;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mongodb\"));\r\n\r\n        return this.queryRunner;\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.mongodb,\r\n            connection: this.pool\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        throw new Error(`This operation is not supported by Mongodb driver.`);\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return columnName;\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return aliasName;\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return tableName;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            // case ColumnTypes.BOOLEAN:\r\n            //     return value === true ? 1 : 0;\r\n            //\r\n            // case ColumnTypes.DATE:\r\n            //     return DataTransformationUtils.mixedDateToDateString(value);\r\n            //\r\n            // case ColumnTypes.TIME:\r\n            //     return DataTransformationUtils.mixedDateToTimeString(value);\r\n            //\r\n            // case ColumnTypes.DATETIME:\r\n            //     if (columnMetadata.localTimezone) {\r\n            //         return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n            //     } else {\r\n            //         return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n            //     }\r\n            //\r\n            // case ColumnTypes.JSON:\r\n            //     return JSON.stringify(value);\r\n            //\r\n            // case ColumnTypes.SIMPLE_ARRAY:\r\n            //     return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            // case ColumnTypes.BOOLEAN:\r\n            //     return value ? true : false;\r\n            //\r\n            // case ColumnTypes.JSON:\r\n            //     return JSON.parse(value);\r\n            //\r\n            // case ColumnTypes.SIMPLE_ARRAY:\r\n            //     return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        // if (columnMetadata.isObjectId)\r\n        //     return new ObjectID(value);\r\n\r\n        return value;\r\n    }\r\n\r\n    // todo: make better abstraction\r\n    async syncSchema(entityMetadatas: EntityMetadata[]): Promise<void> {\r\n        const queryRunner = await this.createQueryRunner() as MongoQueryRunner;\r\n        const promises: Promise<any>[] = [];\r\n        await Promise.all(entityMetadatas.map(metadata => {\r\n            metadata.indices.forEach(index => {\r\n                const columns = index.buildColumnsAsMap(1);\r\n                const options = { name: index.name };\r\n                promises.push(queryRunner.createCollectionIndex(metadata.table.name, columns, options));\r\n            });\r\n        }));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validate driver options to make sure everything is correct and driver will be able to establish connection.\r\n     */\r\n    protected validateOptions(options: DriverOptions) {\r\n        if (!options.url) {\r\n            if (!options.database)\r\n                throw new DriverOptionNotSetError(\"database\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): any {\r\n        try {\r\n            return PlatformTools.load(\"mongodb\");  // try to load native driver dynamically\r\n\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\"MongoDB\", \"mongodb\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds connection url that is passed to underlying driver to perform connection to the mongodb database.\r\n     */\r\n    protected buildConnectionUrl(): string {\r\n        if (this.options.url)\r\n            return this.options.url;\r\n\r\n        return `mongodb://${this.options.host || \"127.0.0.1\"}:${this.options.port || \"27017\"}/${this.options.database}`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {Driver} from \"../../driver/Driver\";\r\nimport {MongoDriver} from \"../../driver/mongodb/MongoDriver\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {EmbeddedMetadata} from \"../../metadata/EmbeddedMetadata\";\r\n\r\n/**\r\n * Transforms raw document into entity object.\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class DocumentToEntityTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(// private aliasMap: AliasMap,\r\n                // private joinMappings: JoinMapping[],\r\n                // private relationCountMetas: RelationCountMeta[],\r\n                private enableRelationIdValues: boolean = false\r\n    ) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transformAll(documents: ObjectLiteral[], metadata: EntityMetadata) {\r\n        return documents.map(document => this.transform(document, metadata));\r\n    }\r\n\r\n    transform(document: any, metadata: EntityMetadata) {\r\n        const entity: any = metadata.create();\r\n        let hasData = false;\r\n\r\n        // handle _id property the special way\r\n        if (metadata.hasObjectIdColumn && document[metadata.objectIdColumn.name]) {\r\n            // todo: we can't use driver in this class\r\n            // do we really need prepare hydrated value here? If no then no problem. If yes then think maybe prepareHydratedValue process should be extracted out of driver class?\r\n            // entity[metadata.objectIdColumn.propertyName] = this.driver.prepareHydratedValue(document[metadata.objectIdColumn.name\"], metadata.objectIdColumn);\r\n            entity[metadata.objectIdColumn.propertyName] = document[metadata.objectIdColumn.name];\r\n            hasData = true;\r\n        }\r\n\r\n        // add special columns that contains relation ids\r\n        if (this.enableRelationIdValues) {\r\n            metadata.columns.filter(column => !!column.relationMetadata).forEach(column => {\r\n                const valueInObject = document[column.name];\r\n                if (valueInObject !== undefined && valueInObject !== null && column.propertyName) {\r\n                    // todo: we can't use driver in this class\r\n                    // const value = this.driver.prepareHydratedValue(valueInObject, column);\r\n                    entity[column.propertyName] = valueInObject;\r\n                    hasData = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        /*this.joinMappings\r\n            .filter(joinMapping => joinMapping.parentName === alias.name && !joinMapping.alias.parentAliasName && joinMapping.alias.target)\r\n            .map(joinMapping => {\r\n                const relatedEntities = this.transformIntoSingleResult(rawSqlResults, joinMapping.alias);\r\n                const isResultArray = joinMapping.isMany;\r\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\r\n\r\n                if (result && (!isResultArray || result.length > 0)) {\r\n                    entity[joinMapping.propertyName] = result;\r\n                    hasData = true;\r\n                }\r\n            });*/\r\n\r\n        // get value from columns selections and put them into object\r\n        metadata.columnsWithoutEmbeddeds.forEach(column => {\r\n            const valueInObject = document[column.name];\r\n            if (valueInObject !== undefined &&\r\n                valueInObject !== null &&\r\n                column.propertyName &&\r\n                !column.isVirtual &&\r\n                !column.isParentId &&\r\n                !column.isDiscriminator) {\r\n                // const value = this.driver.prepareHydratedValue(valueInObject, column);\r\n\r\n                entity[column.propertyName] = valueInObject;\r\n                hasData = true;\r\n            }\r\n        });\r\n\r\n        const addEmbeddedValuesRecursively = (entity: any, document: any, embeddeds: EmbeddedMetadata[]) => {\r\n            embeddeds.forEach(embedded => {\r\n                if (!document[embedded.prefix])\r\n                    return;\r\n\r\n                if (embedded.isArray) {\r\n                    entity[embedded.propertyName] = (document[embedded.prefix] as any[]).map(subValue => {\r\n                        const newItem = embedded.create();\r\n                        embedded.columns.forEach(column => {\r\n                            newItem[column.propertyName] = subValue[column.name];\r\n                        });\r\n                        return newItem;\r\n                    });\r\n\r\n                } else {\r\n                    embedded.columns.forEach(column => {\r\n                        const value = document[embedded.prefix][column.name];\r\n                        if (!value) return;\r\n\r\n                        if (!entity[embedded.propertyName])\r\n                            entity[embedded.propertyName] = embedded.create();\r\n\r\n                        entity[embedded.propertyName][column.propertyName] = value;\r\n                    });\r\n                }\r\n                addEmbeddedValuesRecursively(entity[embedded.propertyName], document[embedded.prefix], embedded.embeddeds);\r\n            });\r\n        };\r\n\r\n        addEmbeddedValuesRecursively(entity, document, metadata.embeddeds);\r\n\r\n        // if relation is loaded then go into it recursively and transform its values too\r\n        /*metadata.relations.forEach(relation => {\r\n            const relationAlias = this.aliasMap.findAliasByParent(alias.name, relation.propertyName);\r\n            if (relationAlias) {\r\n                const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"join\" && joinMapping.alias === relationAlias);\r\n                const relatedEntities = this.transformIntoSingleResult(rawSqlResults, relationAlias);\r\n                const isResultArray = relation.isManyToMany || relation.isOneToMany;\r\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\r\n\r\n                if (result) {\r\n                    let propertyName = relation.propertyName;\r\n                    if (joinMapping) {\r\n                        propertyName = joinMapping.propertyName;\r\n                    }\r\n\r\n                    if (relation.isLazy) {\r\n                        entity[\"__\" + propertyName + \"__\"] = result;\r\n                    } else {\r\n                        entity[propertyName] = result;\r\n                    }\r\n\r\n                    if (!isResultArray || result.length > 0)\r\n                        hasData = true;\r\n                }\r\n            }\r\n\r\n            // if relation has id field then relation id/ids to that field.\r\n            if (relation.isManyToMany) {\r\n                if (relationAlias) {\r\n                    const ids: any[] = [];\r\n                    const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"relationId\" && joinMapping.alias === relationAlias);\r\n\r\n                    if (relation.idField || joinMapping) {\r\n                        const propertyName = joinMapping ? joinMapping.propertyName : relation.idField as string;\r\n                        const junctionMetadata = relation.junctionEntityMetadata;\r\n                        const columnName = relation.isOwning ? junctionMetadata.columns[1].name : junctionMetadata.columns[0].name;\r\n\r\n                        rawSqlResults.forEach(results => {\r\n                            if (relationAlias) {\r\n                                const resultsKey = relationAlias.name + \"_\" + columnName;\r\n                                const value = this.driver.prepareHydratedValue(results[resultsKey], relation.referencedColumn);\r\n                                if (value !== undefined && value !== null)\r\n                                    ids.push(value);\r\n                            }\r\n                        });\r\n\r\n                        if (ids && ids.length)\r\n                            entity[propertyName] = ids;\r\n                    }\r\n                }\r\n            } else if (relation.idField) {\r\n                const relationName = relation.name;\r\n                entity[relation.idField] = this.driver.prepareHydratedValue(rawSqlResults[0][alias.name + \"_\" + relationName], relation.referencedColumn);\r\n            }\r\n\r\n            // if relation counter\r\n            this.relationCountMetas.forEach(joinMeta => {\r\n                if (joinMeta.alias === relationAlias) {\r\n                    // console.log(\"relation count was found for relation: \", relation);\r\n                    // joinMeta.entity = entity;\r\n                    joinMeta.entities.push({ entity: entity, metadata: metadata });\r\n                    // console.log(joinMeta);\r\n                    // console.log(\"---------------------\");\r\n                }\r\n            });\r\n        });*/\r\n\r\n        return hasData ? entity : null;\r\n    }\r\n\r\n}","import {FindManyOptions} from \"./FindManyOptions\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {FindOneOptions} from \"./FindOneOptions\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\n/**\r\n * Utilities to work with FindOptions.\r\n */\r\nexport class FindOptionsUtils {\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOneOptions interface.\r\n     */\r\n    static isFindOneOptions(object: any): object is FindOneOptions<any> {\r\n        const possibleOptions: FindOneOptions<any> = object;\r\n        return possibleOptions &&\r\n                (\r\n                    possibleOptions.where instanceof Object ||\r\n                    possibleOptions.join instanceof Object ||\r\n                    possibleOptions.order instanceof Object\r\n                );\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindManyOptions interface.\r\n     */\r\n    static isFindManyOptions(object: any): object is FindManyOptions<any> {\r\n        const possibleOptions: FindManyOptions<any> = object;\r\n        return possibleOptions &&\r\n                (\r\n                    possibleOptions.where instanceof Object ||\r\n                    possibleOptions.join instanceof Object ||\r\n                    possibleOptions.order instanceof Object ||\r\n                    typeof possibleOptions.skip === \"number\" ||\r\n                    typeof possibleOptions.take === \"number\"\r\n                );\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOptions interface.\r\n     */\r\n    static extractFindOneOptionsAlias(object: any): string|undefined {\r\n        if (this.isFindOneOptions(object) && object.join)\r\n            return object.join.alias;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOptions interface.\r\n     */\r\n    static extractFindManyOptionsAlias(object: any): string|undefined {\r\n        if (this.isFindManyOptions(object) && object.join)\r\n            return object.join.alias;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Applies give find one options to the given query builder.\r\n     */\r\n    static applyFindOneOptionsOrConditionsToQueryBuilder<T>(qb: QueryBuilder<T>, options: FindOneOptions<T>|Partial<T>|undefined): QueryBuilder<T> {\r\n        if (this.isFindOneOptions(options))\r\n            return this.applyOptionsToQueryBuilder(qb, options);\r\n\r\n        if (options)\r\n            return this.applyConditions(qb, options);\r\n\r\n        return qb;\r\n    }\r\n\r\n    /**\r\n     * Applies give find many options to the given query builder.\r\n     */\r\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: QueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): QueryBuilder<T> {\r\n        if (this.isFindManyOptions(options))\r\n            return this.applyOptionsToQueryBuilder(qb, options);\r\n\r\n        if (options)\r\n            return this.applyConditions(qb, options);\r\n\r\n        return qb;\r\n    }\r\n\r\n    /**\r\n     * Applies give find options to the given query builder.\r\n     */\r\n    static applyOptionsToQueryBuilder<T>(qb: QueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): QueryBuilder<T> {\r\n\r\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\r\n        if (!options || !this.isFindOneOptions(options))\r\n            return qb;\r\n\r\n        // apply all options from FindOptions\r\n        if (options.where)\r\n            this.applyConditions(qb, options.where);\r\n\r\n        if ((options as FindManyOptions<T>).skip)\r\n            qb.skip((options as FindManyOptions<T>).skip!);\r\n\r\n        if ((options as FindManyOptions<T>).take)\r\n            qb.take((options as FindManyOptions<T>).take!);\r\n\r\n        if (options.order)\r\n            Object.keys(options.order).forEach(key => {\r\n                qb.addOrderBy(qb.alias + \".\" + key, (options as FindOneOptions<T>).order![key as any]);\r\n            });\r\n\r\n        if (options.join) {\r\n            if (options.join.leftJoin)\r\n                Object.keys(options.join.leftJoin).forEach(key => {\r\n                    qb.leftJoin(options.join!.leftJoin![key], key);\r\n                });\r\n\r\n            if (options.join.innerJoin)\r\n                Object.keys(options.join.innerJoin).forEach(key => {\r\n                    qb.innerJoin(options.join!.innerJoin![key], key);\r\n                });\r\n\r\n            if (options.join.leftJoinAndSelect)\r\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\r\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\r\n                });\r\n\r\n            if (options.join.innerJoinAndSelect)\r\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\r\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\r\n                });\r\n        }\r\n\r\n        return qb;\r\n    }\r\n\r\n    /**\r\n     * Applies given simple conditions set to a given query builder.\r\n     */\r\n    static applyConditions<T>(qb: QueryBuilder<T>, conditions: ObjectLiteral): QueryBuilder<T> {\r\n        Object.keys(conditions).forEach((key, index) => {\r\n            if (conditions![key] === null) {\r\n                qb.andWhere(`${qb.alias}.${key} IS NULL`);\r\n\r\n            } else {\r\n                const parameterName = \"where_\" + index;\r\n                qb.andWhere(`${qb.alias}.${key}=:${parameterName}`)\r\n                    .setParameter(parameterName, conditions![key]);\r\n            }\r\n        });\r\n\r\n        return qb;\r\n    }\r\n\r\n}","/**\r\n * Same as Partial<T> but goes deeper and makes Partial<T> all its properties and sub-properties.\r\n */\r\nexport type DeepPartial<T> = {\r\n    [P in keyof T]?: DeepPartial<T[P]>;\r\n};\r\n","import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {Repository} from \"./Repository\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {MongoQueryRunner} from \"../driver/mongodb/MongoQueryRunner\";\r\nimport {DocumentToEntityTransformer} from \"../query-builder/transformer/DocumentToEntityTransformer\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\r\nimport {\r\n    Cursor,\r\n    Collection,\r\n    MongoCountPreferences,\r\n    CollectionAggregationOptions,\r\n    AggregationCursor,\r\n    CollectionBluckWriteOptions,\r\n    BulkWriteOpResultObject,\r\n    IndexOptions,\r\n    CollectionOptions,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    ReadPreference,\r\n    Code,\r\n    OrderedBulkOperation,\r\n    UnorderedBulkOperation,\r\n    InsertWriteOpResult,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    InsertOneWriteOpResult,\r\n    CommandCursor,\r\n    MapReduceOptions,\r\n    ParallelCollectionScanOptions,\r\n    ReplaceOneOptions,\r\n    UpdateWriteOpResult,\r\n    CollStats, MongoCallback, MongoError, CursorResult\r\n} from \"mongodb\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\n\r\n/**\r\n * Repository used to manage mongodb documents of a single entity type.\r\n */\r\nexport class MongoRepository<Entity extends ObjectLiteral> extends Repository<Entity> {\r\n\r\n    // todo: implement join from find options too\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Raw SQL query execution is not supported by MongoDB.\r\n     * Calling this method will return an error.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Queries aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Transactions are not supported by MongoDB.\r\n     * Calling this method will return an error.\r\n     */\r\n    transaction(runInTransaction: (repository: Repository<Entity>) => Promise<any>|any): Promise<any> {\r\n        throw new Error(`Transactions aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Using Query Builder with MongoDB is not supported yet.\r\n     * Calling this method will return an error.\r\n     */\r\n    createQueryBuilder(alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        throw new Error(`Query Builder is not supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    async find(optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        return cursor.toArray();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    async findAndCount(optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[ Entity[], number ]> {\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        const [results, count] = await Promise.all<any>([\r\n            cursor.toArray(),\r\n            this.queryRunner.count(this.metadata.table.name, query),\r\n        ]);\r\n        return [results, parseInt(count)];\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    async findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const query = this.convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\r\n        query[\"_id\"] = { $in: ids };\r\n\r\n        const cursor = await this.createEntityCursor(query);\r\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.skip)\r\n                cursor.skip(optionsOrConditions.skip);\r\n            if (optionsOrConditions.take)\r\n                cursor.limit(optionsOrConditions.take);\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n        return await cursor.toArray();\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions and/or find options.\r\n     */\r\n    async findOne(optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions);\r\n        const cursor = await this.createEntityCursor(query);\r\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n\r\n        // const result = await cursor.limit(1).next();\r\n        const result = await cursor.limit(1).toArray();\r\n        return result.length > 0 ? result[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    async findOneById(id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const query = this.convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions) || {};\r\n        query[\"_id\"] = id;\r\n        const cursor = await this.createEntityCursor(query);\r\n        if (FindOptionsUtils.isFindOneOptions(optionsOrConditions)) {\r\n            if (optionsOrConditions.order)\r\n                cursor.sort(this.convertFindOptionsOrderToOrderCriteria(optionsOrConditions.order));\r\n        }\r\n\r\n        // const result = await cursor.limit(1).next();\r\n        const result = await cursor.limit(1).toArray();\r\n        return result.length > 0 ? result[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    createCursor(query?: ObjectLiteral): Cursor<Entity> {\r\n        return this.queryRunner.cursor(this.metadata.table.name, query);\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    createEntityCursor(query?: ObjectLiteral): Cursor<Entity> {\r\n        const cursor = this.createCursor(query);\r\n        const repository = this;\r\n        cursor.toArray = function (callback?: MongoCallback<Entity[]>) {\r\n            if (callback) {\r\n                Cursor.prototype.toArray.call(this, (error: MongoError, results: Entity[]): void => {\r\n                    if (error) {\r\n                        callback(error, results);\r\n                        return;\r\n                    }\r\n\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return callback(error, transformer.transformAll(results, repository.metadata));\r\n                });\r\n            } else {\r\n                return Cursor.prototype.toArray.call(this).then((results: Entity[]) => {\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return transformer.transformAll(results, repository.metadata);\r\n                });\r\n            }\r\n        };\r\n        cursor.next = function (callback?: MongoCallback<CursorResult>) {\r\n            if (callback) {\r\n                Cursor.prototype.next.call(this, (error: MongoError, result: CursorResult): void => {\r\n                    if (error || !result) {\r\n                        callback(error, result);\r\n                        return;\r\n                    }\r\n\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return callback(error, transformer.transform(result, repository.metadata));\r\n                });\r\n            } else {\r\n                return Cursor.prototype.next.call(this).then((result: Entity) => {\r\n                    if (!result) return result;\r\n                    const transformer = new DocumentToEntityTransformer();\r\n                    return transformer.transform(result, repository.metadata);\r\n                });\r\n            }\r\n        };\r\n        return cursor;\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate(pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\r\n        return this.queryRunner.aggregate(this.metadata.table.name, pipeline, options);\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    async bulkWrite(operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        return await this.queryRunner.bulkWrite(this.metadata.table.name, operations, options);\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    async count(query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        return await this.queryRunner.count(this.metadata.table.name, query || {}, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    async createCollectionIndex(fieldOrSpec: string|any, options?: IndexOptions): Promise<string> {\r\n        return await this.queryRunner.createCollectionIndex(this.metadata.table.name, fieldOrSpec, options);\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error.\r\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    async createCollectionIndexes(indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        return await this.queryRunner.createCollectionIndexes(this.metadata.table.name, indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    async deleteMany(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.queryRunner.deleteMany(this.metadata.table.name, query, options);\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    async deleteOne(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return await this.queryRunner.deleteOne(this.metadata.table.name, query, options);\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    async distinct(key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\r\n        return await this.queryRunner.distinct(this.metadata.table.name, key, query, options);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    async dropCollectionIndex(indexName: string, options?: CollectionOptions): Promise<any> {\r\n        return await this.queryRunner.dropCollectionIndex(this.metadata.table.name, indexName, options);\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    async dropCollectionIndexes(): Promise<any> {\r\n        return await this.queryRunner.dropCollectionIndexes(this.metadata.table.name);\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndDelete(query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.queryRunner.findOneAndDelete(this.metadata.table.name, query, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndReplace(query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.queryRunner.findOneAndReplace(this.metadata.table.name, query, replacement, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndUpdate(query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return await this.queryRunner.findOneAndUpdate(this.metadata.table.name, query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    async geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        return await this.queryRunner.geoHaystackSearch(this.metadata.table.name, x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    async geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        return await this.queryRunner.geoNear(this.metadata.table.name, x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    async group(keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\r\n        return await this.queryRunner.group(this.metadata.table.name, keys, condition, initial, reduce, finalize, command, options);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexes(): Promise<any> {\r\n        return await this.queryRunner.collectionIndexes(this.metadata.table.name);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexExists(indexes: string|string[]): Promise<boolean> {\r\n        return await this.queryRunner.collectionIndexExists(this.metadata.table.name, indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    async collectionIndexInformation(options?: { full: boolean }): Promise<any> {\r\n        return await this.queryRunner.collectionIndexInformation(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation {\r\n        return this.queryRunner.initializeOrderedBulkOp(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation {\r\n        return this.queryRunner.initializeUnorderedBulkOp(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    async insertMany(docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        return await this.queryRunner.insertMany(this.metadata.table.name, docs, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    async insertOne(doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        return await this.queryRunner.insertOne(this.metadata.table.name, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    async isCapped(): Promise<any> {\r\n        return await this.queryRunner.isCapped(this.metadata.table.name);\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes(options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\r\n        return this.queryRunner.listCollectionIndexes(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    async mapReduce(map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\r\n        return await this.queryRunner.mapReduce(this.metadata.table.name, map, reduce, options);\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    async parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\r\n        return await this.queryRunner.parallelCollectionScan(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async reIndex(): Promise<any> {\r\n        return await this.queryRunner.reIndex(this.metadata.table.name);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\r\n        return await this.queryRunner.rename(this.metadata.table.name, newName, options);\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    async replaceOne(query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.queryRunner.replaceOne(this.metadata.table.name, query, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    async stats(options?: { scale: number }): Promise<CollStats> {\r\n        return await this.queryRunner.stats(this.metadata.table.name, options);\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    async updateMany(query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\r\n        return await this.queryRunner.updateMany(this.metadata.table.name, query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    async updateOne(query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return await this.queryRunner.updateOne(this.metadata.table.name, query, update, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    // todo: extra these methods into separate class\r\n\r\n    protected get queryRunner(): MongoQueryRunner {\r\n        return (this.connection.driver as MongoDriver).queryRunner;\r\n    }\r\n\r\n    protected convertFindManyOptionsOrConditionsToMongodbQuery(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\r\n        if (!optionsOrConditions)\r\n            return undefined;\r\n\r\n        return FindOptionsUtils.isFindManyOptions(optionsOrConditions) ? optionsOrConditions.where : optionsOrConditions;\r\n    }\r\n\r\n    protected convertFindOneOptionsOrConditionsToMongodbQuery(optionsOrConditions: FindOneOptions<Entity>|Partial<Entity>|undefined): ObjectLiteral|undefined {\r\n        if (!optionsOrConditions)\r\n            return undefined;\r\n\r\n        return FindOptionsUtils.isFindOneOptions(optionsOrConditions) ? optionsOrConditions.where : optionsOrConditions;\r\n    }\r\n\r\n    protected convertFindOptionsOrderToOrderCriteria<P>(order: { [P in keyof Entity]?: \"ASC\"|\"DESC\" }) {\r\n        const orderCriteria: ObjectLiteral = {};\r\n        Object.keys(order).forEach(key => orderCriteria[key] = [key, order[key]!.toLowerCase()]);\r\n        return orderCriteria;\r\n    }\r\n\r\n}","import {TreeRepository} from \"./TreeRepository\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {Repository} from \"./Repository\";\r\nimport {SpecificRepository} from \"./SpecificRepository\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {MongoRepository} from \"./MongoRepository\";\r\n\r\n/**\r\n * Factory used to create different types of repositories.\r\n */\r\nexport class RepositoryFactory {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a regular repository.\r\n     */\r\n    createRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): Repository<any> {\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        let repository: Repository<any>;\r\n        if (connection.driver instanceof MongoDriver) {\r\n            repository = new MongoRepository();\r\n        } else {\r\n            repository = new Repository<any>();\r\n        }\r\n        (repository as any)[\"connection\"] = connection;\r\n        (repository as any)[\"metadata\"] = metadata;\r\n        (repository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Creates a tree repository.\r\n     */\r\n    createTreeRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): TreeRepository<any> {\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        const repository = new TreeRepository<any>();\r\n        (repository as any)[\"connection\"] = connection;\r\n        (repository as any)[\"metadata\"] = metadata;\r\n        (repository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Creates a specific repository.\r\n     */\r\n    createSpecificRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): SpecificRepository<any> {\r\n        return new SpecificRepository(connection, metadata, queryRunnerProvider);\r\n    }\r\n\r\n}","/**\r\n * Container options.\r\n */\r\nexport interface UseContainerOptions {\r\n\r\n    /**\r\n     * If set to true, then default container will be used in the case if given container haven't returned anything.\r\n     */\r\n    fallback?: boolean;\r\n\r\n    /**\r\n     * If set to true, then default container will be used in the case if given container thrown an exception.\r\n     */\r\n    fallbackOnErrors?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\r\n * container simply creates a new instance of the given class.\r\n */\r\nexport const defaultContainer: { get<T>(someClass: { new (...args: any[]): T }|Function): T } = new (class {\r\n    private instances: { type: Function, object: any }[] = [];\r\n\r\n    get<T>(someClass: { new (...args: any[]): T }): T {\r\n        let instance = this.instances.find(instance => instance.type === someClass);\r\n        if (!instance) {\r\n            instance = { type: someClass, object: new someClass() };\r\n            this.instances.push(instance);\r\n        }\r\n\r\n        return instance.object;\r\n    }\r\n})();\r\n\r\nlet userContainer: { get<T>(someClass: { new (...args: any[]): T }|Function): T };\r\nlet userContainerOptions: UseContainerOptions|undefined;\r\n\r\n/**\r\n * Sets container to be used by this library.\r\n */\r\nexport function useContainer(iocContainer: { get(someClass: any): any }, options?: UseContainerOptions) {\r\n    userContainer = iocContainer;\r\n    userContainerOptions = options;\r\n}\r\n\r\n/**\r\n * Gets the IOC container used by this library.\r\n */\r\nexport function getFromContainer<T>(someClass: { new (...args: any[]): T }|Function): T {\r\n    if (userContainer) {\r\n        try {\r\n            const instance = userContainer.get(someClass);\r\n            if (instance)\r\n                return instance;\r\n\r\n            if (!userContainerOptions || !userContainerOptions.fallback)\r\n                return instance;\r\n\r\n        } catch (error) {\r\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\r\n                throw error;\r\n        }\r\n    }\r\n    return defaultContainer.get<T>(someClass);\r\n}","import {Repository} from \"./Repository\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {SpecificRepository} from \"./SpecificRepository\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {TreeRepository} from \"./TreeRepository\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {RepositoryFactory} from \"./RepositoryFactory\";\r\nimport {getFromContainer} from \"../container\";\r\n\r\n/**\r\n * Aggregates all repositories of the specific metadata.\r\n */\r\nexport class RepositoryAggregator {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata which owns repositories.\r\n     */\r\n    public readonly metadata: EntityMetadata;\r\n\r\n    /**\r\n     * Ordinary repository.\r\n     */\r\n    public readonly repository: Repository<any>;\r\n\r\n    /**\r\n     * Tree repository.\r\n     */\r\n    public readonly treeRepository?: TreeRepository<any>;\r\n\r\n    /**\r\n     * Repository with specific functions.\r\n     */\r\n    public readonly specificRepository: SpecificRepository<any>;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider) {\r\n        this.metadata = metadata;\r\n\r\n        const factory = getFromContainer(RepositoryFactory);\r\n\r\n        if (metadata.table.isClosure) {\r\n            this.repository = this.treeRepository = factory.createTreeRepository(connection, metadata, queryRunnerProvider);\r\n        } else {\r\n            this.repository = factory.createRepository(connection, metadata, queryRunnerProvider);\r\n        }\r\n\r\n        this.specificRepository = factory.createSpecificRepository(connection, metadata, queryRunnerProvider);\r\n    }\r\n\r\n}","/**\r\n * Thrown when repository for the given class is not found.\r\n */\r\nexport class RepositoryNotTreeError extends Error {\r\n    name = \"RepositoryNotTreeError\";\r\n\r\n    constructor(entityClass: Function|string) {\r\n        super();\r\n        const targetName = typeof entityClass === \"function\" && (<any> entityClass).name ? (<any> entityClass).name : entityClass;\r\n        this.message = `Repository of the \"${targetName}\" class is not a TreeRepository. Try to use @ClosureTable decorator instead of @Table.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to release entity manager that does not use single database connection.\r\n */\r\nexport class NoNeedToReleaseEntityManagerError extends Error {\r\n    name = \"NoNeedToReleaseEntityManagerError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Entity manager is not using single database connection and cannot be released. ` +\r\n            `Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection ` +\r\n            `methods have a single database connection and they should be released.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to use query runner from query runner provider after it was released.\r\n */\r\nexport class QueryRunnerProviderAlreadyReleasedError extends Error {\r\n    name = \"QueryRunnerProviderAlreadyReleasedError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {Repository} from \"../repository/Repository\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {TreeRepository} from \"../repository/TreeRepository\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {RepositoryAggregator} from \"../repository/RepositoryAggregator\";\r\nimport {RepositoryNotTreeError} from \"../connection/error/RepositoryNotTreeError\";\r\nimport {NoNeedToReleaseEntityManagerError} from \"./error/NoNeedToReleaseEntityManagerError\";\r\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\r\nimport {SpecificRepository} from \"../repository/SpecificRepository\";\r\nimport {MongoRepository} from \"../repository/MongoRepository\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\n\r\n/**\r\n * Common functions shared between different entity manager types.\r\n */\r\nexport abstract class BaseEntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Stores all registered repositories.\r\n     * Used when custom queryRunnerProvider is provided.\r\n     */\r\n    private readonly repositoryAggregators: RepositoryAggregator[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param connection Connection to be used in this entity manager\r\n     * @param queryRunnerProvider Custom query runner to be used for operations in this entity manager\r\n     */\r\n    constructor(protected connection: Connection,\r\n                protected queryRunnerProvider?: QueryRunnerProvider) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets repository for the given entity class.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getRepository<Entity>(entityClass: ObjectType<Entity>): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getRepository<Entity>(entityName: string): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider)\r\n            return this.obtainRepositoryAggregator(entityClassOrName as any).repository;\r\n\r\n        return this.connection.getRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getTreeRepository<Entity>(entityClass: ObjectType<Entity>): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getTreeRepository<Entity>(entityName: string): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider) {\r\n            const treeRepository = this.obtainRepositoryAggregator(entityClassOrName).treeRepository;\r\n            if (!treeRepository)\r\n                throw new RepositoryNotTreeError(entityClassOrName);\r\n\r\n            return treeRepository;\r\n        }\r\n\r\n        return this.connection.getTreeRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity class.\r\n     */\r\n    getMongoRepository<Entity>(entityClass: ObjectType<Entity>): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity name.\r\n     */\r\n    getMongoRepository<Entity>(entityName: string): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity class or name.\r\n     */\r\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider)\r\n            return this.obtainRepositoryAggregator(entityClassOrName as any).repository as MongoRepository<Entity>;\r\n\r\n        return this.connection.getMongoRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getSpecificRepository<Entity>(entityClass: ObjectType<Entity>): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getSpecificRepository<Entity>(entityName: string): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity> {\r\n\r\n        // if single db connection is used then create its own repository with reused query runner\r\n        if (this.queryRunnerProvider)\r\n            return this.obtainRepositoryAggregator(entityClassOrName).specificRepository;\r\n\r\n        return this.connection.getSpecificRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets custom entity repository marked with @EntityRepository decorator.\r\n     */\r\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\r\n        return this.connection.getCustomRepository<T>(customRepository);\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     */\r\n    hasId(entity: any): boolean;\r\n\r\n    /**\r\n     * Checks if entity of given schema name has an id.\r\n     */\r\n    hasId(target: string, entity: any): boolean;\r\n\r\n    /**\r\n     * Checks if entity has an id by its Function type or schema name.\r\n     */\r\n    hasId(targetOrEntity: any|string, maybeEntity?: any): boolean {\r\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\r\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\r\n        return this.getRepository(target as any).hasId(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(entity: any): any;\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(target: string, entity: any): any;\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(targetOrEntity: any|string, maybeEntity?: any): any {\r\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\r\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\r\n        return this.getRepository(target as any).getId(entity);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build an sql query.\r\n     */\r\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|Function|string, alias: string): QueryBuilder<Entity> {\r\n        return this.getRepository(entityClass as any).createQueryBuilder(alias);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>, plainObject: DeepPartial<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>, plainObjects: DeepPartial<Entity>[]): Entity[];\r\n\r\n    /**\r\n     * Creates a new entity instance or instances.\r\n     * Can copy properties from the given object into new entities.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>, plainObjectOrObjects?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\r\n        if (plainObjectOrObjects instanceof Array) {\r\n            return this.getRepository(entityClass).create(plainObjectOrObjects);\r\n\r\n        } else if (plainObjectOrObjects) {\r\n            return this.getRepository(entityClass).create(plainObjectOrObjects);\r\n\r\n        } else {\r\n            return this.getRepository(entityClass).create();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     */\r\n    preload<Entity>(entityClass: ObjectType<Entity>, object: DeepPartial<Entity>): Promise<Entity> {\r\n        return this.getRepository(entityClass).preload(object);\r\n    }\r\n\r\n    /**\r\n     * Merges two entities into one new entity.\r\n     */\r\n    merge<Entity>(entityClass: ObjectType<Entity>, mergeIntoEntity: Entity, ...objects: DeepPartial<Entity>[]): Entity { // todo: throw exception ie tntity manager is released\r\n        return <Entity> this.getRepository(entityClass).merge(mergeIntoEntity, ...objects);\r\n    }\r\n\r\n    /**\r\n     * Releases all resources used by entity manager.\r\n     * This is used when entity manager is created with a single query runner,\r\n     * and this single query runner needs to be released after job with entity manager is done.\r\n     */\r\n    async release(): Promise<void> {\r\n        if (!this.queryRunnerProvider)\r\n            throw new NoNeedToReleaseEntityManagerError();\r\n\r\n        return this.queryRunnerProvider.releaseReused();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets, or if does not exist yet, creates and returns a repository aggregator for a particular entity target.\r\n     */\r\n    protected obtainRepositoryAggregator<Entity>(entityClassOrName: ObjectType<Entity>|string): RepositoryAggregator {\r\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        const metadata = this.connection.getMetadata(entityClassOrName);\r\n        let repositoryAggregator = this.repositoryAggregators.find(repositoryAggregate => repositoryAggregate.metadata === metadata);\r\n        if (!repositoryAggregator) {\r\n            repositoryAggregator = new RepositoryAggregator(\r\n                this.connection,\r\n                this.connection.getMetadata(entityClassOrName as any),\r\n                this.queryRunnerProvider\r\n            );\r\n            this.repositoryAggregators.push(repositoryAggregator); // todo: check isnt memory leak here?\r\n        }\r\n\r\n        return repositoryAggregator;\r\n    }\r\n\r\n}","/**\r\n * Special options passed to Repository#remove method.\r\n */\r\nexport interface RemoveOptions {\r\n\r\n    /**\r\n     * Additional data to be passed with remove method.\r\n     * This data can be used in subscribers then.\r\n     */\r\n    data?: any;\r\n\r\n}","/**\r\n * Special options passed to Repository#persist method.\r\n */\r\nexport interface PersistOptions {\r\n\r\n    /**\r\n     * Additional data to be passed with persist method.\r\n     * This data can be used in subscribers then.\r\n     */\r\n    data?: any;\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {BaseEntityManager} from \"./BaseEntityManager\";\r\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\r\nimport {PersistOptions} from \"../repository/PersistOptions\";\r\n\r\n/**\r\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\r\n * whatever entity type are you passing.\r\n */\r\nexport class EntityManager extends BaseEntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Stores temporarily user data.\r\n     * Useful for sharing data with subscribers.\r\n     */\r\n    private data: ObjectLiteral = {};\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\r\n        super(connection, queryRunnerProvider);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets user data by a given key.\r\n     */\r\n    getData(key: string): any {\r\n        return this.data[key];\r\n    }\r\n\r\n    /**\r\n     * Sets value for the given key in user data.\r\n     */\r\n    setData(key: string, value: any) {\r\n        this.data[key] = value;\r\n    }\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(entity: Entity, options?: PersistOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(targetOrEntity: Function, entity: Entity, options?: PersistOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(targetOrEntity: string, entity: Entity, options?: PersistOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(entities: Entity[], options?: PersistOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(targetOrEntity: Function, entities: Entity[], options?: PersistOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    persist<Entity>(targetOrEntity: string, entities: Entity[], options?: PersistOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) a given entity in the database.\r\n     */\r\n    persist<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[], options?: PersistOptions): Promise<Entity|Entity[]> {\r\n        const target = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Function|string;\r\n        const entity = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Entity|Entity[];\r\n        return Promise.resolve().then(() => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\r\n            if (typeof target === \"string\") {\r\n                return this.getRepository<Entity|Entity[]>(target).persist(entity, options);\r\n            } else {\r\n                // todo: throw exception if constructor in target is not set\r\n                if (target instanceof Array) {\r\n                    if (target.length === 0)\r\n                        return Promise.resolve(target);\r\n\r\n                    return Promise.all(target.map((t, i) => {\r\n                        return this.getRepository<Entity>(t.constructor).persist((entity as Entity[])[i], options);\r\n                    }));\r\n                } else {\r\n                    return this.getRepository<Entity>(target.constructor).persist(entity as Entity, options);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update<Entity>(target: Function|string, conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given find options.\r\n     */\r\n    async update<Entity>(target: Function|string, findOptions: FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update<Entity>(target: Function|string, conditionsOrFindOptions: Partial<Entity>|FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void> {\r\n        return this.getRepository<Entity|Entity[]>(target as any)\r\n            .update(conditionsOrFindOptions as any, partialEntity, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity will be found by a given id.\r\n     */\r\n    async updateById<Entity>(target: Function|string, id: any, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void> {\r\n        return this.getRepository<Entity|Entity[]>(target as any)\r\n            .updateById(id, partialEntity, options);\r\n    }\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(entity: Entity): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: Function, entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: string, entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: Function, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: string, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[], options?: RemoveOptions): Promise<Entity|Entity[]> {\r\n        const target = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Function|string;\r\n        const entity = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Entity|Entity[];\r\n        if (typeof target === \"string\") {\r\n            return this.getRepository<Entity|Entity[]>(target).remove(entity, options);\r\n        } else {\r\n            // todo: throw exception if constructor in target is not set\r\n            if (target instanceof Array) {\r\n                return Promise.all(target.map((t, i) => {\r\n                    return this.getRepository<Entity>(t.constructor).remove((entity as Entity[])[i], options);\r\n                }));\r\n            } else {\r\n                return this.getRepository<Entity>(target.constructor).remove(entity as Entity, options);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes entity by a given entity id.\r\n     */\r\n    async removeById(targetOrEntity: Function|string, id: any, options?: RemoveOptions): Promise<void> {\r\n        return this.getRepository(targetOrEntity as any).removeById(id, options);\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>, options?: FindManyOptions<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>, conditions?: Partial<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given find options or conditions.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<number> {\r\n        return this.getRepository(entityClass).count(optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>, options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>, conditions?: Partial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        return this.getRepository(entityClass).find(optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, conditions?: Partial<Entity>): Promise<[Entity[], number]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options and conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[Entity[], number]> {\r\n        return this.getRepository(entityClass).findAndCount(optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given find options.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>, conditions?: Partial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        return this.getRepository(entityClass).findOne(optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>, ids: any[], conditions?: Partial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        return this.getRepository(entityClass).findByIds(ids, optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>, id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>, id: any, conditions?: Partial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>, id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        return this.getRepository(entityClass).findOneById(id, optionsOrConditions as ObjectLiteral);\r\n    }\r\n\r\n    /**\r\n     * Executes raw SQL query and returns raw database results.\r\n     */\r\n    async query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n\r\n        try {\r\n            return await queryRunner.query(query, parameters);  // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided entity manager.\r\n     */\r\n    async transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\r\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        const transactionEntityManager = new EntityManager(this.connection, queryRunnerProvider);\r\n\r\n        try {\r\n            await queryRunner.beginTransaction();\r\n            const result = await runInTransaction(transactionEntityManager);\r\n            await queryRunner.commitTransaction();\r\n            return result;\r\n\r\n        } catch (err) {\r\n            await queryRunner.rollbackTransaction();\r\n            throw err;\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n            if (!this.queryRunnerProvider) // if we used a new query runner provider then release it\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table (truncates/drops it).\r\n     */\r\n    clear<Entity>(entityClass: ObjectType<Entity>): Promise<void> {\r\n        return this.getRepository(entityClass).clear();\r\n    }\r\n\r\n}","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nclass LoadMapItem {\r\n\r\n    entity?: ObjectLiteral;\r\n    plainEntity: ObjectLiteral;\r\n    metadata: EntityMetadata;\r\n    parentLoadMapItem?: LoadMapItem;\r\n    relation?: RelationMetadata;\r\n\r\n    constructor(plainEntity: ObjectLiteral,\r\n                metadata: EntityMetadata,\r\n                parentLoadMapItem?: LoadMapItem,\r\n                relation?: RelationMetadata) {\r\n        this.plainEntity = plainEntity;\r\n        this.metadata = metadata;\r\n        this.parentLoadMapItem = parentLoadMapItem;\r\n        this.relation = relation;\r\n    }\r\n\r\n    get target(): Function|string {\r\n        return this.metadata.target;\r\n    }\r\n\r\n    get id(): any {\r\n        return this.metadata.getEntityIdMixedMap(this.plainEntity);\r\n    }\r\n\r\n    compareEntities(entity1: any, entity2: any) {\r\n        return this.metadata.compareEntities(entity1, entity2);\r\n    }\r\n\r\n}\r\n\r\nclass LoadMap {\r\n\r\n    loadMapItems: LoadMapItem[] = [];\r\n\r\n    get mainLoadMapItem(): LoadMapItem|undefined {\r\n        return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);\r\n    }\r\n\r\n    addLoadMap(newLoadMap: LoadMapItem) {\r\n        const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);\r\n        if (!item)\r\n            this.loadMapItems.push(newLoadMap);\r\n    }\r\n\r\n    fillEntities(target: Function|string, entities: any[]) {\r\n        entities.forEach(entity => {\r\n            const item = this.loadMapItems.find(loadMapItem => {\r\n                return loadMapItem.target === target && loadMapItem.compareEntities(entity, loadMapItem.plainEntity);\r\n            });\r\n            if (item)\r\n                item.entity = entity;\r\n        });\r\n    }\r\n\r\n    groupByTargetIds(): { target: Function|string, ids: any[] }[] {\r\n        const groups: { target: Function|string, ids: any[] }[] = [];\r\n        this.loadMapItems.forEach(loadMapItem => {\r\n            let group = groups.find(group => group.target === loadMapItem.target);\r\n            if (!group) {\r\n                group = { target: loadMapItem.target, ids: [] };\r\n                groups.push(group);\r\n            }\r\n\r\n            group.ids.push(loadMapItem.id);\r\n        });\r\n        return groups;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Transforms plain old javascript object\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class PlainObjectToDatabaseEntityTransformer {\r\n\r\n    constructor(private entityManager: EntityManager) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    async transform(plainObject: ObjectLiteral, metadata: EntityMetadata): Promise<ObjectLiteral|undefined> {\r\n\r\n        // if plain object does not have id then nothing to load really\r\n        if (!metadata.checkIfObjectContainsAllPrimaryKeys(plainObject))\r\n            return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\r\n\r\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\r\n        const loadMap = new LoadMap();\r\n        const fillLoadMap = (entity: ObjectLiteral, entityMetadata: EntityMetadata, parentLoadMapItem?: LoadMapItem, relation?: RelationMetadata) => {\r\n            const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\r\n            loadMap.addLoadMap(item);\r\n\r\n            entityMetadata\r\n                .extractRelationValuesFromEntity(entity, metadata.relations)\r\n                .filter(value => value !== null && value !== undefined)\r\n                .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\r\n        };\r\n        fillLoadMap(plainObject, metadata);\r\n\r\n        // load all entities and store them in the load map\r\n        await Promise.all(loadMap.groupByTargetIds().map(targetWithIds => { // todo: fix type hinting\r\n            return this.entityManager\r\n                .findByIds<ObjectLiteral>(targetWithIds.target as any, targetWithIds.ids)\r\n                .then(entities => loadMap.fillEntities(targetWithIds.target, entities));\r\n        }));\r\n\r\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\r\n        loadMap.loadMapItems.forEach(loadMapItem => {\r\n            if (!loadMapItem.relation ||\r\n                !loadMapItem.entity ||\r\n                !loadMapItem.parentLoadMapItem ||\r\n                !loadMapItem.parentLoadMapItem.entity)\r\n                return;\r\n\r\n            if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\r\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\r\n                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\r\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\r\n\r\n            } else {\r\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\r\n            }\r\n        });\r\n\r\n        return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;\r\n    }\r\n\r\n}","/**\r\n * Utils to help to work with Promise objects.\r\n */\r\nexport class PromiseUtils {\r\n\r\n    /**\r\n     * Runs given callback that returns promise for each item in the given collection in order.\r\n     * Operations executed after each other, right after previous promise being resolved.\r\n     */\r\n    static runInSequence<T, U>(collection: T[], callback: (item: T) => Promise<U>): Promise<U[]> {\r\n        const results: U[] = [];\r\n        return collection.reduce((promise, item) => {\r\n            return promise.then(() => {\r\n                return callback(item);\r\n            }).then(result => {\r\n                results.push(result);\r\n            });\r\n        }, Promise.resolve()).then(() => {\r\n            return results;\r\n        });\r\n    }\r\n\r\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {Subject, JunctionInsert, JunctionRemove} from \"./Subject\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\r\n\r\n/**\r\n * Executes all database operations (inserts, updated, deletes) that must be executed\r\n * with given persistence subjects.\r\n */\r\nexport class SubjectOperationExecutor {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * All subjects that needs to be operated.\r\n     */\r\n    protected allSubjects: Subject[];\r\n\r\n    /**\r\n     * Subjects that must be inserted.\r\n     */\r\n    protected insertSubjects: Subject[];\r\n\r\n    /**\r\n     * Subjects that must be updated.\r\n     */\r\n    protected updateSubjects: Subject[];\r\n\r\n    /**\r\n     * Subjects that must be removed.\r\n     */\r\n    protected removeSubjects: Subject[];\r\n\r\n    /**\r\n     * Subjects which relations should be updated.\r\n     */\r\n    protected relationUpdateSubjects: Subject[];\r\n\r\n    /**\r\n     * Query runner used to execute queries.\r\n     */\r\n    protected queryRunner: QueryRunner;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected transactionEntityManager: EntityManager,\r\n                protected queryRunnerProvider: QueryRunnerProvider) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes all operations over given array of subjects.\r\n     * Executes queries using given query runner.\r\n     */\r\n    async execute(subjects: Subject[]): Promise<void> {\r\n\r\n        /*subjects.forEach(subject => {\r\n            console.log(subject.entity);\r\n            console.log(\"mustBeInserted: \", subject.mustBeInserted);\r\n            console.log(\"mustBeUpdated: \", subject.mustBeUpdated);\r\n            console.log(\"mustBeRemoved: \", subject.mustBeRemoved);\r\n        });*/\r\n\r\n        // validate all subjects first\r\n        subjects.forEach(subject => subject.validate());\r\n\r\n        // set class properties for easy use\r\n        this.allSubjects = subjects;\r\n        this.insertSubjects = subjects.filter(subject => subject.mustBeInserted);\r\n        this.updateSubjects = subjects.filter(subject => subject.mustBeUpdated);\r\n        this.removeSubjects = subjects.filter(subject => subject.mustBeRemoved);\r\n        this.relationUpdateSubjects = subjects.filter(subject => subject.hasRelationUpdates);\r\n\r\n        // if there are no operations to execute then don't need to do something including opening a transaction\r\n        if (!this.insertSubjects.length &&\r\n            !this.updateSubjects.length &&\r\n            !this.removeSubjects.length &&\r\n            !this.relationUpdateSubjects.length &&\r\n            subjects.every(subject => !subject.junctionInserts.length) &&\r\n            subjects.every(subject => !subject.junctionRemoves.length))\r\n            return;\r\n\r\n        // start execute queries in a transaction\r\n        // if transaction is already opened in this query runner then we don't touch it\r\n        // if its not opened yet then we open it here, and once we finish - we close it\r\n        let isTransactionStartedByItself = false;\r\n        try {\r\n\r\n            this.queryRunner = await this.queryRunnerProvider.provide();\r\n\r\n            // open transaction if its not opened yet\r\n            if (!this.queryRunner.isTransactionActive()) {\r\n                isTransactionStartedByItself = true;\r\n                await this.queryRunner.beginTransaction();\r\n            }\r\n\r\n            // broadcast \"before\" events before we start updating\r\n            await this.connection.broadcaster.broadcastBeforeEventsForAll(this.transactionEntityManager, this.insertSubjects, this.updateSubjects, this.removeSubjects);\r\n\r\n            // since events can trigger some internal changes (for example update depend property) we need to perform some re-computations here\r\n            this.updateSubjects.forEach(subject => subject.recompute());\r\n\r\n            await this.executeInsertOperations();\r\n            await this.executeInsertClosureTableOperations();\r\n            await this.executeInsertJunctionsOperations();\r\n            await this.executeRemoveJunctionsOperations();\r\n            await this.executeUpdateOperations();\r\n            await this.executeUpdateRelations();\r\n            await this.executeRemoveOperations();\r\n\r\n            // commit transaction if it was started by us\r\n            if (isTransactionStartedByItself === true)\r\n                await this.queryRunner.commitTransaction();\r\n\r\n            // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\r\n            await this.updateSpecialColumnsInPersistedEntities();\r\n\r\n            // finally broadcast \"after\" events\r\n            // note that we are broadcasting events after commit because we want to have ids of the entities inside them to be available in subscribers\r\n            await this.connection.broadcaster.broadcastAfterEventsForAll(this.transactionEntityManager, this.insertSubjects, this.updateSubjects, this.removeSubjects);\r\n\r\n        } catch (error) {\r\n\r\n            // rollback transaction if it was started by us\r\n            if (isTransactionStartedByItself) {\r\n                try {\r\n                    await this.queryRunner.rollbackTransaction();\r\n\r\n                } catch (secondaryError) {\r\n                }\r\n            }\r\n\r\n            throw error;\r\n        }\r\n\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Insertion\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes insert operations.\r\n     *\r\n     * For insertion we separate two groups of entities:\r\n     * - first group of entities are entities which do not have any relations\r\n     *      or entities which do not have any non-nullable relation\r\n     * - second group of entities are entities which does have non-nullable relations\r\n     *\r\n     * Insert process of the entities from the first group which can only have nullable relations are actually a two-step process:\r\n     * - first we insert entities without their relations, explicitly left them NULL\r\n     * - later we update inserted entity once again with id of the object inserted with it\r\n     *\r\n     * Yes, two queries are being executed, but this is by design.\r\n     * There is no better way to solve this problem and others at the same time.\r\n     *\r\n     * Insert process of the entities from the second group which can have only non nullable relations is a single-step process:\r\n     * - we simply insert all entities and get into attention all its dependencies which were inserted in the first group\r\n     */\r\n    private async executeInsertOperations(): Promise<void> {\r\n\r\n        // separate insert entities into groups:\r\n\r\n        // TODO: current ordering mechanism is bad. need to create a correct order in which entities should be persisted, need to build a dependency graph\r\n\r\n        // first group of subjects are subjects without any non-nullable column\r\n        // we need to insert first such entities because second group entities may rely on those entities.\r\n        const firstInsertSubjects = this.insertSubjects.filter(subject => !subject.metadata.hasNonNullableColumns);\r\n\r\n        // second group - are all other subjects\r\n        // since in this group there are non nullable columns, some of them may depend on value of the\r\n        // previously inserted entity (which only can be entity with all nullable columns)\r\n        const secondInsertSubjects = this.insertSubjects.filter(subject => subject.metadata.hasNonNullableColumns);\r\n\r\n        // note: these operations should be executed in sequence, not in parallel\r\n        // because second group depend of obtained data from the first group\r\n        await Promise.all(firstInsertSubjects.map(subject => this.insert(subject, [])));\r\n        await Promise.all(secondInsertSubjects.map(subject => this.insert(subject, firstInsertSubjects)));\r\n\r\n        // we need to update relation ids of the newly inserted objects (where we inserted NULLs in relations)\r\n        // once we inserted all entities, we need to update relations which were bind to inserted entities.\r\n        // For example we have a relation many-to-one Post<->Category. Relation is nullable.\r\n        // New category was set to the new post and post where persisted.\r\n        // Here this method executes two inserts: one for post, one for category,\r\n        // but category in post is inserted with \"null\".\r\n        // now we need to update post table - set category with a newly persisted category id.\r\n        const updatePromises: Promise<any>[] = [];\r\n        firstInsertSubjects.forEach(subject => {\r\n\r\n            // first update relations with join columns (one-to-one owner and many-to-one relations)\r\n            const updateOptions: ObjectLiteral = {};\r\n            subject.metadata.relationsWithJoinColumns.forEach(relation => {\r\n                const referencedColumn = relation.joinColumn.referencedColumn;\r\n                const relatedEntity = relation.getEntityValue(subject.entity);\r\n\r\n                // if relation value is not set then nothing to do here\r\n                if (!relatedEntity)\r\n                    return;\r\n\r\n                // check if relation reference column is a relation\r\n                let relationId: any;\r\n                const columnRelation = relation.inverseEntityMetadata.relations.find(rel => rel.propertyName === relation.joinColumn.referencedColumn.propertyName);\r\n                if (columnRelation) { // if referenced column is a relation\r\n                    const insertSubject = this.insertSubjects.find(insertedSubject => insertedSubject.entity === relatedEntity[referencedColumn.propertyName]);\r\n\r\n                    // if this relation was just inserted\r\n                    if (insertSubject) {\r\n\r\n                        // check if we have this relation id already\r\n                        relationId = relatedEntity[referencedColumn.propertyName][columnRelation.propertyName];\r\n                        if (!relationId) {\r\n\r\n                            // if we don't have relation id then use special values\r\n                            if (referencedColumn.isGenerated) {\r\n                                relationId = insertSubject.newlyGeneratedId;\r\n\r\n                            } else if (referencedColumn.isObjectId) {\r\n                                relationId = insertSubject.generatedObjectId;\r\n\r\n                            }\r\n                            // todo: handle other special types too\r\n                        }\r\n                    }\r\n\r\n                } else { // if referenced column is a simple non relational column\r\n                    const insertSubject = this.insertSubjects.find(insertedSubject => insertedSubject.entity === relatedEntity);\r\n\r\n                    // if this relation was just inserted\r\n                    if (insertSubject) {\r\n\r\n                        // check if we have this relation id already\r\n                        relationId = relatedEntity[referencedColumn.propertyName];\r\n                        if (!relationId) {\r\n\r\n                            // if we don't have relation id then use special values\r\n                            if (referencedColumn.isGenerated) {\r\n                                relationId = insertSubject.newlyGeneratedId;\r\n\r\n                            } else if (referencedColumn.isObjectId) {\r\n                                relationId = insertSubject.generatedObjectId;\r\n                            }\r\n                            // todo: handle other special types too\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                if (relationId) {\r\n                    updateOptions[relation.name] = relationId;\r\n                }\r\n\r\n            });\r\n\r\n            // if we found relations which we can update - then update them\r\n            if (Object.keys(updateOptions).length > 0 /*&& subject.hasEntity*/) {\r\n                // const relatedEntityIdMap = subject.getPersistedEntityIdMap; // todo: this works incorrectly\r\n\r\n                const columns = subject.metadata.parentEntityMetadata ? subject.metadata.primaryColumnsWithParentIdColumns : subject.metadata.primaryColumns;\r\n                const conditions: ObjectLiteral = {};\r\n\r\n                columns.forEach(column => {\r\n                    const entityValue = subject.entity[column.propertyName];\r\n\r\n                    // if entity id is a relation, then extract referenced column from that relation\r\n                    const columnRelation = subject.metadata.relations.find(relation => relation.propertyName === column.propertyName);\r\n\r\n                    if (entityValue && columnRelation && columnRelation.joinColumn) { // not sure if we need handle join column from inverse side\r\n                        let relationIdOfEntityValue = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\r\n                        if (!relationIdOfEntityValue) {\r\n                            const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === entityValue);\r\n                            if (entityValueInsertSubject) {\r\n                                if (columnRelation.joinColumn.referencedColumn.isGenerated) {\r\n                                    relationIdOfEntityValue = entityValueInsertSubject.newlyGeneratedId;\r\n\r\n                                } else if (columnRelation.joinColumn.referencedColumn.isObjectId) {\r\n                                    relationIdOfEntityValue = entityValueInsertSubject.generatedObjectId;\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                        if (relationIdOfEntityValue) {\r\n                            conditions[column.fullName] = relationIdOfEntityValue;\r\n                        }\r\n\r\n                    } else {\r\n                        if (entityValue) {\r\n                            conditions[column.fullName] = entityValue;\r\n                        } else {\r\n                            if (subject.newlyGeneratedId) {\r\n                                conditions[column.fullName] = subject.newlyGeneratedId;\r\n\r\n                            } else if (subject.generatedObjectId) {\r\n                                conditions[column.fullName] = subject.generatedObjectId;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                if (!Object.keys(conditions).length)\r\n                    return;\r\n\r\n                const updatePromise = this.queryRunner.update(subject.metadata.table.name, updateOptions, conditions);\r\n                updatePromises.push(updatePromise);\r\n            }\r\n\r\n            // we need to update relation ids if newly inserted objects are used from inverse side in one-to-many inverse relation\r\n            // we also need to update relation ids if newly inserted objects are used from inverse side in one-to-one inverse relation\r\n            const oneToManyAndOneToOneNonOwnerRelations = subject.metadata.oneToManyRelations.concat(subject.metadata.oneToOneRelations.filter(relation => !relation.isOwning));\r\n            subject.metadata.extractRelationValuesFromEntity(subject.entity, oneToManyAndOneToOneNonOwnerRelations)\r\n                .forEach(([relation, subRelatedEntity, inverseEntityMetadata]) => {\r\n                    const referencedColumn = relation.inverseRelation.joinColumn.referencedColumn;\r\n                    const columns = inverseEntityMetadata.parentEntityMetadata ? inverseEntityMetadata.primaryColumnsWithParentIdColumns : inverseEntityMetadata.primaryColumns;\r\n                    const conditions: ObjectLiteral = {};\r\n\r\n                    columns.forEach(column => {\r\n                        const entityValue = subRelatedEntity[column.propertyName];\r\n\r\n                        // if entity id is a relation, then extract referenced column from that relation\r\n                        const columnRelation = inverseEntityMetadata.relations.find(relation => relation.propertyName === column.propertyName);\r\n\r\n                        if (entityValue && columnRelation && columnRelation.joinColumn) { // not sure if we need handle join column from inverse side\r\n                            let relationIdOfEntityValue = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\r\n                            if (!relationIdOfEntityValue) {\r\n                                const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === entityValue);\r\n                                if (entityValueInsertSubject) {\r\n                                    if (columnRelation.joinColumn.referencedColumn.isGenerated) {\r\n                                        relationIdOfEntityValue = entityValueInsertSubject.newlyGeneratedId;\r\n\r\n                                    } else if (columnRelation.joinColumn.referencedColumn.isObjectId) {\r\n                                        relationIdOfEntityValue = entityValueInsertSubject.generatedObjectId;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (relationIdOfEntityValue) {\r\n                                conditions[column.fullName] = relationIdOfEntityValue;\r\n                            }\r\n\r\n                        } else {\r\n                            const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === subRelatedEntity);\r\n                            if (entityValue) {\r\n                                conditions[column.fullName] = entityValue;\r\n                            } else {\r\n                                if (entityValueInsertSubject && entityValueInsertSubject.newlyGeneratedId) {\r\n                                    conditions[column.fullName] = entityValueInsertSubject.newlyGeneratedId;\r\n\r\n                                } else if (entityValueInsertSubject && entityValueInsertSubject.generatedObjectId) {\r\n                                    conditions[column.fullName] = entityValueInsertSubject.generatedObjectId;\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                    if (!Object.keys(conditions).length)\r\n                        return;\r\n\r\n                    const updateOptions: ObjectLiteral = {};\r\n                    const columnRelation = relation.inverseEntityMetadata.relations.find(rel => rel.propertyName === referencedColumn.propertyName);\r\n                    if (columnRelation) {\r\n                        let id = subject.entity[referencedColumn.propertyName][columnRelation.propertyName];\r\n                        if (!id) {\r\n                            const insertSubject = this.insertSubjects.find(subject => subject.entity === subject.entity[referencedColumn.propertyName]);\r\n                            if (insertSubject) {\r\n                                if (insertSubject.newlyGeneratedId) {\r\n                                    id = insertSubject.newlyGeneratedId;\r\n\r\n                                } else if (insertSubject.generatedObjectId) {\r\n                                    id = insertSubject.generatedObjectId;\r\n                                }\r\n                            }\r\n                        }\r\n                        updateOptions[relation.inverseRelation.joinColumn.name] = id;\r\n                    } else {\r\n                        updateOptions[relation.inverseRelation.joinColumn.name] = subject.entity[referencedColumn.propertyName] || subject.newlyGeneratedId || subRelatedEntity.generatedObjectId;\r\n                    }\r\n\r\n                    const updatePromise = this.queryRunner.update(relation.inverseEntityMetadata.table.name, updateOptions, conditions);\r\n                    updatePromises.push(updatePromise);\r\n                });\r\n\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n\r\n        // todo: make sure to search in all insertSubjects during updating too if updated entity uses links to the newly persisted entity\r\n    }\r\n\r\n    /**\r\n     * Inserts an entity from the given insert operation into the database.\r\n     * If entity has an generated column, then after saving new generated value will be stored to the InsertOperation.\r\n     * If entity uses class-table-inheritance, then multiple inserts may by performed to save all entities.\r\n     */\r\n    private async insert(subject: Subject, alreadyInsertedSubjects: Subject[]): Promise<any> {\r\n\r\n        const parentEntityMetadata = subject.metadata.parentEntityMetadata;\r\n        const metadata = subject.metadata;\r\n        const entity = subject.entity;\r\n        let newlyGeneratedId: any, parentGeneratedId: any;\r\n\r\n        // if entity uses class table inheritance then we need to separate entity into sub values that will be inserted into multiple tables\r\n        if (metadata.table.isClassTableChild) { // todo: with current implementation inheritance of multiple class table children will not work\r\n\r\n            // first insert entity values into parent class table\r\n            const parentValuesMap = this.collectColumnsAndValues(parentEntityMetadata, entity, subject.date, undefined, metadata.discriminatorValue, alreadyInsertedSubjects);\r\n            newlyGeneratedId = parentGeneratedId = await this.queryRunner.insert(parentEntityMetadata.table.name, parentValuesMap, parentEntityMetadata.generatedColumnIfExist);\r\n\r\n            // second insert entity values into child class table\r\n            const childValuesMap = this.collectColumnsAndValues(metadata, entity, subject.date, newlyGeneratedId, undefined, alreadyInsertedSubjects);\r\n            const secondGeneratedId = await this.queryRunner.insert(metadata.table.name, childValuesMap, metadata.generatedColumnIfExist);\r\n            if (!newlyGeneratedId && secondGeneratedId) newlyGeneratedId = secondGeneratedId;\r\n\r\n        } else { // in the case when class table inheritance is not used\r\n\r\n            const valuesMap = this.collectColumnsAndValues(metadata, entity, subject.date, undefined, undefined, alreadyInsertedSubjects);\r\n            newlyGeneratedId = await this.queryRunner.insert(metadata.table.name, valuesMap, metadata.generatedColumnIfExist);\r\n        }\r\n\r\n        if (parentGeneratedId)\r\n            subject.parentGeneratedId = parentGeneratedId;\r\n\r\n        // todo: better if insert method will return object with all generated ids, object id, etc.\r\n        if (newlyGeneratedId) {\r\n            if (metadata.hasGeneratedColumn) {\r\n                subject.newlyGeneratedId = newlyGeneratedId;\r\n\r\n            } else if (metadata.hasObjectIdColumn) {\r\n                subject.generatedObjectId = newlyGeneratedId;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collects columns and values for the insert operation.\r\n     */\r\n    private collectColumnsAndValues(metadata: EntityMetadata, entity: ObjectLiteral, date: Date, parentIdColumnValue: any, discriminatorValue: any, alreadyInsertedSubjects: Subject[]): ObjectLiteral {\r\n\r\n        const columnNames: string[] = [];\r\n        const columnValues: any[] = [];\r\n        const columnsAndValuesMap: ObjectLiteral = {};\r\n\r\n        metadata.columnsWithoutEmbeddeds\r\n            .filter(column => {\r\n                return !column.isVirtual && !column.isParentId && !column.isDiscriminator && column.hasEntityValue(entity);\r\n            })\r\n            .forEach(column => {\r\n                const value = this.connection.driver.preparePersistentValue(entity[column.propertyName], column);\r\n                columnNames.push(column.fullName);\r\n                columnValues.push(value);\r\n                columnsAndValuesMap[column.name] = value;\r\n            });\r\n\r\n        const collectFromEmbeddeds = (entity: any, columnsAndValues: ObjectLiteral, embeddeds: EmbeddedMetadata[]) => {\r\n            embeddeds.forEach(embedded => {\r\n                if (!entity[embedded.propertyName])\r\n                    return;\r\n\r\n                if (embedded.isArray) {\r\n                    columnsAndValues[embedded.propertyName] = (entity[embedded.propertyName] as any[]).map(subValue => {\r\n                        const newItem: ObjectLiteral = {};\r\n                        embedded.columns.forEach(column => {\r\n                            const value = this.connection.driver.preparePersistentValue(subValue[column.propertyName], column);\r\n                            columnNames.push(column.fullName); // todo: probably we dont need it right now because relational databases dont support array embeddedables yet\r\n                            columnValues.push(value);\r\n                            newItem[column.propertyName] = value;\r\n                        });\r\n                        return newItem;\r\n                    });\r\n\r\n                } else {\r\n                    columnsAndValues[embedded.propertyName] = {};\r\n                    embedded.columns.forEach(column => {\r\n                        const value = this.connection.driver.preparePersistentValue(entity[embedded.propertyName][column.propertyName], column);\r\n                        columnNames.push(column.fullName);\r\n                        columnValues.push(value);\r\n                        columnsAndValues[embedded.propertyName][column.propertyName] = value;\r\n                    });\r\n                }\r\n                collectFromEmbeddeds(entity[embedded.propertyName], columnsAndValues[embedded.propertyName], embedded.embeddeds);\r\n            });\r\n        };\r\n        collectFromEmbeddeds(entity, columnsAndValuesMap, metadata.embeddeds);\r\n\r\n        metadata.relationsWithJoinColumns.forEach(relation => {\r\n\r\n            let relationValue: any;\r\n            const value = relation.getEntityValue(entity);\r\n\r\n            if (value) {\r\n                // if relation value is stored in the entity itself then use it from there\r\n                const relationId = relation.getInverseEntityRelationId(value); // todo: check it\r\n                if (relationId) {\r\n                    relationValue = relationId;\r\n                }\r\n\r\n                // otherwise try to find relational value from just inserted subjects\r\n                const alreadyInsertedSubject = alreadyInsertedSubjects.find(insertedSubject => {\r\n                    return insertedSubject.entity === value;\r\n                });\r\n                if (alreadyInsertedSubject) {\r\n                    const referencedColumn = relation.joinColumn.referencedColumn;\r\n                    // if join column references to the primary generated column then seek in the newEntityId of the insertedSubject\r\n                    if (referencedColumn.referencedColumn && referencedColumn.referencedColumn.isGenerated) {\r\n                        if (referencedColumn.isParentId) {\r\n                            relationValue = alreadyInsertedSubject.parentGeneratedId;\r\n                        }\r\n                        // todo: what if reference column is not generated?\r\n                        // todo: what if reference column is not related to table inheritance?\r\n                    }\r\n\r\n                    if (referencedColumn.isGenerated)\r\n                        relationValue = alreadyInsertedSubject.newlyGeneratedId;\r\n                    if (referencedColumn.isObjectId)\r\n                        relationValue = alreadyInsertedSubject.generatedObjectId;\r\n                    // if it references to create or update date columns\r\n                    if (referencedColumn.isCreateDate || referencedColumn.isUpdateDate)\r\n                        relationValue = this.connection.driver.preparePersistentValue(alreadyInsertedSubject.date, referencedColumn);\r\n                    // if it references to version column\r\n                    if (referencedColumn.isVersion)\r\n                        relationValue = this.connection.driver.preparePersistentValue(1, referencedColumn);\r\n                }\r\n            } else if (relation.hasInverseSide) {\r\n                const inverseSubject = this.allSubjects.find(subject => {\r\n                    if (!subject.hasEntity || subject.entityTarget !== relation.inverseRelation.target)\r\n                        return false;\r\n\r\n                    const inverseRelationValue = subject.entity[relation.inverseRelation.propertyName];\r\n                    if (inverseRelationValue) {\r\n                        if (inverseRelationValue instanceof Array) {\r\n                            return inverseRelationValue.find(subValue => subValue === subValue);\r\n                        } else {\r\n                            return inverseRelationValue === entity;\r\n                        }\r\n                    }\r\n                });\r\n                if (inverseSubject && inverseSubject.entity[relation.joinColumn.referencedColumn.propertyName]) {\r\n                    relationValue = inverseSubject.entity[relation.joinColumn.referencedColumn.propertyName];\r\n                }\r\n            }\r\n\r\n            if (relationValue) {\r\n                columnNames.push(relation.name);\r\n                columnValues.push(relationValue);\r\n                columnsAndValuesMap[relation.propertyName] = entity[relation.name];\r\n            }\r\n        });\r\n\r\n        // add special column and value - date of creation\r\n        if (metadata.hasCreateDateColumn) {\r\n            const value = this.connection.driver.preparePersistentValue(date, metadata.createDateColumn);\r\n            columnNames.push(metadata.createDateColumn.fullName);\r\n            columnValues.push(value);\r\n            columnsAndValuesMap[metadata.createDateColumn.fullName] = value;\r\n        }\r\n\r\n        // add special column and value - date of updating\r\n        if (metadata.hasUpdateDateColumn) {\r\n            const value = this.connection.driver.preparePersistentValue(date, metadata.updateDateColumn);\r\n            columnNames.push(metadata.updateDateColumn.fullName);\r\n            columnValues.push(value);\r\n            columnsAndValuesMap[metadata.updateDateColumn.fullName] = value;\r\n        }\r\n\r\n        // add special column and value - version column\r\n        if (metadata.hasVersionColumn) {\r\n            const value = this.connection.driver.preparePersistentValue(1, metadata.versionColumn);\r\n            columnNames.push(metadata.versionColumn.fullName);\r\n            columnValues.push(value);\r\n            columnsAndValuesMap[metadata.versionColumn.fullName] = value;\r\n        }\r\n\r\n        // add special column and value - discriminator value (for tables using table inheritance)\r\n        if (metadata.hasDiscriminatorColumn) {\r\n            const value = this.connection.driver.preparePersistentValue(discriminatorValue || metadata.discriminatorValue, metadata.discriminatorColumn);\r\n            columnNames.push(metadata.discriminatorColumn.fullName);\r\n            columnValues.push(value);\r\n            columnsAndValuesMap[metadata.discriminatorColumn.fullName] = value;\r\n        }\r\n\r\n        // add special column and value - tree level and tree parents (for tree-type tables)\r\n        if (metadata.hasTreeLevelColumn && metadata.hasTreeParentRelation) {\r\n            const parentEntity = entity[metadata.treeParentRelation.propertyName];\r\n            const parentLevel = parentEntity ? (parentEntity[metadata.treeLevelColumn.propertyName] || 0) : 0;\r\n\r\n            columnNames.push(metadata.treeLevelColumn.fullName);\r\n            columnValues.push(parentLevel + 1);\r\n        }\r\n\r\n        // add special column and value - parent id column (for tables using table inheritance)\r\n        if (metadata.parentEntityMetadata && metadata.hasParentIdColumn) {\r\n            columnNames.push(metadata.parentIdColumn.fullName); // todo: should be array of primary keys\r\n            columnValues.push(parentIdColumnValue || entity[metadata.parentEntityMetadata.firstPrimaryColumn.propertyName]); // todo: should be array of primary keys\r\n        }\r\n\r\n        if (this.connection.driver instanceof MongoDriver) { // todo: make better abstraction\r\n            return columnsAndValuesMap;\r\n\r\n        } else {\r\n            return OrmUtils.zipObject(columnNames, columnValues);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Insertion into closure tables\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Inserts all given subjects into closure table.\r\n     */\r\n    private executeInsertClosureTableOperations(/*, updatesByRelations: Subject[]*/) { // todo: what to do with updatesByRelations\r\n        const promises = this.insertSubjects\r\n            .filter(subject => subject.metadata.table.isClosure)\r\n            .map(async subject => {\r\n                // const relationsUpdateMap = this.findUpdateOperationForEntity(updatesByRelations, insertSubjects, subject.entity);\r\n                // subject.treeLevel = await this.insertIntoClosureTable(subject, relationsUpdateMap);\r\n                await this.insertClosureTableValues(subject);\r\n            });\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Inserts given subject into closure table.\r\n     */\r\n    private async insertClosureTableValues(subject: Subject): Promise<void> {\r\n        // todo: since closure tables do not support compose primary keys - throw an exception?\r\n        // todo: what if parent entity or parentEntityId is empty?!\r\n        const tableName = subject.metadata.closureJunctionTable.table.name;\r\n        const referencedColumn = subject.metadata.treeParentRelation.joinColumn.referencedColumn; // todo: check if joinColumn works\r\n\r\n        let newEntityId = subject.entity[referencedColumn.propertyName];\r\n        if (!newEntityId && referencedColumn.isGenerated) {\r\n            newEntityId = subject.newlyGeneratedId;\r\n            // we should not handle object id here because closure tables are not supported by mongodb driver.\r\n        } // todo: implement other special column types too\r\n\r\n        const parentEntity = subject.entity[subject.metadata.treeParentRelation.propertyName];\r\n        let parentEntityId: any = 0; // zero is important\r\n        if (parentEntity) {\r\n            parentEntityId = parentEntity[referencedColumn.propertyName];\r\n            if (!parentEntityId && referencedColumn.isGenerated) {\r\n                const parentInsertedSubject = this.insertSubjects.find(subject => subject.entity === parentEntity);\r\n                // todo: throw exception if parentInsertedSubject is not set\r\n                parentEntityId = parentInsertedSubject!.newlyGeneratedId;\r\n            } // todo: implement other special column types too\r\n        }\r\n\r\n        // try to find parent entity id in some other entity that has this entity in its children\r\n        if (!parentEntityId) {\r\n            const parentSubject = this.allSubjects.find(allSubject => {\r\n                if (!allSubject.hasEntity || !allSubject.metadata.table.isClosure || !allSubject.metadata.hasTreeChildrenRelation)\r\n                    return false;\r\n\r\n                const children = allSubject.entity[subject.metadata.treeChildrenRelation.propertyName];\r\n                return children instanceof Array ? children.indexOf(subject.entity) !== -1 : false;\r\n            });\r\n\r\n            if (parentSubject) {\r\n                parentEntityId = parentSubject.entity[referencedColumn.propertyName];\r\n                if (!parentEntityId && parentSubject.newlyGeneratedId) { // if still not found then it means parent just inserted with generated column\r\n                    parentEntityId = parentSubject.newlyGeneratedId;\r\n                }\r\n            }\r\n        }\r\n\r\n        // if parent entity exist then insert a new row into closure table\r\n        subject.treeLevel = await this.queryRunner.insertIntoClosureTable(tableName, newEntityId, parentEntityId, subject.metadata.hasTreeLevelColumn);\r\n\r\n        if (subject.metadata.hasTreeLevelColumn) {\r\n            const values = { [subject.metadata.treeLevelColumn.fullName]: subject.treeLevel };\r\n            await this.queryRunner.update(subject.metadata.table.name, values, { [referencedColumn.fullName]: newEntityId });\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Update\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Updates all given subjects in the database.\r\n     */\r\n    private async executeUpdateOperations(): Promise<void> {\r\n        await Promise.all(this.updateSubjects.map(subject => this.update(subject)));\r\n    }\r\n\r\n    /**\r\n     * Updates given subject in the database.\r\n     */\r\n    private async update(subject: Subject): Promise<void> {\r\n        const entity = subject.entity;\r\n\r\n        if (this.connection.driver instanceof MongoDriver) {\r\n            const idMap = subject.metadata.getDatabaseEntityIdMap(entity);\r\n            if (!idMap)\r\n                throw new Error(`Internal error. Cannot get id of the updating entity.`);\r\n\r\n\r\n            const addEmbeddedValuesRecursively = (entity: any, value: any, embeddeds: EmbeddedMetadata[]) => {\r\n                embeddeds.forEach(embedded => {\r\n                    if (!entity[embedded.propertyName])\r\n                        return;\r\n                    if (embedded.isArray) {\r\n                        value[embedded.prefix] = (entity[embedded.propertyName] as any[]).map(subValue => {\r\n                            const newItem: ObjectLiteral = {};\r\n                            embedded.columns.forEach(column => {\r\n                                newItem[column.name] = subValue[column.propertyName];\r\n                            });\r\n                            return newItem;\r\n                        });\r\n\r\n                    } else {\r\n                        embedded.columns.forEach(column => {\r\n                            if (!value[embedded.prefix])\r\n                                value[embedded.prefix] = {};\r\n\r\n                            value[embedded.prefix][column.name] = entity[embedded.propertyName][column.propertyName];\r\n                        });\r\n                    }\r\n                    addEmbeddedValuesRecursively(entity[embedded.propertyName], value[embedded.prefix], embedded.embeddeds);\r\n                });\r\n            };\r\n\r\n            const value: ObjectLiteral = {};\r\n            subject.metadata.columnsWithoutEmbeddeds.forEach(column => {\r\n                if (entity[column.propertyName] !== undefined)\r\n                    value[column.fullName] = entity[column.propertyName];\r\n            });\r\n            addEmbeddedValuesRecursively(entity, value, subject.metadata.embeddeds);\r\n\r\n            // if number of updated columns = 0 no need to update updated date and version columns\r\n            if (Object.keys(value).length === 0)\r\n                return;\r\n\r\n            if (subject.metadata.hasUpdateDateColumn)\r\n                value[subject.metadata.updateDateColumn.fullName] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.updateDateColumn);\r\n\r\n            if (subject.metadata.hasVersionColumn)\r\n                value[subject.metadata.versionColumn.fullName] = this.connection.driver.preparePersistentValue(entity[subject.metadata.versionColumn.propertyName] + 1, subject.metadata.versionColumn);\r\n\r\n            return this.queryRunner.update(subject.metadata.table.name, value, idMap);\r\n        }\r\n\r\n        // we group by table name, because metadata can have different table names\r\n        const valueMaps: { tableName: string, metadata: EntityMetadata, values: ObjectLiteral }[] = [];\r\n\r\n        subject.diffColumns.forEach(column => {\r\n            if (!column.entityTarget) return; // todo: how this can be possible?\r\n            const metadata = this.connection.getMetadata(column.entityTarget);\r\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === metadata.table.name);\r\n            if (!valueMap) {\r\n                valueMap = { tableName: metadata.table.name, metadata: metadata, values: {} };\r\n                valueMaps.push(valueMap);\r\n            }\r\n\r\n            valueMap.values[column.fullName] = this.connection.driver.preparePersistentValue(column.getEntityValue(entity), column);\r\n        });\r\n\r\n        subject.diffRelations.forEach(relation => {\r\n            const metadata = this.connection.getMetadata(relation.entityTarget);\r\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === metadata.table.name);\r\n            if (!valueMap) {\r\n                valueMap = { tableName: metadata.table.name, metadata: metadata, values: {} };\r\n                valueMaps.push(valueMap);\r\n            }\r\n\r\n            const value = relation.getEntityValue(entity);\r\n            valueMap.values[relation.name] = value !== null && value !== undefined ? value[relation.inverseEntityMetadata.firstPrimaryColumn.propertyName] : null; // todo: should not have a call to primaryColumn, instead join column metadata should be used\r\n        });\r\n\r\n        // if number of updated columns = 0 no need to update updated date and version columns\r\n        if (Object.keys(valueMaps).length === 0)\r\n            return;\r\n\r\n        if (subject.metadata.hasUpdateDateColumn) {\r\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.table.name);\r\n            if (!valueMap) {\r\n                valueMap = { tableName: subject.metadata.table.name, metadata: subject.metadata, values: {} };\r\n                valueMaps.push(valueMap);\r\n            }\r\n\r\n            valueMap.values[subject.metadata.updateDateColumn.fullName] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.updateDateColumn);\r\n        }\r\n\r\n        if (subject.metadata.hasVersionColumn) {\r\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.table.name);\r\n            if (!valueMap) {\r\n                valueMap = { tableName: subject.metadata.table.name, metadata: subject.metadata, values: {} };\r\n                valueMaps.push(valueMap);\r\n            }\r\n\r\n            valueMap.values[subject.metadata.versionColumn.fullName] = this.connection.driver.preparePersistentValue(entity[subject.metadata.versionColumn.propertyName] + 1, subject.metadata.versionColumn);\r\n        }\r\n\r\n        if (subject.metadata.parentEntityMetadata) {\r\n            if (subject.metadata.parentEntityMetadata.hasUpdateDateColumn) {\r\n                let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.parentEntityMetadata.table.name);\r\n                if (!valueMap) {\r\n                    valueMap = {\r\n                        tableName: subject.metadata.parentEntityMetadata.table.name,\r\n                        metadata: subject.metadata.parentEntityMetadata,\r\n                        values: {}\r\n                    };\r\n                    valueMaps.push(valueMap);\r\n                }\r\n\r\n                valueMap.values[subject.metadata.parentEntityMetadata.updateDateColumn.fullName] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.parentEntityMetadata.updateDateColumn);\r\n            }\r\n\r\n            if (subject.metadata.parentEntityMetadata.hasVersionColumn) {\r\n                let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.parentEntityMetadata.table.name);\r\n                if (!valueMap) {\r\n                    valueMap = {\r\n                        tableName: subject.metadata.parentEntityMetadata.table.name,\r\n                        metadata: subject.metadata.parentEntityMetadata,\r\n                        values: {}\r\n                    };\r\n                    valueMaps.push(valueMap);\r\n                }\r\n\r\n                valueMap.values[subject.metadata.parentEntityMetadata.versionColumn.fullName] = this.connection.driver.preparePersistentValue(entity[subject.metadata.parentEntityMetadata.versionColumn.propertyName] + 1, subject.metadata.parentEntityMetadata.versionColumn);\r\n            }\r\n        }\r\n\r\n        await Promise.all(valueMaps.map(valueMap => {\r\n            const idMap = valueMap.metadata.getDatabaseEntityIdMap(entity);\r\n            if (!idMap)\r\n                throw new Error(`Internal error. Cannot get id of the updating entity.`);\r\n\r\n            return this.queryRunner.update(valueMap.tableName, valueMap.values, idMap);\r\n        }));\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Update only relations\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Updates relations of all given subjects in the database.\r\n     */\r\n    private executeUpdateRelations() {\r\n        return Promise.all(this.relationUpdateSubjects.map(subject => this.updateRelations(subject)));\r\n    }\r\n\r\n    /**\r\n     * Updates relations of the given subject in the database.\r\n     */\r\n    private async updateRelations(subject: Subject) {\r\n        const values: ObjectLiteral = {};\r\n        subject.relationUpdates.forEach(setRelation => {\r\n            const value = setRelation.value ? setRelation.value[setRelation.relation.joinColumn.referencedColumn.propertyName] : null;\r\n            values[setRelation.relation.name] = value; // todo: || fromInsertedSubjects ??\r\n        });\r\n\r\n        const idMap = subject.metadata.getDatabaseEntityIdMap(subject.databaseEntity);\r\n        if (!idMap)\r\n            throw new Error(`Internal error. Cannot get id of the updating entity.`);\r\n\r\n        return this.queryRunner.update(subject.metadata.table.name, values, idMap);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Remove\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Removes all given subjects from the database.\r\n     */\r\n    private async executeRemoveOperations(): Promise<void> {\r\n        await PromiseUtils.runInSequence(this.removeSubjects, async subject => await this.remove(subject));\r\n    }\r\n\r\n    /**\r\n     * Updates given subject from the database.\r\n     */\r\n    private async remove(subject: Subject): Promise<void> {\r\n        if (subject.metadata.parentEntityMetadata) {\r\n            const parentConditions: ObjectLiteral = {};\r\n            subject.metadata.parentPrimaryColumns.forEach(column => {\r\n                parentConditions[column.fullName] = subject.databaseEntity[column.propertyName];\r\n            });\r\n            await this.queryRunner.delete(subject.metadata.parentEntityMetadata.table.name, parentConditions);\r\n\r\n            const childConditions: ObjectLiteral = {};\r\n            subject.metadata.primaryColumnsWithParentIdColumns.forEach(column => {\r\n                childConditions[column.fullName] = subject.databaseEntity[column.propertyName];\r\n            });\r\n            await this.queryRunner.delete(subject.metadata.table.name, childConditions);\r\n        } else {\r\n            await this.queryRunner.delete(subject.metadata.table.name, subject.metadata.getEntityIdColumnMap(subject.databaseEntity)!);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Insertion into junction tables\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Inserts into database junction tables all given array of subjects junction data.\r\n     */\r\n    private async executeInsertJunctionsOperations(): Promise<void> {\r\n        const promises: Promise<any>[] = [];\r\n        this.allSubjects.forEach(subject => {\r\n            subject.junctionInserts.forEach(junctionInsert => {\r\n                promises.push(this.insertJunctions(subject, junctionInsert));\r\n            });\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Inserts into database junction table given subject's junction insert data.\r\n     */\r\n    private async insertJunctions(subject: Subject, junctionInsert: JunctionInsert): Promise<void> {\r\n        // I think here we can only support to work only with single primary key entities\r\n\r\n        const relation = junctionInsert.relation;\r\n        const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable;\r\n        const firstColumn = relation.isOwning ? joinTable.referencedColumn : joinTable.inverseReferencedColumn;\r\n        const secondColumn = relation.isOwning ? joinTable.inverseReferencedColumn : joinTable.referencedColumn;\r\n\r\n        let ownId = relation.getOwnEntityRelationId(subject.entity);\r\n        if (!ownId) {\r\n            if (firstColumn.isGenerated) {\r\n                ownId = subject.newlyGeneratedId;\r\n\r\n            } else if (firstColumn.isObjectId) {\r\n                ownId = subject.generatedObjectId;\r\n\r\n            }\r\n            // todo: implement other special referenced column types (update date, create date, version, discriminator column, etc.)\r\n        }\r\n\r\n        if (!ownId)\r\n            throw new Error(`Cannot insert object of ${subject.entityTarget} type. Looks like its not persisted yet, or cascades are not set on the relation.`); // todo: better error message\r\n\r\n        const promises = junctionInsert.junctionEntities.map(newBindEntity => {\r\n\r\n            // get relation id from the newly bind entity\r\n            let relationId: any;\r\n            if (relation.isManyToManyOwner) {\r\n                relationId = newBindEntity[relation.joinTable.inverseReferencedColumn.propertyName];\r\n\r\n            } else if (relation.isManyToManyNotOwner) {\r\n                relationId = newBindEntity[relation.inverseRelation.joinTable.referencedColumn.propertyName];\r\n            }\r\n\r\n            // if relation id is missing in the newly bind entity then check maybe it was just persisted\r\n            // and we can use special newly generated value\r\n            if (!relationId) {\r\n                const insertSubject = this.insertSubjects.find(subject => subject.entity === newBindEntity);\r\n                if (insertSubject) {\r\n                    if (secondColumn.isGenerated) {\r\n                        relationId = insertSubject.newlyGeneratedId;\r\n\r\n                    } else if (secondColumn.isObjectId) {\r\n                        relationId = insertSubject.generatedObjectId;\r\n\r\n                    }\r\n                    // todo: implement other special values too\r\n                }\r\n            }\r\n\r\n            // if relation id still does not exist - we arise an error\r\n            if (!relationId)\r\n                throw new Error(`Cannot insert object of ${(newBindEntity.constructor as any).name} type. Looks like its not persisted yet, or cascades are not set on the relation.`); // todo: better error message\r\n\r\n            const columns = relation.junctionEntityMetadata.columnsWithoutEmbeddeds.map(column => column.fullName);\r\n            const values = relation.isOwning ? [ownId, relationId] : [relationId, ownId];\r\n\r\n            return this.queryRunner.insert(relation.junctionEntityMetadata.table.name, OrmUtils.zipObject(columns, values));\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Remove from junction tables\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Removes from database junction tables all given array of subjects removal junction data.\r\n     */\r\n    private async executeRemoveJunctionsOperations(): Promise<void> {\r\n        const promises: Promise<any>[] = [];\r\n        this.allSubjects.forEach(subject => {\r\n            subject.junctionRemoves.forEach(junctionRemove => {\r\n                promises.push(this.removeJunctions(subject, junctionRemove));\r\n            });\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Removes from database junction table all given subject's removal junction data.\r\n     */\r\n    private async removeJunctions(subject: Subject, junctionRemove: JunctionRemove) {\r\n        const junctionMetadata = junctionRemove.relation.junctionEntityMetadata;\r\n        const entity = subject.hasEntity ? subject.entity : subject.databaseEntity;\r\n        const ownId = junctionRemove.relation.getOwnEntityRelationId(entity);\r\n        const ownColumn = junctionRemove.relation.isOwning ? junctionMetadata.columns[0] : junctionMetadata.columns[1];\r\n        const relateColumn = junctionRemove.relation.isOwning ? junctionMetadata.columns[1] : junctionMetadata.columns[0];\r\n        const removePromises = junctionRemove.junctionRelationIds.map(relationId => {\r\n            return this.queryRunner.delete(junctionMetadata.table.name, {\r\n                [ownColumn.fullName]: ownId,\r\n                [relateColumn.fullName]: relationId\r\n            });\r\n        });\r\n\r\n        await Promise.all(removePromises);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods: Refresh entity values after persistence\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Updates all special columns of the saving entities (create date, update date, versioning).\r\n     */\r\n    private updateSpecialColumnsInPersistedEntities() {\r\n\r\n        // update entity columns that gets updated on each entity insert\r\n        this.insertSubjects.forEach(subject => {\r\n            if (subject.generatedObjectId && subject.metadata.hasObjectIdColumn)\r\n                subject.entity[subject.metadata.objectIdColumn.propertyName] = subject.generatedObjectId;\r\n\r\n            subject.metadata.primaryColumns.forEach(primaryColumn => {\r\n                if (subject.newlyGeneratedId)\r\n                    subject.entity[primaryColumn.propertyName] = subject.newlyGeneratedId;\r\n            });\r\n            subject.metadata.parentPrimaryColumns.forEach(primaryColumn => {\r\n                if (subject.parentGeneratedId)\r\n                    subject.entity[primaryColumn.propertyName] = subject.parentGeneratedId;\r\n            });\r\n\r\n            if (subject.metadata.hasUpdateDateColumn)\r\n                subject.entity[subject.metadata.updateDateColumn.propertyName] = subject.date;\r\n            if (subject.metadata.hasCreateDateColumn)\r\n                subject.entity[subject.metadata.createDateColumn.propertyName] = subject.date;\r\n            if (subject.metadata.hasVersionColumn)\r\n                subject.entity[subject.metadata.versionColumn.propertyName] = 1;\r\n            if (subject.metadata.hasTreeLevelColumn) {\r\n                // const parentEntity = insertOperation.entity[metadata.treeParentMetadata.propertyName];\r\n                // const parentLevel = parentEntity ? (parentEntity[metadata.treeLevelColumn.propertyName] || 0) : 0;\r\n                subject.entity[subject.metadata.treeLevelColumn.propertyName] = subject.treeLevel;\r\n            }\r\n            /*if (subject.metadata.hasTreeChildrenCountColumn) {\r\n                 subject.entity[subject.metadata.treeChildrenCountColumn.propertyName] = 0;\r\n            }*/\r\n        });\r\n\r\n        // update special columns that gets updated on each entity update\r\n        this.updateSubjects.forEach(subject => {\r\n            if (subject.metadata.hasUpdateDateColumn)\r\n                subject.entity[subject.metadata.updateDateColumn.propertyName] = subject.date;\r\n            if (subject.metadata.hasVersionColumn)\r\n                subject.entity[subject.metadata.versionColumn.propertyName]++;\r\n        });\r\n\r\n        // remove ids from the entities that were removed\r\n        this.removeSubjects\r\n            .filter(subject => subject.hasEntity)\r\n            .forEach(subject => {\r\n                subject.metadata.primaryColumns.forEach(primaryColumn => {\r\n                    subject.entity[primaryColumn.propertyName] = undefined;\r\n                });\r\n            });\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {Subject} from \"./Subject\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {SpecificRepository} from \"../repository/SpecificRepository\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\n\r\n/**\r\n * To be able to execute persistence operations we need to load all entities from the database we need.\r\n * Loading should be efficient - we need to load entities in as few queries as possible + load as less data as we can.\r\n * This is how we determine which entities needs to be loaded from db:\r\n *\r\n * 1. example with cascade updates and inserts:\r\n *\r\n * [Y] - means \"yes, we load\"\r\n * [N] - means \"no, we don't load\"\r\n * in {} braces we specify what cascade options are set between relations\r\n *\r\n * if Post is new, author is not set in the post\r\n *\r\n * [Y] Post -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\r\n *   [Y] Author -> {all} // no because author is not set\r\n *     [Y] Photo -> {all} // no because author and its photo are not set\r\n *       [Y] Tag -> {all} // no because author and its photo and its tag are not set\r\n *\r\n * if Post is new, author is new (or anything else is new)\r\n * if Post is updated\r\n * if Post and/or Author are updated\r\n *\r\n * [Y] Post -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\r\n *   [Y] Author -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\r\n *     [Y] Photo -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\r\n *       [Y] Tag -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\r\n *\r\n * Here we load post, author, photo, tag to check if they are new or not to persist insert or update operation.\r\n * We load post, author, photo, tag only if they exist in the relation.\r\n * From these examples we can see that we always load entity relations when it has \"update\" or \"insert\" cascades.\r\n *\r\n * 2. example with cascade removes\r\n *\r\n * if entity is new its remove operations by cascades should not be executed\r\n * if entity is updated then values that are null or missing in array (not undefined!, undefined means skip - don't do anything) are treated as removed\r\n * if entity is removed then all its downside relations which has cascade remove should be removed\r\n *\r\n * Once we find removed entity - we load it, and every downside entity which has \"remove\" cascade set.\r\n *\r\n * At the end we have all entities we need to operate with.\r\n * Next step is to store all loaded entities to manipulate them efficiently.\r\n *\r\n * Rules of updating by cascades.\r\n * Insert operation can lead to:\r\n *  - insert operations\r\n *  - update operations\r\n * Update operation can lead to:\r\n *  - insert operations\r\n *  - update operations\r\n *  - remove operations\r\n * Remove operation can lead to:\r\n *  - remove operation\r\n */\r\nexport class SubjectBuilder<Entity extends ObjectLiteral> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * If this gonna be reused then what to do with marked flags?\r\n     * One of solution can be clone this object and reset all marked states for this persistence.\r\n     * Or from reused just extract databaseEntities from their subjects? (looks better)\r\n     */\r\n    operateSubjects: Subject[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected queryRunnerProvider: QueryRunnerProvider) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds operations for entity that is being inserted/updated.\r\n     */\r\n    async persist(entity: Entity, metadata: EntityMetadata): Promise<void> {\r\n\r\n        // create subject for currently persisted entity and mark that it can be inserted and updated\r\n        const mainPersistedSubject = new Subject(metadata, entity);\r\n        mainPersistedSubject.canBeInserted = true;\r\n        mainPersistedSubject.canBeUpdated = true;\r\n        this.operateSubjects.push(mainPersistedSubject);\r\n\r\n        // next step we build list of subjects we will operate with\r\n        // these subjects are subjects that we need to insert or update alongside with main persisted entity\r\n        this.buildCascadeUpdateAndInsertOperateSubjects(mainPersistedSubject);\r\n\r\n        // next step is to load database entities of all operate subjects\r\n        await this.loadOperateSubjectsDatabaseEntities();\r\n\r\n        // next step - we filter subjects with database entities (only for non-new entities)\r\n        // and find operate subjects that needs to be removed\r\n        // here we also find operate subjects which relations should be updated\r\n        // these relations usually are \"update from inverse side\" operations\r\n        const operateSubjectsWithDatabaseEntities = this.operateSubjects.filter(subject => subject.hasDatabaseEntity);\r\n        await Promise.all(operateSubjectsWithDatabaseEntities.map(subject => {\r\n            return this.buildCascadeRemovedAndRelationUpdateOperateSubjects(subject);\r\n        }));\r\n\r\n        // finally find which operate subjects have insert and remove operations in their junction tables\r\n        await this.buildJunctionOperations({ insert: true, remove: true });\r\n    }\r\n\r\n    /**\r\n     * Builds only remove operations for entity that is being removed.\r\n     */\r\n    async remove(entity: Entity, metadata: EntityMetadata): Promise<void> {\r\n\r\n        // create subject for currently removed entity and mark that it must be removed\r\n        const mainRemovedSubject = new Subject(metadata, entity);\r\n        mainRemovedSubject.mustBeRemoved = true;\r\n        this.operateSubjects.push(mainRemovedSubject);\r\n\r\n        // next step we build list of subjects we will operate with\r\n        // these subjects are subjects that we need to remove alongside with main removed entity\r\n        this.buildCascadeRemoveOperateSubjects(mainRemovedSubject);\r\n\r\n        // next step is to load database entities for all operate subjects\r\n        await this.loadOperateSubjectsDatabaseEntities();\r\n\r\n        // next step - we filter subjects with database entities (only for non-new entities)\r\n        // and find operate subjects that needs to be removed\r\n        // todo(this should not be in remove?) // here we also find operate subjects which relations should be updated\r\n        // todo(this should not be in remove?) // these relations usually are \"update from inverse side\" operations\r\n        const operateSubjectsWithDatabaseEntities = this.operateSubjects.filter(subject => subject.hasDatabaseEntity);\r\n        await Promise.all(operateSubjectsWithDatabaseEntities.map(subject => {\r\n            return this.buildCascadeRemovedAndRelationUpdateOperateSubjects(subject);\r\n        }));\r\n\r\n        // finally find which operate subjects have remove operations in their junction tables\r\n        await this.buildJunctionOperations({ insert: false, remove: true });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds and pushes to array of operate entities all entities that we will work with.\r\n     * These are only relational entities which has insert and update cascades.\r\n     * All such entities will be loaded from the database, because they can be inserted or updated.\r\n     * That's why we load them - to understand if they should be inserted or updated, or which columns we need to update.\r\n     * We can't add removed entities here, because to know which entity was removed we need first to\r\n     * load original entity (particularly its id) from the database.\r\n     * That's why we first need to load all changed entities, then extract ids of the removed entities from them,\r\n     * and only then load removed entities by extracted ids.\r\n     */\r\n    protected buildCascadeUpdateAndInsertOperateSubjects(subject: Subject): void {\r\n        subject.metadata\r\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations)\r\n            .filter(([relation, value, valueMetadata]) => {\r\n\r\n                // we need only defined values and insert or update cascades of the relation should be set\r\n                return value !== undefined && value !== null && (relation.isCascadeInsert || relation.isCascadeUpdate);\r\n            })\r\n            .forEach(([relation, value, valueMetadata]) => {\r\n\r\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\r\n                const alreadyExistValueSubject = this.findByEntityLike(valueMetadata.target, value);\r\n                if (alreadyExistValueSubject) {\r\n                    if (alreadyExistValueSubject.canBeInserted === false)\r\n                        alreadyExistValueSubject.canBeInserted = relation.isCascadeInsert === true;\r\n                    if (alreadyExistValueSubject.canBeUpdated === false)\r\n                        alreadyExistValueSubject.canBeUpdated = relation.isCascadeUpdate === true;\r\n                    return;\r\n                }\r\n\r\n                // mark subject with what we can do with it\r\n                // and add to the array of subjects to load only if there is no same entity there already\r\n                const valueSubject = new Subject(valueMetadata, value);\r\n                valueSubject.canBeInserted = relation.isCascadeInsert === true;\r\n                valueSubject.canBeUpdated = relation.isCascadeUpdate === true;\r\n                this.operateSubjects.push(valueSubject);\r\n\r\n                // go recursively and find other entities we need to operate with\r\n                this.buildCascadeUpdateAndInsertOperateSubjects(valueSubject);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Builds and pushes to array of operate entities all entities that must be removed.\r\n     */\r\n    protected buildCascadeRemoveOperateSubjects(subject: Subject): void {\r\n        subject.metadata\r\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations)\r\n            .filter(([relation, value, valueMetadata]) => {\r\n\r\n                // we need only defined values and insert cascades of the relation should be set\r\n                return value !== undefined && value !== null && relation.isCascadeRemove;\r\n            })\r\n            .forEach(([relation, value, valueMetadata]) => {\r\n\r\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\r\n                const alreadyExistValueSubject = this.findByEntityLike(valueMetadata.target, value);\r\n                if (alreadyExistValueSubject) {\r\n                    alreadyExistValueSubject.mustBeRemoved = true;\r\n                    return;\r\n                }\r\n\r\n                // add to the array of subjects to load only if there is no same entity there already\r\n                const valueSubject = new Subject(valueMetadata, value);\r\n                valueSubject.mustBeRemoved = true;\r\n                this.operateSubjects.push(valueSubject);\r\n\r\n                // go recursively and find other entities to load by cascades in currently inserted entities\r\n                this.buildCascadeRemoveOperateSubjects(valueSubject);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Loads database entities for all operate subjects which do not have database entity set.\r\n     * All entities that we load database entities for are marked as updated or inserted.\r\n     * To understand which of them really needs to be inserted or updated we need to load\r\n     * their original representations from the database.\r\n     */\r\n    protected async loadOperateSubjectsDatabaseEntities(): Promise<void> {\r\n\r\n        // we are grouping subjects by target to perform more optimized queries using WHERE IN operator\r\n        // go throw the groups and perform loading of database entities of each subject in the group\r\n        const promises = this.groupByEntityTargets().map(async subjectGroup => {\r\n\r\n            // prepare entity ids of the subjects we need to load\r\n            const allIds = subjectGroup.subjects\r\n                .filter(subject => !subject.hasDatabaseEntity) // we don't load if subject already has a database entity loaded\r\n                .map(subject => subject.metadata.getEntityIdMixedMap(subject.entity)) // we only need entity id\r\n                .filter(mixedId => { // we don't need empty ids\r\n                    if (mixedId instanceof Object)\r\n                        return Object.keys(mixedId).every(key => mixedId[key] !== undefined && mixedId[key] !== null && mixedId[key] !== \"\");\r\n\r\n                    return mixedId !== undefined && mixedId !== null && mixedId !== \"\";\r\n                });\r\n\r\n            // if there no ids found (which means all entities are new and have generated ids) - then nothing to load there\r\n            if (!allIds.length)\r\n                return;\r\n\r\n            // load database entities for all given ids\r\n            // todo: such implementation is temporary, need to create a good abstraction there\r\n            // todo: its already possible to do that with repository.findByIds method however setting \"RELATION_ID_VALUES\" option is an issue\r\n            // todo: also custom queryRunnerProvider is an issue\r\n            let entities: any[];\r\n            if (this.connection.driver instanceof MongoDriver) {\r\n                entities = await this.connection\r\n                    .getMongoRepository<ObjectLiteral>(subjectGroup.target)\r\n                    .findByIds(allIds);\r\n\r\n            } else {\r\n                entities = await this.connection\r\n                    .getRepository<ObjectLiteral>(subjectGroup.target)\r\n                    .createQueryBuilder(\"operateSubject\", this.queryRunnerProvider)\r\n                    .andWhereInIds(allIds)\r\n                    .enableOption(\"RELATION_ID_VALUES\")\r\n                    .getMany();\r\n            }\r\n\r\n            // now when we have entities we need to find subject of each entity\r\n            // and insert that entity into database entity of the found subject\r\n            entities.forEach(entity => {\r\n                const subject = this.findByEntityLike(subjectGroup.target, entity);\r\n                if (subject)\r\n                    subject.databaseEntity = entity;\r\n            });\r\n\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * We need to load removed entity when:\r\n     *  - entity with relations is not new (this can be determined only after entity is loaded from db)\r\n     *      (note: simple \"id\" check will not work because id can be not generated)\r\n     *  - entity missing relation. When relation is simple\r\n     *      - in the case of one-to-one owner (with join column) relation we need to load owner entity\r\n     *      - in the case of one-to-one (without join column) relation we need to load inverse side entity\r\n     *      - in the case of many-to-one relations we need to load entity itself\r\n     *      - in the case of one-to-many relations we need to load entities by relation from inverse side\r\n     *\r\n     *  Before loading each entity we need to check in the loaded subjects - maybe it was already loaded.\r\n     *\r\n     *  BIG NOTE: objects are being removed by cascades not only when relation is removed, but also when\r\n     *  relation is replaced (e.g. changed with different object).\r\n     */\r\n    protected async buildCascadeRemovedAndRelationUpdateOperateSubjects(subject: Subject): Promise<void> {\r\n\r\n        // note: we can't use extractRelationValuesFromEntity here because it does not handle empty arrays\r\n        const promises = subject.metadata.relations.map(async relation => {\r\n            const valueMetadata = relation.inverseEntityMetadata;\r\n            const qbAlias = valueMetadata.table.name;\r\n\r\n            // added for type-safety, but subject without databaseEntity cant come here anyway because of checks on upper levels\r\n            if (!subject.hasDatabaseEntity) return;\r\n\r\n            // for one-to-one owner and many-to-one relations no need to load entity to check if something removed\r\n            // because join column is in this side of relation and we have a database entity with which we can compare\r\n            // and understand if relation was removed or not\r\n            if (relation.isOneToOneOwner || relation.isManyToOne) {\r\n\r\n                // we only work with cascade removes here\r\n                if (!relation.isCascadeRemove) return;\r\n\r\n                /**\r\n                 * By example (one-to-one owner). Let's say we have a one-to-one relation between Post and Details.\r\n                 * Post contains detailsId. It means he owns relation. Post has cascade remove with details.\r\n                 * Now here we have a post object with removed details.\r\n                 * We need to remove Details if post.details = null\r\n                 * or if post.details != databasePost.details\r\n                 */\r\n\r\n                /**\r\n                 * By example (many-to-one). Let's say we have a many-to-one relation between Post and Details.\r\n                 * Post contains detailsId. It means he owns relation.\r\n                 * It also means that post can have only one details, and details can have multiple posts.\r\n                 * Post has cascade remove with details.\r\n                 * Now here we have a post object with removed details.\r\n                 * We need to remove Details (one) if post.details = null\r\n                 * or if post.details != databasePost.details\r\n                 */\r\n\r\n                // (example) \"relation\" - is a relation in post with details.\r\n                // (example) \"valueMetadata\" - is an entity metadata of the Details object.\r\n                // (example) \"persistValue\" - is a detailsId from the persisted entity\r\n\r\n                // note that if databaseEntity has relation, it can only be a relation id,\r\n                // because of query builder option \"RELATION_ID_VALUES\" we used\r\n                const relationIdInDatabaseEntity = subject.databaseEntity[relation.joinColumn.propertyName]; // (example) returns post.detailsId\r\n\r\n                // if database relation id does not exist in the database object then nothing to remove\r\n                if (relationIdInDatabaseEntity === null || relationIdInDatabaseEntity === undefined)\r\n                    return;\r\n\r\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\r\n                let persistValueRelationId: any = undefined;\r\n                if (subject.hasEntity) {\r\n                    const persistValue = relation.getEntityValue(subject.entity);\r\n                    if (persistValue === null) persistValueRelationId = null;\r\n                    if (persistValue) persistValueRelationId = persistValue[relation.joinColumn.referencedColumn.propertyName];\r\n                    if (persistValueRelationId === undefined) return; // skip undefined properties\r\n                }\r\n\r\n                // object is removed only if relation id in the persisted entity is empty or is changed\r\n                if (persistValueRelationId !== null && persistValueRelationId === relationIdInDatabaseEntity)\r\n                    return;\r\n\r\n                // first check if we already loaded this object before load from the database\r\n                let alreadyLoadedRelatedDatabaseSubject = this.operateSubjects.find(relatedSubject => {\r\n\r\n                    // (example) filter only subject that has database entity loaded and its target is Details\r\n                    if (!relatedSubject.hasDatabaseEntity || relatedSubject.entityTarget !== valueMetadata.target)\r\n                        return false;\r\n\r\n                    // (example) here we seek a Details loaded from the database in the subjects\r\n                    // (example) here relatedSubject.databaseEntity is a Details\r\n                    // (example) and we need to compare details.id === post.detailsId\r\n                    return relatedSubject.databaseEntity[relation.joinColumn.referencedColumn.propertyName] === relationIdInDatabaseEntity;\r\n                });\r\n\r\n                // if not loaded yet then load it from the database\r\n                if (!alreadyLoadedRelatedDatabaseSubject) {\r\n\r\n                    // (example) we need to load a details where details.id = post.details\r\n                    const databaseEntity = await this.connection\r\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                        .where(qbAlias + \".\" + relation.joinColumn.referencedColumn.propertyName + \"=:id\")\r\n                        .setParameter(\"id\", relationIdInDatabaseEntity) // (example) subject.entity is a post here\r\n                        .enableOption(\"RELATION_ID_VALUES\")\r\n                        .getOne();\r\n\r\n                    if (databaseEntity) {\r\n                        alreadyLoadedRelatedDatabaseSubject = new Subject(valueMetadata, undefined, databaseEntity);\r\n                        this.operateSubjects.push(alreadyLoadedRelatedDatabaseSubject);\r\n                    }\r\n                }\r\n\r\n                if (alreadyLoadedRelatedDatabaseSubject) {\r\n\r\n                    // if object is already marked as removed then no need to proceed because it already was proceed\r\n                    // if we remove this it will cause a recursion\r\n                    if (alreadyLoadedRelatedDatabaseSubject.mustBeRemoved)\r\n                        return;\r\n\r\n                    alreadyLoadedRelatedDatabaseSubject.mustBeRemoved = true;\r\n                    await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(alreadyLoadedRelatedDatabaseSubject);\r\n                }\r\n            }\r\n\r\n            // for one-to-one not owner we need to load entity to understand that it was really removed or not,\r\n            // since column value that indicates relation is stored on inverse side\r\n            if (relation.isOneToOneNotOwner) {\r\n\r\n                // we only work with cascade removes here\r\n                if (!relation.isCascadeRemove) return; // todo: no\r\n\r\n                /**\r\n                 * By example. Let's say we have a one-to-one relation between Post and Details.\r\n                 * Post contains detailsId. It means he owns relation. Details has cascade remove with post.\r\n                 * Now here we have a details object with removed post.\r\n                 * We need to remove Post if details.post = null and databasePost.detailsId = details.id exist in the db,\r\n                 * or if databasePost.id === details.post.id (we need to load it) and databasePost.detailsId != details.id\r\n                 */\r\n\r\n                // (example) \"relation\" - is a relation in details with post.\r\n                // (example) \"valueMetadata\" - is an entity metadata of the Post object.\r\n                // (example) \"subject.databaseEntity\" - is a details object\r\n\r\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\r\n                let persistValueRelationId: any = undefined;\r\n                if (subject.hasEntity && !subject.mustBeRemoved) {\r\n                    const persistValue = relation.getEntityValue(subject.entity);\r\n                    if (persistValue) persistValueRelationId = persistValue[relation.inverseRelation.joinColumn.propertyName];\r\n                    if (persistValueRelationId === undefined) return; // skip undefined properties\r\n                }\r\n\r\n                // (example) returns us referenced column (detail's id)\r\n                const relationIdInDatabaseEntity = subject.databaseEntity[relation.inverseRelation.joinColumn.referencedColumn.propertyName];\r\n\r\n                // if database relation id does not exist then nothing to remove (but can this be possible?)\r\n                if (relationIdInDatabaseEntity === null || relationIdInDatabaseEntity === undefined)\r\n                    return;\r\n\r\n                // first check if we already have this object loaded before load from the database\r\n                let alreadyLoadedRelatedDatabaseSubject = this.operateSubjects.find(relatedSubject => {\r\n\r\n                    // (example) filter only subject that has database entity loaded and its target is Post\r\n                    if (!relatedSubject.hasDatabaseEntity || relatedSubject.entityTarget !== valueMetadata.target)\r\n                        return false;\r\n\r\n                    // (example) here we seek a Post loaded from the database in the subjects\r\n                    // (example) here relatedSubject.databaseEntity is a Post\r\n                    // (example) and we need to compare post.detailsId === details.id\r\n                    return relatedSubject.databaseEntity[relation.inverseRelation.joinColumn.propertyName] === relationIdInDatabaseEntity;\r\n                });\r\n\r\n                // if not loaded yet then load it from the database\r\n                if (!alreadyLoadedRelatedDatabaseSubject) {\r\n\r\n                    // (example) we need to load a post where post.detailsId = details.id\r\n                    const databaseEntity = await this.connection\r\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                        .where(qbAlias + \".\" + relation.inverseSideProperty + \"=:id\")\r\n                        .setParameter(\"id\", relationIdInDatabaseEntity) // (example) subject.entity is a details here, and the value is details.id\r\n                        .enableOption(\"RELATION_ID_VALUES\")\r\n                        .getOne();\r\n\r\n                    // add only if database entity exist - because in the case of inverse side of the one-to-one relation\r\n                    // we cannot check if it was removed or not until we query the database\r\n                    // and it can be a situation that relation wasn't exist at all. This is particular that case\r\n                    alreadyLoadedRelatedDatabaseSubject = new Subject(valueMetadata, undefined, databaseEntity);\r\n                    this.operateSubjects.push(alreadyLoadedRelatedDatabaseSubject);\r\n                }\r\n\r\n                // check if we really has a relation between entities. If relation not found then alreadyLoadedRelatedDatabaseSubject will be empty\r\n                if (alreadyLoadedRelatedDatabaseSubject && alreadyLoadedRelatedDatabaseSubject.hasDatabaseEntity) {\r\n\r\n                    // also check if relation value exist then then make sure its changed\r\n                    // (example) persistValue is a postFromPersistedDetails here\r\n                    // (example) alreadyLoadedRelatedDatabaseSubject.databaseEntity is a postFromDatabaseDetails here\r\n                    // (example) postFromPersistedDetails.id === postFromDatabaseDetails - means nothing changed\r\n                    const inverseEntityRelationId = alreadyLoadedRelatedDatabaseSubject.databaseEntity[relation.inverseRelation.joinColumn.propertyName];\r\n                    if (persistValueRelationId && persistValueRelationId === inverseEntityRelationId)\r\n                        return;\r\n\r\n                    // if object is already marked as removed then no need to proceed because it already was proceed\r\n                    // if we remove this it will cause a recursion\r\n                    if (alreadyLoadedRelatedDatabaseSubject.mustBeRemoved)\r\n                        return;\r\n\r\n                    alreadyLoadedRelatedDatabaseSubject.mustBeRemoved = true;\r\n                    await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(alreadyLoadedRelatedDatabaseSubject);\r\n                }\r\n            }\r\n\r\n            // for one-to-many we need to load entities to understand which was really removed\r\n            // since column value that indicates relation is stored on inverse side\r\n            if (relation.isOneToMany || relation.isManyToMany) {\r\n\r\n                // we only work with cascade removes here\r\n                // if (!relation.isCascadeRemove && !relation.isCascadeUpdate) return;\r\n\r\n                /**\r\n                 * By example. Let's say we have a one-to-many relation between Post and Details.\r\n                 * Post contains detailsId. It means he owns relation.\r\n                 * It also means that one details contains multiple post, and one post contain only one details.\r\n                 * Details has cascade remove with post.\r\n                 * Now here we have a details object with removed post.\r\n                 * There can be one or multiple removed posts, because posts is an array in details.\r\n                 * If details.posts is undefined then we skip it as we do with any persisted undefined property.\r\n                 * If details.posts is an empty array it means all its items should be removed.\r\n                 * If details.posts is a null it means same - all its items has been removed.\r\n                 * We need to remove each Post in the databaseDetails where post is missing in details.posts\r\n                 * but databasePost.detailsId = details.id exist in the db.\r\n                 */\r\n\r\n                // (example) \"relation\" - is a relation in details with post.\r\n                // (example) \"valueMetadata\" - is an entity metadata of the Post object.\r\n                // (example) \"subject.databaseEntity\" - is a details object\r\n\r\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\r\n                let persistValue: any = undefined;\r\n                if (subject.hasEntity) {\r\n                    persistValue = relation.getEntityValue(subject.entity);\r\n                    if (persistValue === undefined) return; // skip undefined properties\r\n                }\r\n\r\n                // we can't get already loaded objects from loadMap because we don't know exactly how\r\n                // many objects are in database entity, and entities from loadMap may return us not all of them\r\n                // that's why we are forced to load all its entities from the database even if loaded some of them before\r\n                // (example) we need to load a posts where post.detailsId = details.id\r\n                let databaseEntities: ObjectLiteral[] = [];\r\n\r\n                // create shortcuts for better readability\r\n                const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\r\n                const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\r\n\r\n                if (relation.isManyToManyOwner) {\r\n\r\n                    // (example) returns us referenced column (detail's id)\r\n                    const relationIdInDatabaseEntity = subject.databaseEntity[relation.joinTable.referencedColumn.propertyName];\r\n\r\n                    // we only need to load inverse entities if cascade removes are set\r\n                    // because remove by cascades is the only reason we need relational entities here\r\n                    if (!relation.isCascadeRemove) return;\r\n\r\n                    databaseEntities = await this.connection\r\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                        .innerJoin(relation.junctionEntityMetadata.table.name, \"persistenceJoinedRelation\",\r\n                            escapeAlias(\"persistenceJoinedRelation\") + \".\" + escapeColumn(relation.joinTable.inverseJoinColumnName) + \"=\" + escapeAlias(qbAlias) + \".\" + escapeColumn(relation.joinTable.inverseReferencedColumn.fullName) +\r\n                            \" AND \" + escapeAlias(\"persistenceJoinedRelation\") + \".\" + escapeColumn(relation.joinTable.joinColumnName) + \"=:id\")\r\n                        .setParameter(\"id\", relationIdInDatabaseEntity)\r\n                        .enableOption(\"RELATION_ID_VALUES\")\r\n                        .getMany();\r\n\r\n                } else if (relation.isManyToManyNotOwner) {\r\n\r\n                    // (example) returns us referenced column (detail's id)\r\n                    const relationIdInDatabaseEntity = subject.databaseEntity[relation.inverseRelation.joinTable.inverseReferencedColumn.propertyName];\r\n\r\n                    // we only need to load inverse entities if cascade removes are set\r\n                    // because remove by cascades is the only reason we need relational entities here\r\n                    if (!relation.isCascadeRemove) return;\r\n\r\n                    databaseEntities = await this.connection\r\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                        .innerJoin(relation.junctionEntityMetadata.table.name, \"persistenceJoinedRelation\",\r\n                            escapeAlias(\"persistenceJoinedRelation\") + \".\" + escapeColumn(relation.joinTable.joinColumnName) + \"=\" + escapeAlias(qbAlias) + \".\" + escapeColumn(relation.joinTable.referencedColumn.fullName) +\r\n                            \" AND \" + escapeAlias(\"persistenceJoinedRelation\") + \".\" + escapeColumn(relation.inverseRelation.joinTable.inverseJoinColumnName) + \"=:id\")\r\n                        .setParameter(\"id\", relationIdInDatabaseEntity)\r\n                        .enableOption(\"RELATION_ID_VALUES\")\r\n                        .getMany();\r\n\r\n                } else { // this case can only be a oneToMany relation\r\n\r\n                    // (example) returns us referenced column (detail's id)\r\n                    const relationIdInDatabaseEntity = subject.databaseEntity[relation.inverseRelation.joinColumn.referencedColumn.propertyName];\r\n\r\n                    // in this case we need inverse entities not only because of cascade removes\r\n                    // because we also need inverse entities to be able to perform update of entities\r\n                    // in the inverse side when entities is detached from one-to-many relation\r\n\r\n                    databaseEntities = await this.connection\r\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                        .where(qbAlias + \".\" + relation.inverseSideProperty + \"=:id\")\r\n                        .setParameter(\"id\", relationIdInDatabaseEntity)\r\n                        .enableOption(\"RELATION_ID_VALUES\")\r\n                        .getMany();\r\n                }\r\n\r\n                // add to loadMap loaded entities if some of them are missing\r\n                databaseEntities.forEach(databaseEntity => {\r\n                    const subjectInLoadMap = this.findByEntityLike(valueMetadata.target, databaseEntity);\r\n                    if (subjectInLoadMap && !subjectInLoadMap.hasDatabaseEntity) {\r\n                        subjectInLoadMap.databaseEntity = databaseEntity;\r\n\r\n                    } else if (!subjectInLoadMap) {\r\n                        const subject = new Subject(valueMetadata, undefined, databaseEntity);\r\n                        this.operateSubjects.push(subject);\r\n                    }\r\n                });\r\n\r\n\r\n                // add new relations for newly bind entities from the one-to-many relations\r\n                if (relation.isOneToMany && persistValue) { // todo: implement same for one-to-one\r\n                    const promises = (persistValue as ObjectLiteral[]).map(async persistValue => {\r\n\r\n                        // try to find in the database entities persistedValue (entity bind to this relation)\r\n                        const persistedValueInDatabaseEntity = databaseEntities.find(databaseEntity => {\r\n                            return valueMetadata.compareEntities(persistValue, databaseEntity);\r\n                        });\r\n\r\n                        // if it does not exist in the database entity - it means we need to bind it\r\n                        // to bind it we need to update related entity itself\r\n                        // this operation is performed only in one-to-many relations\r\n                        if (!persistedValueInDatabaseEntity) {\r\n\r\n                            // now find subject with\r\n                            let loadedSubject = this.findByDatabaseEntityLike(valueMetadata.target, persistValue);\r\n                            if (!loadedSubject) {\r\n                                const id = valueMetadata.getEntityIdMixedMap(persistValue);\r\n                                if (id) { // if there is no id (for newly inserted) then we cant load\r\n                                    const databaseEntity = await this.connection\r\n                                        .getRepository<ObjectLiteral>(valueMetadata.target)\r\n                                        .createQueryBuilder(qbAlias, this.queryRunnerProvider) // todo: this wont work for mongodb. implement this in some method and call it here instead?\r\n                                        .andWhereInIds([id])\r\n                                        .enableOption(\"RELATION_ID_VALUES\")\r\n                                        .getOne();\r\n\r\n                                    if (databaseEntity) {\r\n                                        loadedSubject = new Subject(valueMetadata, undefined, databaseEntity); // todo: what if entity like object exist in the loaded subjects but without databaseEntity?\r\n                                        this.operateSubjects.push(loadedSubject);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (loadedSubject)\r\n                                loadedSubject.relationUpdates.push({\r\n                                    relation: relation.inverseRelation,\r\n                                    value: subject.entity\r\n                                });\r\n                        }\r\n                    });\r\n\r\n                    await Promise.all(promises);\r\n                }\r\n\r\n                // iterate throw loaded inverse entities to find out removed entities and inverse updated entities (only for one-to-many relation)\r\n                const promises = databaseEntities.map(async databaseEntity => {\r\n\r\n                    // find a subject object of the related database entity\r\n                    let relatedEntitySubject = this.findByDatabaseEntityLike(valueMetadata.target, databaseEntity);\r\n                    if (!relatedEntitySubject) return; // should not be possible, anyway add it for type-safety\r\n\r\n                    // if object is already marked as removed then no need to proceed because it already was proceed\r\n                    // if we remove this check it will cause a recursion\r\n                    if (relatedEntitySubject.mustBeRemoved) return;  // todo: add another check for entity in unsetRelations?\r\n\r\n                    // check if in persisted value there is a database value to understand if it was removed or not\r\n                    let relatedValue = ((persistValue || []) as ObjectLiteral[]).find(persistValueItem => {\r\n                        return valueMetadata.compareEntities(relatedEntitySubject!.databaseEntity, persistValueItem);\r\n                    });\r\n\r\n                    // if relation value is set to undefined then we don't do anything - simply skip any check and remove\r\n                    // but if relation value is set to null then it means user wants to remove each entity in this relation\r\n                    // OR\r\n                    // value was removed from persisted value - means we need to mark it as removed\r\n                    // and check if mark as removed all underlying entities that has cascade remove\r\n                    if (persistValue === null || !relatedValue) {\r\n\r\n                        // if cascade remove option is set then need to remove related entity\r\n                        if (relation.isCascadeRemove) {\r\n                            relatedEntitySubject.mustBeRemoved = true;\r\n\r\n                            // mark as removed all underlying entities that has cascade remove\r\n                            await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(relatedEntitySubject);\r\n\r\n                        // if cascade remove option is not set then it means we simply need to remove\r\n                        // reference to this entity from inverse side (from loaded database entity)\r\n                        // this applies only on one-to-many relationship\r\n                        } else if (relation.isOneToMany && relation.inverseRelation) {\r\n                            relatedEntitySubject.relationUpdates.push({\r\n                                relation: relation.inverseRelation,\r\n                                value: null\r\n                            }); // todo: implement same for one-to-one\r\n                        }\r\n\r\n                    }\r\n\r\n                });\r\n\r\n                await Promise.all(promises);\r\n            }\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Builds all junction insert and remove operations used to insert new bind data into junction tables,\r\n     * or remove old junction records.\r\n     * Options specifies which junction operations should be built - insert, remove or both.\r\n     */\r\n    private async buildJunctionOperations(options: { insert: boolean, remove: boolean }): Promise<void> {\r\n\r\n        const promises = this.operateSubjects.filter(subject => subject.hasEntity).map(subject => {\r\n            const promises = subject.metadata.manyToManyRelations.map(async relation => {\r\n\r\n                // if subject marked to be removed then all its junctions must be removed\r\n                if (subject.mustBeRemoved && options.remove) {\r\n\r\n                    // load from db all relation ids of inverse entities that are \"bind\" to the currently persisted entity\r\n                    // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\r\n                    const specificRepository = new SpecificRepository(this.connection, subject.metadata, this.queryRunnerProvider);\r\n                    const existInverseEntityRelationIds = await specificRepository\r\n                        .findRelationIds(relation, subject.databaseEntity);\r\n\r\n                    // finally create a new junction remove operation and push it to the array of such operations\r\n                    if (existInverseEntityRelationIds.length > 0) {\r\n                        subject.junctionRemoves.push({\r\n                            relation: relation,\r\n                            junctionRelationIds: existInverseEntityRelationIds\r\n                        });\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // if entity don't have entity then no need to find something that should be inserted or removed\r\n                if (!subject.hasEntity)\r\n                    return;\r\n\r\n                // else check changed junctions in the persisted entity\r\n                // extract entity value - we only need to proceed if value is defined and its an array\r\n                const relatedValue = relation.getEntityValue(subject.entity);\r\n                if (!(relatedValue instanceof Array))\r\n                    return;\r\n\r\n                // load from db all relation ids of inverse entities that are \"bind\" to the currently persisted entity\r\n                // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\r\n                // we could load this relation ids with entity using however this way it may be more efficient, because\r\n                // this way we load only relations that come, e.g. we don't load data for empty relations set with object.\r\n                // this is also useful when object is being saved partial.\r\n                let existInverseEntityRelationIds: any[] = [];\r\n\r\n                // if subject don't have database entity it means its new and we don't need to remove something that is not exist\r\n                if (subject.hasDatabaseEntity) {\r\n                    const specificRepository = new SpecificRepository(this.connection, subject.metadata, this.queryRunnerProvider);\r\n                    existInverseEntityRelationIds = await specificRepository\r\n                        .findRelationIds(relation, subject.databaseEntity);\r\n                }\r\n\r\n                // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\r\n                const changedInverseEntityRelationIds = relatedValue\r\n                    .map(subRelationValue => {\r\n                        return relation.isManyToManyOwner\r\n                            ? subRelationValue[relation.joinTable.inverseReferencedColumn.propertyName]\r\n                            : subRelationValue[relation.inverseRelation.joinTable.referencedColumn.propertyName];\r\n                    })\r\n                    .filter(subRelationValue => subRelationValue !== undefined && subRelationValue !== null);\r\n\r\n                // now from all entities in the persisted entity find only those which aren't found in the db\r\n                const removedJunctionEntityIds = existInverseEntityRelationIds.filter(existRelationId => {\r\n                    return !changedInverseEntityRelationIds.find(changedRelationId => {\r\n                        return changedRelationId === existRelationId;\r\n                    });\r\n                });\r\n\r\n                // now from all entities in the persisted entity find only those which aren't found in the db\r\n                const newJunctionEntities = relatedValue.filter(subRelatedValue => {\r\n                    const relationValue = relation.isManyToManyOwner\r\n                        ? subRelatedValue[relation.joinTable.inverseReferencedColumn.propertyName]\r\n                        : subRelatedValue[relation.inverseRelation.joinTable.referencedColumn.propertyName];\r\n                    return !existInverseEntityRelationIds.find(relationId => relationValue === relationId);\r\n                });\r\n\r\n                // finally create a new junction insert operation and push it to the array of such operations\r\n                if (newJunctionEntities.length > 0 && options.insert) {\r\n                    subject.junctionInserts.push({\r\n                        relation: relation,\r\n                        junctionEntities: newJunctionEntities\r\n                    });\r\n                }\r\n\r\n                // finally create a new junction remove operation and push it to the array of such operations\r\n                if (removedJunctionEntityIds.length > 0 && options.remove) {\r\n                    subject.junctionRemoves.push({\r\n                        relation: relation,\r\n                        junctionRelationIds: removedJunctionEntityIds\r\n                    });\r\n                }\r\n            });\r\n\r\n            return Promise.all(promises);\r\n        });\r\n\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Finds subject where entity like given subject's entity.\r\n     * Comparision made by entity id.\r\n     */\r\n    protected findByEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\r\n        return this.operateSubjects.find(subject => {\r\n            if (!subject.hasEntity)\r\n                return false;\r\n\r\n            if (subject.entity === entity)\r\n                return true;\r\n\r\n            return subject.entityTarget === entityTarget && subject.metadata.compareEntities(subject.entity, entity);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Finds subject where entity like given subject's database entity.\r\n     * Comparision made by entity id.\r\n     */\r\n    protected findByDatabaseEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\r\n        return this.operateSubjects.find(subject => {\r\n            if (!subject.hasDatabaseEntity)\r\n                return false;\r\n\r\n            return subject.entityTarget === entityTarget && subject.metadata.compareEntities(subject.databaseEntity, entity);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Groups given Subject objects into groups separated by entity targets.\r\n     */\r\n    protected groupByEntityTargets(): { target: Function|string, subjects: Subject[] }[] {\r\n        return this.operateSubjects.reduce((groups, operatedEntity) => {\r\n            let group = groups.find(group => group.target === operatedEntity.entityTarget);\r\n            if (!group) {\r\n                group = { target: operatedEntity.entityTarget, subjects: [] };\r\n                groups.push(group);\r\n            }\r\n            group.subjects.push(operatedEntity);\r\n            return groups;\r\n        }, [] as { target: Function|string, subjects: Subject[] }[]);\r\n    }\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\r\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {SubjectOperationExecutor} from \"../persistence/SubjectOperationExecutor\";\r\nimport {SubjectBuilder} from \"../persistence/SubjectBuilder\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\nimport {PersistOptions} from \"./PersistOptions\";\r\nimport {RemoveOptions} from \"./RemoveOptions\";\r\n\r\n/**\r\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\r\n */\r\nexport class Repository<Entity extends ObjectLiteral> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods Set Dynamically\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by this repository.\r\n     */\r\n    protected connection: Connection;\r\n\r\n    /**\r\n     * Entity metadata of the entity current repository manages.\r\n     */\r\n    protected metadata: EntityMetadata;\r\n\r\n    /**\r\n     * Query runner provider used for this repository.\r\n     */\r\n    protected queryRunnerProvider?: QueryRunnerProvider;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Returns object that is managed by this repository.\r\n     * If this repository manages entity from schema,\r\n     * then it returns a name of that schema instead.\r\n     */\r\n    get target(): Function|string {\r\n        return this.metadata.target;\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     * If entity contains compose ids, then it checks them all.\r\n     */\r\n    hasId(entity: Entity): boolean {\r\n        return this.metadata.hasId(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(entity: Entity): any {\r\n        return this.metadata.getEntityIdMixedMap(entity);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder(alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        return new QueryBuilder(this.connection, queryRunnerProvider || this.queryRunnerProvider)\r\n            .select(alias)\r\n            .from(this.metadata.target, alias);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    create(): Entity;\r\n\r\n    /**\r\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create(entityLike: DeepPartial<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entity instance or instances.\r\n     * Can copy properties from the given object into new entities.\r\n     */\r\n    create(plainEntityLikeOrPlainEntityLikes?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\r\n\r\n        if (!plainEntityLikeOrPlainEntityLikes)\r\n            return this.metadata.create();\r\n\r\n        if (plainEntityLikeOrPlainEntityLikes instanceof Array)\r\n            return plainEntityLikeOrPlainEntityLikes.map(plainEntityLike => this.create(plainEntityLike));\r\n\r\n        return this.merge(this.metadata.create(), plainEntityLikeOrPlainEntityLikes);\r\n    }\r\n\r\n    /**\r\n     * Merges multiple entities (or entity-like objects) into a given entity.\r\n     */\r\n    merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity {\r\n        const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\r\n        entityLikes.forEach(object => plainObjectToEntityTransformer.transform(mergeIntoEntity, object, this.metadata));\r\n        return mergeIntoEntity;\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     *\r\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\r\n     * Returns undefined if entity with given id was not found.\r\n     */\r\n    async preload(entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        // todo: right now sending this.connection.entityManager is not correct because its out of query runner of this repository\r\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.entityManager);\r\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, this.metadata);\r\n        if (transformedEntity)\r\n            return this.merge(transformedEntity as Entity, entityLike);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Persists (saves) all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    async persist(entities: Entity[], options?: PersistOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Persists (saves) a given entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    async persist(entity: Entity, options?: PersistOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Persists one or many given entities.\r\n     */\r\n    async persist(entityOrEntities: Entity|Entity[], options?: PersistOptions): Promise<Entity|Entity[]> {\r\n\r\n        // if for some reason non empty entity was passed then return it back without having to do anything\r\n        if (!entityOrEntities)\r\n            return entityOrEntities;\r\n\r\n        // if multiple entities given then go throw all of them and save them\r\n        if (entityOrEntities instanceof Array)\r\n            return Promise.all(entityOrEntities.map(entity => this.persist(entity)));\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        try {\r\n            const transactionEntityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider);\r\n            // transactionEntityManager.data =\r\n\r\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunnerProvider);\r\n            await databaseEntityLoader.persist(entityOrEntities, this.metadata);\r\n\r\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunnerProvider);\r\n            await executor.execute(databaseEntityLoader.operateSubjects);\r\n\r\n            return entityOrEntities;\r\n\r\n        } finally {\r\n            if (!this.queryRunnerProvider) // release it only if its created by this method\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update(conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given find options.\r\n     */\r\n    async update(findOptions: FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    async update(conditionsOrFindOptions: Partial<Entity>|FindOneOptions<Entity>, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void> {\r\n        const entity = await this.findOne(conditionsOrFindOptions as any); // this is temporary, in the future can be refactored to perform better\r\n        if (!entity)\r\n            throw new Error(`Cannot find entity to update by a given criteria`);\r\n\r\n        Object.assign(entity, partialEntity);\r\n        await this.persist(entity, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity will be found by a given id.\r\n     */\r\n    async updateById(id: any, partialEntity: DeepPartial<Entity>, options?: PersistOptions): Promise<void> {\r\n        const entity = await this.findOneById(id as any); // this is temporary, in the future can be refactored to perform better\r\n        if (!entity)\r\n            throw new Error(`Cannot find entity to update by a id`);\r\n\r\n        Object.assign(entity, partialEntity);\r\n        await this.persist(entity, options);\r\n    }\r\n\r\n    /**\r\n     * Removes a given entities from the database.\r\n     */\r\n    async remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    async remove(entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes one or many given entities.\r\n     */\r\n    async remove(entityOrEntities: Entity|Entity[], options?: RemoveOptions): Promise<Entity|Entity[]> {\r\n\r\n        // if for some reason non empty entity was passed then return it back without having to do anything\r\n        if (!entityOrEntities)\r\n            return entityOrEntities;\r\n\r\n        // if multiple entities given then go throw all of them and save them\r\n        if (entityOrEntities instanceof Array)\r\n            return Promise.all(entityOrEntities.map(entity => this.remove(entity)));\r\n\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        try {\r\n            const transactionEntityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider);\r\n\r\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunnerProvider);\r\n            await databaseEntityLoader.remove(entityOrEntities, this.metadata);\r\n\r\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunnerProvider);\r\n            await executor.execute(databaseEntityLoader.operateSubjects);\r\n\r\n            return entityOrEntities;\r\n\r\n        } finally {\r\n            if (!this.queryRunnerProvider) // release it only if its created by this method\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes entity by a given entity id.\r\n     */\r\n    async removeById(id: any, options?: RemoveOptions): Promise<void> {\r\n        const entity = await this.findOneById(id); // this is temporary, in the future can be refactored to perform better\r\n        if (!entity)\r\n            throw new Error(`Cannot find entity to remove by a given id`);\r\n\r\n        await this.remove(entity, options);\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     */\r\n    count(options?: FindManyOptions<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     */\r\n    count(conditions?: DeepPartial<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given find options or conditions.\r\n     */\r\n    count(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<number> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    find(options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    find(conditions?: DeepPartial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    find(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<Entity[]> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(options?: FindManyOptions<Entity>): Promise<[ Entity[], number ]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(conditions?: DeepPartial<Entity>): Promise<[ Entity[], number ]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<[ Entity[], number ]> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds(ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findByIds(ids: any[], conditions?: DeepPartial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<Entity[]> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions)\r\n            .andWhereInIds(ids)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given options.\r\n     */\r\n    findOne(options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne(conditions?: DeepPartial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne(optionsOrConditions?: FindOneOptions<Entity>|DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getOne();\r\n    }\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findOneById(id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findOneById(id: any, conditions?: DeepPartial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    findOneById(id: any, optionsOrConditions?: FindOneOptions<Entity>|DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        const qb = this.createQueryBuilder(FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || this.metadata.table.name);\r\n        return FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions)\r\n            .andWhereInIds([id])\r\n            .getOne();\r\n    }\r\n\r\n    /**\r\n     * Executes a raw SQL query and returns a raw database results.\r\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\r\n     */\r\n    async query(query: string, parameters?: any[]): Promise<any> {\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        try {\r\n            return await queryRunner.query(query, parameters); // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided repository.\r\n     *\r\n     * Most important, you should execute all your database operations using provided repository instance,\r\n     * all other operations would not be included in the transaction.\r\n     * If you want to execute transaction and persist multiple different entity types, then\r\n     * use EntityManager.transaction method instead.\r\n     *\r\n     * Transactions are supported only by relational databases (MongoDB is not supported).\r\n     */\r\n    async transaction(runInTransaction: (repository: Repository<Entity>) => Promise<any>|any): Promise<any> {\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        const transactionRepository = new Repository<any>();\r\n        (transactionRepository as any)[\"connection\"] = this.connection;\r\n        (transactionRepository as any)[\"metadata\"] = this.metadata;\r\n        (transactionRepository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\r\n        // todo: same code in the repository factory. probably better to use repository factory here too\r\n\r\n        try {\r\n            await queryRunner.beginTransaction();\r\n            const result = await runInTransaction(transactionRepository);\r\n            await queryRunner.commitTransaction();\r\n            return result;\r\n\r\n        } catch (err) {\r\n            await queryRunner.rollbackTransaction();\r\n            throw err;\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n            if (!this.queryRunnerProvider) // if we used a new query runner provider then release it\r\n                await queryRunnerProvider.releaseReused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table/collection (truncates/drops it).\r\n     */\r\n    async clear(): Promise<void> {\r\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\r\n        const queryRunner = await queryRunnerProvider.provide();\r\n        try {\r\n            return await queryRunner.truncate(this.metadata.table.name); // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            await queryRunnerProvider.release(queryRunner);\r\n        }\r\n    }\r\n\r\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\r\n\r\n/**\r\n * UpdateEvent is an object that broadcaster sends to the entity subscriber when entity is being updated in the database.\r\n */\r\nexport interface UpdateEvent<Entity> {\r\n\r\n    /**\r\n     * Entity managed with connection used for original event.\r\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\r\n     */\r\n    entityManager: EntityManager;\r\n\r\n    /**\r\n     * Updating entity.\r\n     */\r\n    entity: Entity;\r\n\r\n    /**\r\n     * Updating entity in the database.\r\n     */\r\n    databaseEntity: Entity;\r\n\r\n    /**\r\n     * List of updated columns.\r\n     */\r\n    updatedColumns: ColumnMetadata[];\r\n\r\n    /**\r\n     * List of updated relations.\r\n     */\r\n    updatedRelations: RelationMetadata[];\r\n\r\n    // todo: send old and new update values\r\n    // todo: send updated relations?\r\n\r\n}","import {EntityManager} from \"../../entity-manager/EntityManager\";\r\n\r\n/**\r\n * RemoveEvent is an object that broadcaster sends to the entity subscriber when entity is being removed to the database.\r\n */\r\nexport interface RemoveEvent<Entity> {\r\n\r\n    /**\r\n     * Entity managed with connection used for original event.\r\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\r\n     */\r\n    entityManager: EntityManager;\r\n\r\n    /**\r\n     * Entity that is being removed.\r\n     * This may absent if entity is removed without being loaded (for examples by cascades).\r\n     */\r\n    entity?: Entity;\r\n\r\n    /**\r\n     * Database representation of entity that is being removed.\r\n     */\r\n    databaseEntity: Entity;\r\n\r\n    /**\r\n     * Id or ids of the entity that is being removed.\r\n     */\r\n    entityId?: any;\r\n\r\n}","import {EntityManager} from \"../../entity-manager/EntityManager\";\r\n\r\n/**\r\n * InsertEvent is an object that broadcaster sends to the entity subscriber when entity is inserted to the database.\r\n */\r\nexport interface InsertEvent<Entity> {\r\n\r\n    /**\r\n     * Entity managed with connection used for original event.\r\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\r\n     */\r\n    entityManager: EntityManager;\r\n\r\n    /**\r\n     * Inserting event.\r\n     */\r\n    entity: Entity;\r\n\r\n}","import {UpdateEvent} from \"./event/UpdateEvent\";\r\nimport {RemoveEvent} from \"./event/RemoveEvent\";\r\nimport {InsertEvent} from \"./event/InsertEvent\";\r\n\r\n/**\r\n * Classes that implement this interface are subscribers that subscribe for the specific events in the ORM.\r\n */\r\nexport interface EntitySubscriberInterface<Entity> {\r\n\r\n    /**\r\n     * Returns the class of the entity to which events will listen.\r\n     * If this method is omitted, then subscriber will listen to events of all entities.\r\n     */\r\n    listenTo?(): Function;\r\n\r\n    /**\r\n     * Called after entity is loaded from the database.\r\n     */\r\n    afterLoad?(entity: Entity): Promise<any>|void;\r\n\r\n    /**\r\n     * Called before entity is inserted to the database.\r\n     */\r\n    beforeInsert?(event: InsertEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called after entity is inserted to the database.\r\n     */\r\n    afterInsert?(event: InsertEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called before entity is updated in the database.\r\n     */\r\n    beforeUpdate?(event: UpdateEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called after entity is updated in the database.\r\n     */\r\n    afterUpdate?(event: UpdateEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called before entity is removed from the database.\r\n     */\r\n    beforeRemove?(event: RemoveEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called after entity is removed from the database.\r\n     */\r\n    afterRemove?(event: RemoveEvent<Entity>): Promise<any>|void;\r\n\r\n}","/**\r\n * Thrown when repository for the given class is not found.\r\n */\r\nexport class RepositoryNotFoundError extends Error {\r\n    name = \"RepositoryNotFoundError\";\r\n\r\n    constructor(connectionName: string, entityClass: Function|string) {\r\n        super();\r\n        const targetName = typeof entityClass === \"function\" && (<any> entityClass).name ? (<any> entityClass).name : entityClass;\r\n        this.message = `No repository for \"${targetName}\" was found. Looks like this entity is not registered in ` +\r\n            `current \"${connectionName}\" connection?`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * All types that entity listener can be.\r\n */\r\nexport type EventListenerType = \"after-load\"|\"before-insert\"|\"after-insert\"|\"before-update\"|\"after-update\"|\"before-remove\"|\"after-remove\";\r\n\r\n/**\r\n * Provides a constants for each entity listener type.\r\n */\r\nexport class EventListenerTypes {\r\n    static AFTER_LOAD: EventListenerType = \"after-load\";\r\n    static BEFORE_INSERT: EventListenerType = \"before-insert\";\r\n    static AFTER_INSERT: EventListenerType = \"after-insert\";\r\n    static BEFORE_UPDATE: EventListenerType = \"before-update\";\r\n    static AFTER_UPDATE: EventListenerType = \"after-update\";\r\n    static BEFORE_REMOVE: EventListenerType = \"before-remove\";\r\n    static AFTER_REMOVE: EventListenerType = \"after-remove\";\r\n}","import {EventListenerType} from \"../metadata/types/EventListenerTypes\";\r\n\r\n/**\r\n * Arguments for EntityListenerMetadata class.\r\n */\r\nexport interface EntityListenerMetadataArgs {\r\n\r\n    /**\r\n     * Class to which listener is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Class's property name to which listener is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * The type of the listener.\r\n     */\r\n    readonly type: EventListenerType;\r\n\r\n}\r\n","import {EventListenerType} from \"./types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * This metadata contains all information about entity's listeners.\r\n */\r\nexport class EntityListenerMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Readonly Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * The type of the listener.\r\n     */\r\n    readonly type: EventListenerType;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(args: EntityListenerMetadataArgs) {\r\n        this.target = args.target;\r\n        this.propertyName = args.propertyName;\r\n        this.type = args.type;\r\n    }\r\n\r\n\r\n}","import {PlatformTools} from \"../platform/PlatformTools\";\r\n\r\n/**\r\n * Loads all exported classes from the given directory.\r\n */\r\nexport function importClassesFromDirectories(directories: string[], formats = [\".js\", \".ts\"]): Function[] {\r\n\r\n    function loadFileClasses(exported: any, allLoaded: Function[]) {\r\n        if (exported instanceof Function) {\r\n            allLoaded.push(exported);\r\n\r\n        } else if (exported instanceof Object) {\r\n            Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));\r\n\r\n        } else if (exported instanceof Array) {\r\n            exported.forEach((i: any) => loadFileClasses(i, allLoaded));\r\n        }\r\n\r\n        return allLoaded;\r\n    }\r\n\r\n    const allFiles = directories.reduce((allDirs, dir) => {\r\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormilize(dir)));\r\n    }, [] as string[]);\r\n\r\n    const dirs = allFiles\r\n        .filter(file => {\r\n            const dtsExtension = file.substring(file.length - 5, file.length);\r\n            return formats.indexOf(PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== \".d.ts\";\r\n        })\r\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\r\n\r\n    return loadFileClasses(dirs, []);\r\n}\r\n\r\n/**\r\n * Loads all json files from the given directory.\r\n */\r\nexport function importJsonsFromDirectories(directories: string[], format = \".json\"): any[] {\r\n\r\n    const allFiles = directories.reduce((allDirs, dir) => {\r\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormilize(dir)));\r\n    }, [] as string[]);\r\n\r\n    return allFiles\r\n        .filter(file => PlatformTools.pathExtname(file) === format)\r\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class UsingJoinTableIsNotAllowedError extends Error {\r\n    name = \"UsingJoinTableIsNotAllowedError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        this.message = `Using JoinTable on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\r\n            `${entityMetadata.name}#${relation.propertyName} has ${relation.relationType} relation, ` +\r\n            `however you can use JoinTable only on many-to-many relations.`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class UsingJoinTableOnlyOnOneSideAllowedError extends Error {\r\n    name = \"UsingJoinTableOnlyOnOneSideAllowedError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        this.message = `Using JoinTable is allowed only on one side of the many-to-many relationship. ` +\r\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} ` +\r\n            `has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class UsingJoinColumnIsNotAllowedError extends Error {\r\n    name = \"UsingJoinColumnIsNotAllowedError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        this.message = `Using JoinColumn on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\r\n            `You can use JoinColumn only on one-to-one and many-to-one relations.`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class UsingJoinColumnOnlyOnOneSideAllowedError extends Error {\r\n    name = \"UsingJoinColumnOnlyOnOneSideAllowedError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        this.message = `Using JoinColumn is allowed only on one side of the one-to-one relationship. ` +\r\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} ` +\r\n            `has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class MissingJoinColumnError extends Error {\r\n    name = \"MissingJoinColumnError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        if (relation.hasInverseSide) {\r\n            this.message = `JoinColumn is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +\r\n                `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} one-to-one relationship. ` +\r\n                `You need to put JoinColumn decorator on one of the sides.`;\r\n        } else {\r\n            this.message = `JoinColumn is missing on ${entityMetadata.name}#${relation.propertyName} one-to-one relationship. ` +\r\n                `You need to put JoinColumn decorator on it.`;\r\n        }\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class MissingJoinTableError extends Error {\r\n    name = \"MissingJoinTableError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n\r\n        if (relation.hasInverseSide) {\r\n            this.message = `JoinTable is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +\r\n                `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} many-to-many relationship. ` +\r\n                `You need to put decorator decorator on one of the sides.`;\r\n        } else {\r\n            this.message = `JoinTable is missing on ${entityMetadata.name}#${relation.propertyName} many-to-many relationship. ` +\r\n                `You need to put JoinTable decorator on it.`;\r\n        }\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\n\r\n/**\r\n */\r\nexport class MissingPrimaryColumnError extends Error {\r\n    name = \"MissingPrimaryColumnError\";\r\n\r\n    constructor(entityMetadata: EntityMetadata) {\r\n        super();\r\n        this.message = `Entity \"${entityMetadata.name}\" does not have a primary column. Primary column is required to ` +\r\n            `have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown when circular relations detected with nullable set to false.\r\n */\r\nexport class CircularRelationsError extends Error {\r\n    name = \"CircularRelationsError\";\r\n\r\n    constructor(path: string) {\r\n        super(`Circular relations detected: ${path}. To resolve this issue you need to set nullable: false somewhere in this dependency structure.`);\r\n    }\r\n\r\n}","/**\r\n * This source code is from https://github.com/jriecken/dependency-graph\r\n * Just added \"any\" types here, wrapper everything into exported class.\r\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\r\n */\r\n\r\n/**\r\n * A simple dependency graph\r\n */\r\n\r\n/**\r\n * Helper for creating a Depth-First-Search on\r\n * a set of edges.\r\n *\r\n * Detects cycles and throws an Error if one is detected.\r\n *\r\n * @param edges The set of edges to DFS through\r\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\r\n * @param result An array in which the results will be populated\r\n */\r\nfunction createDFS(edges: any, leavesOnly: any, result: any) {\r\n    let currentPath: any[] = [];\r\n    let visited: any = {};\r\n    return function DFS(currentNode: any) {\r\n        visited[currentNode] = true;\r\n        currentPath.push(currentNode);\r\n        edges[currentNode].forEach(function (node: any) {\r\n            if (!visited[node]) {\r\n                DFS(node);\r\n            } else if (currentPath.indexOf(node) >= 0) {\r\n                currentPath.push(node);\r\n                throw new Error(`Dependency Cycle Found: ${currentPath.join(\" -> \")}`);\r\n            }\r\n        });\r\n        currentPath.pop();\r\n        if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {\r\n            result.push(currentNode);\r\n        }\r\n    };\r\n}\r\n\r\n\r\nexport class DepGraph {\r\n    nodes: any = {};\r\n    outgoingEdges: any = {}; // Node -> [Dependency Node]\r\n    incomingEdges: any = {}; // Node -> [Dependant Node]\r\n\r\n    /**\r\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\r\n     */\r\n    addNode(node: any, data?: any) {\r\n        if (!this.hasNode(node)) {\r\n            // Checking the arguments length allows the user to add a node with undefined data\r\n            if (arguments.length === 2) {\r\n                this.nodes[node] = data;\r\n            } else {\r\n                this.nodes[node] = node;\r\n            }\r\n            this.outgoingEdges[node] = [];\r\n            this.incomingEdges[node] = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\r\n     */\r\n    removeNode(node: any) {\r\n        if (this.hasNode(node)) {\r\n            delete this.nodes[node];\r\n            delete this.outgoingEdges[node];\r\n            delete this.incomingEdges[node];\r\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\r\n                Object.keys(edgeList).forEach(function (key: any) {\r\n                    let idx = edgeList[key].indexOf(node);\r\n                    if (idx >= 0) {\r\n                        edgeList[key].splice(idx, 1);\r\n                    }\r\n                }, this);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a node exists in the graph\r\n     */\r\n    hasNode(node: any) {\r\n        return this.nodes.hasOwnProperty(node);\r\n    }\r\n\r\n    /**\r\n     * Get the data associated with a node name\r\n     */\r\n    getNodeData(node: any) {\r\n        if (this.hasNode(node)) {\r\n            return this.nodes[node];\r\n        } else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\r\n     */\r\n    setNodeData(node: any, data: any) {\r\n        if (this.hasNode(node)) {\r\n            this.nodes[node] = data;\r\n        } else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a dependency between two nodes. If either of the nodes does not exist,\r\n     * an Error will be thrown.\r\n     */\r\n    addDependency(from: any, to: any) {\r\n        if (!this.hasNode(from)) {\r\n            throw new Error(`Node does not exist: ${from}`);\r\n        }\r\n        if (!this.hasNode(to)) {\r\n            throw new Error(`Node does not exist: ${to}`);\r\n        }\r\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\r\n            this.outgoingEdges[from].push(to);\r\n        }\r\n        if (this.incomingEdges[to].indexOf(from) === -1) {\r\n            this.incomingEdges[to].push(from);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Remove a dependency between two nodes.\r\n     */\r\n    removeDependency(from: any, to: any) {\r\n        let idx: any;\r\n        if (this.hasNode(from)) {\r\n            idx = this.outgoingEdges[from].indexOf(to);\r\n            if (idx >= 0) {\r\n                this.outgoingEdges[from].splice(idx, 1);\r\n            }\r\n        }\r\n\r\n        if (this.hasNode(to)) {\r\n            idx = this.incomingEdges[to].indexOf(from);\r\n            if (idx >= 0) {\r\n                this.incomingEdges[to].splice(idx, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an array containing the nodes that the specified node depends on (transitively).\r\n     *\r\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\r\n     * in the array.\r\n     */\r\n    dependenciesOf(node: any, leavesOnly: any) {\r\n        if (this.hasNode(node)) {\r\n            let result: any[] = [];\r\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\r\n            DFS(node);\r\n            let idx = result.indexOf(node);\r\n            if (idx >= 0) {\r\n                result.splice(idx, 1);\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get an array containing the nodes that depend on the specified node (transitively).\r\n     *\r\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\r\n     */\r\n    dependantsOf(node: any, leavesOnly: any) {\r\n        if (this.hasNode(node)) {\r\n            let result: any[] = [];\r\n            let DFS = createDFS(this.incomingEdges, leavesOnly, result);\r\n            DFS(node);\r\n            let idx = result.indexOf(node);\r\n            if (idx >= 0) {\r\n                result.splice(idx, 1);\r\n            }\r\n            return result;\r\n        } else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Construct the overall processing order for the dependency graph.\r\n     *\r\n     * Throws an Error if the graph has a cycle.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\r\n     */\r\n    overallOrder(leavesOnly?: any) {\r\n        let self = this;\r\n        let result: any[] = [];\r\n        let keys = Object.keys(this.nodes);\r\n        if (keys.length === 0) {\r\n            return result; // Empty graph\r\n        } else {\r\n            // Look for cycles - we run the DFS starting at all the nodes in case there\r\n            // are several disconnected subgraphs inside this dependency graph.\r\n            let CycleDFS = createDFS(this.outgoingEdges, false, []);\r\n            keys.forEach(function (n: any) {\r\n                CycleDFS(n);\r\n            });\r\n\r\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\r\n            // Find all potential starting points (nodes with nothing depending on them) an\r\n            // run a DFS starting at these points to get the order\r\n            keys.filter(function (node) {\r\n                return self.incomingEdges[node].length === 0;\r\n            }).forEach(function (n) {\r\n                DFS(n);\r\n            });\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n}","import {UsingJoinTableIsNotAllowedError} from \"./error/UsingJoinTableIsNotAllowedError\";\r\nimport {UsingJoinTableOnlyOnOneSideAllowedError} from \"./error/UsingJoinTableOnlyOnOneSideAllowedError\";\r\nimport {UsingJoinColumnIsNotAllowedError} from \"./error/UsingJoinColumnIsNotAllowedError\";\r\nimport {UsingJoinColumnOnlyOnOneSideAllowedError} from \"./error/UsingJoinColumnOnlyOnOneSideAllowedError\";\r\nimport {MissingJoinColumnError} from \"./error/MissingJoinColumnError\";\r\nimport {MissingJoinTableError} from \"./error/MissingJoinTableError\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {MissingPrimaryColumnError} from \"./error/MissingPrimaryColumnError\";\r\nimport {CircularRelationsError} from \"./error/CircularRelationsError\";\r\nimport {DepGraph} from \"../util/DepGraph\";\r\n\r\n/// todo: add check if there are multiple tables with the same name\r\n/// todo: add checks when generated column / table names are too long for the specific driver\r\n\r\n/**\r\n * Validates built entity metadatas.\r\n */\r\nexport class EntityMetadataValidator {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validates all given entity metadatas.\r\n     */\r\n    validateMany(entityMetadatas: EntityMetadata[]) {\r\n        entityMetadatas.forEach(entityMetadata => this.validate(entityMetadata, entityMetadatas));\r\n        this.validateDependencies(entityMetadatas);\r\n    }\r\n\r\n    /**\r\n     * Validates given entity metadata.\r\n     */\r\n    validate(entityMetadata: EntityMetadata, allEntityMetadatas: EntityMetadata[]) {\r\n\r\n        // check if table metadata has an id\r\n        if (!entityMetadata.table.isClassTableChild && !entityMetadata.primaryColumns.length && !entityMetadata.junction)\r\n            throw new MissingPrimaryColumnError(entityMetadata);\r\n\r\n        // validate if table is using inheritance it has a discriminator\r\n        // also validate if discriminator values are not empty and not repeated\r\n        if (entityMetadata.inheritanceType === \"single-table\") {\r\n            if (!entityMetadata.hasDiscriminatorColumn)\r\n                throw new Error(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put @DiscriminatorColumn decorator?`);\r\n\r\n            if ([\"\", undefined, null].indexOf(entityMetadata.discriminatorValue) !== -1)\r\n                throw new Error(`Entity ${entityMetadata.name} has empty discriminator value. Discriminator value should not be empty.`);\r\n\r\n            const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(metadata => {\r\n                return metadata !== entityMetadata && metadata.discriminatorValue === entityMetadata.discriminatorValue;\r\n            });\r\n            if (sameDiscriminatorValueEntityMetadata)\r\n                throw new Error(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} as equal discriminator values. Make sure their discriminator values are not equal using @DiscriminatorValue decorator.`);\r\n        }\r\n\r\n        // validate relations\r\n        entityMetadata.relations.forEach(relation => {\r\n\r\n            // check join tables:\r\n            // using JoinTable is possible only on one side of the many-to-many relation\r\n            if (relation.joinTable) {\r\n                if (!relation.isManyToMany)\r\n                    throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\r\n\r\n                // if there is inverse side of the relation, then check if it does not have join table too\r\n                if (relation.hasInverseSide && relation.inverseRelation.joinTable)\r\n                    throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\r\n            }\r\n\r\n            // check join columns:\r\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\r\n            // first check if relation is one-to-one or many-to-one\r\n            if (relation.joinColumn) {\r\n\r\n                // join column can be applied only on one-to-one and many-to-one relations\r\n                if (!relation.isOneToOne && !relation.isManyToOne)\r\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\r\n\r\n                // if there is inverse side of the relation, then check if it does not have join table too\r\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\r\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\r\n\r\n                // check if join column really has referenced column\r\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\r\n                    throw new Error(`Join column does not have referenced column set`);\r\n\r\n            }\r\n\r\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\r\n            // or its one-side relation without JoinColumn we should give an error\r\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\r\n                throw new MissingJoinColumnError(entityMetadata, relation);\r\n\r\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\r\n            // or its one-side relation without JoinTable we should give an error\r\n            if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\r\n                throw new MissingJoinTableError(entityMetadata, relation);\r\n\r\n\r\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\r\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\r\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\r\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\r\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\r\n            // todo: check if there are multiple columns on the same column applied.\r\n            // todo: check column type if is missing in relational databases (throw new Error(`Column type of ${type} cannot be determined.`);)\r\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\r\n\r\n        });\r\n\r\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\r\n        entityMetadata.relations.forEach(relation => {\r\n            const isCircularCascadeRemove = relation.isCascadeRemove && relation.hasInverseSide && relation.inverseRelation.isCascadeRemove;\r\n            if (isCircularCascadeRemove)\r\n                throw new Error(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation.entityMetadata.name}#${relation.inverseRelation.propertyName} both has cascade remove set. ` +\r\n                    `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\r\n        }); // todo: maybe better just deny removal from one to one relation without join column?\r\n    }\r\n\r\n    /**\r\n     * Validates dependencies of the entity metadatas.\r\n     */\r\n    protected validateDependencies(entityMetadatas: EntityMetadata[]) {\r\n\r\n        const graph = new DepGraph();\r\n        entityMetadatas.forEach(entityMetadata => {\r\n            graph.addNode(entityMetadata.name);\r\n        });\r\n        entityMetadatas.forEach(entityMetadata => {\r\n            entityMetadata.relationsWithJoinColumns\r\n                .filter(relation => !relation.isNullable)\r\n                .forEach(relation => {\r\n                    graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\r\n                });\r\n        });\r\n        try {\r\n            graph.overallOrder();\r\n\r\n        } catch (err) {\r\n            throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\r\n        }\r\n    }\r\n\r\n}","import {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {ColumnOptions} from \"../decorator/options/ColumnOptions\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {TableMetadata} from \"../metadata/TableMetadata\";\r\nimport {JoinTableMetadata} from \"../metadata/JoinTableMetadata\";\r\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\r\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {Driver} from \"../driver/Driver\";\r\n\r\n/**\r\n * Helps to create EntityMetadatas for junction tables.\r\n */\r\nexport interface JunctionEntityMetadataBuilderArgs {\r\n    namingStrategy: NamingStrategyInterface;\r\n    firstTable: TableMetadata;\r\n    secondTable: TableMetadata;\r\n    joinTable: JoinTableMetadata;\r\n}\r\n\r\n/**\r\n * Helps to create EntityMetadatas for junction tables.\r\n */\r\nexport class JunctionEntityMetadataBuilder {\r\n\r\n    build(driver: Driver, lazyRelationsWrapper: LazyRelationsWrapper, args: JunctionEntityMetadataBuilderArgs) {\r\n\r\n        const column1 = args.joinTable.referencedColumn;\r\n        const column2 = args.joinTable.inverseReferencedColumn;\r\n\r\n        const tableMetadata = new TableMetadata({\r\n            target: \"\",\r\n            name: args.joinTable.name,\r\n            type: \"junction\"\r\n        });\r\n\r\n        const junctionColumn1 = new ColumnMetadata({\r\n            target: \"__virtual__\",\r\n            // propertyType: column1.type,\r\n            propertyName: args.joinTable.joinColumnName,\r\n            mode: \"virtual\",\r\n            options: <ColumnOptions> {\r\n                length: column1.length,\r\n                type: column1.type,\r\n                name: args.joinTable.joinColumnName,\r\n                nullable: false,\r\n                primary: true\r\n            }\r\n        });\r\n        const junctionColumn2 = new ColumnMetadata({\r\n            target: \"__virtual__\",\r\n            // propertyType: column2.type,\r\n            propertyName: args.joinTable.inverseJoinColumnName,\r\n            mode: \"virtual\",\r\n            options: <ColumnOptions> {\r\n                length: column2.length,\r\n                type: column2.type,\r\n                name: args.joinTable.inverseJoinColumnName,\r\n                nullable: false,\r\n                primary: true\r\n            }\r\n        });\r\n\r\n        const entityMetadata = new EntityMetadata({\r\n            junction: true,\r\n            target: \"__virtual__\",\r\n            tablesPrefix: driver.options.tablesPrefix,\r\n            namingStrategy: args.namingStrategy,\r\n            tableMetadata: tableMetadata,\r\n            columnMetadatas: [\r\n                junctionColumn1,\r\n                junctionColumn2\r\n            ],\r\n            foreignKeyMetadatas: [\r\n                new ForeignKeyMetadata([junctionColumn1], args.firstTable, [column1]),\r\n                new ForeignKeyMetadata([junctionColumn2], args.secondTable, [column2])\r\n            ],\r\n            indexMetadatas: [\r\n                new IndexMetadata({ columns: [args.joinTable.joinColumnName], unique: false }),\r\n                new IndexMetadata({ columns: [args.joinTable.inverseJoinColumnName], unique: false })\r\n            ]\r\n        }, lazyRelationsWrapper);\r\n\r\n        entityMetadata.columns[0].entityMetadata = entityMetadata;\r\n        entityMetadata.columns[1].entityMetadata = entityMetadata;\r\n\r\n        return entityMetadata;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {ColumnOptions} from \"../decorator/options/ColumnOptions\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {TableMetadata} from \"../metadata/TableMetadata\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {ColumnTypes} from \"../metadata/types/ColumnTypes\";\r\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\r\nimport {Driver} from \"../driver/Driver\";\r\n\r\n/**\r\n * Helps to create EntityMetadatas for junction tables.\r\n */\r\nexport interface ClosureJunctionEntityMetadataBuilderArgs {\r\n    namingStrategy: NamingStrategyInterface;\r\n    table: TableMetadata;\r\n    primaryColumn: ColumnMetadata;\r\n    hasTreeLevelColumn: boolean;\r\n}\r\n\r\n/**\r\n * Helps to create EntityMetadatas for junction tables for closure tables.\r\n */\r\nexport class ClosureJunctionEntityMetadataBuilder {\r\n\r\n    build(driver: Driver, lazyRelationsWrapper: LazyRelationsWrapper, args: ClosureJunctionEntityMetadataBuilderArgs) {\r\n\r\n        const columns = [\r\n            new ColumnMetadata(<ColumnMetadataArgs> {\r\n                target: \"__virtual__\",\r\n                propertyName: \"__virtual__\",\r\n                propertyType: args.primaryColumn.type,\r\n                mode: \"virtual\",\r\n                options: <ColumnOptions> {\r\n                    length: args.primaryColumn.length,\r\n                    type: args.primaryColumn.type,\r\n                    name: \"ancestor\"\r\n                }\r\n            }),\r\n            new ColumnMetadata(<ColumnMetadataArgs> {\r\n                target: \"__virtual__\",\r\n                propertyName: \"__virtual__\",\r\n                propertyType: args.primaryColumn.type,\r\n                mode: \"virtual\",\r\n                options: <ColumnOptions> {\r\n                    length: args.primaryColumn.length,\r\n                    type: args.primaryColumn.type,\r\n                    name: \"descendant\"\r\n                }\r\n            })\r\n        ];\r\n\r\n        if (args.hasTreeLevelColumn) {\r\n            columns.push(new ColumnMetadata(<ColumnMetadataArgs> {\r\n                target: \"__virtual__\",\r\n                propertyName: \"__virtual__\",\r\n                propertyType: ColumnTypes.INTEGER,\r\n                mode: \"virtual\",\r\n                options: {\r\n                    type: ColumnTypes.INTEGER,\r\n                    name: \"level\"\r\n                }\r\n            }));\r\n        }\r\n\r\n        const closureJunctionTableMetadata = new TableMetadata({\r\n            target: \"__virtual__\",\r\n            name: args.table.name,\r\n            type: \"closure-junction\"\r\n        });\r\n\r\n        return new EntityMetadata({\r\n            junction: true,\r\n            target: \"__virtual__\",\r\n            tablesPrefix: driver.options.tablesPrefix,\r\n            namingStrategy: args.namingStrategy,\r\n            tableMetadata: closureJunctionTableMetadata,\r\n            columnMetadatas: columns,\r\n            foreignKeyMetadatas: [\r\n                new ForeignKeyMetadata([columns[0]], args.table, [args.primaryColumn]),\r\n                new ForeignKeyMetadata([columns[1]], args.table, [args.primaryColumn])\r\n            ]\r\n        }, lazyRelationsWrapper);\r\n    }\r\n\r\n}","import {TableType} from \"../metadata/types/TableTypes\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {OnDeleteType} from \"../metadata/ForeignKeyMetadata\";\r\nimport {JoinColumnOptions} from \"../decorator/options/JoinColumnOptions\";\r\nimport {ColumnType} from \"../metadata/types/ColumnTypes\";\r\nimport {RelationType} from \"../metadata/types/RelationTypes\";\r\n\r\nexport interface EntitySchema {\r\n\r\n    /**\r\n     * Name of the schema it extends.\r\n     */\r\n    extends?: string;\r\n\r\n    /**\r\n     * Target bind to this entity schema. Optional.\r\n     */\r\n    target?: Function;\r\n\r\n    /**\r\n     * Entity name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Entity table's options.\r\n     */\r\n    table?: {\r\n\r\n        /**\r\n         * Table name.\r\n         */\r\n        name?: string;\r\n\r\n        /**\r\n         * Table type.\r\n         */\r\n        type?: TableType;\r\n\r\n        /**\r\n         * Specifies a property name by which queries will perform ordering by default when fetching rows.\r\n         */\r\n        orderBy?: OrderByCondition;\r\n\r\n    };\r\n\r\n    /**\r\n     * Entity column's options.\r\n     */\r\n    columns: {\r\n        [columnName: string]: {\r\n\r\n            /**\r\n             * Indicates if this column is a primary column.\r\n             */\r\n            primary: boolean;\r\n\r\n            /**\r\n             * Indicates if this column is a created date column.\r\n             */\r\n            createDate: boolean;\r\n\r\n            /**\r\n             * Indicates if this column is an update date column.\r\n             */\r\n            updateDate: boolean;\r\n\r\n            /**\r\n             * Indicates if this column is a version column.\r\n             */\r\n            version: boolean;\r\n\r\n            /**\r\n             * Indicates if this column is a treeChildrenCount column.\r\n             */\r\n            treeChildrenCount: boolean;\r\n\r\n            /**\r\n             * Indicates if this column is a treeLevel column.\r\n             */\r\n            treeLevel: boolean;\r\n\r\n            /**\r\n             * Column type. Must be one of the value from the ColumnTypes class.\r\n             */\r\n            type: ColumnType;\r\n\r\n            /**\r\n             * Column name in the database.\r\n             */\r\n            name?: string;\r\n\r\n            /**\r\n             * Column type's length. For example type = \"string\" and length = 100 means that ORM will create a column with\r\n             * type varchar(100).\r\n             */\r\n            length?: string;\r\n\r\n            /**\r\n             * Specifies if this column will use AUTO_INCREMENT or not (e.g. generated number).\r\n             */\r\n            generated?: boolean;\r\n\r\n            /**\r\n             * Specifies if column's value must be unique or not.\r\n             */\r\n            unique?: boolean;\r\n\r\n            /**\r\n             * Indicates if column's value can be set to NULL.\r\n             */\r\n            nullable?: boolean;\r\n\r\n            /**\r\n             * Extra column definition. Should be used only in emergency situations. Note that if you'll use this property\r\n             * auto schema generation will not work properly anymore. Avoid using it.\r\n             */\r\n            columnDefinition?: string;\r\n\r\n            /**\r\n             * Column comment.\r\n             */\r\n            comment?: string;\r\n\r\n            /**\r\n             * Default database value.\r\n             */\r\n            default?: string;\r\n\r\n            /**\r\n             * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\r\n             * number of digits that are stored for the values.\r\n             */\r\n            precision?: number;\r\n\r\n            /**\r\n             * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\r\n             * of digits to the right of the decimal point and must not be greater than precision.\r\n             */\r\n            scale?: number;\r\n\r\n            /**\r\n             * Column collation. Note that not all databases support it.\r\n             */\r\n            collation?: string; // todo: looks like this is not used\r\n\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Entity relation's options.\r\n     */\r\n    relations: {\r\n        [relationName: string]: {\r\n\r\n            /**\r\n             * Indicates with which entity this relation is made.\r\n             */\r\n            target: Function|string;\r\n\r\n            /**\r\n             * Type of relation. Can be one of the value of the RelationTypes class.\r\n             */\r\n            type: RelationType;\r\n\r\n            /**\r\n             * Inverse side of the relation.\r\n             */\r\n            inverseSide?: string;\r\n\r\n            /**\r\n             * Indicates if this relation will be lazily loaded.\r\n             */\r\n            isLazy?: boolean;\r\n\r\n            /**\r\n             * Join table options of this column. If set to true then it simply means that it has a join table.\r\n             */\r\n            joinTable?: boolean|{\r\n\r\n                /**\r\n                 * Name of the table that will be created to store values of the both tables (join table).\r\n                 * By default is auto generated.\r\n                 */\r\n                name?: string;\r\n\r\n                /**\r\n                 * First column of the join table.\r\n                 */\r\n                joinColumn?: JoinColumnOptions;\r\n\r\n                /**\r\n                 * Second (inverse) column of the join table.\r\n                 */\r\n                inverseJoinColumn?: JoinColumnOptions;\r\n\r\n            };\r\n\r\n            /**\r\n             * Join column options of this column. If set to true then it simply means that it has a join column.\r\n             */\r\n            joinColumn?: boolean|{\r\n\r\n                /**\r\n                 * Name of the column.\r\n                 */\r\n                name?: string;\r\n\r\n                /**\r\n                 * Name of the column in the entity to which this column is referenced.\r\n                 */\r\n                referencedColumnName?: string;\r\n            };\r\n\r\n            /**\r\n             * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\r\n             */\r\n            isTreeParent?: boolean;\r\n\r\n            /**\r\n             * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\r\n             */\r\n            isTreeChildren?: boolean;\r\n\r\n            /**\r\n             * If set to true then it means that related object can be allowed to be inserted / updated / removed to the db.\r\n             * This is option a shortcut if you would like to set cascadeInsert, cascadeUpdate and cascadeRemove to true.\r\n             */\r\n            cascadeAll?: boolean;\r\n\r\n            /**\r\n             * If set to true then it means that related object can be allowed to be inserted to the db.\r\n             */\r\n            cascadeInsert?: boolean;\r\n\r\n            /**\r\n             * If set to true then it means that related object can be allowed to be updated in the db.\r\n             */\r\n            cascadeUpdate?: boolean;\r\n\r\n            /**\r\n             * If set to true then it means that related object can be allowed to be remove from the db.\r\n             */\r\n            cascadeRemove?: boolean;\r\n\r\n            /**\r\n             * Default database value.\r\n             */\r\n            default?: any;\r\n\r\n            /**\r\n             * Indicates if relation column value can be nullable or not.\r\n             */\r\n            nullable?: boolean;\r\n\r\n            /**\r\n             * Database cascade action on delete.\r\n             */\r\n            onDelete?: OnDeleteType;\r\n\r\n        };\r\n    };\r\n\r\n}","/**\r\n */\r\nexport class MetadataAlreadyExistsError extends Error {\r\n    name = \"MetadataAlreadyExistsError\";\r\n\r\n    constructor(metadataType: string, constructor: Function, propertyName?: string) {\r\n        super();\r\n        this.message = metadataType + \" metadata already exists for the class constructor \" + JSON.stringify(constructor) +\r\n            (propertyName ? \" on property \" + propertyName : \". If you previously renamed or moved entity class, make sure\" +\r\n            \" that compiled version of old entity class source wasn't left in the compiler output directory.\");\r\n    }\r\n\r\n}","import {MetadataAlreadyExistsError} from \"../../metadata-builder/error/MetadataAlreadyExistsError\";\r\n\r\nexport class TargetMetadataArgsCollection<T extends { target?: Function|string }> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected items: T[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    get length() {\r\n        return this.items.length;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): this {\r\n        const collection = new (<any> this.constructor)();\r\n        this.items.filter(callbackfn).forEach(metadata => collection.add(metadata));\r\n        return collection;\r\n    }\r\n\r\n    filterByTarget(cls?: Function|string): this {\r\n\r\n        // if no class specified then simply return empty collection\r\n        if (!cls)\r\n            return new (<any> this.constructor)();\r\n\r\n        return this.filterByTargets([cls]);\r\n    }\r\n\r\n    filterByTargets(classes: Array<Function|string>): this { // Function[]|string[] ?\r\n        return this.filter(metadata => {\r\n            if (!metadata.target) return false;\r\n            return classes.indexOf(metadata.target) !== -1;\r\n        });\r\n    }\r\n\r\n    add(metadata: T, checkForDuplicateTargets = false) {\r\n        if (checkForDuplicateTargets) {\r\n            if (!metadata.target || !(metadata.target instanceof Function))\r\n                throw new Error(`Target is not set in the given metadata.`);\r\n\r\n            if (this.hasWithTarget(metadata.target))\r\n                throw new MetadataAlreadyExistsError((<any> metadata.constructor).name, metadata.target);\r\n        }\r\n\r\n        this.items.push(metadata);\r\n    }\r\n\r\n    toArray() {\r\n        return this.items.map(item => item);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    private hasWithTarget(constructor: Function): boolean {\r\n        return !!this.items.find(metadata => metadata.target === constructor);\r\n    }\r\n\r\n}","import {TargetMetadataArgsCollection} from \"./TargetMetadataArgsCollection\";\r\n\r\nexport class PropertyMetadataArgsCollection<T extends { target?: Function|string, propertyName?: string }> extends TargetMetadataArgsCollection<T> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    filterRepeatedMetadatas(existsMetadatas: T[]): this {\r\n        return this.filter(metadata => {\r\n            return !existsMetadatas.find(fieldFromDocument => fieldFromDocument.propertyName === metadata.propertyName);\r\n        });\r\n    }\r\n\r\n    findByProperty(propertyName: string) {\r\n        return this.items.find(item => item.propertyName === propertyName);\r\n    }\r\n\r\n    hasWithProperty(propertyName: string) {\r\n        return !!this.findByProperty(propertyName);\r\n    }\r\n\r\n}","/**\r\n * Arguments for RelationCountMetadata class.\r\n */\r\nexport interface RelationCountMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this decorator is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Class's property name to which this decorator is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Target's relation which it should count.\r\n     */\r\n    readonly relation: string|((object: any) => any);\r\n\r\n}\r\n","/**\r\n * Arguments for NamingStrategyMetadata class.\r\n */\r\nexport interface NamingStrategyMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this column is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Strategy name.\r\n     */\r\n    readonly name: string;\r\n\r\n}\r\n","/**\r\n * Arguments for EntitySubscriberMetadata class.\r\n */\r\nexport interface EntitySubscriberMetadataArgs {\r\n\r\n    /**\r\n     * Class to which subscriber is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n}\r\n","/**\r\n * Arguments for RelationIdMetadataArgs class.\r\n */\r\nexport interface RelationIdMetadataArgs {\r\n\r\n    /**\r\n     * Class to which this decorator is applied.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Class's property name to which this decorator is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    /**\r\n     * Target's relation which it should count.\r\n     */\r\n    readonly relation: string|((object: any) => any);\r\n\r\n}\r\n","/**\r\n * Arguments for InheritanceMetadata class.\r\n */\r\nexport interface InheritanceMetadataArgs {\r\n\r\n    /**\r\n     * Class to which inheritance is applied.\r\n     */\r\n    readonly target?: Function|string;\r\n\r\n    /**\r\n     * Inheritance type.\r\n     */\r\n    readonly type: \"single-table\"|\"class-table\";\r\n\r\n}\r\n","/**\r\n * DiscriminatorValue properties.\r\n */\r\nexport interface DiscriminatorValueMetadataArgs {\r\n\r\n    /**\r\n     * Class to which discriminator name is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Discriminator value.\r\n     */\r\n    readonly value: any;\r\n\r\n}\r\n","/**\r\n * Arguments for EntityRepositoryMetadata class, helps to construct an EntityRepositoryMetadata object.\r\n */\r\nexport interface EntityRepositoryMetadataArgs {\r\n\r\n    /**\r\n     * Constructor of the custom entity repository.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Entity managed by this custom repository.\r\n     */\r\n    readonly entity?: Function|string;\r\n\r\n    /**\r\n     * Indicates if entity repository will be retrieved from the service container.\r\n     * Note: this may cause problems if you are sharing entity repositories between using multiple connections.\r\n     */\r\n    readonly useContainer: boolean;\r\n\r\n}\r\n","/**\r\n * Used to inject transaction's entity managed into the method wrapped with @Transaction decorator.\r\n */\r\nexport interface TransactionEntityMetadataArgs {\r\n\r\n    /**\r\n     * Target class on which decorator is used.\r\n     */\r\n    readonly target: Function;\r\n\r\n    /**\r\n     * Method on which decorator is used.\r\n     */\r\n    readonly methodName: string;\r\n\r\n    /**\r\n     * Index of the parameter on which decorator is used.\r\n     */\r\n    readonly index: number;\r\n\r\n}\r\n","import {TargetMetadataArgsCollection} from \"./collection/TargetMetadataArgsCollection\";\r\nimport {PropertyMetadataArgsCollection} from \"./collection/PropertyMetadataArgsCollection\";\r\nimport {RelationMetadataArgs} from \"./RelationMetadataArgs\";\r\nimport {ColumnMetadataArgs} from \"./ColumnMetadataArgs\";\r\nimport {RelationCountMetadataArgs} from \"./RelationCountMetadataArgs\";\r\nimport {IndexMetadataArgs} from \"./IndexMetadataArgs\";\r\nimport {EntityListenerMetadataArgs} from \"./EntityListenerMetadataArgs\";\r\nimport {TableMetadataArgs} from \"./TableMetadataArgs\";\r\nimport {NamingStrategyMetadataArgs} from \"./NamingStrategyMetadataArgs\";\r\nimport {JoinTableMetadataArgs} from \"./JoinTableMetadataArgs\";\r\nimport {JoinColumnMetadataArgs} from \"./JoinColumnMetadataArgs\";\r\nimport {EmbeddedMetadataArgs} from \"./EmbeddedMetadataArgs\";\r\nimport {EntitySubscriberMetadataArgs} from \"./EntitySubscriberMetadataArgs\";\r\nimport {RelationIdMetadataArgs} from \"./RelationIdMetadataArgs\";\r\nimport {InheritanceMetadataArgs} from \"./InheritanceMetadataArgs\";\r\nimport {DiscriminatorValueMetadataArgs} from \"./DiscriminatorValueMetadataArgs\";\r\nimport {EntityRepositoryMetadataArgs} from \"./EntityRepositoryMetadataArgs\";\r\nimport {TransactionEntityMetadataArgs} from \"./TransactionEntityMetadataArgs\";\r\n\r\n/**\r\n * Storage all metadatas of all available types: tables, fields, subscribers, relations, etc.\r\n * Each metadata represents some specifications of what it represents.\r\n */\r\nexport class MetadataArgsStorage {\r\n\r\n    // todo: type in function validation, inverse side function validation\r\n    // todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\r\n    // todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\r\n    // todo: check for duplicate targets too since this check has been removed too\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    readonly tables = new TargetMetadataArgsCollection<TableMetadataArgs>();\r\n    readonly entityRepositories = new TargetMetadataArgsCollection<EntityRepositoryMetadataArgs>();\r\n    readonly transactionEntityManagers = new TargetMetadataArgsCollection<TransactionEntityMetadataArgs>();\r\n    readonly namingStrategies = new TargetMetadataArgsCollection<NamingStrategyMetadataArgs>();\r\n    readonly entitySubscribers = new TargetMetadataArgsCollection<EntitySubscriberMetadataArgs>();\r\n    readonly indices = new PropertyMetadataArgsCollection<IndexMetadataArgs>();\r\n    readonly columns = new PropertyMetadataArgsCollection<ColumnMetadataArgs>();\r\n    readonly relations = new PropertyMetadataArgsCollection<RelationMetadataArgs>();\r\n    readonly joinColumns = new PropertyMetadataArgsCollection<JoinColumnMetadataArgs>();\r\n    readonly joinTables = new PropertyMetadataArgsCollection<JoinTableMetadataArgs>();\r\n    readonly entityListeners = new PropertyMetadataArgsCollection<EntityListenerMetadataArgs>();\r\n    readonly relationCounts = new PropertyMetadataArgsCollection<RelationCountMetadataArgs>();\r\n    readonly relationIds = new PropertyMetadataArgsCollection<RelationIdMetadataArgs>();\r\n    readonly embeddeds = new PropertyMetadataArgsCollection<EmbeddedMetadataArgs>();\r\n    readonly inheritances = new TargetMetadataArgsCollection<InheritanceMetadataArgs>();\r\n    readonly discriminatorValues = new TargetMetadataArgsCollection<DiscriminatorValueMetadataArgs>();\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets merged (with all abstract classes) table metadatas for the given classes.\r\n     */\r\n    getMergedTableMetadatas(classes?: Function[]) {\r\n        const allTableMetadataArgs = classes ? this.tables.filterByTargets(classes) : this.tables;\r\n        const tableMetadatas = allTableMetadataArgs.filter(table => table.type === \"regular\" || table.type === \"closure\" || table.type === \"class-table-child\");\r\n\r\n        return tableMetadatas.toArray().map(tableMetadata => {\r\n            return this.mergeWithAbstract(allTableMetadataArgs, tableMetadata);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets merged (with all abstract classes) embeddable table metadatas for the given classes.\r\n     */\r\n    getMergedEmbeddableTableMetadatas(classes?: Function[]) {\r\n        const tables = classes ? this.tables.filterByTargets(classes) : this.tables;\r\n        const embeddableTableMetadatas = tables.filter(table => table.type === \"embeddable\");\r\n\r\n        return embeddableTableMetadatas.toArray().map(embeddableTableMetadata => {\r\n            return this.mergeWithEmbeddable(embeddableTableMetadatas, embeddableTableMetadata);\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     */\r\n    protected mergeWithAbstract(allTableMetadatas: TargetMetadataArgsCollection<TableMetadataArgs>,\r\n                                table: TableMetadataArgs) {\r\n\r\n        const indices = this.indices.filterByTarget(table.target);\r\n        const columns = this.columns.filterByTarget(table.target);\r\n        const relations = this.relations.filterByTarget(table.target);\r\n        const joinColumns = this.joinColumns.filterByTarget(table.target);\r\n        const joinTables = this.joinTables.filterByTarget(table.target);\r\n        const entityListeners = this.entityListeners.filterByTarget(table.target);\r\n        const relationCounts = this.relationCounts.filterByTarget(table.target);\r\n        const relationIds = this.relationIds.filterByTarget(table.target);\r\n        const embeddeds = this.embeddeds.filterByTarget(table.target);\r\n        const inheritances = this.inheritances.filterByTarget(table.target);\r\n        const inheritance = (inheritances.length > 0) ? inheritances.toArray()[0] : undefined;\r\n        const discriminatorValues: DiscriminatorValueMetadataArgs[] = [];\r\n\r\n        // find parent if this table is class-table-child\r\n        let parent: TableMetadataArgs|undefined = undefined;\r\n\r\n        // merge metadata from abstract tables\r\n        allTableMetadatas.toArray().forEach(inheritedTable => {\r\n            if (table.type === \"single-table-child\") return;\r\n            if (!table.target || !inheritedTable.target) return;\r\n            if (!(table.target instanceof Function) || !(inheritedTable.target instanceof Function)) return;\r\n            if (!this.isInherited(table.target, inheritedTable.target)) return;\r\n\r\n            // check if inheritedTable is a class with class table inheritance - then we don't need to merge its columns, relations, etc. things\r\n            if (!!this.inheritances.filterByTarget(inheritedTable.target).toArray().find(inheritance => inheritance.type === \"class-table\")) {\r\n                parent = inheritedTable;\r\n                return;\r\n            }\r\n\r\n            const metadatasFromAbstract = this.mergeWithAbstract(allTableMetadatas, inheritedTable);\r\n\r\n            metadatasFromAbstract.indices\r\n                .toArray()\r\n                .filter(index => { // make sure we don't have index with such name already\r\n                    return !index.name || !indices.toArray().find(existIndex => existIndex.name === index.name);\r\n                })\r\n                .forEach(index => indices.add(index));\r\n\r\n            metadatasFromAbstract.columns\r\n                .filterRepeatedMetadatas(columns.toArray())\r\n                .toArray()\r\n                .forEach(metadata => columns.add(metadata));\r\n\r\n            metadatasFromAbstract.relations\r\n                .filterRepeatedMetadatas(relations.toArray())\r\n                .toArray()\r\n                .forEach(metadata => relations.add(metadata));\r\n\r\n            metadatasFromAbstract.joinColumns\r\n                .filterRepeatedMetadatas(joinColumns.toArray())\r\n                .toArray()\r\n                .forEach(metadata => joinColumns.add(metadata));\r\n\r\n            metadatasFromAbstract.joinTables\r\n                .filterRepeatedMetadatas(joinTables.toArray())\r\n                .toArray()\r\n                .forEach(metadata => joinTables.add(metadata));\r\n\r\n            metadatasFromAbstract.entityListeners\r\n                .filterRepeatedMetadatas(entityListeners.toArray())\r\n                .toArray()\r\n                .forEach(metadata => entityListeners.add(metadata));\r\n\r\n            metadatasFromAbstract.relationCounts\r\n                .filterRepeatedMetadatas(relationCounts.toArray())\r\n                .toArray()\r\n                .forEach(metadata => relationCounts.add(metadata));\r\n\r\n            metadatasFromAbstract.relationIds\r\n                .filterRepeatedMetadatas(relationIds.toArray())\r\n                .toArray()\r\n                .forEach(metadata => relationIds.add(metadata));\r\n\r\n            metadatasFromAbstract.embeddeds\r\n                .filterRepeatedMetadatas(embeddeds.toArray())\r\n                .toArray()\r\n                .forEach(metadata => embeddeds.add(metadata));\r\n\r\n        });\r\n\r\n        // merge metadata from child tables for single-table inheritance\r\n        const children: TableMetadataArgs[] = [];\r\n\r\n        if (inheritance && inheritance.type === \"single-table\") {\r\n            allTableMetadatas.toArray().forEach(childTable => {\r\n                if (childTable.type !== \"single-table-child\") return;\r\n                if (!childTable.target || !table.target) return;\r\n                if (!(childTable.target instanceof Function) || !(table.target instanceof Function)) return;\r\n                if (!this.isInherited(childTable.target, table.target)) return;\r\n\r\n                children.push(childTable);\r\n                this.discriminatorValues\r\n                    .filterByTarget(childTable.target)\r\n                    .toArray()\r\n                    .forEach(metadata => discriminatorValues.push(metadata));\r\n\r\n                // for single table inheritance we also merge all columns, relation, etc. into same table\r\n                if (inheritance.type === \"single-table\") { // todo: remove?\r\n                    const metadatasFromAbstract = this.mergeWithAbstract(allTableMetadatas, childTable);\r\n\r\n                    metadatasFromAbstract.indices\r\n                        .toArray()\r\n                        .filter(index => { // make sure we don't have index with such name already\r\n                            return !indices.toArray().find(existIndex => existIndex.name === index.name);\r\n                        })\r\n                        .forEach(index => indices.add(index));\r\n\r\n                    metadatasFromAbstract.columns\r\n                        .filterRepeatedMetadatas(columns.toArray())\r\n                        .toArray()\r\n                        .forEach(metadata => columns.add(metadata));\r\n\r\n                    metadatasFromAbstract.relations\r\n                        .filterRepeatedMetadatas(relations.toArray())\r\n                        .toArray()\r\n                        .forEach(metadata => relations.add(metadata));\r\n\r\n                    metadatasFromAbstract.joinColumns\r\n                        .filterRepeatedMetadatas(joinColumns.toArray())\r\n                        .toArray()\r\n                        .forEach(metadata => joinColumns.add(metadata));\r\n\r\n                    metadatasFromAbstract.joinTables\r\n                        .filterRepeatedMetadatas(joinTables.toArray())\r\n                        .toArray()\r\n                        .forEach(metadata => joinTables.add(metadata));\r\n\r\n                    metadatasFromAbstract.entityListeners\r\n                        .filterRepeatedMetadatas(entityListeners.toArray())\r\n                        .toArray()\r\n                        .forEach(metadata => entityListeners.add(metadata));\r\n\r\n                    metadatasFromAbstract.relationCounts\r\n                        .filterRepeatedMetadatas(relationCounts.toArray())\r\n                        .toArray()\r\n                        .forEach(metadata => relationCounts.add(metadata));\r\n\r\n                    metadatasFromAbstract.relationIds\r\n                        .filterRepeatedMetadatas(relationIds.toArray())\r\n                        .toArray()\r\n                        .forEach(metadata => relationIds.add(metadata));\r\n\r\n                    metadatasFromAbstract.embeddeds\r\n                        .filterRepeatedMetadatas(embeddeds.toArray())\r\n                        .toArray()\r\n                        .forEach(metadata => embeddeds.add(metadata));\r\n\r\n                    metadatasFromAbstract.children\r\n                        .forEach(metadata => children.push(metadata));\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            table: table,\r\n            parent: parent,\r\n            inheritance: inheritance,\r\n            children: children,\r\n            indices: indices,\r\n            columns: columns,\r\n            relations: relations,\r\n            joinColumns: joinColumns,\r\n            joinTables: joinTables,\r\n            entityListeners: entityListeners,\r\n            relationCounts: relationCounts,\r\n            relationIds: relationIds,\r\n            embeddeds: embeddeds,\r\n            discriminatorValues: discriminatorValues\r\n        };\r\n    }\r\n\r\n    /**\r\n     */\r\n    protected mergeWithEmbeddable(allTableMetadatas: TargetMetadataArgsCollection<TableMetadataArgs>,\r\n                                  tableMetadata: TableMetadataArgs) {\r\n        const columns = this.columns.filterByTarget(tableMetadata.target);\r\n        const embeddeds = this.embeddeds.filterByTarget(tableMetadata.target);\r\n\r\n        allTableMetadatas\r\n            .filter(metadata => {\r\n                if (!tableMetadata.target || !metadata.target) return false;\r\n                if (!(tableMetadata.target instanceof Function) || !(metadata.target instanceof Function)) return false;\r\n                return this.isInherited(tableMetadata.target, metadata.target); // todo: fix it for entity schema\r\n            })\r\n            .toArray()\r\n            .forEach(parentMetadata => {\r\n                const metadatasFromParents = this.mergeWithEmbeddable(allTableMetadatas, parentMetadata);\r\n\r\n                metadatasFromParents.columns\r\n                    .filterRepeatedMetadatas(columns.toArray())\r\n                    .toArray()\r\n                    .forEach(metadata => columns.add(metadata));\r\n\r\n                metadatasFromParents.embeddeds\r\n                    .filterRepeatedMetadatas(embeddeds.toArray())\r\n                    .toArray()\r\n                    .forEach(metadata => embeddeds.add(metadata));\r\n            });\r\n\r\n        return {\r\n            table: tableMetadata,\r\n            columns: columns,\r\n            embeddeds: embeddeds\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is inherited from another table.\r\n     */\r\n    protected isInherited(target1: Function, target2: Function) {\r\n        // we cannot use instanceOf in this method, because we need order of inherited tables, to ensure that\r\n        // properties get inherited in a right order. To achieve it we can only check a first parent of the class\r\n        // return this.target.prototype instanceof anotherTable.target;\r\n        return Object.getPrototypeOf(target1.prototype).constructor === target2;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {ColumnMetadata, ColumnMode} from \"../metadata/ColumnMetadata\";\r\nimport {ColumnOptions} from \"../decorator/options/ColumnOptions\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {EntityMetadataValidator} from \"./EntityMetadataValidator\";\r\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\r\nimport {JoinColumnMetadata} from \"../metadata/JoinColumnMetadata\";\r\nimport {TableMetadata} from \"../metadata/TableMetadata\";\r\nimport {getMetadataArgsStorage, getFromContainer} from \"../index\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {JoinTableMetadata} from \"../metadata/JoinTableMetadata\";\r\nimport {JunctionEntityMetadataBuilder} from \"./JunctionEntityMetadataBuilder\";\r\nimport {ClosureJunctionEntityMetadataBuilder} from \"./ClosureJunctionEntityMetadataBuilder\";\r\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\r\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\r\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\r\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\r\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\r\nimport {Driver} from \"../driver/Driver\";\r\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\r\n\r\n/**\r\n * Aggregates all metadata: table, column, relation into one collection grouped by tables for a given set of classes.\r\n */\r\nexport class EntityMetadataBuilder {\r\n\r\n    // todo: type in function validation, inverse side function validation\r\n    // todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\r\n    // todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\r\n    // todo: check if multiple tree parent metadatas in validator\r\n    // todo: tree decorators can be used only on closure table (validation)\r\n    // todo: throw error if parent tree metadata was not specified in a closure table\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    buildFromSchemas(driver: Driver,\r\n                     lazyRelationsWrapper: LazyRelationsWrapper,\r\n                     namingStrategy: NamingStrategyInterface,\r\n                     schemas: EntitySchema[]): EntityMetadata[] {\r\n        const metadataArgsStorage = new MetadataArgsStorage();\r\n\r\n        // extract into separate class?\r\n        schemas.forEach(schema => {\r\n\r\n            // add table metadata args from the schema\r\n            const tableSchema = schema.table || {} as any;\r\n            const table: TableMetadataArgs = {\r\n                target: schema.target || schema.name,\r\n                name: tableSchema.name,\r\n                type: tableSchema.type || \"regular\",\r\n                // targetId: schema.name,\r\n                orderBy: tableSchema.orderBy\r\n            };\r\n            metadataArgsStorage.tables.add(table);\r\n\r\n            // add columns metadata args from the schema\r\n            Object.keys(schema.columns).forEach(columnName => {\r\n                const columnSchema = schema.columns[columnName];\r\n                let mode: ColumnMode = \"regular\";\r\n                if (columnSchema.createDate)\r\n                    mode = \"createDate\";\r\n                if (columnSchema.updateDate)\r\n                    mode = \"updateDate\";\r\n                if (columnSchema.version)\r\n                    mode = \"version\";\r\n                if (columnSchema.treeChildrenCount)\r\n                    mode = \"treeChildrenCount\";\r\n                if (columnSchema.treeLevel)\r\n                    mode = \"treeLevel\";\r\n\r\n                const column: ColumnMetadataArgs = {\r\n                    target: schema.target || schema.name,\r\n                    mode: mode,\r\n                    propertyName: columnName,\r\n                    // todo: what to do with it?: propertyType: \r\n                    options: {\r\n                        type: columnSchema.type,\r\n                        name: columnSchema.name,\r\n                        length: columnSchema.length,\r\n                        primary: columnSchema.primary,\r\n                        generated: columnSchema.generated,\r\n                        unique: columnSchema.unique,\r\n                        nullable: columnSchema.nullable,\r\n                        comment: columnSchema.comment,\r\n                        default: columnSchema.default,\r\n                        precision: columnSchema.precision,\r\n                        scale: columnSchema.scale\r\n                    }\r\n                };\r\n\r\n                metadataArgsStorage.columns.add(column);\r\n            });\r\n\r\n            // add relation metadata args from the schema\r\n            if (schema.relations) {\r\n                Object.keys(schema.relations).forEach(relationName => {\r\n                    const relationSchema = schema.relations[relationName];\r\n                    const relation: RelationMetadataArgs = {\r\n                        target: schema.target || schema.name,\r\n                        propertyName: relationName,\r\n                        relationType: relationSchema.type,\r\n                        isLazy: relationSchema.isLazy || false,\r\n                        type: relationSchema.target,\r\n                        inverseSideProperty: relationSchema.inverseSide,\r\n                        isTreeParent: relationSchema.isTreeParent,\r\n                        isTreeChildren: relationSchema.isTreeChildren,\r\n                        options: {\r\n                            cascadeAll: relationSchema.cascadeAll,\r\n                            cascadeInsert: relationSchema.cascadeInsert,\r\n                            cascadeUpdate: relationSchema.cascadeUpdate,\r\n                            cascadeRemove: relationSchema.cascadeRemove,\r\n                            nullable: relationSchema.nullable,\r\n                            onDelete: relationSchema.onDelete\r\n                        }\r\n                    };\r\n\r\n                    metadataArgsStorage.relations.add(relation);\r\n\r\n                    // add join column\r\n                    if (relationSchema.joinColumn) {\r\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.add(joinColumn);\r\n                        } else {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinColumn.name,\r\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.add(joinColumn);\r\n                        }\r\n                    }\r\n\r\n                    // add join table\r\n                    if (relationSchema.joinTable) {\r\n                        if (typeof relationSchema.joinTable === \"boolean\") {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinTables.add(joinTable);\r\n                        } else {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinTable.name,\r\n                                joinColumn: relationSchema.joinTable.joinColumn,\r\n                                inverseJoinColumn: relationSchema.joinTable.inverseJoinColumn\r\n                            };\r\n                            metadataArgsStorage.joinTables.add(joinTable);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        return this.build(driver, lazyRelationsWrapper, metadataArgsStorage, namingStrategy);\r\n    }\r\n\r\n    /**\r\n     * Builds a complete metadata aggregations for the given entity classes.\r\n     */\r\n    buildFromMetadataArgsStorage(driver: Driver,\r\n                                 lazyRelationsWrapper: LazyRelationsWrapper,\r\n                                 namingStrategy: NamingStrategyInterface,\r\n                                 entityClasses?: Function[]): EntityMetadata[] {\r\n        return this.build(driver, lazyRelationsWrapper, getMetadataArgsStorage(), namingStrategy, entityClasses);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    private build(driver: Driver,\r\n                  lazyRelationsWrapper: LazyRelationsWrapper,\r\n                  metadataArgsStorage: MetadataArgsStorage,\r\n                  namingStrategy: NamingStrategyInterface,\r\n                  entityClasses?: Function[]): EntityMetadata[] {\r\n        const embeddableMergedArgs = metadataArgsStorage.getMergedEmbeddableTableMetadatas(entityClasses);\r\n        const entityMetadatas: EntityMetadata[] = [];\r\n        const allMergedArgs = metadataArgsStorage.getMergedTableMetadatas(entityClasses);\r\n        allMergedArgs.forEach(mergedArgs => {\r\n\r\n            const tables = [mergedArgs.table].concat(mergedArgs.children);\r\n            tables.forEach(tableArgs => {\r\n\r\n                // find embeddable tables for embeddeds registered in this table and create EmbeddedMetadatas from them\r\n                const findEmbeddedsRecursively = (embeddedArgs: EmbeddedMetadataArgs[]) => {\r\n                    const embeddeds: EmbeddedMetadata[] = [];\r\n                    embeddedArgs.forEach(embedded => {\r\n                        const embeddableTable = embeddableMergedArgs.find(embeddedMergedArgs => embeddedMergedArgs.table.target === embedded.type());\r\n                        if (embeddableTable) {\r\n                            const table = new TableMetadata(embeddableTable.table);\r\n                            const columns = embeddableTable.columns.toArray().map(args => new ColumnMetadata(args));\r\n                            const subEmbeddeds = findEmbeddedsRecursively(embeddableTable.embeddeds.toArray());\r\n                            embeddeds.push(new EmbeddedMetadata(table, columns, subEmbeddeds, embedded));\r\n                        }\r\n                    });\r\n                    return embeddeds;\r\n                };\r\n                const embeddeds = findEmbeddedsRecursively(mergedArgs.embeddeds.toArray());\r\n\r\n                // create metadatas from args\r\n                const argsForTable = mergedArgs.inheritance && mergedArgs.inheritance.type === \"single-table\" ? mergedArgs.table : tableArgs;\r\n\r\n                const table = new TableMetadata(argsForTable);\r\n                const columns = mergedArgs.columns.toArray().map(args => {\r\n\r\n                    // if column's target is a child table then this column should have all nullable columns\r\n                    if (mergedArgs.inheritance &&\r\n                        mergedArgs.inheritance.type === \"single-table\" &&\r\n                        args.target !== mergedArgs.table.target && !!mergedArgs.children.find(childTable => childTable.target === args.target)) {\r\n                        args.options.nullable = true;\r\n                    }\r\n                    return new ColumnMetadata(args);\r\n                });\r\n                const relations = mergedArgs.relations.toArray().map(args => new RelationMetadata(args));\r\n                const indices = mergedArgs.indices.toArray().map(args => new IndexMetadata(args));\r\n                const discriminatorValueArgs = mergedArgs.discriminatorValues.find(discriminatorValueArgs => {\r\n                    return discriminatorValueArgs.target === tableArgs.target;\r\n                });\r\n                // create a new entity metadata\r\n                const entityMetadata = new EntityMetadata({\r\n                    junction: false,\r\n                    target: tableArgs.target,\r\n                    tablesPrefix: driver.options.tablesPrefix,\r\n                    namingStrategy: namingStrategy,\r\n                    tableMetadata: table,\r\n                    columnMetadatas: columns,\r\n                    relationMetadatas: relations,\r\n                    indexMetadatas: indices,\r\n                    embeddedMetadatas: embeddeds,\r\n                    inheritanceType: mergedArgs.inheritance ? mergedArgs.inheritance.type : undefined,\r\n                    discriminatorValue: discriminatorValueArgs ? discriminatorValueArgs.value : (tableArgs.target as any).name // todo: pass this to naming strategy to generate a name\r\n                }, lazyRelationsWrapper);\r\n                entityMetadatas.push(entityMetadata);\r\n                // create entity's relations join tables\r\n                entityMetadata.manyToManyRelations.forEach(relation => {\r\n                    const joinTableMetadata = mergedArgs.joinTables.findByProperty(relation.propertyName);\r\n                    if (joinTableMetadata) {\r\n                        const joinTable = new JoinTableMetadata(joinTableMetadata);\r\n                        relation.joinTable = joinTable;\r\n                        joinTable.relation = relation;\r\n                    }\r\n                });\r\n\r\n                // create entity's relations join columns\r\n                entityMetadata.oneToOneRelations\r\n                    .concat(entityMetadata.manyToOneRelations)\r\n                    .forEach(relation => {\r\n\r\n                        // since for many-to-one relations having JoinColumn is not required on decorators level, we need to go\r\n                        // throw all of them which don't have JoinColumn decorators and create it for them\r\n                        let joinColumnMetadata = mergedArgs.joinColumns.findByProperty(relation.propertyName);\r\n                        if (!joinColumnMetadata && relation.isManyToOne) {\r\n                            joinColumnMetadata = {\r\n                                target: relation.entityMetadata.target,\r\n                                propertyName: relation.propertyName\r\n                            };\r\n                        }\r\n\r\n                        if (joinColumnMetadata) {\r\n                            const joinColumn = new JoinColumnMetadata(joinColumnMetadata);\r\n                            relation.joinColumn = joinColumn;\r\n                            joinColumn.relation = relation;\r\n                        }\r\n                    });\r\n\r\n                // save relation id-s data\r\n                entityMetadata.relations.forEach(relation => {\r\n                    const relationIdMetadata = mergedArgs.relationIds.toArray().find(relationId => {\r\n                        if (relationId.relation instanceof Function)\r\n                            return relation.propertyName === relationId.relation(entityMetadata.createPropertiesMap());\r\n\r\n                        return relation.propertyName === relationId.relation;\r\n                    });\r\n                    if (relationIdMetadata) {\r\n                        if (relation.isOneToOneNotOwner || relation.isOneToMany)\r\n                            throw new Error(`RelationId cannot be used for the one-to-one without join column or one-to-many relations.`);\r\n\r\n                        relation.idField = relationIdMetadata.propertyName;\r\n                    }\r\n                });\r\n\r\n                // save relation counter-s data\r\n                entityMetadata.relations.forEach(relation => {\r\n                    const relationCountMetadata = mergedArgs.relationCounts.toArray().find(relationCount => {\r\n                        if (relationCount.relation instanceof Function)\r\n                            return relation.propertyName === relationCount.relation(entityMetadata.createPropertiesMap());\r\n\r\n                        return relation.propertyName === relationCount.relation;\r\n                    });\r\n\r\n                    if (relationCountMetadata)\r\n                        relation.countField = relationCountMetadata.propertyName;\r\n                });\r\n\r\n                // add lazy initializer for entity relations\r\n                if (entityMetadata.target instanceof Function) {\r\n                    entityMetadata.relations\r\n                        .filter(relation => relation.isLazy)\r\n                        .forEach(relation => {\r\n                            lazyRelationsWrapper.wrap((entityMetadata.target as Function).prototype, relation);\r\n                        });\r\n                }\r\n            });\r\n        });\r\n\r\n        // after all metadatas created we set inverse side (related) entity metadatas for all relation metadatas\r\n        entityMetadatas.forEach(entityMetadata => {\r\n            entityMetadata.relations.forEach(relation => {\r\n                const inverseEntityMetadata = entityMetadatas.find(m => m.target === relation.type || (typeof relation.type === \"string\" && m.targetName === relation.type));\r\n                if (!inverseEntityMetadata)\r\n                    throw new Error(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyName + \" was not found.\");\r\n\r\n                relation.inverseEntityMetadata = inverseEntityMetadata;\r\n            });\r\n        });\r\n\r\n        // after all metadatas created we set parent entity metadata for class-table inheritance\r\n        entityMetadatas.forEach(entityMetadata => {\r\n            const mergedArgs = allMergedArgs.find(mergedArgs => {\r\n                return mergedArgs.table.target === entityMetadata.target;\r\n            });\r\n            if (mergedArgs && mergedArgs.parent) {\r\n                const parentEntityMetadata = entityMetadatas.find(entityMetadata => entityMetadata.table.target === (mergedArgs!.parent! as any).target); // todo: weird compiler error here, thats why type casing is used\r\n                if (parentEntityMetadata)\r\n                    entityMetadata.parentEntityMetadata = parentEntityMetadata;\r\n            }\r\n        });\r\n\r\n        // generate keys for tables with single-table inheritance\r\n        entityMetadatas\r\n            .filter(metadata => metadata.inheritanceType === \"single-table\" && metadata.hasDiscriminatorColumn)\r\n            .forEach(metadata => {\r\n                const indexForKey = new IndexMetadata({\r\n                    target: metadata.target,\r\n                    columns: [metadata.discriminatorColumn.fullName],\r\n                    unique: false\r\n                });\r\n                indexForKey.entityMetadata = metadata;\r\n                metadata.indices.push(indexForKey);\r\n\r\n                const indexForKeyWithPrimary = new IndexMetadata({\r\n                    target: metadata.target,\r\n                    columns: [metadata.firstPrimaryColumn.propertyName, metadata.discriminatorColumn.propertyName],\r\n                    unique: false\r\n                });\r\n                indexForKeyWithPrimary.entityMetadata = metadata;\r\n                metadata.indices.push(indexForKeyWithPrimary);\r\n            });\r\n\r\n        // generate virtual column with foreign key for class-table inheritance\r\n        entityMetadatas\r\n            .filter(metadata => !!metadata.parentEntityMetadata)\r\n            .forEach(metadata => {\r\n                const parentEntityMetadataPrimaryColumn = metadata.parentEntityMetadata.firstPrimaryColumn; // todo: make sure to create columns for all its primary columns\r\n                const columnName = namingStrategy.classTableInheritanceParentColumnName(metadata.parentEntityMetadata.table.name, parentEntityMetadataPrimaryColumn.propertyName);\r\n                const parentRelationColumn = new ColumnMetadata({\r\n                    target: metadata.parentEntityMetadata.table.target,\r\n                    propertyName: parentEntityMetadataPrimaryColumn.propertyName,\r\n                    // propertyType: parentEntityMetadataPrimaryColumn.propertyType,\r\n                    mode: \"parentId\",\r\n                    options: <ColumnOptions> {\r\n                        name: columnName,\r\n                        type: parentEntityMetadataPrimaryColumn.type,\r\n                        unique: true,\r\n                        nullable: false,\r\n                        primary: false\r\n                    }\r\n                });\r\n\r\n                // add column\r\n                metadata.addColumn(parentRelationColumn);\r\n\r\n                // add foreign key\r\n                const foreignKey = new ForeignKeyMetadata(\r\n                    [parentRelationColumn],\r\n                    metadata.parentEntityMetadata.table,\r\n                    [parentEntityMetadataPrimaryColumn],\r\n                    \"CASCADE\"\r\n                );\r\n                foreignKey.entityMetadata = metadata;\r\n                metadata.foreignKeys.push(foreignKey);\r\n            });\r\n\r\n        // generate columns and foreign keys for tables with relations\r\n        entityMetadatas.forEach(metadata => {\r\n            metadata.relationsWithJoinColumns.forEach(relation => {\r\n\r\n                // find relational column and if it does not exist - add it\r\n                const inverseSideColumn = relation.joinColumn.referencedColumn;\r\n                let relationalColumn = metadata.columns.find(column => column.fullName === relation.name);\r\n                if (!relationalColumn) {\r\n                    relationalColumn = new ColumnMetadata({\r\n                        target: metadata.target,\r\n                        propertyName: relation.name,\r\n                        // propertyType: inverseSideColumn.propertyType,\r\n                        mode: \"virtual\",\r\n                        options: <ColumnOptions> {\r\n                            type: inverseSideColumn.type,\r\n                            nullable: relation.isNullable,\r\n                            primary: relation.isPrimary\r\n                        }\r\n                    });\r\n                    relationalColumn.relationMetadata = relation;\r\n                    metadata.addColumn(relationalColumn);\r\n                }\r\n\r\n                // create and add foreign key\r\n                const foreignKey = new ForeignKeyMetadata(\r\n                    [relationalColumn],\r\n                    relation.inverseEntityMetadata.table,\r\n                    [inverseSideColumn],\r\n                    relation.onDelete\r\n                );\r\n                foreignKey.entityMetadata = metadata;\r\n                metadata.foreignKeys.push(foreignKey);\r\n            });\r\n        });\r\n\r\n        // generate junction tables for all closure tables\r\n        entityMetadatas.forEach(metadata => {\r\n            if (!metadata.table.isClosure)\r\n                return;\r\n\r\n            if (metadata.primaryColumns.length > 1)\r\n                throw new Error(`Cannot use given entity ${metadata.name} as a closure table, because it have multiple primary keys. Entities with multiple primary keys are not supported in closure tables.`);\r\n\r\n            const closureJunctionEntityMetadata = getFromContainer(ClosureJunctionEntityMetadataBuilder).build(driver, lazyRelationsWrapper, {\r\n                namingStrategy: namingStrategy,\r\n                table: metadata.table,\r\n                primaryColumn: metadata.firstPrimaryColumn,\r\n                hasTreeLevelColumn: metadata.hasTreeLevelColumn\r\n            });\r\n            metadata.closureJunctionTable = closureJunctionEntityMetadata;\r\n            entityMetadatas.push(closureJunctionEntityMetadata);\r\n        });\r\n\r\n        // generate junction tables for all many-to-many tables\r\n        entityMetadatas.forEach(metadata => {\r\n            metadata.ownerManyToManyRelations.forEach(relation => {\r\n                const junctionEntityMetadata = getFromContainer(JunctionEntityMetadataBuilder).build(driver, lazyRelationsWrapper, {\r\n                    namingStrategy: namingStrategy,\r\n                    firstTable: metadata.table,\r\n                    secondTable: relation.inverseEntityMetadata.table,\r\n                    joinTable: relation.joinTable\r\n                });\r\n                relation.junctionEntityMetadata = junctionEntityMetadata;\r\n                if (relation.hasInverseSide)\r\n                    relation.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\r\n\r\n                entityMetadatas.push(junctionEntityMetadata);\r\n            });\r\n        });\r\n\r\n        // check for errors in a built metadata schema (we need to check after relationEntityMetadata is set)\r\n        getFromContainer(EntityMetadataValidator).validateMany(entityMetadatas);\r\n\r\n        return entityMetadatas;\r\n    }\r\n\r\n}","export class RandomGenerator {\r\n\r\n    /**\r\n     *  discuss at: http://locutus.io/php/sha1/\r\n     * original by: Webtoolkit.info (http://www.webtoolkit.info/)\r\n     * improved by: Michael White (http://getsprink.com)\r\n     * improved by: Kevin van Zonneveld (http://kvz.io)\r\n     *    input by: Brett Zamir (http://brett-zamir.me)\r\n     *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then\r\n     *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly\r\n     *      note 1: in a steaming fashion for faster and more efficient hashing\r\n     *   example 1: sha1('Kevin van Zonneveld')\r\n     *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'\r\n     */\r\n    static sha1(str: string) {\r\n\r\n        let _rotLeft = function(n: any, s: any) {\r\n            let t4 = (n << s) | (n >>> (32 - s));\r\n            return t4;\r\n        };\r\n\r\n        let _cvtHex = function(val: any) {\r\n            let str = \"\";\r\n            let i;\r\n            let v;\r\n\r\n            for (i = 7; i >= 0; i--) {\r\n                v = (val >>> (i * 4)) & 0x0f;\r\n                str += v.toString(16);\r\n            }\r\n            return str;\r\n        };\r\n\r\n        let blockstart;\r\n        let i, j;\r\n        let W = new Array(80);\r\n        let H0 = 0x67452301;\r\n        let H1 = 0xEFCDAB89;\r\n        let H2 = 0x98BADCFE;\r\n        let H3 = 0x10325476;\r\n        let H4 = 0xC3D2E1F0;\r\n        let A, B, C, D, E;\r\n        let temp;\r\n\r\n        // utf8_encode\r\n        str = /*unescape*/(encodeURIComponent(str));\r\n        let strLen = str.length;\r\n\r\n        let wordArray = [];\r\n        for (i = 0; i < strLen - 3; i += 4) {\r\n            j = str.charCodeAt(i) << 24 |\r\n                str.charCodeAt(i + 1) << 16 |\r\n                str.charCodeAt(i + 2) << 8 |\r\n                str.charCodeAt(i + 3);\r\n            wordArray.push(j);\r\n        }\r\n\r\n        switch (strLen % 4) {\r\n            case 0:\r\n                i = 0x080000000;\r\n                break;\r\n            case 1:\r\n                i = str.charCodeAt(strLen - 1) << 24 | 0x0800000;\r\n                break;\r\n            case 2:\r\n                i = str.charCodeAt(strLen - 2) << 24 | str.charCodeAt(strLen - 1) << 16 | 0x08000;\r\n                break;\r\n            case 3:\r\n                i = str.charCodeAt(strLen - 3) << 24 |\r\n                    str.charCodeAt(strLen - 2) << 16 |\r\n                    str.charCodeAt(strLen - 1) <<\r\n                    8 | 0x80;\r\n                break;\r\n        }\r\n\r\n        wordArray.push(i);\r\n\r\n        while ((wordArray.length % 16) !== 14) {\r\n            wordArray.push(0);\r\n        }\r\n\r\n        wordArray.push(strLen >>> 29);\r\n        wordArray.push((strLen << 3) & 0x0ffffffff);\r\n\r\n        for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {\r\n            for (i = 0; i < 16; i++) {\r\n                W[i] = wordArray[blockstart + i];\r\n            }\r\n            for (i = 16; i <= 79; i++) {\r\n                W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\r\n            }\r\n\r\n            A = H0;\r\n            B = H1;\r\n            C = H2;\r\n            D = H3;\r\n            E = H4;\r\n\r\n            for (i = 0; i <= 19; i++) {\r\n                temp = (_rotLeft(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;\r\n                E = D;\r\n                D = C;\r\n                C = _rotLeft(B, 30);\r\n                B = A;\r\n                A = temp;\r\n            }\r\n\r\n            for (i = 20; i <= 39; i++) {\r\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;\r\n                E = D;\r\n                D = C;\r\n                C = _rotLeft(B, 30);\r\n                B = A;\r\n                A = temp;\r\n            }\r\n\r\n            for (i = 40; i <= 59; i++) {\r\n                temp = (_rotLeft(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;\r\n                E = D;\r\n                D = C;\r\n                C = _rotLeft(B, 30);\r\n                B = A;\r\n                A = temp;\r\n            }\r\n\r\n            for (i = 60; i <= 79; i++) {\r\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;\r\n                E = D;\r\n                D = C;\r\n                C = _rotLeft(B, 30);\r\n                B = A;\r\n                A = temp;\r\n            }\r\n\r\n            H0 = (H0 + A) & 0x0ffffffff;\r\n            H1 = (H1 + B) & 0x0ffffffff;\r\n            H2 = (H2 + C) & 0x0ffffffff;\r\n            H3 = (H3 + D) & 0x0ffffffff;\r\n            H4 = (H4 + E) & 0x0ffffffff;\r\n        }\r\n\r\n        temp = _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4);\r\n        return temp.toLowerCase();\r\n    }\r\n\r\n}","/**\r\n * Converts string into camelCase.\r\n *\r\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\r\n */\r\nexport function camelCase(str: string) {\r\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function(match, p1, p2, offset) {\r\n        if (p2) return p2.toUpperCase();\r\n        return p1.toLowerCase();\r\n    });\r\n}\r\n\r\n/**\r\n * Converts string into snake-case.\r\n *\r\n * @see http://stackoverflow.com/questions/30521224/javascript-convert-pascalcase-to-underscore-case\r\n */\r\nexport function snakeCase(str: string) {\r\n    return str.replace(/(?:^|\\.?)([A-Z])/g, (x, y) => \"_\" + y.toLowerCase()).replace(/^_/, \"\");\r\n}","import {NamingStrategyInterface} from \"./NamingStrategyInterface\";\r\nimport {RandomGenerator} from \"../util/RandomGenerator\";\r\nimport {snakeCase, camelCase} from \"../util/StringUtils\";\r\n\r\n/**\r\n * Naming strategy that is used by default.\r\n */\r\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\r\n\r\n    tableName(className: string, customName: string): string {\r\n        return customName ? customName : snakeCase(className);\r\n    }\r\n\r\n    columnName(propertyName: string, customName: string): string {\r\n        return customName ? customName : propertyName;\r\n    }\r\n\r\n    embeddedColumnName(prefixes: string[], columnPropertyName: string, columnCustomName?: string): string {\r\n        // todo: need snake case property name but only if its a property name and not a custom embedded prefix\r\n        prefixes = prefixes.filter(prefix => !!prefix);\r\n        const embeddedPropertyName = prefixes.length ? prefixes.join(\"_\") + \"_\" : \"\";\r\n        return camelCase(embeddedPropertyName + (columnCustomName ? columnCustomName : columnPropertyName));\r\n    }\r\n\r\n    relationName(propertyName: string): string {\r\n        return propertyName;\r\n    }\r\n\r\n    indexName(customName: string|undefined, tableName: string, columns: string[]): string {\r\n        if (customName)\r\n            return customName;\r\n\r\n        const key = \"ind_\" + tableName + \"_\" + columns.join(\"_\");\r\n        return \"ind_\" + RandomGenerator.sha1(key).substr(0, 26);\r\n    }\r\n\r\n    joinColumnInverseSideName(joinColumnName: string, propertyName: string): string {\r\n        if (joinColumnName)\r\n            return joinColumnName;\r\n\r\n        return propertyName;\r\n    }\r\n\r\n    joinTableName(firstTableName: string,\r\n                  secondTableName: string,\r\n                  firstPropertyName: string,\r\n                  secondPropertyName: string,\r\n                  firstColumnName: string,\r\n                  secondColumnName: string): string {\r\n        return snakeCase(firstTableName + \"_\" + firstPropertyName + \"_\" + secondTableName + \"_\" + secondColumnName);\r\n    }\r\n\r\n    joinTableColumnName(tableName: string, columnName: string, secondTableName: string, secondColumnName: string): string {\r\n        const column1 = camelCase(tableName + \"_\" + columnName);\r\n        const column2 = camelCase(secondTableName + \"_\" + secondColumnName);\r\n        return column1 === column2 ? column1 + \"_1\" : column1; // todo: do we still need _1 prefix?!\r\n    }\r\n\r\n    joinTableInverseColumnName(tableName: string, columnName: string, secondTableName: string, secondColumnName: string): string {\r\n        const column1 = camelCase(tableName + \"_\" + columnName);\r\n        const column2 = camelCase(secondTableName + \"_\" + secondColumnName);\r\n        return column1 === column2 ? column1 + \"_2\" : column1; // todo: do we still need _2 prefix?!\r\n    }\r\n\r\n    closureJunctionTableName(tableName: string): string {\r\n        return tableName + \"_closure\";\r\n    }\r\n\r\n    foreignKeyName(tableName: string, columnNames: string[], referencedTableName: string, referencedColumnNames: string[]): string {\r\n        const key = `${tableName}_${columnNames.join(\"_\")}_${referencedTableName}_${referencedColumnNames.join(\"_\")}`;\r\n        return \"fk_\" + RandomGenerator.sha1(key).substr(0, 27); // todo: use crypto instead?\r\n    }\r\n\r\n    classTableInheritanceParentColumnName(parentTableName: any, parentTableIdPropertyName: any): string {\r\n        return camelCase(parentTableName + \"_\" + parentTableIdPropertyName);\r\n    }\r\n\r\n    /**\r\n     * Adds prefix to the table.\r\n     */\r\n    prefixTableName(prefix: string, originalTableName: string): string {\r\n        return prefix + originalTableName;\r\n    }\r\n\r\n}\r\n","/**\r\n * Thrown when consumer tries to import entities / entity schemas / subscribers / naming strategies after connection\r\n * is established.\r\n */\r\nexport class CannotImportAlreadyConnectedError extends Error {\r\n    name = \"CannotImportAlreadyConnected\";\r\n\r\n    constructor(importStuff: string, connectionName: string) {\r\n        super();\r\n        this.message = `Cannot import ${importStuff} for \"${connectionName}\" connection because connection to the database already established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries close not opened connection.\r\n */\r\nexport class CannotCloseNotConnectedError extends Error {\r\n    name = \"CannotCloseNotConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot close \"${connectionName}\" connection because connection is not yet established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to connect when he already connected.\r\n */\r\nexport class CannotConnectAlreadyConnectedError extends Error {\r\n    name = \"CannotConnectAlreadyConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot create a \"${connectionName}\" connection because connection to the database already established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to use naming strategy that does not exist.\r\n */\r\nexport class NamingStrategyNotFoundError extends Error {\r\n    name = \"NamingStrategyNotFoundError\";\r\n\r\n    constructor(strategyName: string|Function, connectionName: string) {\r\n        super();\r\n        const name = strategyName instanceof Function ? (strategyName as any).name : strategyName;\r\n        this.message = `Naming strategy \"${name}\" was not found. Looks like this naming strategy does not ` +\r\n            `exist or it was not registered in current \"${connectionName}\" connection?`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to sync a database schema after connection is established\r\n */\r\nexport class CannotSyncNotConnectedError extends Error {\r\n    name = \"CannotSyncNotConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot sync schema of the \"${connectionName}\" connection because connection is not yet established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to change used naming strategy after connection is established.\r\n */\r\nexport class CannotUseNamingStrategyNotConnectedError extends Error {\r\n    name = \"CannotUseNamingStrategyNotConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot use a given naming strategy for \"${connectionName}\" connection because connection to the database already established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {EntitySubscriberInterface} from \"./EntitySubscriberInterface\";\r\nimport {EventListenerTypes} from \"../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {Subject} from \"../persistence/Subject\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\n\r\n/**\r\n * Broadcaster provides a helper methods to broadcast events to the subscribers.\r\n */\r\nexport class Broadcaster {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection,\r\n                private subscriberMetadatas: EntitySubscriberInterface<any>[],\r\n                private entityListeners: EntityListenerMetadata[]) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\" events for all given subjects.\r\n     */\r\n    async broadcastBeforeEventsForAll(entityManager: EntityManager, insertSubjects: Subject[], updateSubjects: Subject[], removeSubjects: Subject[]): Promise<void> {\r\n        const insertPromises = insertSubjects.map(subject => this.broadcastBeforeInsertEvent(entityManager, subject));\r\n        const updatePromises = updateSubjects.map(subject => this.broadcastBeforeUpdateEvent(entityManager, subject));\r\n        const removePromises = removeSubjects.map(subject => this.broadcastBeforeRemoveEvent(entityManager, subject));\r\n        const allPromises = insertPromises.concat(updatePromises).concat(removePromises);\r\n        await Promise.all(allPromises);\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\" events for all given subjects.\r\n     */\r\n    async broadcastAfterEventsForAll(entityManager: EntityManager, insertSubjects: Subject[], updateSubjects: Subject[], removeSubjects: Subject[]): Promise<void> {\r\n        const insertPromises = insertSubjects.map(subject => this.broadcastAfterInsertEvent(entityManager, subject));\r\n        const updatePromises = updateSubjects.map(subject => this.broadcastAfterUpdateEvent(entityManager, subject));\r\n        const removePromises = removeSubjects.map(subject => this.broadcastAfterRemoveEvent(entityManager, subject));\r\n        const allPromises = insertPromises.concat(updatePromises).concat(removePromises);\r\n        await Promise.all(allPromises);\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"BEFORE_INSERT\" event.\r\n     * Before insert event is executed before entity is being inserted to the database for the first time.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastBeforeInsertEvent(entityManager: EntityManager, subject: Subject): Promise<void> {\r\n\r\n        const listeners = this.entityListeners\r\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_INSERT && this.isAllowedListener(listener, subject.entity))\r\n            .map(entityListener => subject.entity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.beforeInsert)\r\n            .map(subscriber => subscriber.beforeInsert!({\r\n                entityManager: entityManager,\r\n                entity: subject.entity\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"BEFORE_UPDATE\" event.\r\n     * Before update event is executed before entity is being updated in the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastBeforeUpdateEvent(entityManager: EntityManager, subject: Subject): Promise<void> { // todo: send relations too?\r\n\r\n        const listeners = this.entityListeners\r\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_UPDATE && this.isAllowedListener(listener, subject.entity))\r\n            .map(entityListener => subject.entity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.beforeUpdate)\r\n            .map(subscriber => subscriber.beforeUpdate!({\r\n                entityManager: entityManager,\r\n                entity: subject.entity,\r\n                databaseEntity: subject.databaseEntity,\r\n                updatedColumns: subject.diffColumns,\r\n                updatedRelations: subject.diffRelations,\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"BEFORE_REMOVE\" event.\r\n     * Before remove event is executed before entity is being removed from the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastBeforeRemoveEvent(entityManager: EntityManager, subject: Subject): Promise<void> {\r\n\r\n        const listeners = this.entityListeners\r\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_REMOVE && this.isAllowedListener(listener, subject.entity))\r\n            .map(entityListener => subject.databaseEntity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.beforeRemove)\r\n            .map(subscriber => subscriber.beforeRemove!({\r\n                entityManager: entityManager,\r\n                entity: subject.hasEntity ? subject.entity : undefined,\r\n                databaseEntity: subject.databaseEntity,\r\n                entityId: subject.metadata.getEntityIdMixedMap(subject.databaseEntity)\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_INSERT\" event.\r\n     * After insert event is executed after entity is being persisted to the database for the first time.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastAfterInsertEvent(entityManager: EntityManager, subject: Subject): Promise<void> {\r\n\r\n        const listeners = this.entityListeners\r\n            .filter(listener => listener.type === EventListenerTypes.AFTER_INSERT && this.isAllowedListener(listener, subject.entity))\r\n            .map(entityListener => subject.entity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.afterInsert)\r\n            .map(subscriber => subscriber.afterInsert!({\r\n                entityManager: entityManager,\r\n                entity: subject.entity\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_UPDATE\" event.\r\n     * After update event is executed after entity is being updated in the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastAfterUpdateEvent(entityManager: EntityManager, subject: Subject): Promise<void> {\r\n\r\n        const listeners = this.entityListeners\r\n            .filter(listener => listener.type === EventListenerTypes.AFTER_UPDATE && this.isAllowedListener(listener, subject.entity))\r\n            .map(entityListener => subject.entity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.afterUpdate)\r\n            .map(subscriber => subscriber.afterUpdate!({\r\n                entityManager: entityManager,\r\n                entity: subject.entity,\r\n                databaseEntity: subject.databaseEntity,\r\n                updatedColumns: subject.diffColumns,\r\n                updatedRelations: subject.diffRelations,\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_REMOVE\" event.\r\n     * After remove event is executed after entity is being removed from the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastAfterRemoveEvent(entityManager: EntityManager, subject: Subject): Promise<void> {\r\n\r\n        const listeners = this.entityListeners\r\n            .filter(listener => listener.type === EventListenerTypes.AFTER_REMOVE && this.isAllowedListener(listener, subject.entity))\r\n            .map(entityListener => subject.entity[entityListener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.afterRemove)\r\n            .map(subscriber => subscriber.afterRemove!({\r\n                entityManager: entityManager,\r\n                entity: subject.hasEntity ? subject.entity : undefined,\r\n                databaseEntity: subject.databaseEntity,\r\n                entityId: subject.metadata.getEntityIdMixedMap(subject.databaseEntity)\r\n            }));\r\n\r\n        await Promise.all(listeners.concat(subscribers));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_LOAD\" event for all given entities, and their sub-entities.\r\n     * After load event is executed after entity has been loaded from the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastLoadEventsForAll(target: Function|string, entities: ObjectLiteral[]): Promise<void> {\r\n        await Promise.all(entities.map(entity => this.broadcastLoadEvents(target, entity)));\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_LOAD\" event for the given entity and all its sub-entities.\r\n     * After load event is executed after entity has been loaded from the database.\r\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\r\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\r\n     */\r\n    async broadcastLoadEvents(target: Function|string, entity: ObjectLiteral): Promise<void> {\r\n        if (entity instanceof Promise) // todo: check why need this?\r\n            return;\r\n\r\n        // collect load events for all children entities that were loaded with the main entity\r\n        const children = this.connection.getMetadata(target).relations.reduce((promises, relation) => {\r\n            if (!entity.hasOwnProperty(relation.propertyName))\r\n                return promises;\r\n\r\n            const value = relation.getEntityValue(entity);\r\n            if (value instanceof Array) {\r\n                promises = promises.concat(this.broadcastLoadEventsForAll(relation.inverseEntityMetadata.target, value));\r\n            } else if (value) {\r\n                promises.push(this.broadcastLoadEvents(relation.inverseEntityMetadata.target, value));\r\n            }\r\n\r\n            return promises;\r\n        }, [] as Promise<void>[]);\r\n\r\n        const listeners = this.entityListeners\r\n            .filter(listener => listener.type === EventListenerTypes.AFTER_LOAD && this.isAllowedListener(listener, entity))\r\n            .map(listener => entity[listener.propertyName]());\r\n\r\n        const subscribers = this.subscriberMetadatas\r\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, target) && subscriber.afterLoad)\r\n            .map(subscriber => subscriber.afterLoad!(entity));\r\n\r\n        await Promise.all(children.concat(listeners.concat(subscribers)));\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if entity listener is allowed to be executed on the given entity.\r\n     */\r\n    protected isAllowedListener(listener: EntityListenerMetadata, entity: ObjectLiteral) {\r\n        // todo: create in entity metadata method like isInherited\r\n        return listener.target === entity.constructor || // todo: .constructor won't work for entity schemas\r\n            (listener.target instanceof Function && entity.constructor.prototype instanceof listener.target); // todo: also need to implement entity schema inheritance\r\n    }\r\n\r\n    /**\r\n     * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,\r\n     * or listens our entity.\r\n     */\r\n    protected isAllowedSubscriber(subscriber: EntitySubscriberInterface<any>, target: Function|string): boolean {\r\n        return  !subscriber.listenTo ||\r\n                !subscriber.listenTo() ||\r\n                subscriber.listenTo() === Object ||\r\n                subscriber.listenTo() === target;\r\n    }\r\n\r\n}","import {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {TableSchema} from \"./schema/TableSchema\";\r\nimport {ColumnSchema} from \"./schema/ColumnSchema\";\r\nimport {ForeignKeySchema} from \"./schema/ForeignKeySchema\";\r\nimport {IndexSchema} from \"./schema/IndexSchema\";\r\nimport {Driver} from \"../driver/Driver\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {Logger} from \"../logger/Logger\";\r\nimport {PrimaryKeySchema} from \"./schema/PrimaryKeySchema\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\n\r\n/**\r\n * Creates complete tables schemas in the database based on the entity metadatas.\r\n *\r\n * Steps how schema is being built:\r\n * 1. load list of all tables with complete column and keys information from the db\r\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\r\n * 3. create new tables that does not exist in the db, but exist in the metadata\r\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\r\n * 5. add columns from metadata which does not exist in the table\r\n * 6. update all exist columns which metadata has changed\r\n * 7. update primary keys - update old and create new primary key from changed columns\r\n * 8. create foreign keys which does not exist in the table yet\r\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\r\n */\r\nexport class SchemaBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Used to execute schema creation queries in a single connection.\r\n     */\r\n    protected queryRunner: QueryRunner;\r\n\r\n    /**\r\n     * All synchronized tables in the database.\r\n     */\r\n    protected tableSchemas: TableSchema[];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param driver Driver needs to create a query runner\r\n     * @param logger Used to log schema creation events\r\n     * @param entityMetadatas All entities to create schema for\r\n     */\r\n    constructor(protected driver: Driver,\r\n                protected logger: Logger,\r\n                protected entityMetadatas: EntityMetadata[]) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates complete schemas for the given entity metadatas.\r\n     */\r\n    async build(): Promise<void> {\r\n        this.queryRunner = await this.driver.createQueryRunner();\r\n        this.tableSchemas = await this.loadTableSchemas();\r\n\r\n        await this.queryRunner.beginTransaction();\r\n        try {\r\n            await this.dropOldForeignKeys();\r\n            // await this.dropOldPrimaryKeys(); // todo: need to drop primary column because column updates are not possible\r\n            await this.createNewTables();\r\n            await this.dropRemovedColumns();\r\n            await this.addNewColumns();\r\n            await this.updateExistColumns();\r\n            await this.updatePrimaryKeys();\r\n            await this.createForeignKeys();\r\n            await this.createIndices();\r\n            await this.queryRunner.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.queryRunner.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.queryRunner.release();\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\r\n        return this.entityMetadatas.filter(metadata => !metadata.table.skipSchemaSync);\r\n    }\r\n\r\n    /**\r\n     * Loads all table schemas from the database.\r\n     */\r\n    protected loadTableSchemas(): Promise<TableSchema[]> {\r\n        const tableNames = this.entityToSyncMetadatas.map(metadata => metadata.table.name);\r\n        return this.queryRunner.loadTableSchemas(tableNames);\r\n    }\r\n\r\n    /**\r\n     * Drops all (old) foreign keys that exist in the table schemas, but do not exist in the entity metadata.\r\n     */\r\n    protected async dropOldForeignKeys(): Promise<void> {\r\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\r\n            const foreignKeySchemasToDrop = tableSchema.foreignKeys.filter(foreignKeySchema => {\r\n                return !metadata.foreignKeys.find(metadataForeignKey => metadataForeignKey.name === foreignKeySchema.name);\r\n            });\r\n            if (foreignKeySchemasToDrop.length === 0)\r\n                return;\r\n\r\n            this.logger.logSchemaBuild(`dropping old foreign keys of ${tableSchema.name}: ${foreignKeySchemasToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\r\n\r\n            // remove foreign keys from the table schema\r\n            tableSchema.removeForeignKeys(foreignKeySchemasToDrop);\r\n\r\n            // drop foreign keys from the database\r\n            await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemasToDrop);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates tables that do not exist in the database yet.\r\n     * New tables are created without foreign and primary keys.\r\n     * Primary key only can be created in conclusion with auto generated column.\r\n     */\r\n    protected async createNewTables(): Promise<void> {\r\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            // check if table does not exist yet\r\n            const existTableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\r\n            if (existTableSchema)\r\n                return;\r\n\r\n            this.logger.logSchemaBuild(`creating a new table: ${metadata.table.name}`);\r\n\r\n            // create a new table schema and sync it in the database\r\n            const tableSchema = new TableSchema(metadata.table.name, this.metadataColumnsToColumnSchemas(metadata.columns), true);\r\n            this.tableSchemas.push(tableSchema);\r\n            await this.queryRunner.createTable(tableSchema);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\r\n     * We drop their keys too, since it should be safe.\r\n     */\r\n    protected dropRemovedColumns() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\r\n            if (!tableSchema) return;\r\n\r\n            // find columns that exist in the database but does not exist in the metadata\r\n            const droppedColumnSchemas = tableSchema.columns.filter(columnSchema => {\r\n                return !metadata.columns.find(columnMetadata => columnMetadata.fullName === columnSchema.name);\r\n            });\r\n            if (droppedColumnSchemas.length === 0)\r\n                return;\r\n\r\n            // drop all foreign keys that has column to be removed in its columns\r\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\r\n                return this.dropColumnReferencedForeignKeys(metadata.table.name, droppedColumnSchema.name);\r\n            }));\r\n\r\n            // drop all indices that point to this column\r\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\r\n                return this.dropColumnReferencedIndices(metadata.table.name, droppedColumnSchema.name);\r\n            }));\r\n\r\n            this.logger.logSchemaBuild(`columns dropped in ${tableSchema.name}: ` + droppedColumnSchemas.map(column => column.name).join(\", \"));\r\n\r\n            // remove columns from the table schema and primary keys of it if its used in the primary keys\r\n            tableSchema.removeColumns(droppedColumnSchemas);\r\n            tableSchema.removePrimaryKeysOfColumns(droppedColumnSchemas);\r\n\r\n            // drop columns from the database\r\n            await this.queryRunner.dropColumns(tableSchema, droppedColumnSchemas);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds columns from metadata which does not exist in the table.\r\n     * Columns are created without keys.\r\n     */\r\n    protected addNewColumns() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            // find which columns are new\r\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\r\n                return !tableSchema.columns.find(columnSchema => columnSchema.name === columnMetadata.fullName);\r\n            });\r\n            if (newColumnMetadatas.length === 0)\r\n                return;\r\n\r\n            this.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.fullName).join(\", \"));\r\n\r\n            // create columns in the database\r\n            const newColumnSchemas = this.metadataColumnsToColumnSchemas(newColumnMetadatas);\r\n            await this.queryRunner.addColumns(tableSchema, newColumnSchemas);\r\n            tableSchema.addColumns(newColumnSchemas);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update all exist columns which metadata has changed.\r\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\r\n     */\r\n    protected updateExistColumns() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            const updatedColumnSchemas = tableSchema.findChangedColumns(this.queryRunner, metadata.columns);\r\n            if (updatedColumnSchemas.length === 0)\r\n                return;\r\n\r\n            this.logger.logSchemaBuild(`columns changed in ${tableSchema.name}. updating: ` + updatedColumnSchemas.map(column => column.name).join(\", \"));\r\n\r\n            // drop all foreign keys that point to this column\r\n            const dropRelatedForeignKeysPromises = updatedColumnSchemas\r\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.fullName === changedColumnSchema.name))\r\n                .map(changedColumnSchema => this.dropColumnReferencedForeignKeys(metadata.table.name, changedColumnSchema.name));\r\n\r\n            // wait until all related foreign keys are dropped\r\n            await Promise.all(dropRelatedForeignKeysPromises);\r\n\r\n            // drop all indices that point to this column\r\n            const dropRelatedIndicesPromises = updatedColumnSchemas\r\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.fullName === changedColumnSchema.name))\r\n                .map(changedColumnSchema => this.dropColumnReferencedIndices(metadata.table.name, changedColumnSchema.name));\r\n\r\n            // wait until all related indices are dropped\r\n            await Promise.all(dropRelatedIndicesPromises);\r\n\r\n            // generate a map of new/old columns\r\n            const newAndOldColumnSchemas = updatedColumnSchemas.map(changedColumnSchema => {\r\n                const columnMetadata = metadata.columns.find(column => column.fullName === changedColumnSchema.name);\r\n                const newColumnSchema = ColumnSchema.create(columnMetadata!, this.queryRunner.normalizeType(columnMetadata!));\r\n                tableSchema.replaceColumn(changedColumnSchema, newColumnSchema);\r\n\r\n                return {\r\n                    newColumn: newColumnSchema,\r\n                    oldColumn: changedColumnSchema\r\n                };\r\n            });\r\n\r\n            return this.queryRunner.changeColumns(tableSchema, newAndOldColumnSchemas);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates primary keys which does not exist in the table yet.\r\n     */\r\n    protected updatePrimaryKeys() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name && !table.justCreated);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            const metadataPrimaryColumns = metadata.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n            const addedKeys = metadataPrimaryColumns\r\n                .filter(primaryKey => {\r\n                    return !tableSchema.primaryKeysWithoutGenerated.find(dbPrimaryKey => dbPrimaryKey.columnName === primaryKey.fullName);\r\n                })\r\n                .map(primaryKey => new PrimaryKeySchema(\"\", primaryKey.fullName));\r\n\r\n            const droppedKeys = tableSchema.primaryKeysWithoutGenerated.filter(primaryKeySchema => {\r\n                return !metadataPrimaryColumns.find(primaryKeyMetadata => primaryKeyMetadata.fullName === primaryKeySchema.columnName);\r\n            });\r\n\r\n            if (addedKeys.length === 0 && droppedKeys.length === 0)\r\n                return;\r\n\r\n            this.logger.logSchemaBuild(`primary keys of ${tableSchema.name} has changed: dropped - ${droppedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}; added - ${addedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}`);\r\n            tableSchema.addPrimaryKeys(addedKeys);\r\n            tableSchema.removePrimaryKeys(droppedKeys);\r\n            await this.queryRunner.updatePrimaryKeys(tableSchema);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates foreign keys which does not exist in the table yet.\r\n     */\r\n    protected createForeignKeys() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            const newKeys = metadata.foreignKeys.filter(foreignKey => {\r\n                return !tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === foreignKey.name);\r\n            });\r\n            if (newKeys.length === 0)\r\n                return;\r\n\r\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\r\n            this.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")}`);\r\n            await this.queryRunner.createForeignKeys(tableSchema, dbForeignKeys);\r\n            tableSchema.addForeignKeys(dbForeignKeys);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates indices which are missing in db yet, and drops indices which exist in the db,\r\n     * but does not exist in the metadata anymore.\r\n     */\r\n    protected createIndices() {\r\n        // return Promise.all(this.entityMetadatas.map(metadata => this.createIndices(metadata.table, metadata.indices)));\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\r\n            if (!tableSchema)\r\n                return;\r\n\r\n            // drop all indices that exist in the table, but does not exist in the given composite indices\r\n            const dropQueries = tableSchema.indices\r\n                .filter(indexSchema => !metadata.indices.find(indexMetadata => indexMetadata.name === indexSchema.name))\r\n                .map(async indexSchema => {\r\n                    this.logger.logSchemaBuild(`dropping an index: ${indexSchema.name}`);\r\n                    tableSchema.removeIndex(indexSchema);\r\n                    await this.queryRunner.dropIndex(metadata.table.name, indexSchema.name);\r\n                });\r\n\r\n            // then create table indices for all composite indices we have\r\n            const addQueries = metadata.indices\r\n                .filter(indexMetadata => !tableSchema.indices.find(indexSchema => indexSchema.name === indexMetadata.name))\r\n                .map(async indexMetadata => {\r\n                    const indexSchema = IndexSchema.create(indexMetadata);\r\n                    tableSchema.indices.push(indexSchema);\r\n                    this.logger.logSchemaBuild(`adding new index: ${indexSchema.name}`);\r\n                    await this.queryRunner.createIndex(indexSchema.tableName, indexSchema);\r\n                });\r\n\r\n            await Promise.all(dropQueries.concat(addQueries));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Drops all indices where given column of the given table is being used.\r\n     */\r\n    protected async dropColumnReferencedIndices(tableName: string, columnName: string): Promise<void> {\r\n\r\n        const allIndexMetadatas = this.entityMetadatas.reduce(\r\n            (all, metadata) => all.concat(metadata.indices),\r\n            [] as IndexMetadata[]\r\n        );\r\n\r\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\r\n        if (!tableSchema)\r\n            return;\r\n\r\n        // console.log(allIndexMetadatas);\r\n\r\n        // find depend indices to drop them\r\n        const dependIndices = allIndexMetadatas.filter(indexMetadata => {\r\n            return indexMetadata.tableName === tableName && indexMetadata.columns.indexOf(columnName) !== -1;\r\n        });\r\n        if (!dependIndices.length)\r\n            return;\r\n\r\n        const dependIndicesInTable = tableSchema.indices.filter(indexSchema => {\r\n            return !!dependIndices.find(indexMetadata => indexSchema.name === indexMetadata.name);\r\n        });\r\n        if (dependIndicesInTable.length === 0)\r\n            return;\r\n\r\n        this.logger.logSchemaBuild(`dropping related indices of ${tableName}#${columnName}: ${dependIndicesInTable.map(index => index.name).join(\", \")}`);\r\n\r\n        const dropPromises = dependIndicesInTable.map(index => {\r\n            tableSchema.removeIndex(index);\r\n            return this.queryRunner.dropIndex(tableSchema.name, index.name);\r\n        });\r\n\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Drops all foreign keys where given column of the given table is being used.\r\n     */\r\n    protected async dropColumnReferencedForeignKeys(tableName: string, columnName: string): Promise<void> {\r\n\r\n        const allForeignKeyMetadatas = this.entityMetadatas.reduce(\r\n            (all, metadata) => all.concat(metadata.foreignKeys),\r\n            [] as ForeignKeyMetadata[]\r\n        );\r\n\r\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\r\n        if (!tableSchema)\r\n            return;\r\n\r\n        // find depend foreign keys to drop them\r\n        const dependForeignKeys = allForeignKeyMetadatas.filter(foreignKey => {\r\n            if (foreignKey.tableName === tableName) {\r\n                return !!foreignKey.columns.find(fkColumn => {\r\n                    return fkColumn.fullName === columnName;\r\n                });\r\n            } else if (foreignKey.referencedTableName === tableName) {\r\n                return !!foreignKey.referencedColumns.find(fkColumn => {\r\n                    return fkColumn.fullName === columnName;\r\n                });\r\n            }\r\n            return false;\r\n        });\r\n        if (!dependForeignKeys.length)\r\n            return;\r\n\r\n        const dependForeignKeyInTable = dependForeignKeys.filter(fk => {\r\n            return !!tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === fk.name);\r\n        });\r\n        if (dependForeignKeyInTable.length === 0)\r\n            return;\r\n\r\n        this.logger.logSchemaBuild(`dropping related foreign keys of ${tableName}#${columnName}: ${dependForeignKeyInTable.map(foreignKey => foreignKey.name).join(\", \")}`);\r\n        const foreignKeySchemas = dependForeignKeyInTable.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\r\n        tableSchema.removeForeignKeys(foreignKeySchemas);\r\n        await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemas);\r\n    }\r\n\r\n    /**\r\n     * Creates new column schemas from the given column metadatas.\r\n     */\r\n    protected metadataColumnsToColumnSchemas(columns: ColumnMetadata[]): ColumnSchema[] {\r\n        return columns.map(columnMetadata => {\r\n            return ColumnSchema.create(columnMetadata, this.queryRunner.normalizeType(columnMetadata));\r\n        });\r\n    }\r\n\r\n}","/**\r\n */\r\nexport class EntityMetadataNotFound extends Error {\r\n    name = \"EntityMetadataNotFound\";\r\n\r\n    constructor(target: Function|string) {\r\n        super();\r\n        const targetName = typeof target === \"function\" && (<any> target).name ? (<any> target).name : target;\r\n        this.message = `No metadata for \"${targetName}\" was found.`;\r\n    }\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\n\r\n/**\r\n * Migrations should implement this interface and all its methods.\r\n */\r\nexport interface MigrationInterface {\r\n\r\n    /**\r\n     * Run the migrations.\r\n     */\r\n    up(queryRunner: QueryRunner, connection: Connection, entityManager?: EntityManager): Promise<any>;\r\n\r\n    /**\r\n     * Reverse the migrations.\r\n     */\r\n    down(queryRunner: QueryRunner, connection: Connection, entityManager?: EntityManager): Promise<any>;\r\n\r\n}","import {MigrationInterface} from \"./MigrationInterface\";\r\n\r\n/**\r\n * Represents entity of the migration in the database.\r\n */\r\nexport class Migration {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Timestamp of the migration.\r\n     */\r\n    timestamp: number;\r\n\r\n    /**\r\n     * Name of the migration (class name).\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Migration instance that needs to be run.\r\n     */\r\n    instance?: MigrationInterface;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(timestamp: number, name: string, instance?: MigrationInterface) {\r\n        this.timestamp = timestamp;\r\n        this.name = name;\r\n        this.instance = instance;\r\n    }\r\n\r\n}","import {TableSchema} from \"../schema-builder/schema/TableSchema\";\r\nimport {ColumnSchema} from \"../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnTypes} from \"../metadata/types/ColumnTypes\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {Migration} from \"./Migration\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\n\r\n/**\r\n * Executes migrations: runs pending and reverts previously executed migrations.\r\n */\r\nexport class MigrationExecutor {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected queryRunnerProvider: QueryRunnerProvider;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\r\n        this.queryRunnerProvider = queryRunnerProvider || new QueryRunnerProvider(connection.driver, true);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\r\n     * thus not saved in the database.\r\n     */\r\n    async executePendingMigrations(): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        const entityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(this.queryRunnerProvider);\r\n\r\n        // create migrations table if its not created yet\r\n        await this.createMigrationsTableIfNotExist();\r\n\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations();\r\n\r\n        // get the time when last migration was executed\r\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations();\r\n\r\n        // find all migrations that needs to be executed\r\n        const pendingMigrations = allMigrations.filter(migration => {\r\n            // check if we already have executed migration\r\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\r\n            if (executedMigration)\r\n                return false;\r\n\r\n            // migration is new and not executed. now check if its timestamp is correct\r\n            if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\r\n                throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\r\n\r\n            // every check is passed means that migration was not run yet and we need to run it\r\n            return true;\r\n        });\r\n\r\n        // if no migrations are pending then nothing to do here\r\n        if (!pendingMigrations.length) {\r\n            this.connection.logger.log(\"info\", `No migrations are pending`);\r\n            return;\r\n        }\r\n\r\n        // log information about migration execution\r\n        this.connection.logger.log(\"info\", `${executedMigrations.length} migrations are already loaded in the database.`);\r\n        this.connection.logger.log(\"info\", `${allMigrations.length} migrations were found in the source code.`);\r\n        if (lastTimeExecutedMigration)\r\n            this.connection.logger.log(\"info\", `${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\r\n        this.connection.logger.log(\"info\", `${pendingMigrations.length} migrations are new migrations that needs to be executed.`);\r\n\r\n        // start transaction if its not started yet\r\n        let transactionStartedByUs = false;\r\n        if (!queryRunner.isTransactionActive()) {\r\n            await queryRunner.beginTransaction();\r\n            transactionStartedByUs = true;\r\n        }\r\n\r\n        // run all pending migrations in a sequence\r\n        try {\r\n            await PromiseUtils.runInSequence(pendingMigrations, migration => {\r\n                return migration.instance!.up(queryRunner, this.connection, entityManager)\r\n                    .then(() => { // now when migration is executed we need to insert record about it into the database\r\n                        return this.insertExecutedMigration(migration);\r\n                    })\r\n                    .then(() => { // informative log about migration success\r\n                        this.connection.logger.log(\"info\", `Migration ${migration.name} has been executed successfully.`);\r\n                    });\r\n            });\r\n\r\n            // commit transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.commitTransaction();\r\n\r\n        } catch (err) { // rollback transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.rollbackTransaction();\r\n\r\n            throw err;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Reverts last migration that were run.\r\n     */\r\n    async undoLastMigration(): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        const entityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(this.queryRunnerProvider);\r\n\r\n        // create migrations table if its not created yet\r\n        await this.createMigrationsTableIfNotExist();\r\n\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations();\r\n\r\n        // get the time when last migration was executed\r\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\r\n\r\n        // if no migrations found in the database then nothing to revert\r\n        if (!lastTimeExecutedMigration) {\r\n            this.connection.logger.log(\"info\", `No migrations was found in the database. Nothing to revert!`);\r\n            return;\r\n        }\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations();\r\n\r\n        // find the instance of the migration we need to remove\r\n        const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration!.name);\r\n\r\n        // if no migrations found in the database then nothing to revert\r\n        if (!migrationToRevert)\r\n            throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\r\n\r\n        // log information about migration execution\r\n        this.connection.logger.log(\"info\", `${executedMigrations.length} migrations are already loaded in the database.`);\r\n        this.connection.logger.log(\"info\", `${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\r\n        this.connection.logger.log(\"info\", `Now reverting it...`);\r\n\r\n        // start transaction if its not started yet\r\n        let transactionStartedByUs = false;\r\n        if (!queryRunner.isTransactionActive()) {\r\n            await queryRunner.beginTransaction();\r\n            transactionStartedByUs = true;\r\n        }\r\n\r\n        try {\r\n            await migrationToRevert.instance!.down(queryRunner, this.connection, entityManager);\r\n            await this.deleteExecutedMigration(migrationToRevert);\r\n            this.connection.logger.log(\"info\", `Migration ${migrationToRevert.name} has been reverted successfully.`);\r\n\r\n            // commit transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.commitTransaction();\r\n\r\n        } catch (err) { // rollback transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.rollbackTransaction();\r\n\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates table \"migrations\" that will store information about executed migrations.\r\n     */\r\n    protected async createMigrationsTableIfNotExist(): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        const tableExist = await queryRunner.hasTable(\"migrations\"); // todo: table name should be configurable\r\n        if (!tableExist) {\r\n            await queryRunner.createTable(new TableSchema(\"migrations\", [\r\n                new ColumnSchema({\r\n                    name: \"timestamp\",\r\n                    type: queryRunner.normalizeType({\r\n                        type: ColumnTypes.NUMBER\r\n                    }),\r\n                    isPrimary: true,\r\n                    isNullable: false\r\n                }),\r\n                new ColumnSchema({\r\n                    name: \"name\",\r\n                    type: queryRunner.normalizeType({\r\n                        type: ColumnTypes.STRING\r\n                    }),\r\n                    isNullable: false\r\n                }),\r\n            ]));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads all migrations that were executed and saved into the database.\r\n     */\r\n    protected async loadExecutedMigrations(): Promise<Migration[]> {\r\n        const migrationsRaw: ObjectLiteral[] = await new QueryBuilder(this.connection, this.queryRunnerProvider)\r\n            .select()\r\n            .fromTable(\"migrations\", \"migrations\")\r\n            .getRawMany();\r\n\r\n        return migrationsRaw.map(migrationRaw => {\r\n            return new Migration(parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets all migrations that setup for this connection.\r\n     */\r\n    protected getMigrations(): Migration[] {\r\n        const migrations = this.connection.getMigrations().map(migration => {\r\n            const migrationClassName = (migration.constructor as any).name;\r\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13));\r\n            if (!migrationTimestamp)\r\n                throw new Error(`Migration class name should contain a class name at the end of the file. ${migrationClassName} migration name is wrong.`);\r\n\r\n            return new Migration(migrationTimestamp, migrationClassName, migration);\r\n        });\r\n\r\n        // sort them by timestamp\r\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\r\n     */\r\n    protected getLatestMigration(migrations: Migration[]): Migration|undefined {\r\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);\r\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Inserts new executed migration's data into migrations table.\r\n     */\r\n    protected async insertExecutedMigration(migration: Migration): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        await queryRunner.insert(\"migrations\", {\r\n            timestamp: migration.timestamp,\r\n            name: migration.name,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete previously executed migration's data from the migrations table.\r\n     */\r\n    protected async deleteExecutedMigration(migration: Migration): Promise<void> {\r\n        const queryRunner = await this.queryRunnerProvider.provide();\r\n        await queryRunner.delete(\"migrations\", {\r\n            timestamp: migration.timestamp,\r\n            name: migration.name,\r\n        });\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to run/revert migrations without connection set.\r\n */\r\nexport class CannotRunMigrationNotConnectedError extends Error {\r\n    name = \"CannotRunMigrationNotConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot run/revert migrations on \"${connectionName}\" connection because connection is not yet established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.\r\n */\r\nexport class CustomRepositoryDoesNotHaveEntityError extends Error {\r\n    name = \"CustomRepositoryDoesNotHaveEntityError\";\r\n\r\n    constructor(repository: any) {\r\n        super(`Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name} does not have managed entity. ` +\r\n        `Did you forget to specify entity for it @EntityRepository(MyEntity)? `);\r\n    }\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\nimport {Repository} from \"./Repository\";\r\nimport {TreeRepository} from \"./TreeRepository\";\r\nimport {SpecificRepository} from \"./SpecificRepository\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {CustomRepositoryDoesNotHaveEntityError} from \"./error/CustomRepositoryDoesNotHaveEntityError\";\r\n\r\n/**\r\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\r\n * Contains all most-necessary methods to simplify code in the custom repository.\r\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\r\n *\r\n * @experimental\r\n */\r\nexport class AbstractRepository<Entity extends ObjectLiteral> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods Set Dynamically\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by this repository.\r\n     */\r\n    protected connection: Connection;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets entity manager that allows to perform repository operations with any entity.\r\n     */\r\n    protected get entityManager(): EntityManager {\r\n        return this.connection.entityManager;\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM repository for the entity that is managed by this repository.\r\n     * If current repository does not manage any entity, then exception will be thrown.\r\n     */\r\n    protected get repository(): Repository<Entity> {\r\n        const target = this.connection.getCustomRepositoryTarget(this as any);\r\n        if (!target)\r\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\r\n\r\n        return this.connection.getRepository<Entity>(target);\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\r\n     * If current repository does not manage any entity, then exception will be thrown.\r\n     */\r\n    protected get treeRepository(): TreeRepository<Entity> {\r\n        const target = this.connection.getCustomRepositoryTarget(this as any);\r\n        if (!target)\r\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\r\n\r\n        return this.connection.getTreeRepository<Entity>(target);\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM specific repository for the entity that is managed by this repository.\r\n     * If current repository does not manage any entity, then exception will be thrown.\r\n     */\r\n    protected get specificRepository(): SpecificRepository<Entity> {\r\n        const target = this.connection.getCustomRepositoryTarget(this as any);\r\n        if (!target)\r\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\r\n\r\n        return this.connection.getSpecificRepository<Entity>(target);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new query builder for the repository's entity that can be used to build a sql query.\r\n     * If current repository does not manage any entity, then exception will be thrown.\r\n     */\r\n    protected createQueryBuilder(alias: string): QueryBuilder<Entity> {\r\n        const target = this.connection.getCustomRepositoryTarget(this.constructor);\r\n        if (!target)\r\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\r\n\r\n        return this.connection.getRepository(target).createQueryBuilder(alias);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder for the given entity that can be used to build a sql query.\r\n     */\r\n    protected createQueryBuilderFor<T>(entity: ObjectType<T>, alias: string): QueryBuilder<T> {\r\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM repository for the given entity class.\r\n     */\r\n    protected getRepositoryFor<T>(entity: ObjectType<T>): Repository<T> {\r\n        return this.entityManager.getRepository(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM tree repository for the given entity class.\r\n     */\r\n    protected getTreeRepositoryFor<T>(entity: ObjectType<T>): TreeRepository<T> {\r\n        return this.entityManager.getTreeRepository(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM specific repository for the given entity class.\r\n     */\r\n    protected getSpecificRepositoryFor<T>(entity: ObjectType<T>): SpecificRepository<T> {\r\n        return this.entityManager.getSpecificRepository(entity);\r\n    }\r\n\r\n}","/**\r\n * Thrown if custom repository was not found.\r\n */\r\nexport class CustomRepositoryNotFoundError extends Error {\r\n    name = \"CustomRepositoryNotFoundError\";\r\n\r\n    constructor(repository: any) {\r\n        super();\r\n        this.message = `Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name } was not found. ` +\r\n            `Did you forgot to put @EntityRepository decorator on it?`;\r\n    }\r\n\r\n}","/**\r\n * Thrown if same custom repository instance is reused between different connections.\r\n */\r\nexport class CustomRepositoryReusedError extends Error {\r\n    name = \"CustomRepositoryReusedError\";\r\n\r\n    constructor(repository: any) {\r\n        super(`Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +\r\n            `was already used in the different connection. You can't share entity repositories between different connections ` +\r\n            `when useContainer is set to true for the entity repository.`);\r\n    }\r\n\r\n}","/**\r\n * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.\r\n */\r\nexport class CustomRepositoryCannotInheritRepositoryError extends Error {\r\n    name = \"CustomRepositoryCannotInheritRepositoryError\";\r\n\r\n    constructor(repository: any) {\r\n        super(`Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +\r\n            ` cannot inherit Repository class without entity being set in the @EntityRepository decorator.`);\r\n    }\r\n\r\n}","import {Connection} from \"../connection/Connection\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {EntityManager} from \"./EntityManager\";\r\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {\r\n    Cursor,\r\n    Collection,\r\n    MongoCountPreferences,\r\n    CollectionAggregationOptions,\r\n    AggregationCursor,\r\n    CollectionBluckWriteOptions,\r\n    BulkWriteOpResultObject,\r\n    IndexOptions,\r\n    CollectionOptions,\r\n    DeleteWriteOpResultObject,\r\n    FindAndModifyWriteOpResultObject,\r\n    FindOneAndReplaceOption,\r\n    GeoHaystackSearchOptions,\r\n    GeoNearOptions,\r\n    ReadPreference,\r\n    Code,\r\n    OrderedBulkOperation,\r\n    UnorderedBulkOperation,\r\n    InsertWriteOpResult,\r\n    CollectionInsertManyOptions,\r\n    CollectionInsertOneOptions,\r\n    InsertOneWriteOpResult,\r\n    CommandCursor,\r\n    MapReduceOptions,\r\n    ParallelCollectionScanOptions,\r\n    ReplaceOneOptions,\r\n    UpdateWriteOpResult,\r\n    CollStats\r\n} from \"mongodb\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\n/**\r\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\r\n * whatever entity type are you passing.\r\n *\r\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\r\n */\r\nexport class MongoEntityManager extends EntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\r\n        super(connection, queryRunnerProvider);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Overridden Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes raw SQL query and returns raw database results.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new Error(`Queries aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided entity manager.\r\n     */\r\n    transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\r\n        throw new Error(`Transactions aren't supported by MongoDB.`);\r\n    }\r\n\r\n    /**\r\n     * Using Query Builder with MongoDB is not supported yet.\r\n     * Calling this method will return an error.\r\n     */\r\n    createQueryBuilder<Entity>(entityClassOrName: ObjectType<Entity>|string, alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\r\n        throw new Error(`Query Builder is not supported by MongoDB.`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    createCursor<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\r\n        return this.getMongoRepository(entityClassOrName as any).createCursor(query);\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     * This returns modified version of cursor that transforms each result into Entity model.\r\n     */\r\n    createEntityCursor<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral): Cursor<Entity> {\r\n        return this.getMongoRepository(entityClassOrName as any).createEntityCursor(query);\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate<Entity>(entityClassOrName: ObjectType<Entity>|string, pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\r\n        return this.getMongoRepository(entityClassOrName as any).aggregate(pipeline, options);\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    bulkWrite<Entity>(entityClassOrName: ObjectType<Entity>|string, operations: ObjectLiteral[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).bulkWrite(operations, options);\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    count<Entity>(entityClassOrName: ObjectType<Entity>|string, query?: ObjectLiteral, options?: MongoCountPreferences): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).count(query, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    createCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|string, fieldOrSpec: string|any, options?: IndexOptions): Promise<string> {\r\n        return this.getMongoRepository(entityClassOrName as any).createCollectionIndex(fieldOrSpec, options);\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error.\r\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    createCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string, indexSpecs: ObjectLiteral[]): Promise<void> {\r\n        return this.getMongoRepository(entityClassOrName as any).createCollectionIndexes(indexSpecs);\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    deleteMany<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).deleteMany(query, options);\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    deleteOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).deleteOne(query, options);\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    distinct<Entity>(entityClassOrName: ObjectType<Entity>|string, key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).distinct(key, query, options);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    dropCollectionIndex<Entity>(entityClassOrName: ObjectType<Entity>|string, indexName: string, options?: CollectionOptions): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).dropCollectionIndex(indexName, options);\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    dropCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).dropCollectionIndexes();\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndDelete<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).findOneAndDelete(query, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndReplace<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).findOneAndReplace(query, replacement, options);\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    findOneAndUpdate<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\r\n        return this.getMongoRepository(entityClassOrName as any).findOneAndUpdate(query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Execute a geo search using a geo haystack index on a collection.\r\n     */\r\n    geoHaystackSearch<Entity>(entityClassOrName: ObjectType<Entity>|string, x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).geoHaystackSearch(x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Execute the geoNear command to search for items in the collection.\r\n     */\r\n    geoNear<Entity>(entityClassOrName: ObjectType<Entity>|string, x: number, y: number, options?: GeoNearOptions): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).geoNear(x, y, options);\r\n    }\r\n\r\n    /**\r\n     * Run a group command across a collection.\r\n     */\r\n    group<Entity>(entityClassOrName: ObjectType<Entity>|string, keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).group(keys, condition, initial, reduce, finalize, command, options);\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).collectionIndexes();\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    collectionIndexExists<Entity>(entityClassOrName: ObjectType<Entity>|string, indexes: string|string[]): Promise<boolean> {\r\n        return this.getMongoRepository(entityClassOrName as any).collectionIndexExists(indexes);\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    collectionIndexInformation<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { full: boolean }): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).collectionIndexInformation(options);\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: CollectionOptions): OrderedBulkOperation {\r\n        return this.getMongoRepository(entityClassOrName as any).initializeOrderedBulkOp(options);\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: CollectionOptions): UnorderedBulkOperation {\r\n        return this.getMongoRepository(entityClassOrName as any).initializeUnorderedBulkOp(options);\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    insertMany<Entity>(entityClassOrName: ObjectType<Entity>|string, docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\r\n        return this.getMongoRepository(entityClassOrName as any).insertMany(docs, options);\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    insertOne<Entity>(entityClassOrName: ObjectType<Entity>|string, doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\r\n        return this.getMongoRepository(entityClassOrName as any).insertOne(doc, options);\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    isCapped<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).isCapped();\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\r\n        return this.getMongoRepository(entityClassOrName as any).listCollectionIndexes(options);\r\n    }\r\n\r\n    /**\r\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n     */\r\n    mapReduce<Entity>(entityClassOrName: ObjectType<Entity>|string, map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).mapReduce(map, reduce, options);\r\n    }\r\n\r\n    /**\r\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\r\n     * There are no ordering guarantees for returned results.\r\n     */\r\n    parallelCollectionScan<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\r\n        return this.getMongoRepository(entityClassOrName as any).parallelCollectionScan(options);\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    reIndex<Entity>(entityClassOrName: ObjectType<Entity>|string): Promise<any> {\r\n        return this.getMongoRepository(entityClassOrName as any).reIndex();\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    rename<Entity>(entityClassOrName: ObjectType<Entity>|string, newName: string, options?: { dropTarget?: boolean }): Promise<Collection> {\r\n        return this.getMongoRepository(entityClassOrName as any).rename(newName, options);\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    replaceOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return this.getMongoRepository(entityClassOrName as any).replaceOne(query, doc, options);\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    stats<Entity>(entityClassOrName: ObjectType<Entity>|string, options?: { scale: number }): Promise<CollStats> {\r\n        return this.getMongoRepository(entityClassOrName as any).stats(options);\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    updateMany<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\r\n        return this.getMongoRepository(entityClassOrName as any).updateMany(query, update, options);\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    updateOne<Entity>(entityClassOrName: ObjectType<Entity>|string, query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\r\n        return this.getMongoRepository(entityClassOrName as any).updateOne(query, update, options);\r\n    }\r\n\r\n}","import {Driver} from \"../driver/Driver\";\r\nimport {Repository} from \"../repository/Repository\";\r\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\r\nimport {RepositoryNotFoundError} from \"./error/RepositoryNotFoundError\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\nimport {importClassesFromDirectories, importJsonsFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\r\nimport {getMetadataArgsStorage, getFromContainer} from \"../index\";\r\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\r\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\r\nimport {CannotImportAlreadyConnectedError} from \"./error/CannotImportAlreadyConnectedError\";\r\nimport {CannotCloseNotConnectedError} from \"./error/CannotCloseNotConnectedError\";\r\nimport {CannotConnectAlreadyConnectedError} from \"./error/CannotConnectAlreadyConnectedError\";\r\nimport {TreeRepository} from \"../repository/TreeRepository\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {NamingStrategyNotFoundError} from \"./error/NamingStrategyNotFoundError\";\r\nimport {RepositoryNotTreeError} from \"./error/RepositoryNotTreeError\";\r\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {CannotSyncNotConnectedError} from \"./error/CannotSyncNotConnectedError\";\r\nimport {CannotUseNamingStrategyNotConnectedError} from \"./error/CannotUseNamingStrategyNotConnectedError\";\r\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\r\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\r\nimport {SpecificRepository} from \"../repository/SpecificRepository\";\r\nimport {RepositoryAggregator} from \"../repository/RepositoryAggregator\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {SchemaBuilder} from \"../schema-builder/SchemaBuilder\";\r\nimport {Logger} from \"../logger/Logger\";\r\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\r\nimport {EntityMetadataNotFound} from \"../metadata-args/error/EntityMetadataNotFound\";\r\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\r\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\r\nimport {CannotRunMigrationNotConnectedError} from \"./error/CannotRunMigrationNotConnectedError\";\r\nimport {PlatformTools} from \"../platform/PlatformTools\";\r\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\r\nimport {CustomRepositoryNotFoundError} from \"../repository/error/CustomRepositoryNotFoundError\";\r\nimport {CustomRepositoryReusedError} from \"../repository/error/CustomRepositoryReusedError\";\r\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../repository/error/CustomRepositoryCannotInheritRepositoryError\";\r\nimport {MongoRepository} from \"../repository/MongoRepository\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\r\n\r\n/**\r\n * Connection is a single database connection to a specific database of a database management system.\r\n * You can have multiple connections to multiple databases in your application.\r\n */\r\nexport class Connection {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection name.\r\n     */\r\n    public readonly name: string;\r\n\r\n    /**\r\n     * Database driver used by this connection.\r\n     */\r\n    public readonly driver: Driver;\r\n\r\n    /**\r\n     * Logger used to log orm events.\r\n     */\r\n    public readonly logger: Logger;\r\n\r\n    /**\r\n     * All entity metadatas that are registered for this connection.\r\n     */\r\n    public readonly entityMetadatas: EntityMetadata[] = [];\r\n\r\n    /**\r\n     * Used to broadcast connection events.\r\n     */\r\n    public readonly broadcaster: Broadcaster;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets EntityManager of this connection.\r\n     */\r\n    private readonly _entityManager: EntityManager;\r\n\r\n    /**\r\n     * Stores all registered repositories.\r\n     */\r\n    private readonly repositoryAggregators: RepositoryAggregator[] = [];\r\n\r\n    /**\r\n     * Stores all entity repository instances.\r\n     */\r\n    private readonly entityRepositories: Object[] = [];\r\n\r\n    /**\r\n     * Entity listeners that are registered for this connection.\r\n     */\r\n    private readonly entityListeners: EntityListenerMetadata[] = [];\r\n\r\n    /**\r\n     * Entity subscribers that are registered for this connection.\r\n     */\r\n    private readonly entitySubscribers: EntitySubscriberInterface<any>[] = [];\r\n\r\n    /**\r\n     * Registered entity classes to be used for this connection.\r\n     */\r\n    private readonly entityClasses: Function[] = [];\r\n\r\n    /**\r\n     * Registered entity schemas to be used for this connection.\r\n     */\r\n    private readonly entitySchemas: EntitySchema[] = [];\r\n\r\n    /**\r\n     * Registered subscriber classes to be used for this connection.\r\n     */\r\n    private readonly subscriberClasses: Function[] = [];\r\n\r\n    /**\r\n     * Registered naming strategy classes to be used for this connection.\r\n     */\r\n    private readonly namingStrategyClasses: Function[] = [];\r\n\r\n    /**\r\n     * Registered migration classes to be used for this connection.\r\n     */\r\n    private readonly migrationClasses: Function[] = [];\r\n\r\n    /**\r\n     * Naming strategy to be used in this connection.\r\n     */\r\n    private usedNamingStrategy: Function|string;\r\n\r\n    /**\r\n     * Indicates if connection has been done or not.\r\n     */\r\n    private _isConnected = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string, driver: Driver, logger: Logger) {\r\n        this.name = name;\r\n        this.driver = driver;\r\n        this.logger = logger;\r\n        this._entityManager = this.createEntityManager();\r\n        this.broadcaster = this.createBroadcaster();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection to the database already established for this connection.\r\n     */\r\n    get isConnected(): boolean {\r\n        return this._isConnected;\r\n    }\r\n\r\n    /**\r\n     * Gets entity manager that allows to perform repository operations with any entity in this connection.\r\n     */\r\n    get entityManager(): EntityManager {\r\n        // if (!this.isConnected)\r\n        //     throw new CannotGetEntityManagerNotConnectedError(this.name);\r\n\r\n        return this._entityManager;\r\n    }\r\n\r\n    /**\r\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\r\n     * with any entity in this connection.\r\n     */\r\n    get mongoEntityManager(): MongoEntityManager {\r\n        if (!(this._entityManager instanceof MongoEntityManager))\r\n            throw new Error(`MongoEntityManager is only available for MongoDB databases.`);\r\n\r\n        return this._entityManager as MongoEntityManager;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<this> {\r\n        if (this.isConnected)\r\n            throw new CannotConnectAlreadyConnectedError(this.name);\r\n\r\n        // connect to the database via its driver\r\n        await this.driver.connect();\r\n\r\n        // set connected status for the current connection\r\n        this._isConnected = true;\r\n\r\n        // build all metadatas registered in the current connection\r\n        try {\r\n            this.buildMetadatas();\r\n\r\n        } catch (error) {\r\n\r\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\r\n            // connection needs to be closed\r\n            await this.close();\r\n            throw error;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     * Once connection is closed, you cannot use repositories and perform any operations except\r\n     * opening connection again.\r\n     */\r\n    async close(): Promise<void> {\r\n        if (!this.isConnected)\r\n            throw new CannotCloseNotConnectedError(this.name);\r\n\r\n        await this.driver.disconnect();\r\n        this._isConnected = false;\r\n    }\r\n\r\n    /**\r\n     * Drops the database and all its data.\r\n     */\r\n    async dropDatabase(): Promise<void> {\r\n        const queryRunner = await this.driver.createQueryRunner();\r\n        await queryRunner.clearDatabase();\r\n    }\r\n\r\n    /**\r\n     * Creates database schema for all entities registered in this connection.\r\n     *\r\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\r\n     */\r\n    async syncSchema(dropBeforeSync: boolean = false): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            return Promise.reject(new CannotSyncNotConnectedError(this.name));\r\n\r\n        if (dropBeforeSync)\r\n            await this.dropDatabase();\r\n\r\n        if (this.driver instanceof MongoDriver) { // todo: temporary\r\n            await this.driver.syncSchema(this.entityMetadatas);\r\n\r\n        } else {\r\n            await this.createSchemaBuilder().build();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs all pending migrations.\r\n     */\r\n    async runMigrations(): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            return Promise.reject(new CannotRunMigrationNotConnectedError(this.name));\r\n\r\n        const migrationExecutor = new MigrationExecutor(this);\r\n        await migrationExecutor.executePendingMigrations();\r\n    }\r\n\r\n    /**\r\n     * Reverts last executed migration.\r\n     */\r\n    async undoLastMigration(): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            return Promise.reject(new CannotRunMigrationNotConnectedError(this.name));\r\n\r\n        const migrationExecutor = new MigrationExecutor(this);\r\n        await migrationExecutor.undoLastMigration();\r\n    }\r\n\r\n    /**\r\n     * Imports entities from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importEntitiesFromDirectories(paths: string[]): this {\r\n        this.importEntities(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports entity schemas from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importEntitySchemaFromDirectories(paths: string[]): this {\r\n        this.importEntitySchemas(importJsonsFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports subscribers from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importSubscribersFromDirectories(paths: string[]): this {\r\n        this.importSubscribers(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports naming strategies from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importNamingStrategiesFromDirectories(paths: string[]): this {\r\n        this.importNamingStrategies(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports migrations from the given paths (directories) and registers them in the current connection.\r\n     */\r\n    importMigrationsFromDirectories(paths: string[]): this {\r\n        this.importMigrations(importClassesFromDirectories(paths));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports entities and registers them in the current connection.\r\n     */\r\n    importEntities(entities: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"entities\", this.name);\r\n\r\n        entities.forEach(cls => this.entityClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports schemas and registers them in the current connection.\r\n     */\r\n    importEntitySchemas(schemas: EntitySchema[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"schemas\", this.name);\r\n\r\n        schemas.forEach(schema => this.entitySchemas.push(schema));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports subscribers and registers them in the current connection.\r\n     */\r\n    importSubscribers(subscriberClasses: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"entity subscribers\", this.name);\r\n\r\n        subscriberClasses.forEach(cls => this.subscriberClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports naming strategies and registers them in the current connection.\r\n     */\r\n    importNamingStrategies(strategies: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"naming strategies\", this.name);\r\n\r\n        strategies.forEach(cls => this.namingStrategyClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Imports migrations and registers them in the current connection.\r\n     */\r\n    importMigrations(migrations: Function[]): this {\r\n        if (this.isConnected)\r\n            throw new CannotImportAlreadyConnectedError(\"migrations\", this.name);\r\n\r\n        migrations.forEach(cls => this.migrationClasses.push(cls));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets given naming strategy to be used.\r\n     * Naming strategy must be set to be used before connection is established.\r\n     */\r\n    useNamingStrategy(name: string): this;\r\n\r\n    /**\r\n     * Sets given naming strategy to be used.\r\n     * Naming strategy must be set to be used before connection is established.\r\n     */\r\n    useNamingStrategy(strategy: Function): this;\r\n\r\n    /**\r\n     * Sets given naming strategy to be used.\r\n     * Naming strategy must be set to be used before connection is established.\r\n     */\r\n    useNamingStrategy(strategyClassOrName: string|Function): this {\r\n        if (this.isConnected)\r\n            throw new CannotUseNamingStrategyNotConnectedError(this.name);\r\n\r\n        this.usedNamingStrategy = strategyClassOrName;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the entity metadata of the given entity class.\r\n     */\r\n    getMetadata(target: Function): EntityMetadata;\r\n\r\n    /**\r\n     * Gets the entity metadata of the given entity name.\r\n     */\r\n    getMetadata(target: string): EntityMetadata;\r\n\r\n    /**\r\n     * Gets the entity metadata of the given entity class or schema name.\r\n     */\r\n    getMetadata(target: Function|string): EntityMetadata;\r\n\r\n    /**\r\n     Gets entity metadata for the given entity class or schema name.\r\n     */\r\n    getMetadata(target: Function|string): EntityMetadata {\r\n        const metadata = this.entityMetadatas.find(metadata => metadata.target === target || (typeof target === \"string\" && metadata.targetName === target));\r\n        if (!metadata)\r\n            throw new EntityMetadataNotFound(target);\r\n\r\n        return metadata;\r\n    }\r\n\r\n    /**\r\n     * Gets repository for the given entity class.\r\n     */\r\n    getRepository<Entity>(entityClass: ObjectType<Entity>): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity name.\r\n     */\r\n    getRepository<Entity>(entityName: string): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity name.\r\n     */\r\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity>;\r\n\r\n    /**\r\n     * Gets repository for the given entity class or name.\r\n     */\r\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity> {\r\n        return this.findRepositoryAggregator(entityClassOrName).repository;\r\n    }\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityClass: ObjectType<Entity>): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityName: string): TreeRepository<Entity>;\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class or name.\r\n     * Only tree-type entities can have a TreeRepository,\r\n     * like ones decorated with @ClosureEntity decorator.\r\n     */\r\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity> {\r\n        // todo: add checks if tree repository is supported by driver (not supported by mongodb at least)\r\n\r\n        const repository = this.findRepositoryAggregator(entityClassOrName).treeRepository;\r\n        if (!repository)\r\n            throw new RepositoryNotTreeError(entityClassOrName);\r\n\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity class.\r\n     */\r\n    getMongoRepository<Entity>(entityClass: ObjectType<Entity>): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity name.\r\n     */\r\n    getMongoRepository<Entity>(entityName: string): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity name.\r\n     */\r\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity class or name.\r\n     */\r\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity> {\r\n        if (!(this.driver instanceof MongoDriver))\r\n            throw new Error(`You can use getMongoRepository only for MongoDB connections.`);\r\n\r\n        return this.findRepositoryAggregator(entityClassOrName).repository as MongoRepository<Entity>;\r\n    }\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityClass: ObjectType<Entity>): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity name.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityName: string): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class or name.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity>;\r\n\r\n    /**\r\n     * Gets specific repository for the given entity class or name.\r\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\r\n     *\r\n     * @experimental\r\n     */\r\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity> {\r\n        return this.findRepositoryAggregator(entityClassOrName).specificRepository;\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity manager with a single opened connection to the database.\r\n     * This may be useful if you want to perform all db queries within one connection.\r\n     * After finishing with entity manager, don't forget to release it, to release connection back to pool.\r\n     */\r\n    createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider?: QueryRunnerProvider): EntityManager {\r\n        if (!queryRunnerProvider)\r\n            queryRunnerProvider = new QueryRunnerProvider(this.driver, true);\r\n\r\n        return new EntityManager(this, queryRunnerProvider);\r\n    }\r\n\r\n    /**\r\n     * Gets migration instances that are registered for this connection.\r\n     */\r\n    getMigrations(): MigrationInterface[] {\r\n        if (this.migrationClasses && this.migrationClasses.length) {\r\n            return this.migrationClasses.map(migrationClass => {\r\n                return getFromContainer<MigrationInterface>(migrationClass);\r\n            });\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Gets custom entity repository marked with @EntityRepository decorator.\r\n     */\r\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\r\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.toArray().find(repository => {\r\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\r\n        });\r\n        if (!entityRepositoryMetadataArgs)\r\n            throw new CustomRepositoryNotFoundError(customRepository);\r\n\r\n        let entityRepositoryInstance: any = this.entityRepositories.find(entityRepository => entityRepository.constructor === customRepository);\r\n        if (!entityRepositoryInstance) {\r\n            if (entityRepositoryMetadataArgs.useContainer) {\r\n                entityRepositoryInstance = getFromContainer(entityRepositoryMetadataArgs.target);\r\n\r\n                // if we get custom entity repository from container then there is a risk that it already was used\r\n                // in some different connection. If it was used there then we check it and throw an exception\r\n                // because we cant override its connection there again\r\n\r\n                if (entityRepositoryInstance instanceof AbstractRepository || entityRepositoryInstance instanceof Repository) {\r\n                    // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n                    // however we need these properties for internal work of the class\r\n                    if ((entityRepositoryInstance as any)[\"connection\"] && (entityRepositoryInstance as any)[\"connection\"] !== this)\r\n                        throw new CustomRepositoryReusedError(customRepository);\r\n                }\r\n\r\n            } else {\r\n                entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)();\r\n            }\r\n\r\n            if (entityRepositoryInstance instanceof AbstractRepository) {\r\n                // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n                // however we need these properties for internal work of the class\r\n                if (!(entityRepositoryInstance as any)[\"connection\"])\r\n                    (entityRepositoryInstance as any)[\"connection\"] = this;\r\n            }\r\n            if (entityRepositoryInstance instanceof Repository) {\r\n                if (!entityRepositoryMetadataArgs.entity)\r\n                    throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\r\n\r\n                // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n                // however we need these properties for internal work of the class\r\n                (entityRepositoryInstance as any)[\"connection\"] = this;\r\n                (entityRepositoryInstance as any)[\"metadata\"] = this.getMetadata(entityRepositoryMetadataArgs.entity);\r\n            }\r\n\r\n            // register entity repository\r\n            this.entityRepositories.push(entityRepositoryInstance);\r\n        }\r\n\r\n        return entityRepositoryInstance;\r\n    }\r\n\r\n    /**\r\n     * Gets custom repository's managed entity.\r\n     * If given custom repository does not manage any entity then undefined will be returned.\r\n     */\r\n    getCustomRepositoryTarget<T>(customRepository: any): Function|string|undefined {\r\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.toArray().find(repository => {\r\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\r\n        });\r\n        if (!entityRepositoryMetadataArgs)\r\n            throw new CustomRepositoryNotFoundError(customRepository);\r\n\r\n        return entityRepositoryMetadataArgs.entity;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Finds repository aggregator of the given entity class or name.\r\n     */\r\n    protected findRepositoryAggregator(entityClassOrName: ObjectType<any>|string): RepositoryAggregator {\r\n        // if (!this.isConnected)\r\n        //     throw new NoConnectionForRepositoryError(this.name);\r\n\r\n        if (!this.entityMetadatas.find(metadata => metadata.target === entityClassOrName || (typeof entityClassOrName === \"string\" && metadata.targetName === entityClassOrName)))\r\n            throw new RepositoryNotFoundError(this.name, entityClassOrName);\r\n\r\n        const metadata = this.getMetadata(entityClassOrName);\r\n        const repositoryAggregator = this.repositoryAggregators.find(repositoryAggregate => repositoryAggregate.metadata === metadata);\r\n        if (!repositoryAggregator)\r\n            throw new RepositoryNotFoundError(this.name, entityClassOrName);\r\n\r\n        return repositoryAggregator;\r\n    }\r\n\r\n    /**\r\n     * Builds all registered metadatas.\r\n     */\r\n    protected buildMetadatas() {\r\n\r\n        this.entitySubscribers.length = 0;\r\n        this.entityListeners.length = 0;\r\n        this.repositoryAggregators.length = 0;\r\n        this.entityMetadatas.length = 0;\r\n\r\n        const namingStrategy = this.createNamingStrategy();\r\n        this.driver.namingStrategy = namingStrategy;\r\n        const lazyRelationsWrapper = this.createLazyRelationsWrapper();\r\n\r\n        // take imported event subscribers\r\n        if (this.subscriberClasses && this.subscriberClasses.length && !PlatformTools.getEnvVariable(\"SKIP_SUBSCRIBERS_LOADING\")) {\r\n            getMetadataArgsStorage()\r\n                .entitySubscribers\r\n                .filterByTargets(this.subscriberClasses)\r\n                .toArray()\r\n                .map(metadata => getFromContainer(metadata.target))\r\n                .forEach(subscriber => this.entitySubscribers.push(subscriber));\r\n        }\r\n\r\n        // take imported entity listeners\r\n        if (this.entityClasses && this.entityClasses.length) {\r\n            getMetadataArgsStorage()\r\n                .entityListeners\r\n                .filterByTargets(this.entityClasses)\r\n                .toArray()\r\n                .forEach(metadata => this.entityListeners.push(new EntityListenerMetadata(metadata)));\r\n        }\r\n\r\n        // build entity metadatas from metadata args storage (collected from decorators)\r\n        if (this.entityClasses && this.entityClasses.length) {\r\n            getFromContainer(EntityMetadataBuilder)\r\n                .buildFromMetadataArgsStorage(this.driver, lazyRelationsWrapper, namingStrategy, this.entityClasses)\r\n                .forEach(metadata => {\r\n                    this.entityMetadatas.push(metadata);\r\n                    this.repositoryAggregators.push(new RepositoryAggregator(this, metadata));\r\n                });\r\n        }\r\n\r\n        // build entity metadatas from given entity schemas\r\n        if (this.entitySchemas && this.entitySchemas.length) {\r\n            getFromContainer(EntityMetadataBuilder)\r\n                .buildFromSchemas(this.driver, lazyRelationsWrapper, namingStrategy, this.entitySchemas)\r\n                .forEach(metadata => {\r\n                    this.entityMetadatas.push(metadata);\r\n                    this.repositoryAggregators.push(new RepositoryAggregator(this, metadata));\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a naming strategy to be used for this connection.\r\n     */\r\n    protected createNamingStrategy(): NamingStrategyInterface {\r\n\r\n        // if naming strategies are not loaded, or used naming strategy is not set then use default naming strategy\r\n        if (!this.namingStrategyClasses || !this.namingStrategyClasses.length || !this.usedNamingStrategy)\r\n            return getFromContainer(DefaultNamingStrategy);\r\n\r\n        // try to find used naming strategy in the list of loaded naming strategies\r\n        const namingMetadata = getMetadataArgsStorage()\r\n            .namingStrategies\r\n            .filterByTargets(this.namingStrategyClasses)\r\n            .toArray()\r\n            .find(strategy => {\r\n                if (typeof this.usedNamingStrategy === \"string\") {\r\n                    return strategy.name === this.usedNamingStrategy;\r\n                } else {\r\n                    return strategy.target === this.usedNamingStrategy;\r\n                }\r\n            });\r\n\r\n        // throw an error if not found\r\n        if (!namingMetadata)\r\n            throw new NamingStrategyNotFoundError(this.usedNamingStrategy, this.name);\r\n\r\n        // initialize a naming strategy instance\r\n        return getFromContainer<NamingStrategyInterface>(namingMetadata.target);\r\n    }\r\n\r\n    /**\r\n     * Creates a new default entity manager without single connection setup.\r\n     */\r\n    protected createEntityManager() {\r\n        if (this.driver instanceof MongoDriver)\r\n            return new MongoEntityManager(this);\r\n\r\n        return new EntityManager(this);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity broadcaster using in this connection.\r\n     */\r\n    protected createBroadcaster() {\r\n        return new Broadcaster(this, this.entitySubscribers, this.entityListeners);\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build a database schema for the entities of the current connection.\r\n     */\r\n    protected createSchemaBuilder() {\r\n        return new SchemaBuilder(this.driver, this.logger, this.entityMetadatas);\r\n    }\r\n\r\n    /**\r\n     * Creates a lazy relations wrapper.\r\n     */\r\n    protected createLazyRelationsWrapper() {\r\n        return new LazyRelationsWrapper(this);\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to get connection that does not exist.\r\n */\r\nexport class ConnectionNotFoundError extends Error {\r\n    name = \"ConnectionNotFoundError\";\r\n\r\n    constructor(name: string) {\r\n        super();\r\n        this.message = `Connection \"${name}\" was not found.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {DriverOptions} from \"../driver/DriverOptions\";\r\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {LoggerOptions} from \"../logger/LoggerOptions\";\r\n\r\n/**\r\n * ConnectionOptions is an interface with settings and options for specific connection.\r\n * Options contain database and other connection-related settings.\r\n * Consumer must provide connection options for each of your connections.\r\n */\r\nexport interface ConnectionOptions {\r\n\r\n    /**\r\n     * Database options of this connection.\r\n     */\r\n    readonly driver: DriverOptions;\r\n\r\n    /**\r\n     * Connection name. If connection name is not given then it will be called \"default\".\r\n     * Different connections must have different names.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Name of the naming strategy or target class of the naming strategy to be used for this connection.\r\n     */\r\n    readonly usedNamingStrategy?: string|Function;\r\n\r\n    /**\r\n     * Entities to be loaded for this connection.\r\n     * Accepts both entity classes and directories where from entities need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly entities?: Function[]|string[];\r\n\r\n    /**\r\n     * Subscribers to be loaded for this connection.\r\n     * Accepts both subscriber classes and directories where from subscribers need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly subscribers?: Function[]|string[];\r\n\r\n    /**\r\n     * Naming strategies to be loaded for this connection.\r\n     * Accepts both naming strategy classes and directories where from naming strategies need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly namingStrategies?: Function[]|string[];\r\n\r\n    /**\r\n     * Entity schemas to be loaded for this connection.\r\n     * Accepts both entity schema classes and directories where from entity schemas need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly entitySchemas?: EntitySchema[]|string[];\r\n\r\n    /**\r\n     * Migrations to be loaded for this connection.\r\n     * Accepts both migration classes and directories where from migrations need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly migrations?: Function[]|string[];\r\n\r\n    /**\r\n     * Logging options.\r\n     */\r\n    readonly logging?: LoggerOptions;\r\n\r\n    /**\r\n     * Drops the schema each time connection is being established.\r\n     * Be careful with this option and don't use this in production - otherwise you'll loose all production data.\r\n     * This option is useful during debug and development.\r\n     */\r\n    readonly dropSchemaOnConnection?: boolean;\r\n\r\n    /**\r\n     * Indicates if database schema should be auto created on every application launch.\r\n     * Be careful with this option and don't use this in production - otherwise you can loose production data.\r\n     * This option is useful during debug and development.\r\n     * Alternative to it, you can use CLI and run schema:sync command.\r\n     *\r\n     * Note that for MongoDB database it does not create schema, because MongoDB is schemaless.\r\n     * Instead, it syncs just by creating indices.\r\n     *\r\n     * todo: rename it simply to synchronize: boolean ?\r\n     */\r\n    readonly autoSchemaSync?: boolean;\r\n\r\n    /**\r\n     * Indicates if migrations should be auto run on every application launch.\r\n     * Alternative to it, you can use CLI and run migration:create command.\r\n     *\r\n     * todo: rename it simply to runMigrations: boolean ?\r\n     */\r\n    readonly autoMigrationsRun?: boolean;\r\n\r\n    /**\r\n     * Environment in which connection will run.\r\n     * Current environment is determined from the environment NODE_ENV variable's value.\r\n     * For example, if NODE_ENV is \"test\" and this property is set to \"test\",\r\n     * then this connection will be created. On any other NODE_ENV value it will be skipped.\r\n     * This option is specific to the configuration in the ormconfig.json file.\r\n     */\r\n    readonly environment?: string;\r\n\r\n    /**\r\n     * CLI settings.\r\n     */\r\n    readonly cli?: {\r\n\r\n        /**\r\n         * Directory where entities should be created by default.\r\n         */\r\n        readonly entitiesDir?: string;\r\n\r\n        /**\r\n         * Directory where migrations should be created by default.\r\n         */\r\n        readonly migrationsDir?: string;\r\n\r\n        /**\r\n         * Directory where subscribers should be created by default.\r\n         */\r\n        readonly subscribersDir?: string;\r\n\r\n    };\r\n\r\n}","/**\r\n * Thrown when consumer specifies driver type that does not exist or supported.\r\n */\r\nexport class MissingDriverError extends Error {\r\n    name = \"MissingDriverError\";\r\n\r\n    constructor(driverType: string) {\r\n        super();\r\n        this.message = `Wrong driver ${driverType} given. Supported drivers are: \"mysql\", \"postgres\", \"mssql\", \"oracle\", \"mariadb\", \"sqlite\".`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.\r\n */\r\nexport class AlreadyHasActiveConnectionError extends Error {\r\n    name = \"AlreadyHasActiveConnectionError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot create a new connection named \"${connectionName}\", because connection with such name ` +\r\n            `already exist and it now has an active connection session.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {SqliteDriver} from \"./SqliteDriver\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n *\r\n * Does not support compose primary keys with autoincrement field.\r\n * todo: need to throw exception for this case.\r\n */\r\nexport class SqliteQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: SqliteDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        await this.query(`PRAGMA foreign_keys = OFF;`);\r\n        await this.beginTransaction();\r\n        try {\r\n            const selectDropsQuery = `select 'drop table ' || name || ';' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'`;\r\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n            await this.query(`PRAGMA foreign_keys = ON;`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.databaseConnection.isTransactionActive = true;\r\n        await this.query(\"BEGIN TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise<any[]>((ok, fail) => {\r\n            this.logger.logQuery(query, parameters);\r\n            this.databaseConnection.connection.all(query, parameters, (err: any, result: any) => {\r\n                if (err) {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    fail(err);\r\n                } else {\r\n                    ok(result);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\r\n        const sql = columns.length > 0 ? (`INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`) : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        return new Promise<any[]>((ok, fail) => {\r\n            this.logger.logQuery(sql, parameters);\r\n            const __this = this;\r\n            this.databaseConnection.connection.run(sql, parameters, function (err: any): void {\r\n                if (err) {\r\n                    __this.logger.logFailedQuery(sql, parameters);\r\n                    __this.logger.logQueryError(err);\r\n                    fail(err);\r\n                } else {\r\n                    if (generatedColumn)\r\n                        return ok(this[\"lastID\"]);\r\n\r\n                    ok();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\r\n        const query = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(query, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (${tableNamesString})`);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables || !dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"name\"]);\r\n\r\n            // load columns and indices\r\n            const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\r\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\r\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\r\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\r\n            ]);\r\n\r\n            // find column name with auto increment\r\n            let autoIncrementColumnName: string|undefined = undefined;\r\n            const tableSql: string = dbTable[\"sql\"];\r\n            if (tableSql.indexOf(\"AUTOINCREMENT\") !== -1) {\r\n                autoIncrementColumnName = tableSql.substr(0, tableSql.indexOf(\"AUTOINCREMENT\"));\r\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\r\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\r\n                if (comma !== -1) {\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\r\n\r\n                } else if (bracket !== -1) {\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\r\n                }\r\n            }\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns.map(dbColumn => {\r\n                const columnSchema = new ColumnSchema();\r\n                columnSchema.name = dbColumn[\"name\"];\r\n                columnSchema.type = dbColumn[\"type\"].toLowerCase();\r\n                columnSchema.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\r\n                columnSchema.isNullable = dbColumn[\"notnull\"] === 0;\r\n                columnSchema.isPrimary = dbColumn[\"pk\"] === 1;\r\n                columnSchema.comment = \"\"; // todo later\r\n                columnSchema.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\r\n                const columnForeignKeys = dbForeignKeys\r\n                    .filter(foreignKey => foreignKey[\"from\"] === dbColumn[\"name\"])\r\n                    .map(foreignKey => {\r\n                        const keyName = this.driver.namingStrategy.foreignKeyName(dbTable[\"name\"], [foreignKey[\"from\"]], foreignKey[\"table\"], [foreignKey[\"to\"]]);\r\n                        return new ForeignKeySchema(keyName, [foreignKey[\"from\"]], [foreignKey[\"to\"]], foreignKey[\"table\"], foreignKey[\"on_delete\"]); // todo: how sqlite return from and to when they are arrays? (multiple column foreign keys)\r\n                    });\r\n                tableSchema.addForeignKeys(columnForeignKeys);\r\n                return columnSchema;\r\n            });\r\n\r\n            // create primary key schema\r\n            await Promise.all(dbIndices\r\n                .filter(index => index[\"origin\"] === \"pk\")\r\n                .map(async index => {\r\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${index[\"name\"]}\")`);\r\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\r\n                    indexColumns.forEach(indexColumn => {\r\n                        tableSchema.primaryKeys.push(new PrimaryKeySchema(index[\"name\"], indexColumn));\r\n                    });\r\n                }));\r\n\r\n            // create index schemas from the loaded indices\r\n            const indicesPromises = dbIndices\r\n                .filter(dbIndex => {\r\n                    return dbIndex[\"origin\"] !== \"pk\" &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"name\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"name\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"name\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(async dbIndexName => {\r\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\r\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\r\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\r\n\r\n                    // check if db index is generated by sqlite itself and has special use case\r\n                    if (dbIndex![\"name\"].substr(0, \"sqlite_autoindex\".length) === \"sqlite_autoindex\") {\r\n                        if (dbIndex![\"unique\"] === 1) { // this means we have a special index generated for a column\r\n                            // so we find and update the column\r\n                            indexColumns.forEach(columnName => {\r\n                                const column = tableSchema.columns.find(column => column.name === columnName);\r\n                                if (column)\r\n                                    column.isUnique = true;\r\n                            });\r\n                        }\r\n\r\n                        return Promise.resolve(undefined);\r\n\r\n                    } else {\r\n                        return new IndexSchema(dbTable[\"name\"], dbIndex![\"name\"], indexColumns, dbIndex![\"unique\"] === \"1\");\r\n                    }\r\n                });\r\n\r\n            const indices = await Promise.all(indicesPromises);\r\n            tableSchema.indices = indices.filter(index => !!index) as IndexSchema[];\r\n\r\n            return tableSchema;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM sqlite_master WHERE type = 'table' AND name = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // skip columns with foreign keys, we will add them later\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generates a wrong schema\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableName: string): Promise<void> {\r\n        let sql = `DROP TABLE \"${tableName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\r\n        const columns: ObjectLiteral[] = await this.query(sql);\r\n        return !!columns.find(column => column[\"name\"] === columnName);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const newTableSchema = tableSchema.clone();\r\n        newTableSchema.addColumns([column]);\r\n        await this.recreateTable(newTableSchema, tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const newTableSchema = tableSchema.clone();\r\n        newTableSchema.addColumns(columns);\r\n        await this.recreateTable(newTableSchema, tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        // todo: fix it. it should not depend on tableSchema\r\n        return this.recreateTable(tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     * Changed column looses all its keys in the db.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // todo: fix it. it should not depend on tableSchema\r\n        return this.recreateTable(tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        return this.dropColumns(tableSchemaOrName as any, [columnSchemaOrName as any]);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const updatingTableSchema = tableSchema.clone();\r\n        const columns = (columnSchemasOrNames as any[]).map(columnSchemasOrName => {\r\n            if (typeof columnSchemasOrName === \"string\") {\r\n                const column = tableSchema.columns.find(column => column.name === columnSchemasOrName);\r\n                if (!column)\r\n                    throw new Error(`Cannot drop a column - column \"${columnSchemasOrName}\" was not found in the \"${tableSchema.name}\" table.`);\r\n\r\n                return column;\r\n\r\n            } else {\r\n                return columnSchemasOrName as ColumnSchema;\r\n            }\r\n        });\r\n        updatingTableSchema.removeColumns(columns);\r\n        return this.recreateTable(updatingTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.recreateTable(dbTable);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.createForeignKeys(tableSchemaOrName as any, [foreignKey]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const changedTableSchema = tableSchema.clone();\r\n        changedTableSchema.addForeignKeys(foreignKeys);\r\n        return this.recreateTable(changedTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.dropForeignKeys(tableSchemaOrName as any, [foreignKey]);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const changedTableSchema = tableSchema.clone();\r\n        changedTableSchema.removeForeignKeys(foreignKeys);\r\n        return this.recreateTable(changedTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `DROP INDEX \"${indexName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                return \"character varying(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n            case \"text\":\r\n                return \"text\";\r\n            case \"boolean\":\r\n                return \"boolean\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"integer\";\r\n            case \"smallint\":\r\n                return \"smallint\";\r\n            case \"bigint\":\r\n                return \"bigint\";\r\n            case \"float\":\r\n                return \"real\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"double precision\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                if (typeOptions.timezone) {\r\n                    return \"time with time zone\";\r\n                } else {\r\n                    return \"time without time zone\";\r\n                }\r\n            case \"datetime\":\r\n                if (typeOptions.timezone) {\r\n                    return \"timestamp with time zone\";\r\n                } else {\r\n                    return \"timestamp without time zone\";\r\n                }\r\n            case \"json\":\r\n                return \"json\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"character varying(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"SQLite\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`DELETE FROM ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => this.driver.escapeColumnName(key) + \"=$\" + (startIndex + index + 1));\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema): string {\r\n        let c = \"\\\"\" + column.name + \"\\\"\";\r\n        if (column instanceof ColumnMetadata) {\r\n            c += \" \" + this.normalizeType(column);\r\n        } else {\r\n            c += \" \" + column.type;\r\n        }\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isUnique === true)\r\n            c += \" UNIQUE\";\r\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" PRIMARY KEY AUTOINCREMENT\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"1\" : \"0\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n    protected async recreateTable(tableSchema: TableSchema, oldTableSchema?: TableSchema, migrateData = true): Promise<void> {\r\n        // const withoutForeignKeyColumns = columns.filter(column => column.foreignKeys.length === 0);\r\n        // const createForeignKeys = options && options.createForeignKeys;\r\n        const columnDefinitions = tableSchema.columns.map(dbColumn => this.buildCreateColumnSql(dbColumn)).join(\", \");\r\n        const columnNames = tableSchema.columns.map(column => `\"${column.name}\"`).join(\", \");\r\n\r\n        let sql1 = `CREATE TABLE \"temporary_${tableSchema.name}\" (${columnDefinitions}`;\r\n        // if (options && options.createForeignKeys) {\r\n        tableSchema.foreignKeys.forEach(foreignKey => {\r\n            const columnNames = foreignKey.columnNames.map(name => `\"${name}\"`).join(\", \");\r\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(name => `\"${name}\"`).join(\", \");\r\n            sql1 += `, FOREIGN KEY(${columnNames}) REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\r\n            if (foreignKey.onDelete) sql1 += \" ON DELETE \" + foreignKey.onDelete;\r\n        });\r\n\r\n        const primaryKeyColumns = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql1 += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generate a wrong schema\r\n\r\n        sql1 += \")\";\r\n\r\n        // todo: need also create uniques and indices?\r\n\r\n        // recreate a table with a temporary name\r\n        await this.query(sql1);\r\n\r\n        // we need only select data from old columns\r\n        const oldColumnNames = oldTableSchema ? oldTableSchema.columns.map(column => `\"${column.name}\"`).join(\", \") : columnNames;\r\n\r\n        // migrate all data from the table into temporary table\r\n        if (migrateData) {\r\n            const sql2 = `INSERT INTO \"temporary_${tableSchema.name}\"(${oldColumnNames}) SELECT ${oldColumnNames} FROM \"${tableSchema.name}\"`;\r\n            await this.query(sql2);\r\n        }\r\n\r\n        // drop old table\r\n        const sql3 = `DROP TABLE \"${tableSchema.name}\"`;\r\n        await this.query(sql3);\r\n\r\n        // rename temporary table\r\n        const sql4 = `ALTER TABLE \"temporary_${tableSchema.name}\" RENAME TO \"${tableSchema.name}\"`;\r\n        await this.query(sql4);\r\n\r\n        // also re-create indices\r\n        const indexPromises = tableSchema.indices.map(index => this.createIndex(tableSchema.name, index));\r\n        // const uniquePromises = tableSchema.uniqueKeys.map(key => this.createIndex(key));\r\n        await Promise.all(indexPromises/*.concat(uniquePromises)*/);\r\n    }\r\n\r\n    /**\r\n     * If given value is a table name then it loads its table schema representation from the database.\r\n     */\r\n    protected async getTableSchema(tableSchemaOrName: TableSchema|string): Promise<TableSchema> {\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            return tableSchemaOrName;\r\n        } else {\r\n            const tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n            if (!tableSchema)\r\n                throw new Error(`Table named ${tableSchemaOrName} was not found in the database.`);\r\n\r\n            return tableSchema;\r\n        }\r\n    }\r\n\r\n}\r\n","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {SqliteQueryRunner} from \"./SqliteQueryRunner\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\n\r\n/**\r\n * Organizes communication with sqlite DBMS.\r\n */\r\nexport class SqliteDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * SQLite library.\r\n     */\r\n    protected sqlite: any;\r\n\r\n    /**\r\n     * Connection to SQLite database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connectionOptions: DriverOptions, logger: Logger, sqlite?: any) {\r\n\r\n        this.options = connectionOptions;\r\n        this.logger = logger;\r\n        this.sqlite = sqlite;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.storage)\r\n            throw new DriverOptionNotSetError(\"storage\");\r\n\r\n        // if sqlite package instance was not set explicitly then try to load it\r\n        if (!sqlite)\r\n            this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    connect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            const connection = new this.sqlite.Database(this.options.storage, (err: any) => {\r\n                if (err)\r\n                    return fail(err);\r\n\r\n                this.databaseConnection = {\r\n                    id: 1,\r\n                    connection: connection,\r\n                    isTransactionActive: false\r\n                };\r\n\r\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n                // working properly. this also makes onDelete to work with sqlite.\r\n                connection.run(`PRAGMA foreign_keys = ON;`, (err: any, result: any) => {\r\n                    ok();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n\r\n            if (!this.databaseConnection)\r\n                return fail(new ConnectionIsNotSetError(\"sqlite\"));\r\n            this.databaseConnection.connection.close(handler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"sqlite\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new SqliteQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            driver: this.sqlite,\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n\r\n        const builtParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\r\n            const value = parameters[key.substr(1)];\r\n            if (value instanceof Array) {\r\n                return value.map((v: any) => {\r\n                    builtParameters.push(v);\r\n                    return \"$\" + builtParameters.length;\r\n                }).join(\", \");\r\n            } else {\r\n                builtParameters.push(value);\r\n            }\r\n            return \"$\" + builtParameters.length;\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, builtParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return \"\\\"\" + columnName + \"\\\"\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return \"\\\"\" + aliasName + \"\\\"\";\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return \"\\\"\" + tableName + \"\\\"\";\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"sqlite\");\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.sqlite = PlatformTools.load(\"sqlite3\").verbose();\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\");\r\n        }\r\n    }\r\n\r\n}","/**\r\n * Thrown when connection is trying to be created automatically from connection options found in the ormconfig.json\r\n * or environment variables, but failed due to missing these configurations.\r\n */\r\nexport class CannotDetermineConnectionOptionsError extends Error {\r\n    name = \"CannotDetermineConnectionOptionsError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Cannot create connection, because connection options are missing. ` +\r\n            `You either need to explicitly pass connection options, either create a ormconfig.json with connection options ` +\r\n            `and \"default\" connection name, either to set proper environment variables. Also, if you are using environment-specific ` +\r\n            `configurations in your ormconfig.json make sure your are running under correct NODE_ENV.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\r\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\r\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\r\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\r\nimport {WebsqlDriver} from \"./WebsqlDriver\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\n\r\n/**\r\n * Runs queries on a single websql database connection.\r\n */\r\nexport class WebsqlQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    protected isReleased = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected databaseConnection: DatabaseConnection,\r\n                protected driver: WebsqlDriver,\r\n                protected logger: Logger) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Releases database connection. This is needed when using connection pooling.\r\n     * If connection is not from a pool, it should not be released.\r\n     * You cannot use this class's methods after its released.\r\n     */\r\n    release(): Promise<void> {\r\n        if (this.databaseConnection.releaseCallback) {\r\n            this.isReleased = true;\r\n            return this.databaseConnection.releaseCallback();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // await this.query(`PRAGMA foreign_keys = OFF;`);\r\n        await this.beginTransaction();\r\n        try {\r\n            const selectDropsQuery = `select 'drop table ' || name || ';' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'`;\r\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            await this.rollbackTransaction();\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.release();\r\n            // await this.query(`PRAGMA foreign_keys = ON;`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async beginTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.databaseConnection.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.databaseConnection.isTransactionActive = true;\r\n        // await this.query(\"BEGIN TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        // await this.query(\"COMMIT\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.databaseConnection.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        // await this.query(\"ROLLBACK\");\r\n        this.databaseConnection.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if transaction is in progress.\r\n     */\r\n    isTransactionActive(): boolean {\r\n        return this.databaseConnection.isTransactionActive;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise((ok, fail) => {\r\n\r\n            this.logger.logQuery(query, parameters);\r\n            const db = this.databaseConnection.connection;\r\n            // todo: check if transaction is not active\r\n            db.transaction((tx: any) => {\r\n                tx.executeSql(query, parameters, (tx: any, result: any) => {\r\n                    const rows = Object\r\n                        .keys(result.rows)\r\n                        .filter(key => key !== \"length\")\r\n                        .map(key => result.rows[key]);\r\n                    ok(rows);\r\n\r\n                }, (tx: any, err: any) => {\r\n                    this.logger.logFailedQuery(query, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row into given table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\r\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\r\n        const sql = columns.length > 0 ? (`INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`) : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        return new Promise<any[]>((ok, fail) => {\r\n            this.logger.logQuery(sql, parameters);\r\n\r\n            const db = this.databaseConnection.connection;\r\n            // todo: check if transaction is not active\r\n            db.transaction((tx: any) => {\r\n                tx.executeSql(sql, parameters, (tx: any, result: any) => {\r\n                    if (generatedColumn)\r\n                        return ok(result[\"insertId\"]);\r\n                    ok();\r\n\r\n                }, (tx: any, err: any) => {\r\n                    this.logger.logFailedQuery(sql, parameters);\r\n                    this.logger.logQueryError(err);\r\n                    return fail(err);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\r\n        const query = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(query, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into closure table.\r\n     */\r\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\r\n                `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\r\n                `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\r\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\r\n        const tableSchemas = await this.loadTableSchemas([tableName]);\r\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\r\n     */\r\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // if no tables given then no need to proceed\r\n\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (${tableNamesString})`);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables || !dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const tableSchema = new TableSchema(dbTable[\"name\"]);\r\n\r\n            // load columns and indices\r\n            /*const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\r\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\r\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\r\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\r\n            ]);\r\n\r\n            // find column name with auto increment\r\n            let autoIncrementColumnName: string|undefined = undefined;\r\n            const tableSql: string = dbTable[\"sql\"];\r\n            if (tableSql.indexOf(\"AUTOINCREMENT\") !== -1) {\r\n                autoIncrementColumnName = tableSql.substr(0, tableSql.indexOf(\"AUTOINCREMENT\"));\r\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\r\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\r\n                if (comma !== -1) {\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\r\n\r\n                } else if (bracket !== -1) {\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\r\n                }\r\n            }\r\n\r\n            // create column schemas from the loaded columns\r\n            tableSchema.columns = dbColumns.map(dbColumn => {\r\n                const columnSchema = new ColumnSchema();\r\n                columnSchema.name = dbColumn[\"name\"];\r\n                columnSchema.type = dbColumn[\"type\"].toLowerCase();\r\n                columnSchema.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\r\n                columnSchema.isNullable = dbColumn[\"notnull\"] === 0;\r\n                columnSchema.isPrimary = dbColumn[\"pk\"] === 1;\r\n                columnSchema.comment = \"\"; // todo later\r\n                columnSchema.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\r\n                const columnForeignKeys = dbForeignKeys\r\n                    .filter(foreignKey => foreignKey[\"from\"] === dbColumn[\"name\"])\r\n                    .map(foreignKey => {\r\n                        const keyName = namingStrategy.foreignKeyName(dbTable[\"name\"], [foreignKey[\"from\"]], foreignKey[\"table\"], [foreignKey[\"to\"]]);\r\n                        return new ForeignKeySchema(keyName, [foreignKey[\"from\"]], [foreignKey[\"to\"]], foreignKey[\"table\"], foreignKey[\"on_delete\"]); // todo: how sqlite return from and to when they are arrays? (multiple column foreign keys)\r\n                    });\r\n                tableSchema.addForeignKeys(columnForeignKeys);\r\n                return columnSchema;\r\n            });\r\n\r\n            // create primary key schema\r\n            await Promise.all(dbIndices\r\n                .filter(index => index[\"origin\"] === \"pk\")\r\n                .map(async index => {\r\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${index[\"name\"]}\")`);\r\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\r\n                    indexColumns.forEach(indexColumn => {\r\n                        tableSchema.primaryKeys.push(new PrimaryKeySchema(index[\"name\"], indexColumn));\r\n                    });\r\n                }));\r\n\r\n            // create index schemas from the loaded indices\r\n            const indicesPromises = dbIndices\r\n                .filter(dbIndex => {\r\n                    return  dbIndex[\"origin\"] !== \"pk\" &&\r\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"name\"])) &&\r\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"name\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"name\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(async dbIndexName => {\r\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\r\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\r\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\r\n\r\n                    // check if db index is generated by sqlite itself and has special use case\r\n                    if (dbIndex![\"name\"].substr(0, \"sqlite_autoindex\".length) === \"sqlite_autoindex\") {\r\n                        if (dbIndex![\"unique\"] === 1) { // this means we have a special index generated for a column\r\n                            // so we find and update the column\r\n                            indexColumns.forEach(columnName => {\r\n                                const column = tableSchema.columns.find(column => column.name === columnName);\r\n                                if (column)\r\n                                    column.isUnique = true;\r\n                            });\r\n                        }\r\n\r\n                        return Promise.resolve(undefined);\r\n\r\n                    } else {\r\n                        return new IndexSchema(dbTable[\"name\"], dbIndex![\"name\"], indexColumns, dbIndex![\"unique\"] === \"1\");\r\n                    }\r\n                });\r\n\r\n            const indices = await Promise.all(indicesPromises);\r\n            tableSchema.indices = indices.filter(index => !!index) as IndexSchema[];*/\r\n\r\n            return tableSchema;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableName: string): Promise<boolean> {\r\n        const sql = `SELECT * FROM sqlite_master WHERE type = 'table' AND name = ${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // skip columns with foreign keys, we will add them later\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generates a wrong schema\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableName: string): Promise<void> {\r\n        let sql = `DROP TABLE \"${tableName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\r\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\r\n        const columns: ObjectLiteral[] = await this.query(sql);\r\n        return !!columns.find(column => column[\"name\"] === columnName);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new column from the column schema in the table.\r\n     */\r\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const newTableSchema = tableSchema.clone();\r\n        newTableSchema.addColumns([column]);\r\n        await this.recreateTable(newTableSchema, tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new columns from the column schema in the table.\r\n     */\r\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const newTableSchema = tableSchema.clone();\r\n        newTableSchema.addColumns(columns);\r\n        await this.recreateTable(newTableSchema, tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        let newColumn: ColumnSchema|undefined = undefined;\r\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\r\n            newColumn = newColumnSchemaOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newColumnSchemaOrName;\r\n        }\r\n\r\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let tableSchema: TableSchema|undefined = undefined;\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            tableSchema = tableSchemaOrName;\r\n        } else {\r\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n        }\r\n\r\n        if (!tableSchema)\r\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\r\n\r\n        let oldColumn: ColumnSchema|undefined = undefined;\r\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\r\n            oldColumn = oldColumnSchemaOrName;\r\n        } else {\r\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\r\n\r\n        // todo: fix it. it should not depend on tableSchema\r\n        return this.recreateTable(tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     * Changed column looses all its keys in the db.\r\n     */\r\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // todo: fix it. it should not depend on tableSchema\r\n        return this.recreateTable(tableSchema);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\r\n        return this.dropColumns(tableSchemaOrName as any, [columnSchemaOrName as any]);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const updatingTableSchema = tableSchema.clone();\r\n        const columns = (columnSchemasOrNames as any[]).map(columnSchemasOrName => {\r\n            if (typeof columnSchemasOrName === \"string\") {\r\n                const column = tableSchema.columns.find(column => column.name === columnSchemasOrName);\r\n                if (!column)\r\n                    throw new Error(`Cannot drop a column - column \"${columnSchemasOrName}\" was not found in the \"${tableSchema.name}\" table.`);\r\n\r\n                return column;\r\n\r\n            } else {\r\n                return columnSchemasOrName as ColumnSchema;\r\n            }\r\n        });\r\n        updatingTableSchema.removeColumns(columns);\r\n        return this.recreateTable(updatingTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.recreateTable(dbTable);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.createForeignKeys(tableSchemaOrName as any, [foreignKey]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const changedTableSchema = tableSchema.clone();\r\n        changedTableSchema.addForeignKeys(foreignKeys);\r\n        return this.recreateTable(changedTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return this.dropForeignKeys(tableSchemaOrName as any, [foreignKey]);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\r\n        const changedTableSchema = tableSchema.clone();\r\n        changedTableSchema.removeForeignKeys(foreignKeys);\r\n        return this.recreateTable(changedTableSchema);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const sql = `DROP INDEX \"${indexName}\"`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean, fixedLength?: boolean }): string {\r\n        switch (typeOptions.type) {\r\n            case \"string\":\r\n                return \"character varying(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\r\n            case \"text\":\r\n                return \"text\";\r\n            case \"boolean\":\r\n                return \"boolean\";\r\n            case \"integer\":\r\n            case \"int\":\r\n                return \"integer\";\r\n            case \"smallint\":\r\n                return \"smallint\";\r\n            case \"bigint\":\r\n                return \"bigint\";\r\n            case \"float\":\r\n                return \"real\";\r\n            case \"double\":\r\n            case \"number\":\r\n                return \"double precision\";\r\n            case \"decimal\":\r\n                if (typeOptions.precision && typeOptions.scale) {\r\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.scale) {\r\n                    return `decimal(${typeOptions.scale})`;\r\n\r\n                } else if (typeOptions.precision) {\r\n                    return `decimal(${typeOptions.precision})`;\r\n\r\n                } else {\r\n                    return \"decimal\";\r\n\r\n                }\r\n            case \"date\":\r\n                return \"date\";\r\n            case \"time\":\r\n                if (typeOptions.timezone) {\r\n                    return \"time with time zone\";\r\n                } else {\r\n                    return \"time without time zone\";\r\n                }\r\n            case \"datetime\":\r\n                if (typeOptions.timezone) {\r\n                    return \"timestamp with time zone\";\r\n                } else {\r\n                    return \"timestamp without time zone\";\r\n                }\r\n            case \"json\":\r\n                return \"json\";\r\n            case \"simple_array\":\r\n                return typeOptions.length ? \"character varying(\" + typeOptions.length + \")\" : \"text\";\r\n        }\r\n\r\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"WebSQL\");\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\r\n     */\r\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\r\n\r\n        if (typeof columnMetadataValue === \"number\")\r\n            return columnMetadataValue === parseInt(databaseValue);\r\n        if (typeof columnMetadataValue === \"boolean\")\r\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        if (typeof columnMetadataValue === \"function\")\r\n            return columnMetadataValue() === databaseValue;\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tableName: string): Promise<void> {\r\n        await this.query(`DELETE FROM ${this.driver.escapeTableName(tableName)}`);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => this.driver.escapeColumnName(key) + \"=$\" + (startIndex + index + 1));\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: ColumnSchema): string {\r\n        let c = \"\\\"\" + column.name + \"\\\"\";\r\n        if (column instanceof ColumnMetadata) {\r\n            c += \" \" + this.normalizeType(column);\r\n        } else {\r\n            c += \" \" + column.type;\r\n        }\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isUnique === true)\r\n            c += \" UNIQUE\";\r\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" PRIMARY KEY AUTOINCREMENT\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            if (typeof column.default === \"number\") {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            } else if (typeof column.default === \"boolean\") {\r\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\r\n            } else if (typeof column.default === \"function\") {\r\n                c += \" DEFAULT \" + column.default() + \"\";\r\n            } else if (typeof column.default === \"string\") {\r\n                c += \" DEFAULT '\" + column.default + \"'\";\r\n            } else {\r\n                c += \" DEFAULT \" + column.default + \"\";\r\n            }\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n    protected async recreateTable(tableSchema: TableSchema, oldTableSchema?: TableSchema): Promise<void> {\r\n        // const withoutForeignKeyColumns = columns.filter(column => column.foreignKeys.length === 0);\r\n        // const createForeignKeys = options && options.createForeignKeys;\r\n        const columnDefinitions = tableSchema.columns.map(dbColumn => this.buildCreateColumnSql(dbColumn)).join(\", \");\r\n        const columnNames = tableSchema.columns.map(column => `\"${column.name}\"`).join(\", \");\r\n\r\n        let sql1 = `CREATE TABLE \"temporary_${tableSchema.name}\" (${columnDefinitions}`;\r\n        // if (options && options.createForeignKeys) {\r\n        tableSchema.foreignKeys.forEach(foreignKey => {\r\n            const columnNames = foreignKey.columnNames.map(name => `\"${name}\"`).join(\", \");\r\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(name => `\"${name}\"`).join(\", \");\r\n            sql1 += `, FOREIGN KEY(${columnNames}) REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\r\n            if (foreignKey.onDelete) sql1 += \" ON DELETE \" + foreignKey.onDelete;\r\n        });\r\n\r\n        const primaryKeyColumns = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql1 += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generate a wrong schema\r\n\r\n        sql1 += \")\";\r\n\r\n        // todo: need also create uniques and indices?\r\n\r\n        // recreate a table with a temporary name\r\n        await this.query(sql1);\r\n\r\n        // we need only select data from old columns\r\n        const oldColumnNames = oldTableSchema ? oldTableSchema.columns.map(column => `\"${column.name}\"`).join(\", \") : columnNames;\r\n\r\n        // migrate all data from the table into temporary table\r\n        const sql2 = `INSERT INTO \"temporary_${tableSchema.name}\"(${oldColumnNames}) SELECT ${oldColumnNames} FROM \"${tableSchema.name}\"`;\r\n        await this.query(sql2);\r\n\r\n        // drop old table\r\n        const sql3 = `DROP TABLE \"${tableSchema.name}\"`;\r\n        await this.query(sql3);\r\n\r\n        // rename temporary table\r\n        const sql4 = `ALTER TABLE \"temporary_${tableSchema.name}\" RENAME TO \"${tableSchema.name}\"`;\r\n        await this.query(sql4);\r\n\r\n        // also re-create indices\r\n        const indexPromises = tableSchema.indices.map(index => this.createIndex(tableSchema.name, index));\r\n        // const uniquePromises = tableSchema.uniqueKeys.map(key => this.createIndex(key));\r\n        await Promise.all(indexPromises/*.concat(uniquePromises)*/);\r\n    }\r\n\r\n    /**\r\n     * If given value is a table name then it loads its table schema representation from the database.\r\n     */\r\n    protected async getTableSchema(tableSchemaOrName: TableSchema|string): Promise<TableSchema> {\r\n        if (tableSchemaOrName instanceof TableSchema) {\r\n            return tableSchemaOrName;\r\n        } else {\r\n            const tableSchema = await this.loadTableSchema(tableSchemaOrName);\r\n            if (!tableSchema)\r\n                throw new Error(`Table named ${tableSchemaOrName} was not found in the database.`);\r\n\r\n            return tableSchema;\r\n        }\r\n    }\r\n\r\n}","import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\r\nimport {DriverOptions} from \"../DriverOptions\";\r\nimport {DatabaseConnection} from \"../DatabaseConnection\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {Logger} from \"../../logger/Logger\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\r\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\r\nimport {WebsqlQueryRunner} from \"./WebsqlQueryRunner\";\r\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\r\n\r\n/**\r\n * Declare a global function that is only available in browsers that support WebSQL.\r\n */\r\ndeclare function openDatabase(...params: any[]): any;\r\n\r\n/**\r\n * Organizes communication with WebSQL in the browser.\r\n */\r\nexport class WebsqlDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Naming strategy used in the connection where this driver is used.\r\n     */\r\n    namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Driver connection options.\r\n     */\r\n    readonly options: DriverOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection to database.\r\n     */\r\n    protected databaseConnection: DatabaseConnection|undefined;\r\n\r\n    /**\r\n     * Logger used to log queries and errors.\r\n     */\r\n    protected logger: Logger;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: DriverOptions, logger: Logger) {\r\n\r\n        this.options = DriverUtils.buildDriverOptions(options);\r\n        this.logger = logger;\r\n\r\n        // validate options to make sure everything is set\r\n        // if (!this.options.host)\r\n        //     throw new DriverOptionNotSetError(\"host\");\r\n        // if (!this.options.username)\r\n        //     throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n        // todo: what about extra options: version, description, size\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    connect(): Promise<void> {\r\n\r\n        // build connection options for the driver\r\n        const options = Object.assign({}, {\r\n            database: this.options.database,\r\n        }, this.options.extra || {});\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            const connection = openDatabase(\r\n                options.database,\r\n                options.version,\r\n                options.description,\r\n                options.size,\r\n            );\r\n            this.databaseConnection = {\r\n                id: 1,\r\n                connection: connection,\r\n                isTransactionActive: false\r\n            };\r\n            ok();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        if (!this.databaseConnection)\r\n            throw new ConnectionIsNotSetError(\"websql\");\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            // const handler = (err: any) => err ? fail(err) : ok();\r\n            // todo: find out how to close connection\r\n            ok();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    async createQueryRunner(): Promise<QueryRunner> {\r\n        if (!this.databaseConnection)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"websql\"));\r\n\r\n        const databaseConnection = await this.retrieveDatabaseConnection();\r\n        return new WebsqlQueryRunner(databaseConnection, this, this.logger);\r\n    }\r\n\r\n    /**\r\n     * Access to the native implementation of the database.\r\n     */\r\n    nativeInterface() {\r\n        return {\r\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            escapedParameters.push(parameters[key.substr(1)]);\r\n            return \"?\";\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escapeColumnName(columnName: string): string {\r\n        return columnName; // \"`\" + columnName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes an alias.\r\n     */\r\n    escapeAliasName(aliasName: string): string {\r\n        return aliasName; // \"`\" + aliasName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Escapes a table name.\r\n     */\r\n    escapeTableName(tableName: string): string {\r\n        return tableName; // \"`\" + tableName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value === true ? 1 : 0;\r\n\r\n            case ColumnTypes.DATE:\r\n                return DataTransformationUtils.mixedDateToDateString(value);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedDateToTimeString(value);\r\n\r\n            case ColumnTypes.DATETIME:\r\n                if (columnMetadata.localTimezone) {\r\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\r\n                } else {\r\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\r\n                }\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.stringify(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.simpleArrayToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        switch (columnMetadata.type) {\r\n            case ColumnTypes.BOOLEAN:\r\n                return value ? true : false;\r\n\r\n            case ColumnTypes.DATETIME:\r\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\r\n\r\n            case ColumnTypes.TIME:\r\n                return DataTransformationUtils.mixedTimeToString(value);\r\n\r\n            case ColumnTypes.JSON:\r\n                return JSON.parse(value);\r\n\r\n            case ColumnTypes.SIMPLE_ARRAY:\r\n                return DataTransformationUtils.stringToSimpleArray(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves a new database connection.\r\n     * If pooling is enabled then connection from the pool will be retrieved.\r\n     * Otherwise active connection will be returned.\r\n     */\r\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        throw new ConnectionIsNotSetError(\"websql\");\r\n    }\r\n\r\n}","import {Connection} from \"./Connection\";\r\nimport {ConnectionNotFoundError} from \"./error/ConnectionNotFoundError\";\r\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\r\nimport {ConnectionOptions} from \"./ConnectionOptions\";\r\nimport {DriverOptions} from \"../driver/DriverOptions\";\r\nimport {Driver} from \"../driver/Driver\";\r\nimport {MissingDriverError} from \"./error/MissingDriverError\";\r\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\r\nimport {AlreadyHasActiveConnectionError} from \"./error/AlreadyHasActiveConnectionError\";\r\nimport {Logger} from \"../logger/Logger\";\r\nimport {SqliteDriver} from \"../driver/sqlite/SqliteDriver\";\r\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\nimport {CannotDetermineConnectionOptionsError} from \"./error/CannotDetermineConnectionOptionsError\";\r\nimport {PlatformTools} from \"../platform/PlatformTools\";\r\nimport {WebsqlDriver} from \"../driver/websql/WebsqlDriver\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\n\r\n/**\r\n * ConnectionManager is used to store and manage all these different connections.\r\n * It also provides useful factory methods to simplify connection creation.\r\n */\r\nexport class ConnectionManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * List of connections registered in this connection manager.\r\n     */\r\n    protected connections: Connection[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if connection with the given name exist in the manager.\r\n     */\r\n    has(name: string): boolean {\r\n        return !!this.connections.find(connection => connection.name === name);\r\n    }\r\n\r\n    /**\r\n     * Gets registered connection with the given name.\r\n     * If connection name is not given then it will get a default connection.\r\n     * Throws exception if connection with the given name was not found.\r\n     */\r\n    get(name: string = \"default\"): Connection {\r\n        const connection = this.connections.find(connection => connection.name === name);\r\n        if (!connection)\r\n            throw new ConnectionNotFoundError(name);\r\n\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection based on the given connection options and registers it in the manager.\r\n     * You need to manually call #connect method to establish connection.\r\n     * Note that dropSchemaOnConnection and autoSchemaSync options of a ConnectionOptions will not work there - use\r\n     * createAndConnect method to use them.\r\n     */\r\n    create(options: ConnectionOptions): Connection {\r\n\r\n        const logger = new Logger(options.logging || {});\r\n        const driver = this.createDriver(options.driver, logger);\r\n        const connection = this.createConnection(options.name || \"default\", driver, logger);\r\n\r\n        // import entity schemas\r\n        if (options.entitySchemas) {\r\n            const [directories, classes] = this.splitStringsAndClasses(options.entitySchemas);\r\n            connection\r\n                .importEntitySchemas(classes)\r\n                .importEntitySchemaFromDirectories(directories);\r\n        }\r\n\r\n        // import entities\r\n        if (options.entities) {\r\n            const [directories, classes] = this.splitStringsAndClasses(options.entities);\r\n            connection\r\n                .importEntities(classes)\r\n                .importEntitiesFromDirectories(directories);\r\n        }\r\n\r\n        // import subscriber\r\n        if (options.subscribers) {\r\n            const [directories, classes] = this.splitStringsAndClasses(options.subscribers);\r\n            connection\r\n                .importSubscribers(classes)\r\n                .importSubscribersFromDirectories(directories);\r\n        }\r\n\r\n        // import naming strategies\r\n        if (options.namingStrategies) {\r\n            const [directories, classes] = this.splitStringsAndClasses(options.namingStrategies);\r\n            connection\r\n                .importNamingStrategies(classes)\r\n                .importNamingStrategiesFromDirectories(directories);\r\n        }\r\n\r\n        // import migrations\r\n        if (options.migrations) {\r\n            const [directories, classes] = this.splitStringsAndClasses(options.migrations);\r\n            connection\r\n                .importMigrations(classes)\r\n                .importMigrationsFromDirectories(directories);\r\n        }\r\n\r\n        // set naming strategy to be used for this connection\r\n        if (options.usedNamingStrategy)\r\n            connection.useNamingStrategy(options.usedNamingStrategy as any);\r\n\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection and registers it in the manager.\r\n     *\r\n     * If connection options were not specified, then it will try to create connection automatically.\r\n     *\r\n     * First, it will try to find a \"default\" configuration from ormconfig.json.\r\n     * You can also specify a connection name to use from ormconfig.json,\r\n     * and you even can specify a path to custom ormconfig.json file.\r\n     *\r\n     * In the case if options were not specified, and ormconfig.json file also wasn't found,\r\n     * it will try to create connection from environment variables.\r\n     * There are several environment variables you can set:\r\n     *\r\n     * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\r\n     * - TYPEORM_URL - database connection url. Should be a string.\r\n     * - TYPEORM_HOST - database host. Should be a string.\r\n     * - TYPEORM_PORT - database access port. Should be a number.\r\n     * - TYPEORM_USERNAME - database username. Should be a string.\r\n     * - TYPEORM_PASSWORD - database user's password. Should be a string.\r\n     * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\r\n     * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\r\n     * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\r\n     * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\r\n     * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\r\n     * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\r\n     * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\r\n     * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\r\n     *\r\n     * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\r\n     */\r\n    async createAndConnect(): Promise<Connection>;\r\n\r\n    /**\r\n     * Creates connection from the given connection options and registers it in the manager.\r\n     */\r\n    async createAndConnect(options: ConnectionOptions): Promise<Connection>;\r\n\r\n    /**\r\n     * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\r\n     * Optionally you can specify a path to custom ormconfig.json file.\r\n     */\r\n    async createAndConnect(connectionNameFromConfig: string, ormConfigPath?: string): Promise<Connection>;\r\n\r\n    /**\r\n     * Creates connection and and registers it in the manager.\r\n     */\r\n    async createAndConnect(optionsOrConnectionNameFromConfig?: ConnectionOptions|string, ormConfigPath?: string): Promise<Connection> {\r\n\r\n        // if connection options are given, then create connection from them\r\n        if (optionsOrConnectionNameFromConfig && optionsOrConnectionNameFromConfig instanceof Object)\r\n            return this.createAndConnectByConnectionOptions(optionsOrConnectionNameFromConfig as ConnectionOptions);\r\n\r\n        // if connection name is specified then explicitly try to load connection options from it\r\n        if (typeof optionsOrConnectionNameFromConfig === \"string\")\r\n            return this.createFromConfigAndConnect(optionsOrConnectionNameFromConfig || \"default\", ormConfigPath);\r\n\r\n        // if nothing is specified then try to silently load config from ormconfig.json\r\n        if (this.hasDefaultConfigurationInConfigurationFile())\r\n            return this.createFromConfigAndConnect(\"default\");\r\n\r\n        // if driver type is set in environment variables then try to create connection from env variables\r\n        if (this.hasDefaultConfigurationInEnvironmentVariables())\r\n            return this.createFromEnvAndConnect();\r\n\r\n        throw new CannotDetermineConnectionOptionsError();\r\n    }\r\n\r\n    /**\r\n     * Creates new connections and registers them in the manager.\r\n     *\r\n     * If array of connection options were not specified, then it will try to create them automatically\r\n     * from ormconfig.json. You can also specify path to your custom ormconfig.json file.\r\n     *\r\n     * In the case if options were not specified, and ormconfig.json file also wasn't found,\r\n     * it will try to create connection from environment variables.\r\n     * There are several environment variables you can set:\r\n     *\r\n     * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\r\n     * - TYPEORM_URL - database connection url. Should be a string.\r\n     * - TYPEORM_HOST - database host. Should be a string.\r\n     * - TYPEORM_PORT - database access port. Should be a number.\r\n     * - TYPEORM_USERNAME - database username. Should be a string.\r\n     * - TYPEORM_PASSWORD - database user's password. Should be a string.\r\n     * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\r\n     * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\r\n     * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\r\n     * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\r\n     * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\r\n     * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\r\n     * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\r\n     * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\r\n     * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\r\n     *\r\n     * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\r\n     */\r\n    async createAndConnectToAll(): Promise<Connection[]>;\r\n\r\n    /**\r\n     * Creates connections from the given connection options and registers them in the manager.\r\n     */\r\n    async createAndConnectToAll(options?: ConnectionOptions[]): Promise<Connection[]>;\r\n\r\n    /**\r\n     * Creates connections from the ormconfig.json file.\r\n     * Optionally you can specify a path to custom ormconfig.json file.\r\n     */\r\n    async createAndConnectToAll(ormConfigPath?: string): Promise<Connection[]>;\r\n\r\n    /**\r\n     * Creates connections and and registers them in the manager.\r\n     */\r\n    async createAndConnectToAll(optionsOrOrmConfigFilePath?: ConnectionOptions[]|string): Promise<Connection[]> {\r\n\r\n        // if connection options are given, then create connection from them\r\n        if (optionsOrOrmConfigFilePath && optionsOrOrmConfigFilePath instanceof Array)\r\n            return Promise.all(optionsOrOrmConfigFilePath.map(options => {\r\n                return this.createAndConnectByConnectionOptions(options as ConnectionOptions);\r\n            }));\r\n\r\n        // if connection name is specified then explicitly try to load connection options from it\r\n        if (typeof optionsOrOrmConfigFilePath === \"string\")\r\n            return this.createFromConfigAndConnectToAll(optionsOrOrmConfigFilePath as string);\r\n\r\n        // if nothing is specified then try to silently load config from ormconfig.json\r\n        if (this.hasOrmConfigurationFile())\r\n            return this.createFromConfigAndConnectToAll();\r\n\r\n        // if driver type is set in environment variables then try to create connection from env variables\r\n        if (this.hasDefaultConfigurationInEnvironmentVariables())\r\n            return [await this.createFromEnvAndConnect()];\r\n\r\n        throw new CannotDetermineConnectionOptionsError();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if ormconfig.json exists.\r\n     */\r\n    protected hasOrmConfigurationFile(): boolean {\r\n        const path = PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\";\r\n        if (!PlatformTools.fileExist(path))\r\n            return false;\r\n\r\n        const configuration: ConnectionOptions[]|ConnectionOptions = PlatformTools.load(path);\r\n        if (configuration instanceof Array) {\r\n            return configuration\r\n                    .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\"))\r\n                    .length > 0;\r\n\r\n        } else if (configuration instanceof Object) {\r\n            if (configuration.environment && configuration.environment !== PlatformTools.getEnvVariable(\"NODE_ENV\"))\r\n                return false;\r\n\r\n            return Object.keys(configuration).length > 0;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if there is a default connection in the ormconfig.json file.\r\n     */\r\n    protected hasDefaultConfigurationInConfigurationFile(): boolean {\r\n        const path = PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\";\r\n        if (!PlatformTools.fileExist(path))\r\n            return false;\r\n\r\n        const configuration: ConnectionOptions[]|ConnectionOptions = PlatformTools.load(path);\r\n        if (configuration instanceof Array) {\r\n            return !!configuration\r\n                .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\"))\r\n                .find(config => !!config.name || config.name === \"default\");\r\n\r\n        } else if (configuration instanceof Object) {\r\n            if (!configuration.name ||\r\n                configuration.name !== \"default\")\r\n                return false;\r\n\r\n            if (configuration.environment && configuration.environment !== PlatformTools.getEnvVariable(\"NODE_ENV\"))\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if environment variables contains connection options.\r\n     */\r\n    protected hasDefaultConfigurationInEnvironmentVariables(): boolean {\r\n        return !!PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_TYPE\");\r\n    }\r\n\r\n    /**\r\n     * Allows to quickly create a connection based on the environment variable values.\r\n     */\r\n    protected async createFromEnvAndConnect(): Promise<Connection> {\r\n        return this.createAndConnectByConnectionOptions({\r\n            driver: {\r\n                type: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_TYPE\"),\r\n                url: PlatformTools.getEnvVariable(\"TYPEORM_URL\"),\r\n                host: PlatformTools.getEnvVariable(\"TYPEORM_HOST\"),\r\n                port: PlatformTools.getEnvVariable(\"TYPEORM_PORT\"),\r\n                username: PlatformTools.getEnvVariable(\"TYPEORM_USERNAME\"),\r\n                password: PlatformTools.getEnvVariable(\"TYPEORM_PASSWORD\"),\r\n                database: PlatformTools.getEnvVariable(\"TYPEORM_DATABASE\"),\r\n                sid: PlatformTools.getEnvVariable(\"TYPEORM_SID\"),\r\n                storage: PlatformTools.getEnvVariable(\"TYPEORM_STORAGE\"),\r\n                usePool: PlatformTools.getEnvVariable(\"TYPEORM_USE_POOL\") !== undefined ? OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_USE_POOL\")) : undefined, // special check for defined is required here\r\n                extra: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\") ? JSON.parse(PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\")) : undefined\r\n            },\r\n            autoSchemaSync: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_AUTO_SCHEMA_SYNC\")),\r\n            entities: PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\").split(\",\") : [],\r\n            subscribers: PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\") ? PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\").split(\",\") : [],\r\n            entitySchemas: PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\").split(\",\") : [],\r\n            namingStrategies: PlatformTools.getEnvVariable(\"TYPEORM_NAMING_STRATEGIES\") ? PlatformTools.getEnvVariable(\"TYPEORM_NAMING_STRATEGIES\").split(\",\") : [],\r\n            usedNamingStrategy: PlatformTools.getEnvVariable(\"TYPEORM_USED_NAMING_STRATEGY\"),\r\n            logging: {\r\n                logQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_QUERIES\")),\r\n                logFailedQueryError: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_FAILED_QUERIES\")),\r\n                logOnlyFailedQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_ONLY_FAILED_QUERIES\")),\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates a new connection based on the connection options from \"ormconfig.json\"\r\n     * and registers a new connection in the manager.\r\n     * Optionally you can specify a path to the json configuration.\r\n     * If path is not given, then ormconfig.json file will be searched near node_modules directory.\r\n     */\r\n    protected async createFromConfigAndConnectToAll(path?: string): Promise<Connection[]> {\r\n        const optionsArray: ConnectionOptions[] = PlatformTools.load(path || (PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\"));\r\n        if (!optionsArray)\r\n            throw new Error(`Configuration ${path || \"ormconfig.json\"} was not found. Add connection configuration inside ormconfig.json file.`);\r\n\r\n        const promises = optionsArray\r\n            .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\")) // skip connection creation if environment is set in the options, and its not equal to the value in the NODE_ENV variable\r\n            .map(options => this.createAndConnectByConnectionOptions(options));\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection based on the connection options from \"ormconfig.json\"\r\n     * and registers a new connection in the manager.\r\n     * Optionally you can specify a path to the json configuration.\r\n     * If path is not given, then ormconfig.json file will be searched near node_modules directory.\r\n     */\r\n    protected async createFromConfigAndConnect(connectionName: string, path?: string): Promise<Connection> {\r\n        const optionsArray: ConnectionOptions[] = PlatformTools.load(path || (PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\"));\r\n        if (!optionsArray)\r\n            throw new Error(`Configuration ${path || \"ormconfig.json\"} was not found. Add connection configuration inside ormconfig.json file.`);\r\n\r\n        const environmentLessOptions = optionsArray.filter(options => (options.name || \"default\") === connectionName);\r\n        const options = environmentLessOptions.filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\")); // skip connection creation if environment is set in the options, and its not equal to the value in the NODE_ENV variable\r\n\r\n        if (!options.length)\r\n            throw new Error(`Connection \"${connectionName}\" ${PlatformTools.getEnvVariable(\"NODE_ENV\") ? \"for the environment \" + PlatformTools.getEnvVariable(\"NODE_ENV\") + \" \" : \"\"}was not found in the json configuration file.` +\r\n                (environmentLessOptions.length ? ` However there are such configurations for other environments: ${environmentLessOptions.map(options => options.environment).join(\", \")}.` : \"\"));\r\n\r\n        return this.createAndConnectByConnectionOptions(options[0]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection based on the given connection options and registers a new connection in the manager.\r\n     */\r\n    protected async createAndConnectByConnectionOptions(options: ConnectionOptions): Promise<Connection> {\r\n        const connection = this.create(options);\r\n\r\n        // connect to the database\r\n        await connection.connect();\r\n\r\n        // if option is set - drop schema once connection is done\r\n        if (options.dropSchemaOnConnection && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\r\n            await connection.dropDatabase();\r\n\r\n        // if option is set - automatically synchronize a schema\r\n        if (options.autoSchemaSync && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\r\n            await connection.syncSchema();\r\n\r\n        // if option is set - automatically synchronize a schema\r\n        if (options.autoMigrationsRun && !PlatformTools.getEnvVariable(\"SKIP_MIGRATIONS_RUN\"))\r\n            await connection.runMigrations();\r\n\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Splits given array of mixed strings and / or functions into two separate array of string and array of functions.\r\n     */\r\n    protected splitStringsAndClasses<T>(strAndClses: string[]|T[]): [string[], T[]] {\r\n        return [\r\n            (strAndClses as string[]).filter(str => typeof str === \"string\"),\r\n            (strAndClses as T[]).filter(cls => typeof cls !== \"string\"),\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Creates a new driver based on the given driver type and options.\r\n     */\r\n    protected createDriver(options: DriverOptions, logger: Logger): Driver {\r\n        switch (options.type) {\r\n            case \"mysql\":\r\n                return new MysqlDriver(options, logger, undefined);\r\n            case \"postgres\":\r\n                return new PostgresDriver(options, logger);\r\n            case \"mariadb\":\r\n                return new MysqlDriver(options, logger);\r\n            case \"sqlite\":\r\n                return new SqliteDriver(options, logger);\r\n            case \"oracle\":\r\n                return new OracleDriver(options, logger);\r\n            case \"mssql\":\r\n                return new SqlServerDriver(options, logger);\r\n            case \"websql\":\r\n                return new WebsqlDriver(options, logger);\r\n            case \"mongodb\":\r\n                return new MongoDriver(options, logger);\r\n            default:\r\n                throw new MissingDriverError(options.type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection and registers it in the connection manager.\r\n     */\r\n    protected createConnection(name: string, driver: Driver, logger: Logger) {\r\n        const existConnection = this.connections.find(connection => connection.name === name);\r\n        if (existConnection) {\r\n            if (existConnection.isConnected)\r\n                throw new AlreadyHasActiveConnectionError(name);\r\n\r\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\r\n        }\r\n\r\n        const connection = new Connection(name, driver, logger);\r\n        this.connections.push(connection);\r\n        return connection;\r\n    }\r\n\r\n}\r\n","export class GeneratedOnlyForPrimaryError extends Error {\r\n    name = \"GeneratedOnlyForPrimaryError\";\r\n\r\n    constructor(object: Object, propertyName: string) {\r\n        super();\r\n        this.message = `Column for property ${(<any>object.constructor).name}#${propertyName} cannot have a generated ` +\r\n            `value because its not a primary column. Try to use @PrimaryColumn decorator.`;\r\n    }\r\n\r\n}","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {GeneratedOnlyForPrimaryError} from \"../error/GeneratedOnlyForPrimaryError\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnType, ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this\r\n * decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(type: ColumnType): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(options: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(type: ColumnType, options: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\r\n    let type: ColumnType|undefined;\r\n    if (typeof typeOrOptions === \"string\") {\r\n        type = <ColumnType> typeOrOptions;\r\n\r\n    } else if (typeOrOptions) {\r\n        options = <ColumnOptions> typeOrOptions;\r\n        type = typeOrOptions.type;\r\n    }\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // todo: need to store not string type, but original type instead? (like in relation metadata)\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if type is not given implicitly then try to guess it\r\n        if (!type) {\r\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\r\n            if (reflectMetadataType)\r\n                type = ColumnTypes.determineTypeFromFunction(reflectMetadataType);\r\n        }\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // check if there is no type in column options then set type from first function argument, or guessed one\r\n        if (!options.type && type)\r\n            options = Object.assign({ type: type } as ColumnOptions, options);\r\n\r\n        // if we still don't have a type then we need to give error to user that type is required\r\n        // if (!options.type)\r\n        //     throw new ColumnTypeUndefinedError(object, propertyName);\r\n\r\n        // check if auto increment is not set for simple column\r\n        if (options.generated)\r\n            throw new GeneratedOnlyForPrimaryError(object, propertyName);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"regular\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.add(args);\r\n    };\r\n}\r\n","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * This column will store a creation date of the inserted object.\r\n * Creation date is generated and inserted only once,\r\n * at the first time when you create an object, the value is inserted into the table, and is never touched again.\r\n */\r\nexport function CreateDateColumn(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // implicitly set a type, because this column's type cannot be anything else except date\r\n        options = Object.assign({ type: ColumnTypes.DATETIME } as ColumnOptions, options);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"createDate\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.add(args);\r\n    };\r\n}\r\n","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * DiscriminatorColumn is a special type column used on entity class (not entity property)\r\n * and creates a special column which will contain an entity type.\r\n * This type is required for entities which use single table inheritance pattern.\r\n */\r\nexport function DiscriminatorColumn(discriminatorOptions: { name: string, type: ColumnType }): Function {\r\n    return function (target: Function) {\r\n\r\n        // if column options are not given then create a new empty options\r\n        const options: ColumnOptions = {\r\n            name: discriminatorOptions.name,\r\n            type: discriminatorOptions.type\r\n        };\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: target,\r\n            mode: \"discriminator\",\r\n            propertyName: discriminatorOptions.name,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.add(args);\r\n    };\r\n}\r\n\r\n","export class PrimaryColumnCannotBeNullableError extends Error {\r\n    name = \"PrimaryColumnCannotBeNullableError\";\r\n\r\n    constructor(object: Object, propertyName: string) {\r\n        super();\r\n        this.message = `Primary column ${(<any>object.constructor).name}#${propertyName} cannot be nullable. ` +\r\n            `Its not allowed for primary keys. Try to remove nullable option.`;\r\n    }\r\n\r\n}","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {PrimaryColumnCannotBeNullableError} from \"../error/PrimaryColumnCannotBeNullableError\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n// todo: add overloads for PrimaryGeneratedColumn(generationType: \"sequence\"|\"uuid\" = \"sequence\", options?: ColumnOptions)\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * This column creates an integer PRIMARY COLUMN with generated set to true.\r\n * This column creates is an alias for @PrimaryColumn(\"int\", { generated: true }).\r\n */\r\nexport function PrimaryGeneratedColumn(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // check if there is no type in column options then set the int type - by default for auto generated column\r\n        if (!options.type)\r\n            options = Object.assign({type: \"int\"} as ColumnOptions, options);\r\n\r\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\r\n        if (options.nullable)\r\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\r\n\r\n        // implicitly set a primary and generated to column options\r\n        options = Object.assign({ primary: true, generated: true } as ColumnOptions, options);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"regular\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.add(args);\r\n    };\r\n}\r\n\r\n","export class ColumnTypeUndefinedError extends Error {\r\n    name = \"ColumnTypeUndefinedError\";\r\n\r\n    constructor(object: Object, propertyName: string) {\r\n        super();\r\n        this.message = `Column type for ${(<any>object.constructor).name}#${propertyName} is not defined or cannot be guessed. ` +\r\n            `Try to implicitly provide a column type to @Column decorator.`;\r\n    }\r\n\r\n}","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnType, ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ColumnTypeUndefinedError} from \"../error/ColumnTypeUndefinedError\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {PrimaryColumnCannotBeNullableError} from \"../error/PrimaryColumnCannotBeNullableError\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * Primary columns also creates a PRIMARY KEY for this column in a db.\r\n */\r\nexport function PrimaryColumn(options?: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * Primary columns also creates a PRIMARY KEY for this column in a db.\r\n */\r\nexport function PrimaryColumn(type?: ColumnType, options?: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * Primary columns also creates a PRIMARY KEY for this column in a db.\r\n */\r\nexport function PrimaryColumn(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\r\n    let type: ColumnType|undefined;\r\n    if (typeof typeOrOptions === \"string\") {\r\n        type = <ColumnType> typeOrOptions;\r\n    } else {\r\n        options = <ColumnOptions> typeOrOptions;\r\n    }\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if type is not given implicitly then try to guess it\r\n        if (!type) {\r\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\r\n            if (reflectMetadataType)\r\n                type = ColumnTypes.determineTypeFromFunction(reflectMetadataType);\r\n        }\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // check if there is no type in column options then set type from first function argument, or guessed one\r\n        if (!options.type && type)\r\n            options = Object.assign({ type: type } as ColumnOptions, options);\r\n\r\n        // if we still don't have a type then we need to give error to user that type is required\r\n        if (!options.type)\r\n            throw new ColumnTypeUndefinedError(object, propertyName);\r\n\r\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\r\n        if (options.nullable)\r\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\r\n\r\n        // implicitly set a primary to column options\r\n        options = Object.assign({ primary: true } as ColumnOptions, options);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"regular\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.add(args);\r\n    };\r\n}\r\n\r\n","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * This column will store an update date of the updated object.\r\n * This date is being updated each time you persist the object.\r\n */\r\nexport function UpdateDateColumn(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // implicitly set a type, because this column's type cannot be anything else except date\r\n        options = Object.assign({ type: ColumnTypes.DATETIME } as ColumnOptions, options);\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"updateDate\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.add(args);\r\n    };\r\n}\r\n\r\n","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * This column will store a number - version of the entity.\r\n * Every time your entity will be persisted, this number will be increased by one -\r\n * so you can organize visioning and update strategies of your entity.\r\n */\r\nexport function VersionColumn(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // implicitly set a type, because this column's type cannot be anything else except date\r\n        options = Object.assign({ type: ColumnTypes.INTEGER } as ColumnOptions, options);\r\n\r\n        // todo: check if reflectedType is number too\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"version\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.add(args);\r\n    };\r\n}\r\n\r\n","import {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * Special type of column that is available only for MongoDB database.\r\n * Marks your entity's column to be an object id.\r\n */\r\nexport function ObjectIdColumn<T>(options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions;\r\n        options = Object.assign(options, {\r\n            primary: true,\r\n            name: options.name ? options.name : \"_id\"\r\n        });\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            mode: \"objectId\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.add(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied after this entity insertion.\r\n */\r\nexport function AfterInsert() {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.AFTER_INSERT\r\n        };\r\n        getMetadataArgsStorage().entityListeners.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied after entity is loaded.\r\n */\r\nexport function AfterLoad() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.AFTER_LOAD\r\n        };\r\n        getMetadataArgsStorage().entityListeners.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied after this entity removal.\r\n */\r\nexport function AfterRemove() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.AFTER_REMOVE\r\n        };\r\n        getMetadataArgsStorage().entityListeners.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied after this entity update.\r\n */\r\nexport function AfterUpdate() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.AFTER_UPDATE\r\n        };\r\n        getMetadataArgsStorage().entityListeners.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied before this entity insertion.\r\n */\r\nexport function BeforeInsert() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.BEFORE_INSERT\r\n        };\r\n        getMetadataArgsStorage().entityListeners.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied before this entity removal.\r\n */\r\nexport function BeforeRemove() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.BEFORE_REMOVE\r\n        };\r\n        getMetadataArgsStorage().entityListeners.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\r\n\r\n/**\r\n * Calls a method on which this decorator is applied before this entity update.\r\n */\r\nexport function BeforeUpdate() {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: EntityListenerMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            type: EventListenerTypes.BEFORE_UPDATE\r\n        };\r\n        getMetadataArgsStorage().entityListeners.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {EntitySubscriberMetadataArgs} from \"../../metadata-args/EntitySubscriberMetadataArgs\";\r\n\r\n/**\r\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\r\n * occurs. Those classes must implement EventSubscriberInterface interface.\r\n */\r\nexport function EventSubscriber() {\r\n    return function (target: Function) {\r\n        const args: EntitySubscriberMetadataArgs = {\r\n            target: target\r\n        };\r\n        getMetadataArgsStorage().entitySubscribers.add(args);\r\n    };\r\n}","/**\r\n * Describes all composite index's options.\r\n */\r\nexport interface IndexOptions {\r\n\r\n    /**\r\n     * Indicates if this composite index must be unique or not.\r\n     */\r\n    readonly unique?: boolean;\r\n\r\n    /**\r\n     * If true, the index only references documents with the specified field.\r\n     * These indexes use less space but behave differently in some situations (particularly sorts).\r\n     * This option is only supported for mongodb database.\r\n     */\r\n    readonly sparse?: boolean;\r\n\r\n}","import {JoinColumnOptions} from \"./JoinColumnOptions\";\r\n\r\n/**\r\n * Describes all relation's options.\r\n */\r\nexport interface JoinTableOptions {\r\n\r\n    /**\r\n     * Name of the table that will be created to store values of the both tables (join table).\r\n     * By default is auto generated.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * First column of the join table.\r\n     */\r\n    readonly joinColumn?: JoinColumnOptions;\r\n\r\n    /**\r\n     * Second (inverse) column of the join table.\r\n     */\r\n    readonly inverseJoinColumn?: JoinColumnOptions;\r\n\r\n}","import {OrderByCondition} from \"../../find-options/OrderByCondition\";\r\n\r\n/**\r\n * Describes all entity's options.\r\n */\r\nexport interface EntityOptions {\r\n\r\n    /**\r\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\r\n     */\r\n    readonly orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\r\n\r\n    /**\r\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\r\n     * It is used only during table creation.\r\n     * If you update this value and table is already created, it will not change table's engine type.\r\n     * Note that not all databases support this option.\r\n     */\r\n    readonly engine?: string;\r\n\r\n    /**\r\n     * Specifies if this table will be skipped during schema synchronization.\r\n     */\r\n    readonly skipSchemaSync?: boolean;\r\n\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationCountMetadataArgs} from \"../../metadata-args/RelationCountMetadataArgs\";\r\n\r\n/**\r\n * Holds a number of children in the closure table of the column.\r\n */\r\nexport function RelationCount<T>(relation: string|((object: T) => any)): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // todo: need to check if property type is number?\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // create and register a new column metadata\r\n        const args: RelationCountMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            relation: relation\r\n        };\r\n        getMetadataArgsStorage().relationCounts.add(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {JoinColumnOptions} from \"../options/JoinColumnOptions\";\r\nimport {JoinColumnMetadataArgs} from \"../../metadata-args/JoinColumnMetadataArgs\";\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(options?: JoinColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        options = options || {} as JoinColumnOptions;\r\n        const args: JoinColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            name: options.name,\r\n            referencedColumnName: options.referencedColumnName\r\n        };\r\n        getMetadataArgsStorage().joinColumns.add(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {JoinTableOptions} from \"../options/JoinTableOptions\";\r\nimport {JoinTableMetadataArgs} from \"../../metadata-args/JoinTableMetadataArgs\";\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options?: JoinTableOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        options = options || {} as JoinTableOptions;\r\n        const args: JoinTableMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            name: options.name,\r\n            joinColumn: options.joinColumn,\r\n            inverseJoinColumn: options.inverseJoinColumn\r\n        };\r\n        getMetadataArgsStorage().joinTables.add(args);\r\n    };\r\n}\r\n\r\n","import {RelationOptions} from \"../options/RelationOptions\";\r\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ObjectType} from \"../../common/ObjectType\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\r\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\r\n * entity1 and entity2 ids. This is owner side of the relationship.\r\n */\r\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>, options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function;\r\n\r\n/**\r\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\r\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\r\n * entity1 and entity2 ids. This is owner side of the relationship.\r\n */\r\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                              inverseSide?: string|((object: T) => any),\r\n                              options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function;\r\n\r\n/**\r\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\r\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\r\n * entity1 and entity2 ids. This is owner side of the relationship.\r\n */\r\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                              inverseSideOrOptions?: string|((object: T) => any)|{ cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean },\r\n                              options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\r\n    let inverseSideProperty: string|((object: T) => any);\r\n    if (typeof inverseSideOrOptions === \"object\") {\r\n        options = <RelationOptions> inverseSideOrOptions;\r\n    } else {\r\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\r\n    }\r\n\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            relationType: RelationTypes.MANY_TO_MANY,\r\n            isLazy: isLazy,\r\n            type: typeFunction,\r\n            inverseSideProperty: inverseSideProperty,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.add(args);\r\n    };\r\n}\r\n\r\n","import {RelationOptions} from \"../options/RelationOptions\";\r\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ObjectType} from \"../../common/ObjectType\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\r\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\r\n * on its own side.\r\n */\r\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>, options?: RelationOptions): Function;\r\n\r\n/**\r\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\r\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\r\n * on its own side.\r\n */\r\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                             inverseSide?: string|((object: T) => any),\r\n                             options?: RelationOptions): Function;\r\n\r\n/**\r\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\r\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\r\n * on its own side.\r\n */\r\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                             inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\r\n                             options?: RelationOptions): Function {\r\n    let inverseSideProperty: string|((object: T) => any);\r\n    if (typeof inverseSideOrOptions === \"object\") {\r\n        options = <RelationOptions> inverseSideOrOptions;\r\n    } else {\r\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\r\n    }\r\n\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            relationType: RelationTypes.MANY_TO_ONE,\r\n            isLazy: isLazy,\r\n            type: typeFunction,\r\n            inverseSideProperty: inverseSideProperty,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.add(args);\r\n    };\r\n}\r\n","import {RelationTypes} from \"../../metadata/types/RelationTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ObjectType} from \"../../common/ObjectType\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\nimport {RelationOptions} from \"../options/RelationOptions\";\r\n\r\n// todo: make decorators which use inverse side string separate\r\n\r\n/**\r\n * One-to-many relation allows to create type of relation when Entity2 can have multiple instances of Entity1.\r\n * Entity1 have only one Entity2. Entity1 is an owner of the relationship, and storages Entity2 id on its own side.\r\n */\r\nexport function OneToMany<T>(typeFunction: (type?: any) => ObjectType<T>, inverseSide: string|((object: T) => any), options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            isLazy: isLazy,\r\n            relationType: RelationTypes.ONE_TO_MANY,\r\n            type: typeFunction,\r\n            inverseSideProperty: inverseSide,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.add(args);\r\n    };\r\n}\r\n\r\n","import {RelationOptions} from \"../options/RelationOptions\";\r\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\r\nimport {getMetadataArgsStorage} from \"../../index\";\r\nimport {ObjectType} from \"../../common/ObjectType\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\r\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\r\n */\r\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>, options?: RelationOptions): Function;\r\n\r\n/**\r\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\r\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\r\n */\r\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                            inverseSide?: string|((object: T) => any),\r\n                            options?: RelationOptions): Function;\r\n\r\n/**\r\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\r\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\r\n */\r\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\r\n                            inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\r\n                            options?: RelationOptions): Function {\r\n    let inverseSideProperty: string|((object: T) => any);\r\n    if (typeof inverseSideOrOptions === \"object\") {\r\n        options = <RelationOptions> inverseSideOrOptions;\r\n    } else {\r\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\r\n    }\r\n\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            isLazy: isLazy,\r\n            relationType: RelationTypes.ONE_TO_ONE,\r\n            type: typeFunction,\r\n            inverseSideProperty: inverseSideProperty,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationIdMetadataArgs} from \"../../metadata-args/RelationIdMetadataArgs\";\r\n\r\n/**\r\n * Special decorator used to extract relation id into separate entity property.\r\n */\r\nexport function RelationId<T>(relation: string|((object: T) => any)): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        const args: RelationIdMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            relation: relation\r\n        };\r\n        getMetadataArgsStorage().relationIds.add(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\nimport {EntityOptions} from \"../options/EntityOptions\";\r\n\r\n/**\r\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\r\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\r\n */\r\nexport function Entity(name?: string, options?: EntityOptions) {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: name,\r\n            type: \"regular\",\r\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\r\n            engine: options && options.engine ? options.engine : undefined,\r\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\r\n        };\r\n        getMetadataArgsStorage().tables.add(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\n\r\n/**\r\n * Abstract entity is a class that contains columns and relations for all entities that will inherit this entity.\r\n * Database table for the abstract entity is not created.\r\n */\r\nexport function AbstractEntity() {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: undefined,\r\n            type: \"abstract\"\r\n        };\r\n        getMetadataArgsStorage().tables.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\nimport {EntityOptions} from \"../options/EntityOptions\";\r\n\r\n/**\r\n * Special type of the entity used in the class-table inherited tables.\r\n */\r\nexport function ClassEntityChild(tableName?: string, options?: EntityOptions) {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: tableName,\r\n            type: \"class-table-child\",\r\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\r\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\r\n        };\r\n        getMetadataArgsStorage().tables.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\nimport {EntityOptions} from \"../options/EntityOptions\";\r\n\r\n/**\r\n * Used on a entities that stores its children in a tree using closure design pattern.\r\n */\r\nexport function ClosureEntity(name?: string, options?: EntityOptions) {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: name,\r\n            type: \"closure\",\r\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\r\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\r\n        };\r\n        getMetadataArgsStorage().tables.add(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\n\r\n/**\r\n * This decorator is used on the entities that must be embedded into another entities.\r\n */\r\nexport function EmbeddableEntity(): Function {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            type: \"embeddable\",\r\n            orderBy: undefined\r\n        };\r\n        getMetadataArgsStorage().tables.add(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\n\r\n/**\r\n * Special type of the table used in the single-table inherited tables.\r\n */\r\nexport function SingleEntityChild() {\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: undefined,\r\n            type: \"single-table-child\",\r\n            orderBy: undefined\r\n        };\r\n        getMetadataArgsStorage().tables.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {InheritanceMetadataArgs} from \"../../metadata-args/InheritanceMetadataArgs\";\r\n\r\n/**\r\n * Sets what kind of table-inheritance table will use.\r\n */\r\nexport function TableInheritance(type: \"single-table\"|\"class-table\") {\r\n    return function (target: Function) {\r\n        const args: InheritanceMetadataArgs = {\r\n            target: target,\r\n            type: type\r\n        };\r\n        getMetadataArgsStorage().inheritances.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage, getConnection} from \"../../index\";\r\n\r\n/**\r\n * Wraps some method into the transaction.\r\n * Note, method result will return a promise if this decorator applied.\r\n * Note, all database operations in the wrapped method should be executed using entity managed passed as a first parameter\r\n * into the wrapped method.\r\n * If you want to control at what position in your method parameters entity manager should be injected,\r\n * then use @TransactionEntityManager() decorator.\r\n */\r\nexport function Transaction(connectionName: string = \"default\"): Function {\r\n    return function (target: Object, methodName: string, descriptor: PropertyDescriptor) {\r\n\r\n        // save original method - we gonna need it\r\n        const originalMethod = descriptor.value;\r\n\r\n        // override method descriptor with proxy method\r\n        descriptor.value = function(...args: any[]) {\r\n            return getConnection(connectionName)\r\n                .entityManager\r\n                .transaction(entityManager => {\r\n\r\n                    // gets all @TransactionEntityManager() decorator usages for this method\r\n                    const indices = getMetadataArgsStorage()\r\n                        .transactionEntityManagers\r\n                        .filterByTarget(target.constructor)\r\n                        .toArray()\r\n                        .filter(transactionEntityManager => transactionEntityManager.methodName === methodName)\r\n                        .map(transactionEntityManager => transactionEntityManager.index);\r\n\r\n                    let argsWithInjectedEntityManager: any[];\r\n                    if (indices.length) { // if there are @TransactionEntityManager() decorator usages the inject them\r\n                        argsWithInjectedEntityManager = [...args];\r\n                        indices.forEach(index => argsWithInjectedEntityManager.splice(index, 0, entityManager));\r\n\r\n                    } else { // otherwise inject it as a first parameter\r\n                        argsWithInjectedEntityManager = [entityManager, ...args];\r\n                    }\r\n\r\n                    return originalMethod.apply(this, argsWithInjectedEntityManager);\r\n                });\r\n        };\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TransactionEntityMetadataArgs} from \"../../metadata-args/TransactionEntityMetadataArgs\";\r\n\r\n/**\r\n * Injects transaction's entity manager into the method wrapped with @Transaction decorator.\r\n */\r\nexport function TransactionEntityManager(): Function {\r\n    return function (object: Object, methodName: string, index: number) {\r\n        const args: TransactionEntityMetadataArgs = {\r\n            target: object.constructor,\r\n            methodName: methodName,\r\n            index: index,\r\n        };\r\n        getMetadataArgsStorage().transactionEntityManagers.add(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\r\nimport {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * Creates a \"level\"/\"length\" column to the table that holds a closure table.\r\n */\r\nexport function TreeLevelColumn(): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\r\n\r\n        // implicitly set a type, because this column's type cannot be anything else except number\r\n        const options: ColumnOptions = { type: ColumnTypes.INTEGER };\r\n\r\n        // create and register a new column metadata\r\n        const args: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            mode: \"treeLevel\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.add(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationOptions} from \"../options/RelationOptions\";\r\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Marks a specific property of the class as a parent of the tree.\r\n */\r\nexport function TreeParent(options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        const args: RelationMetadataArgs = {\r\n            isTreeParent: true,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            isLazy: isLazy,\r\n            relationType: RelationTypes.MANY_TO_ONE,\r\n            type: () => object.constructor,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.add(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../../index\";\r\nimport {RelationOptions} from \"../options/RelationOptions\";\r\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Marks a specific property of the class as a children of the tree.\r\n */\r\nexport function TreeChildren(options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options && options.lazy === true ? true : false;\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\r\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\r\n                isLazy = true;\r\n        }\r\n\r\n        // add one-to-many relation for this \r\n        const args: RelationMetadataArgs = {\r\n            isTreeChildren: true,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            isLazy: isLazy,\r\n            relationType: RelationTypes.ONE_TO_MANY,\r\n            type: () => object.constructor,\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().relations.add(args);\r\n    };\r\n}\r\n\r\n","import {getMetadataArgsStorage} from \"../index\";\r\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\r\nimport {IndexOptions} from \"./options/IndexOptions\";\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(name: string, options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(name: string, fields: string[], options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(fields: string[], options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(name: string, fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): Function;\r\n\r\n/**\r\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\r\n */\r\nexport function Index(nameOrFieldsOrOptions: string|string[]|((object: any) => any[])|IndexOptions,\r\n                      maybeFieldsOrOptions?: ((object?: any) => (any[]|{ [key: string]: number }))|IndexOptions|string[],\r\n                      maybeOptions?: IndexOptions): Function {\r\n    const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\r\n    const fields = typeof nameOrFieldsOrOptions === \"string\" ? <((object?: any) => (any[]|{ [key: string]: number }))|string[]> maybeFieldsOrOptions : nameOrFieldsOrOptions as string[];\r\n    let options = (typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions as IndexOptions : maybeOptions;\r\n    if (!options)\r\n        options = (typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions)) ? nameOrFieldsOrOptions as IndexOptions : maybeOptions;\r\n\r\n    return function (clsOrObject: Function|Object, propertyName?: string) {\r\n        const args: IndexMetadataArgs = {\r\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\r\n            name: name,\r\n            columns: propertyName ? [propertyName] : fields,\r\n            unique: options && options.unique ? true : false\r\n        };\r\n        getMetadataArgsStorage().indices.add(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../index\";\r\nimport {NamingStrategyMetadataArgs} from \"../metadata-args/NamingStrategyMetadataArgs\";\r\n\r\n/**\r\n * Decorator registers a new naming strategy to be used in naming things.\r\n *\r\n * todo: deprecate using naming strategies this way. use it without decorators\r\n * todo: but add multiple default naming strategies for use\r\n */\r\nexport function NamingStrategy(name?: string): Function {\r\n    return function (target: Function) {\r\n        const strategyName = name ? name : (<any> target).name;\r\n        const args: NamingStrategyMetadataArgs = {\r\n            target: target,\r\n            name: strategyName\r\n        };\r\n        getMetadataArgsStorage().namingStrategies.add(args);\r\n    };\r\n}\r\n","import {ObjectType} from \"../common/ObjectType\";\r\nimport {getMetadataArgsStorage} from \"../index\";\r\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\r\n\r\n/**\r\n * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the\r\n * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the\r\n * embedded will be mapped to it from the single table.\r\n */\r\nexport function Embedded<T>(typeFunction: (type?: any) => ObjectType<T>, options?: { prefix?: string, array?: boolean }) {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\r\n        const isArray = reflectMetadataType === Array || (options && options.array === true) ? true : false;\r\n\r\n        const args: EmbeddedMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            isArray: isArray,\r\n            prefix: options && options.prefix !== undefined ? options.prefix : undefined,\r\n            type: typeFunction\r\n        };\r\n        getMetadataArgsStorage().embeddeds.add(args);\r\n    };\r\n}","import {getMetadataArgsStorage} from \"../index\";\r\nimport {DiscriminatorValueMetadataArgs} from \"../metadata-args/DiscriminatorValueMetadataArgs\";\r\n\r\n/**\r\n * If entity is a child table of some table, it should have a discriminator value.\r\n * This decorator sets custom discriminator value for the entity.\r\n */\r\nexport function DiscriminatorValue(value: any): Function {\r\n    return function (target: Function) {\r\n        const args: DiscriminatorValueMetadataArgs = {\r\n            target: target,\r\n            value: value\r\n        };\r\n        getMetadataArgsStorage().discriminatorValues.add(args);\r\n    };\r\n}\r\n","import {getMetadataArgsStorage} from \"../index\";\r\nimport {EntityRepositoryMetadataArgs} from \"../metadata-args/EntityRepositoryMetadataArgs\";\r\n\r\n/**\r\n * Used to declare a class as a custom repository.\r\n * Custom repository can either manage some specific entity, either just be generic.\r\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\r\n */\r\nexport function EntityRepository(entity?: Function, options?: { useContainer?: boolean }): Function;\r\n\r\n/**\r\n * Used to declare a class as a custom repository.\r\n * Custom repository can either manage some specific entity, either just be generic.\r\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\r\n */\r\nexport function EntityRepository(options?: { useContainer?: boolean }): Function;\r\n\r\n/**\r\n * Used to declare a class as a custom repository.\r\n * Custom repository can either manage some specific entity, either just be generic.\r\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\r\n */\r\nexport function EntityRepository(entityOrOptions?: Function|{ useContainer?: boolean }, maybeOptions?: { useContainer?: boolean }): Function {\r\n    const entity = entityOrOptions instanceof Function ? entityOrOptions as Function : undefined;\r\n    const options = entityOrOptions instanceof Function ? maybeOptions : entityOrOptions as { useContainer?: boolean };\r\n    return function (target: Function) {\r\n        const args: EntityRepositoryMetadataArgs = {\r\n            target: target,\r\n            entity: entity,\r\n            useContainer: !!(options && options.useContainer)\r\n        };\r\n        getMetadataArgsStorage().entityRepositories.add(args);\r\n    };\r\n}\r\n","/*!\r\n */\r\nimport {DriverOptions} from \"./driver/DriverOptions\";\r\nimport {ConnectionManager} from \"./connection/ConnectionManager\";\r\nimport {Connection} from \"./connection/Connection\";\r\nimport {MetadataArgsStorage} from \"./metadata-args/MetadataArgsStorage\";\r\nimport {ConnectionOptions} from \"./connection/ConnectionOptions\";\r\nimport {getFromContainer} from \"./container\";\r\nimport {ObjectType} from \"./common/ObjectType\";\r\nimport {Repository} from \"./repository/Repository\";\r\nimport {EntityManager} from \"./entity-manager/EntityManager\";\r\nimport {PlatformTools} from \"./platform/PlatformTools\";\r\nimport {TreeRepository} from \"./repository/TreeRepository\";\r\nimport {MongoRepository} from \"./repository/MongoRepository\";\r\n\r\n// -----------------------------------------------------------------   --------\r\n// Commonly Used exports\r\n// -------------------------------------------------------------------------\r\n\r\nexport * from \"./container\";\r\nexport * from \"./common/ObjectType\";\r\nexport * from \"./common/ObjectLiteral\";\r\nexport * from \"./decorator/columns/Column\";\r\nexport * from \"./decorator/columns/CreateDateColumn\";\r\nexport * from \"./decorator/columns/DiscriminatorColumn\";\r\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\r\nexport * from \"./decorator/columns/PrimaryColumn\";\r\nexport * from \"./decorator/columns/UpdateDateColumn\";\r\nexport * from \"./decorator/columns/VersionColumn\";\r\nexport * from \"./decorator/columns/ObjectIdColumn\";\r\nexport * from \"./decorator/listeners/AfterInsert\";\r\nexport * from \"./decorator/listeners/AfterLoad\";\r\nexport * from \"./decorator/listeners/AfterRemove\";\r\nexport * from \"./decorator/listeners/AfterUpdate\";\r\nexport * from \"./decorator/listeners/BeforeInsert\";\r\nexport * from \"./decorator/listeners/BeforeRemove\";\r\nexport * from \"./decorator/listeners/BeforeUpdate\";\r\nexport * from \"./decorator/listeners/EventSubscriber\";\r\nexport * from \"./decorator/options/ColumnOptions\";\r\nexport * from \"./decorator/options/IndexOptions\";\r\nexport * from \"./decorator/options/JoinColumnOptions\";\r\nexport * from \"./decorator/options/JoinTableOptions\";\r\nexport * from \"./decorator/options/RelationOptions\";\r\nexport * from \"./decorator/options/EntityOptions\";\r\nexport * from \"./decorator/relations/RelationCount\";\r\nexport * from \"./decorator/relations/JoinColumn\";\r\nexport * from \"./decorator/relations/JoinTable\";\r\nexport * from \"./decorator/relations/ManyToMany\";\r\nexport * from \"./decorator/relations/ManyToOne\";\r\nexport * from \"./decorator/relations/OneToMany\";\r\nexport * from \"./decorator/relations/OneToOne\";\r\nexport * from \"./decorator/relations/RelationCount\";\r\nexport * from \"./decorator/relations/RelationId\";\r\nexport * from \"./decorator/entity/Entity\";\r\nexport * from \"./decorator/entity/AbstractEntity\";\r\nexport * from \"./decorator/entity/ClassEntityChild\";\r\nexport * from \"./decorator/entity/ClosureEntity\";\r\nexport * from \"./decorator/entity/EmbeddableEntity\";\r\nexport * from \"./decorator/entity/SingleEntityChild\";\r\nexport * from \"./decorator/entity/Entity\";\r\nexport * from \"./decorator/entity/TableInheritance\";\r\nexport * from \"./decorator/transaction/Transaction\";\r\nexport * from \"./decorator/transaction/TransactionEntityManager\";\r\nexport * from \"./decorator/tree/TreeLevelColumn\";\r\nexport * from \"./decorator/tree/TreeParent\";\r\nexport * from \"./decorator/tree/TreeChildren\";\r\nexport * from \"./decorator/Index\";\r\nexport * from \"./decorator/NamingStrategy\";\r\nexport * from \"./decorator/Embedded\";\r\nexport * from \"./decorator/DiscriminatorValue\";\r\nexport * from \"./decorator/EntityRepository\";\r\nexport * from \"./schema-builder/schema/ColumnSchema\";\r\nexport * from \"./schema-builder/schema/ForeignKeySchema\";\r\nexport * from \"./schema-builder/schema/IndexSchema\";\r\nexport * from \"./schema-builder/schema/PrimaryKeySchema\";\r\nexport * from \"./schema-builder/schema/TableSchema\";\r\n\r\nexport {Connection} from \"./connection/Connection\";\r\nexport {ConnectionManager} from \"./connection/ConnectionManager\";\r\nexport {ConnectionOptions} from \"./connection/ConnectionOptions\";\r\nexport {DriverOptions} from \"./driver/DriverOptions\";\r\nexport {Driver} from \"./driver/Driver\";\r\nexport {QueryBuilder} from \"./query-builder/QueryBuilder\";\r\nexport {QueryRunner} from \"./query-runner/QueryRunner\";\r\nexport {EntityManager} from \"./entity-manager/EntityManager\";\r\nexport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\r\nexport {MigrationInterface} from \"./migration/MigrationInterface\";\r\nexport {DefaultNamingStrategy} from \"./naming-strategy/DefaultNamingStrategy\";\r\nexport {NamingStrategyInterface} from \"./naming-strategy/NamingStrategyInterface\";\r\nexport {Repository} from \"./repository/Repository\";\r\nexport {TreeRepository} from \"./repository/TreeRepository\";\r\nexport {SpecificRepository} from \"./repository/SpecificRepository\";\r\nexport {MongoRepository} from \"./repository/MongoRepository\";\r\nexport {FindManyOptions} from \"./find-options/FindManyOptions\";\r\nexport {InsertEvent} from \"./subscriber/event/InsertEvent\";\r\nexport {UpdateEvent} from \"./subscriber/event/UpdateEvent\";\r\nexport {RemoveEvent} from \"./subscriber/event/RemoveEvent\";\r\nexport {EntitySubscriberInterface} from \"./subscriber/EntitySubscriberInterface\";\r\n\r\n// -------------------------------------------------------------------------\r\n// Deprecated\r\n// -------------------------------------------------------------------------\r\n\r\n// -------------------------------------------------------------------------\r\n// Commonly used functionality\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Gets metadata args storage.\r\n */\r\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\r\n    // we should store metadata storage in a global variable otherwise it brings too much problems\r\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\r\n    // useContainer method with his own container implementation, that entity will be registered in the\r\n    // old old container (default one post probably) and consumer will his entity.\r\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\r\n    // another reason is that when we run migrations typeorm is being called from a global package\r\n    // and it may load entities which register decorators in typeorm of local package\r\n    // this leads to impossibility of usage of entities in migrations and cli related operations\r\n    const globalScope = PlatformTools.getGlobalVariable();\r\n    if (!globalScope.typeormMetadataArgsStorage)\r\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\r\n\r\n    return globalScope.typeormMetadataArgsStorage;\r\n}\r\n\r\n/**\r\n * Gets a ConnectionManager which creates connections.\r\n */\r\nexport function getConnectionManager(): ConnectionManager {\r\n    return getFromContainer(ConnectionManager);\r\n}\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n *\r\n * If connection options were not specified, then it will try to create connection automatically.\r\n *\r\n * First, it will try to find a \"default\" configuration from ormconfig.json.\r\n * You can also specify a connection name to use from ormconfig.json,\r\n * and you even can specify a path to your custom ormconfig.json.\r\n *\r\n * In the case if options were not specified, and ormconfig.json file also wasn't found,\r\n * it will try to create connection from environment variables.\r\n * There are several environment variables you can set:\r\n *\r\n * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\r\n * - TYPEORM_URL - database connection url. Should be a string.\r\n * - TYPEORM_HOST - database host. Should be a string.\r\n * - TYPEORM_PORT - database access port. Should be a number.\r\n * - TYPEORM_USERNAME - database username. Should be a string.\r\n * - TYPEORM_PASSWORD - database user's password. Should be a string.\r\n * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\r\n * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\r\n * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\r\n * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\r\n * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\r\n * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\r\n * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\r\n * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\r\n *\r\n * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\r\n */\r\nexport function createConnection(): Promise<Connection>;\r\n\r\n/**\r\n * Creates connection from the given connection options and registers it in the manager.\r\n */\r\nexport function createConnection(options?: ConnectionOptions): Promise<Connection>;\r\n\r\n/**\r\n * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\r\n * Optionally you can specify a path to custom ormconfig.json file.\r\n */\r\nexport function createConnection(connectionNameFromConfig: string, ormConfigPath?: string): Promise<Connection>;\r\n\r\n/**\r\n * Creates connection and and registers it in the manager.\r\n */\r\nexport function createConnection(optionsOrConnectionNameFromConfig?: ConnectionOptions|string, ormConfigPath?: string): Promise<Connection> {\r\n    return getConnectionManager().createAndConnect(optionsOrConnectionNameFromConfig as any, ormConfigPath);\r\n}\r\n\r\n/**\r\n * Creates new connections and registers them in the manager.\r\n *\r\n * If array of connection options were not specified, then it will try to create them automatically\r\n * from ormconfig.json. You can also specify path to your custom ormconfig.json.\r\n *\r\n * In the case if options were not specified, and ormconfig.json file also wasn't found,\r\n * it will try to create connection from environment variables.\r\n * There are several environment variables you can set:\r\n *\r\n * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\r\n * - TYPEORM_URL - database connection url. Should be a string.\r\n * - TYPEORM_HOST - database host. Should be a string.\r\n * - TYPEORM_PORT - database access port. Should be a number.\r\n * - TYPEORM_USERNAME - database username. Should be a string.\r\n * - TYPEORM_PASSWORD - database user's password. Should be a string.\r\n * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\r\n * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\r\n * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\r\n * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\r\n * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\r\n * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\r\n * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\r\n * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\r\n * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\r\n *\r\n * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\r\n */\r\nexport function createConnections(): Promise<Connection[]>;\r\n\r\n/**\r\n * Creates connections from the given connection options and registers them in the manager.\r\n */\r\nexport function createConnections(options?: ConnectionOptions[]): Promise<Connection[]>;\r\n\r\n/**\r\n * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\r\n * Optionally you can specify a path to custom ormconfig.json file.\r\n */\r\nexport function createConnections(ormConfigPath?: string): Promise<Connection[]>;\r\n\r\n/**\r\n * Creates connections and and registers them in the manager.\r\n */\r\nexport function createConnections(optionsOrOrmConfigFilePath?: ConnectionOptions[]|string): Promise<Connection[]> {\r\n    return getConnectionManager().createAndConnectToAll(optionsOrOrmConfigFilePath as any);\r\n}\r\n\r\n/**\r\n * Gets connection from the connection manager.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n */\r\nexport function getConnection(connectionName: string = \"default\"): Connection {\r\n    return getConnectionManager().get(connectionName);\r\n}\r\n\r\n/**\r\n * Gets entity manager from the connection.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n */\r\nexport function getEntityManager(connectionName: string = \"default\"): EntityManager {\r\n    return getConnectionManager().get(connectionName).entityManager;\r\n}\r\n\r\n/**\r\n * Gets repository for the given entity class.\r\n */\r\nexport function getRepository<Entity>(entityClass: ObjectType<Entity>, connectionName?: string): Repository<Entity>;\r\n\r\n/**\r\n * Gets repository for the given entity name.\r\n */\r\nexport function getRepository<Entity>(entityName: string, connectionName?: string): Repository<Entity>;\r\n\r\n/**\r\n * Gets repository for the given entity class or name.\r\n */\r\nexport function getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string, connectionName: string = \"default\"): Repository<Entity> {\r\n    return getConnectionManager().get(connectionName).getRepository<Entity>(entityClassOrName as any);\r\n}\r\n\r\n/**\r\n * Gets tree repository for the given entity class.\r\n */\r\nexport function getTreeRepository<Entity>(entityClass: ObjectType<Entity>, connectionName?: string): TreeRepository<Entity>;\r\n\r\n/**\r\n * Gets tree repository for the given entity name.\r\n */\r\nexport function getTreeRepository<Entity>(entityName: string, connectionName?: string): TreeRepository<Entity>;\r\n\r\n/**\r\n * Gets tree repository for the given entity class or name.\r\n */\r\nexport function getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string, connectionName: string = \"default\"): TreeRepository<Entity> {\r\n    return getConnectionManager().get(connectionName).getTreeRepository<Entity>(entityClassOrName as any);\r\n}\r\n\r\n/**\r\n * Gets mongodb repository for the given entity class.\r\n */\r\nexport function getMongoRepository<Entity>(entityClass: ObjectType<Entity>, connectionName?: string): MongoRepository<Entity>;\r\n\r\n/**\r\n * Gets mongodb repository for the given entity name.\r\n */\r\nexport function getMongoRepository<Entity>(entityName: string, connectionName?: string): MongoRepository<Entity>;\r\n\r\n/**\r\n * Gets mongodb repository for the given entity class or name.\r\n */\r\nexport function getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string, connectionName: string = \"default\"): MongoRepository<Entity> {\r\n    return getConnectionManager().get(connectionName).getMongoRepository<Entity>(entityClassOrName as any);\r\n}\r\n","export * from \"./typeorm/index\";","import {EntitySubscriberMetadataArgs} from \"../metadata-args/EntitySubscriberMetadataArgs\";\r\n\r\n/**\r\n * Contains metadata information about ORM event subscribers.\r\n */\r\nexport class EntitySubscriberMetadata {\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    constructor(args: EntitySubscriberMetadataArgs) {\r\n        this.target = args.target;\r\n    }\r\n\r\n}","/**\r\n * This represents metadata of some object.\r\n */\r\nexport interface TargetMetadata {\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n}\r\n","import {TargetMetadata} from \"./TargetMetadata\";\r\n\r\n/**\r\n * This represents metadata of some object's property.\r\n */\r\nexport interface PropertyMetadata extends TargetMetadata {\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n}","import {RelationCountMetadataArgs} from \"../metadata-args/RelationCountMetadataArgs\";\r\n\r\n/**\r\n * Contains all information about entity's relation count.\r\n */\r\nexport class RelationCountMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Readonly Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Relation which need to count.\r\n     */\r\n    readonly relation: string|((object: any) => any);\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    readonly target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    readonly propertyName: string;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(args: RelationCountMetadataArgs) {\r\n        this.target = args.target;\r\n        this.propertyName = args.propertyName;\r\n        this.relation = args.relation;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to access entity manager before connection is established.\r\n */\r\nexport class CannotGetEntityManagerNotConnectedError extends Error {\r\n    name = \"CannotGetEntityManagerNotConnectedError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot get entity manager for \"${connectionName}\" connection because connection is not yet established.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when consumer tries to access repository before connection is established.\r\n */\r\nexport class NoConnectionForRepositoryError extends Error {\r\n    name = \"NoConnectionForRepositoryError\";\r\n\r\n    constructor(connectionName: string) {\r\n        super();\r\n        this.message = `Cannot get a Repository for \"${connectionName} connection, because connection with the database ` +\r\n            `is not established yet. Call connection#connect method to establish connection.`;\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}","/**\r\n * Thrown when some unexpected error occur on driver packages load.\r\n */\r\nexport class DriverPackageLoadError extends Error {\r\n    name = \"DriverPackageLoadError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Cannot load driver dependencies. Try to install all required dependencies.`;\r\n    }\r\n\r\n}","/**\r\n * Thrown if database driver does not support pooling.\r\n */\r\nexport class DriverPoolingNotSupportedError extends Error {\r\n    name = \"DriverPoolingNotSupportedError\";\r\n\r\n    constructor(driverName: string) {\r\n        super();\r\n        this.message = `Connection pooling is not supported by (${driverName}) driver.`;\r\n    }\r\n\r\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nexport class CascadesNotAllowedError extends Error {\r\n    name = \"CascadesNotAllowedError\";\r\n\r\n    // todo: remove metadata attribute since its present in relation attribute\r\n    constructor(type: \"insert\"|\"update\"|\"remove\", metadata: EntityMetadata, relation: RelationMetadata) {\r\n        super();\r\n        this.message = `Cascades (${type}) are not allowed for the given relation ${metadata.name}#${relation.name}`;\r\n    }\r\n\r\n}","/**\r\n * Thrown . Theoretically can't be thrown.\r\n */\r\nexport class PersistedEntityNotFoundError extends Error {\r\n    name = \"PersistedEntityNotFoundError\";\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = `Internal error. Persisted entity was not found in the list of prepared operated entities.`;\r\n    }\r\n\r\n}","/**\r\n */\r\nexport class MetadataWithSuchNameAlreadyExistsError extends Error {\r\n    name = \"MetadataWithSuchNameAlreadyExistsError\";\r\n\r\n    constructor(metadataType: string, name: string) {\r\n        super();\r\n        this.message = metadataType + \" metadata with such name \" + name + \" already exists. \" +\r\n            \"Do you apply decorator twice? Or maybe try to change a name?\";\r\n    }\r\n\r\n}"],"sourceRoot":"."}